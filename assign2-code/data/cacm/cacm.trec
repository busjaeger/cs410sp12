<DOC>
<DOCNO>1</DOCNO>
<TEXT>
preliminary
report
international
algebraic
language
cacm
december
1958
perlis
a
j
samelson
k
ca581203
jb
march
22
1978
8
28
pm
100
5
1
123
5
1
164
5
1
1
5
1
1
5
1
1
5
1
205
5
1
210
5
1
214
5
1
1982
5
1
398
5
1
642
5
1
669
5
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
1
6
1
165
6
1
196
6
1
196
6
1
1273
6
1
1883
6
1
324
6
1
43
6
1
53
6
1
91
6
1
410
6
1
3184
6
1
</TEXT>
</DOC>
<DOC>
<DOCNO>2</DOCNO>
<TEXT>
extraction
of
roots
by
repeated
subtractions
for
digital
computers
cacm
december
1958
sugai
i
ca581202
jb
march
22
1978
8
29
pm
2
5
2
2
5
2
2
5
2
</TEXT>
</DOC>
<DOC>
<DOCNO>3</DOCNO>
<TEXT>
techniques
department
on
matrix
program
schemes
cacm
december
1958
friedman
m
d
ca581201
jb
march
22
1978
8
30
pm
3
5
3
3
5
3
3
5
3
</TEXT>
</DOC>
<DOC>
<DOCNO>4</DOCNO>
<TEXT>
glossary
of
computer
engineering
and
programming
terminology
cacm
november
1958
ca581103
jb
march
22
1978
8
32
pm
4
5
4
4
5
4
4
5
4
</TEXT>
</DOC>
<DOC>
<DOCNO>5</DOCNO>
<TEXT>
two
square
root
approximations
cacm
november
1958
wadey
w
g
ca581102
jb
march
22
1978
8
33
pm
5
5
5
5
5
5
5
5
5
</TEXT>
</DOC>
<DOC>
<DOCNO>6</DOCNO>
<TEXT>
the
use
of
computers
in
inspection
procedures
cacm
november
1958
muller
m
e
ca581101
jb
march
22
1978
8
33
pm
6
5
6
6
5
6
6
5
6
477
5
6
6
6
6
</TEXT>
</DOC>
<DOC>
<DOCNO>7</DOCNO>
<TEXT>
glossary
of
computer
engineering
and
programming
terminology
cacm
october
1958
ca581003
jb
march
22
1978
8
35
pm
7
5
7
7
5
7
7
5
7
</TEXT>
</DOC>
<DOC>
<DOCNO>8</DOCNO>
<TEXT>
on
the
equivalence
and
transformation
of
program
schemes
cacm
october
1958
friedman
m
d
ca581002
jb
march
22
1978
8
36
pm
8
5
8
8
5
8
8
5
8
</TEXT>
</DOC>
<DOC>
<DOCNO>9</DOCNO>
<TEXT>
proposal
for
an
uncol
cacm
october
1958
conway
m
e
ca581001
jb
march
22
1978
8
37
pm
9
5
9
9
5
9
9
5
9
</TEXT>
</DOC>
<DOC>
<DOCNO>10</DOCNO>
<TEXT>
glossary
of
computer
engineering
and
programming
terminology
cacm
september
1958
ca580903
jb
march
22
1978
8
39
pm
10
5
10
10
5
10
10
5
10
</TEXT>
</DOC>
<DOC>
<DOCNO>11</DOCNO>
<TEXT>
the
problem
of
programming
communication
with
changing
machines
a
proposed
solution
part
2
cacm
september
1958
strong
j
wegstein
j
tritter
a
olsztyn
j
mock
o
steel
t
ca580902
jb
march
22
1978
8
41
pm
1781
5
11
1988
5
11
11
5
11
11
5
11
11
5
11
123
6
11
196
6
11
919
6
11
990
6
11
1007
6
11
1046
6
11
1131
6
11
1139
6
11
1140
6
11
1149
6
11
1198
6
11
1215
6
11
1223
6
11
1265
6
11
1303
6
11
1323
6
11
1358
6
11
1366
6
11
1421
6
11
1460
6
11
1462
6
11
1463
6
11
1467
6
11
1468
6
11
1477
6
11
1491
6
11
1496
6
11
1496
6
11
1531
6
11
1535
6
11
1565
6
11
1601
6
11
1602
6
11
1613
6
11
1614
6
11
1626
6
11
1641
6
11
1787
6
11
1788
6
11
205
6
11
224
6
11
249
6
11
288
6
11
316
6
11
381
6
11
381
6
11
398
6
11
11
6
11
11
6
11
14
6
11
404
6
11
410
6
11
463
6
11
464
6
11
483
6
11
3184
6
11
3188
6
11
584
6
11
600
6
11
680
6
11
691
6
11
763
6
11
799
6
11
</TEXT>
</DOC>
<DOC>
<DOCNO>12</DOCNO>
<TEXT>
error
estimation
in
runge
kutta
procedures
cacm
september
1958
call
d
h
reeves
r
f
ca580901
jb
march
22
1978
8
56
pm
12
5
12
12
5
12
12
5
12
</TEXT>
</DOC>
<DOC>
<DOCNO>13</DOCNO>
<TEXT>
glossary
of
computer
engineering
and
programming
terminology
cacm
august
1958
ca580805
jb
march
22
1978
8
57
pm
13
5
13
13
5
13
13
5
13
</TEXT>
</DOC>
<DOC>
<DOCNO>14</DOCNO>
<TEXT>
the
problem
of
programming
communication
with
changing
machines
a
proposed
solution
part
1
cacm
august
1958
strong
j
wegstein
j
tritter
a
olsztyn
j
mock
o
steel
t
ca580804
jb
march
22
1978
9
02
pm
1159
5
14
1988
5
14
381
5
14
14
5
14
14
5
14
14
5
14
1496
6
14
381
6
14
11
6
14
14
6
14
14
6
14
14
6
14
</TEXT>
</DOC>
<DOC>
<DOCNO>15</DOCNO>
<TEXT>
recursive
curve
fitting
technique
cacm
august
1958
giblin
j
ca580803
jb
march
22
1978
9
02
pm
15
5
15
15
5
15
15
5
15
75
5
15
15
6
15
94
6
15
</TEXT>
</DOC>
<DOC>
<DOCNO>16</DOCNO>
<TEXT>
secant
modification
of
newton
method
cacm
august
1958
jeeves
t
a
ca580802
jb
march
22
1978
9
03
pm
16
5
16
16
5
16
16
5
16
39
5
16
16
6
16
</TEXT>
</DOC>
<DOC>
<DOCNO>17</DOCNO>
<TEXT>
on
programming
of
arithmetic
operations
cacm
august
1958
ershov
a
p
ca580801
jb
march
22
1978
9
04
pm
1134
5
17
17
5
17
17
5
17
17
5
17
83
5
17
17
6
17
17
6
17
77
6
17
408
6
17
</TEXT>
</DOC>
<DOC>
<DOCNO>18</DOCNO>
<TEXT>
simple
automatic
coding
systems
cacm
july
1958
adams
e
s
schlesinger
s
i
ca580701
jb
march
22
1978
9
06
pm
18
5
18
18
5
18
18
5
18
</TEXT>
</DOC>
<DOC>
<DOCNO>19</DOCNO>
<TEXT>
glossary
of
computer
engineering
and
programming
terminology
cacm
june
1958
ca580603
jb
march
22
1978
9
07
pm
19
5
19
19
5
19
19
5
19
</TEXT>
</DOC>
<DOC>
<DOCNO>20</DOCNO>
<TEXT>
accelerating
convergence
of
iterative
processes
a
technique
is
discussed
which
when
applied
to
an
iterative
procedure
for
the
solution
of
an
equation
accelerates
the
rate
of
convergence
if
the
iteration
converges
and
induces
convergence
if
the
iteration
diverges
an
illustrative
example
is
given
cacm
june
1958
wegstein
j
h
ca580602
jb
march
22
1978
9
09
pm
20
5
20
20
5
20
20
5
20
</TEXT>
</DOC>
<DOC>
<DOCNO>21</DOCNO>
<TEXT>
algebraic
formulation
of
flow
diagrams
cacm
june
1958
voorhees
e
a
ca580601
jb
march
22
1978
9
10
pm
21
5
21
21
5
21
21
5
21
679
5
21
21
6
21
407
6
21
3184
6
21
</TEXT>
</DOC>
<DOC>
<DOCNO>22</DOCNO>
<TEXT>
unusual
applications
department
automatic
implementation
of
computer
logic
cacm
may
1958
morris
e
f
wohr
t
e
ca580506
jb
march
22
1978
9
11
pm
22
5
22
22
5
22
22
5
22
</TEXT>
</DOC>
<DOC>
<DOCNO>23</DOCNO>
<TEXT>
binary
and
truth
function
operations
on
a
decimal
computer
with
an
extract
command
cacm
may
1958
kautz
w
h
ca580505
jb
march
22
1978
9
12
pm
23
5
23
23
5
23
23
5
23
</TEXT>
</DOC>
<DOC>
<DOCNO>24</DOCNO>
<TEXT>
an
improved
decimal
redundancy
check
cacm
may
1958
sisson
r
l
ca580504
jb
march
22
1978
9
13
pm
24
5
24
24
5
24
24
5
24
</TEXT>
</DOC>
<DOC>
<DOCNO>25</DOCNO>
<TEXT>
general
purpose
programming
systems
cacm
may
1958
holt
a
w
ca580503
jb
march
22
1978
9
14
pm
25
5
25
25
5
25
25
5
25
</TEXT>
</DOC>
<DOC>
<DOCNO>26</DOCNO>
<TEXT>
a
subroutine
method
for
calculating
logarithms
cacm
may
1958
bemer
r
w
ca580502
jb
march
22
1978
9
16
pm
26
5
26
26
5
26
26
5
26
848
5
26
26
6
26
35
6
26
</TEXT>
</DOC>
<DOC>
<DOCNO>27</DOCNO>
<TEXT>
note
on
empirical
bounds
for
generating
bessel
functions
cacm
may
1958
randels
j
b
reeves
r
f
ca580501
jb
march
22
1978
9
17
pm
27
5
27
27
5
27
27
5
27
</TEXT>
</DOC>
<DOC>
<DOCNO>28</DOCNO>
<TEXT>
request
for
methods
or
programs
cacm
april
1958
corley
h
p
t
ca580402
jb
march
22
1978
9
18
pm
28
5
28
28
5
28
28
5
28
</TEXT>
</DOC>
<DOC>
<DOCNO>29</DOCNO>
<TEXT>
need
for
an
algorithm
cacm
april
1958
selden
w
ca580401
jb
march
22
1978
9
19
pm
29
5
29
29
5
29
29
5
29
</TEXT>
</DOC>
<DOC>
<DOCNO>30</DOCNO>
<TEXT>
algorithm
for
analyzing
logical
statements
to
produce
a
truth
function
table
cacm
march
1958
wolpe
h
ca580302
jb
march
22
1978
9
20
pm
30
5
30
30
5
30
30
5
30
</TEXT>
</DOC>
<DOC>
<DOCNO>31</DOCNO>
<TEXT>
ibm
704
code
nundrums
cacm
march
1958
grumette
m
ca580301
jb
march
22
1978
9
21
pm
31
5
31
31
5
31
31
5
31
</TEXT>
</DOC>
<DOC>
<DOCNO>32</DOCNO>
<TEXT>
variable
width
tables
with
binary
search
facility
cacm
february
1958
halpern
m
ca580201
jb
march
22
1978
9
22
pm
32
5
32
32
5
32
32
5
32
</TEXT>
</DOC>
<DOC>
<DOCNO>33</DOCNO>
<TEXT>
a
programmed
binary
counter
for
the
ibm
type
650
calculator
cacm
january
1958
kenny
b
c
hunter
j
a
ca580103
jb
march
22
1978
9
25
pm
33
5
33
33
5
33
33
5
33
</TEXT>
</DOC>
<DOC>
<DOCNO>34</DOCNO>
<TEXT>
tables
for
automatic
computation
cacm
january
1958
wilf
h
s
ca580102
jb
march
22
1978
9
26
pm
34
5
34
34
5
34
34
5
34
</TEXT>
</DOC>
<DOC>
<DOCNO>35</DOCNO>
<TEXT>
a
machine
method
for
square
root
computation
cacm
january
1958
bemer
r
w
ca580101
jb
march
22
1978
9
27
pm
35
5
35
35
5
35
35
5
35
848
5
35
26
6
35
35
6
35
</TEXT>
</DOC>
<DOC>
<DOCNO>36</DOCNO>
<TEXT>
a
queue
network
simulator
for
the
ibm
650
and
burroughs
220
cacm
december
1959
conway
r
w
johnson
b
m
maxwell
w
l
ca591206
jb
march
22
1978
3
35
pm
36
5
36
36
5
36
36
5
36
</TEXT>
</DOC>
<DOC>
<DOCNO>37</DOCNO>
<TEXT>
impact
of
computer
developments
cacm
december
1959
humphrey
s
m
ca591205
jb
march
22
1978
3
36
pm
37
5
37
37
5
37
37
5
37
</TEXT>
</DOC>
<DOC>
<DOCNO>38</DOCNO>
<TEXT>
a
proposed
interpretation
in
algol
cacm
december
1959
irons
e
t
acton
f
s
ca591204
jb
march
22
1978
3
37
pm
38
5
38
38
5
38
38
5
38
</TEXT>
</DOC>
<DOC>
<DOCNO>39</DOCNO>
<TEXT>
the
secant
method
for
simultaneous
nonlinear
equations
a
procedure
for
the
simultaneous
solution
of
a
system
of
not
necessarily
linear
equations
a
generalization
of
the
secant
method
for
a
single
function
of
one
variable
is
given
cacm
december
1959
wolfe
p
ca591203
jb
march
22
1978
3
39
pm
39
4
39
16
5
39
39
5
39
39
5
39
39
5
39
</TEXT>
</DOC>
<DOC>
<DOCNO>40</DOCNO>
<TEXT>
fingers
or
fists
the
choice
of
decimal
or
binary
representation
the
binary
number
system
offers
many
advantages
over
a
decimal
representation
for
a
high
performance
general
purpose
computer
the
greater
simplicity
of
a
binary
arithmetic
unit
and
the
greater
compactness
of
binary
numbers
both
contribute
directly
to
arithmetic
speed
less
obvious
and
perhaps
more
important
is
the
way
binary
addressing
and
instruction
formats
can
increase
the
overall
performance
binary
addresses
are
also
essential
to
certain
powerful
operations
which
are
not
practical
with
decimal
instruction
formats
on
the
other
hand
decimal
numbers
are
essential
for
communicating
between
man
and
the
computer
in
applications
requiring
the
processing
of
a
large
volume
of
inherently
decimal
input
and
output
data
the
time
for
decimal
binary
conversion
needed
by
a
purely
binary
computer
may
be
significant
a
slower
decimal
adder
may
take
less
time
than
a
fast
binary
adder
doing
an
addition
and
two
conversions
a
careful
review
of
the
significance
of
decimal
and
binary
addressing
and
both
binary
and
decimal
data
arithmetic
supplemented
by
efficient
conversion
instructions
cacm
december
1959
buchholz
w
ca591202
jb
march
22
1978
3
47
pm
40
5
40
40
5
40
40
5
40
</TEXT>
</DOC>
<DOC>
<DOCNO>41</DOCNO>
<TEXT>
some
notes
on
computer
research
in
eastern
europe
cacm
december
1959
nadler
m
ca591201
jb
march
22
1978
3
48
pm
41
4
41
41
5
41
41
5
41
41
5
41
67
5
41
</TEXT>
</DOC>
<DOC>
<DOCNO>42</DOCNO>
<TEXT>
a
new
method
of
computation
of
square
roots
without
using
division
cacm
november
1959
sarafyan
d
ca591106
jb
march
22
1978
3
50
pm
42
5
42
42
5
42
42
5
42
</TEXT>
</DOC>
<DOC>
<DOCNO>43</DOCNO>
<TEXT>
a
technique
for
handling
macro
instructions
cacm
november
1959
greenwald
i
d
ca591105
jb
march
22
1978
3
51
pm
205
5
43
43
5
43
43
5
43
43
5
43
1
6
43
43
6
43
</TEXT>
</DOC>
<DOC>
<DOCNO>44</DOCNO>
<TEXT>
runcible
algebraic
translation
on
a
limited
computer
cacm
november
1959
knuth
d
e
ca591104
jb
march
22
1978
3
52
pm
1134
4
44
1141
4
44
364
4
44
405
4
44
438
4
44
561
4
44
44
4
44
222
5
44
364
5
44
44
5
44
44
5
44
44
5
44
77
5
44
100
6
44
224
6
44
44
6
44
44
6
44
77
6
44
82
6
44
98
6
44
</TEXT>
</DOC>
<DOC>
<DOCNO>45</DOCNO>
<TEXT>
flow
outlining
a
substitute
for
flow
charting
cacm
november
1959
gant
w
t
ca591103
jb
march
22
1978
3
53
pm
45
5
45
45
5
45
45
5
45
728
5
45
920
6
45
45
6
45
</TEXT>
</DOC>
<DOC>
<DOCNO>46</DOCNO>
<TEXT>
multiprogramming
stretch
feasibility
considerations
the
tendency
towards
increased
parallelism
in
computers
is
noted
exploitation
of
this
parallelism
presents
a
number
of
new
problems
in
machine
design
and
in
programming
systems
minimum
requirements
for
successful
concurrent
execution
of
several
independent
problem
programs
are
discussed
these
requirements
are
met
in
the
stretch
system
by
a
carefully
balanced
combination
of
built
in
and
programmed
logic
techniques
are
described
which
place
the
burden
of
the
programmed
logic
on
system
programs
supervisory
program
and
compiler
rather
than
on
problem
programs
cacm
november
1959
codd
e
f
lowry
e
s
mcdonough
e
scalzi
c
a
ca591102
jb
march
22
1978
3
57
pm
168
5
46
491
5
46
46
5
46
46
5
46
46
5
46
168
6
46
185
6
46
196
6
46
46
6
46
46
6
46
</TEXT>
</DOC>
<DOC>
<DOCNO>47</DOCNO>
<TEXT>
russian
visit
to
u
computers
cacm
november
1959
zaitzeff
e
m
astrahan
m
m
ca591101
jb
march
22
1978
3
59
pm
47
5
47
47
5
47
47
5
47
</TEXT>
</DOC>
<DOC>
<DOCNO>48</DOCNO>
<TEXT>
shift
register
code
for
indexing
applications
in
this
communication
the
use
of
a
shift
register
code
with
n
10
is
described
for
calling
64
wireless
telemetering
stations
in
a
fixed
cyclical
order
a
high
degree
of
redundancy
is
used
permitting
a
single
error
correcting
code
minimum
distance
three
code
with
64
10
bit
code
words
to
be
employed
as
the
station
identification
code
embedding
this
in
the
shift
register
code
with
period
1023
permits
the
code
to
be
employed
without
punctuation
each
of
the
telemetering
station
receivers
simply
putting
received
ones
and
zeros
into
a
shift
register
each
time
the
given
code
combination
arises
identifying
the
particular
station
barring
for
tuitous
error
combinations
of
very
low
probability
it
has
been
called
the
communication
describes
the
properties
and
application
of
the
code
in
some
detail
and
the
finding
of
the
particular
example
to
be
employed
on
ural
the
soviet
built
drum
computer
donated
to
the
indian
statistical
institute
by
the
united
nations
technical
aid
administration
untaa
cacm
october
1959
nadler
m
sengupta
a
ca591011
jb
march
22
1978
4
07
pm
48
5
48
48
5
48
48
5
48
</TEXT>
</DOC>
<DOC>
<DOCNO>49</DOCNO>
<TEXT>
scientific
and
business
applications
oracle
curve
plotter
cacm
october
1959
fike
c
t
ca591010
jb
march
22
1978
4
08
pm
49
5
49
49
5
49
49
5
49
</TEXT>
</DOC>
<DOC>
<DOCNO>50</DOCNO>
<TEXT>
statistical
programs
for
the
ibm
650
part
ii
cacm
october
1959
hamblen
j
w
ca591009
jb
march
22
1978
4
09
pm
50
5
50
50
5
50
50
5
50
</TEXT>
</DOC>
<DOC>
<DOCNO>51</DOCNO>
<TEXT>
on
the
construction
of
micro
flowcharts
cacm
october
1959
gorn
s
ingerman
p
z
crozier
j
b
ca591008
jb
march
22
1978
4
10
pm
249
5
51
51
5
51
51
5
51
51
5
51
196
6
51
303
6
51
51
6
51
</TEXT>
</DOC>
<DOC>
<DOCNO>52</DOCNO>
<TEXT>
an
efficient
method
for
generating
uniformly
distributed
points
on
the
surface
on
an
n
dimensional
sphere
corrigendum
cacm
october
1959
cook
j
m
ca591007
jb
march
22
1978
4
12
pm
52
5
52
52
5
52
52
5
52
</TEXT>
</DOC>
<DOC>
<DOCNO>53</DOCNO>
<TEXT>
recommendations
of
the
share
algol
committee
cacm
october
1959
ca591006
jb
march
22
1978
4
13
pm
214
5
53
53
5
53
53
5
53
53
5
53
1
6
53
53
6
53
91
6
53
</TEXT>
</DOC>
<DOC>
<DOCNO>54</DOCNO>
<TEXT>
sale
a
simple
algebraic
language
for
engineers
cacm
october
1959
brittenham
w
r
clark
k
kuss
g
thompson
h
smith
a
o
ca591005
jb
march
22
1978
4
14
pm
405
4
54
54
4
54
54
5
54
54
5
54
54
5
54
93
5
54
</TEXT>
</DOC>
<DOC>
<DOCNO>55</DOCNO>
<TEXT>
an
algebraic
translator
cacm
october
1959
kaner
h
ca591004
jb
march
22
1978
4
15
pm
405
5
55
55
5
55
55
5
55
55
5
55
224
6
55
55
6
55
77
6
55
93
6
55
</TEXT>
</DOC>
<DOC>
<DOCNO>56</DOCNO>
<TEXT>
proposed
standard
flow
chart
symbols
cacm
october
1959
ca591003
jb
march
22
1978
4
16
pm
56
5
56
56
5
56
56
5
56
</TEXT>
</DOC>
<DOC>
<DOCNO>57</DOCNO>
<TEXT>
j
and
its
computer
center
cacm
october
1959
ca591002
jb
march
22
1978
4
17
pm
57
5
57
57
5
57
57
5
57
</TEXT>
</DOC>
<DOC>
<DOCNO>58</DOCNO>
<TEXT>
lem
1
small
size
general
purpose
digital
computer
using
magnetic
ferrite
elements
the
paper
examines
some
of
the
questions
of
development
and
construction
of
a
general
purpose
digital
computer
using
contactless
magnetic
ferrite
and
capacitive
dezu
long
duration
capacitive
memory
elements
developed
at
the
laboratory
of
electrical
modeling
vinityi
an
sssr
under
the
supervision
of
professor
l
gutenmacher
cacm
october
1959
machmudov
u
a
ca591001
jb
march
22
1978
4
21
pm
215
5
58
58
5
58
58
5
58
58
5
58
58
6
58
</TEXT>
</DOC>
<DOC>
<DOCNO>59</DOCNO>
<TEXT>
survey
of
progress
and
trend
of
development
and
use
of
automatic
data
processing
in
business
and
management
control
systems
of
the
federal
government
as
of
december
1957
iii
cacm
september
1959
ca590910
jb
march
22
1978
4
41
pm
59
5
59
59
5
59
59
5
59
</TEXT>
</DOC>
<DOC>
<DOCNO>60</DOCNO>
<TEXT>
the
alpha
vector
transformation
of
a
system
of
linear
constraints
cacm
september
1959
wersan
s
j
ca590909
jb
march
22
1978
4
42
pm
60
5
60
60
5
60
60
5
60
</TEXT>
</DOC>
<DOC>
<DOCNO>61</DOCNO>
<TEXT>
ibm
709
tape
matrix
compiler
cacm
september
1959
hornick
s
d
ca590908jb
march
22
1978
4
43
pm
61
5
61
61
5
61
61
5
61
</TEXT>
</DOC>
<DOC>
<DOCNO>62</DOCNO>
<TEXT>
multi
dimensional
least
squares
polynomial
curve
fitting
cacm
september
1959
lesh
f
h
ca590907
jb
march
22
1978
4
44
pm
62
5
62
62
5
62
62
5
62
</TEXT>
</DOC>
<DOC>
<DOCNO>63</DOCNO>
<TEXT>
octal
diagrams
of
binary
conception
and
their
applicability
to
computer
design
logic
this
paper
dates
back
the
genesis
of
binary
conception
circa
5000
years
ago
and
octal
diagrams
about
4800
years
ago
as
derived
by
the
chinese
ancients
it
analyzes
the
applicability
of
binary
trinities
of
the
octal
diagrams
to
modern
electronic
digital
computer
design
logic
cacm
september
1959
li
s
t
ca590906
jb
march
22
1978
4
47
pm
63
5
63
63
5
63
63
5
63
</TEXT>
</DOC>
<DOC>
<DOCNO>64</DOCNO>
<TEXT>
remarks
on
algol
and
symbol
manipulation
cacm
september
1959
green
j
ca590905
jb
march
22
1978
4
47
pm
206
5
64
207
5
64
64
5
64
64
5
64
64
5
64
64
6
64
64
6
64
</TEXT>
</DOC>
<DOC>
<DOCNO>65</DOCNO>
<TEXT>
algol
sub
committee
report
extensions
cacm
september
1959
dijkstra
e
w
heise
w
perlis
j
a
samelson
k
ca590904
jb
march
22
1978
4
49
pm
65
5
65
65
5
65
65
5
65
</TEXT>
</DOC>
<DOC>
<DOCNO>66</DOCNO>
<TEXT>
a
proposal
for
a
generalized
card
code
for
256
characters
cacm
september
1959
bemer
r
w
ca590903
jb
march
22
1978
4
50
pm
66
5
66
66
5
66
66
5
66
</TEXT>
</DOC>
<DOC>
<DOCNO>67</DOCNO>
<TEXT>
central
european
computers
cacm
september
1959
blachman
n
m
ca590902
jb
march
22
1978
4
52
pm
67
4
67
41
5
67
67
5
67
67
5
67
67
5
67
79
5
67
67
6
67
</TEXT>
</DOC>
<DOC>
<DOCNO>68</DOCNO>
<TEXT>
the
role
of
the
university
in
computers
data
processing
and
related
fields
a
study
was
made
of
university
programs
in
the
united
states
in
the
fields
of
computers
data
processing
operations
research
and
other
closely
related
fields
university
policies
organization
administration
faculties
students
researches
curricula
equipment
and
financing
were
investigated
an
integrated
university
program
is
recommended
reflecting
the
conviction
that
many
present
activities
related
to
computers
will
develop
into
disciplines
and
as
such
are
the
legitimate
province
of
the
university
scholar
details
on
a
recommended
graduate
school
of
computer
sciences
are
given
cacm
september
1959
fein
l
ca590901
jb
march
22
1978
6
05
pm
1205
5
68
68
5
68
68
5
68
68
5
68
1100
6
68
1104
6
68
1107
6
68
68
6
68
</TEXT>
</DOC>
<DOC>
<DOCNO>69</DOCNO>
<TEXT>
statistical
programs
for
the
ibm
650
part
i
a
collection
is
given
of
brief
descriptions
of
statistical
programs
now
in
use
in
university
computing
centers
which
have
ibm
650
cacm
august
1959
hamblen
j
w
ca590804
jb
march
22
1978
6
07
pm
69
5
69
69
5
69
69
5
69
</TEXT>
</DOC>
<DOC>
<DOCNO>70</DOCNO>
<TEXT>
construction
of
a
set
of
test
matrices
this
paper
develops
the
equations
and
properties
of
a
set
of
test
matrices
which
are
useful
in
the
determination
of
the
accuracy
of
routines
for
finding
the
inverse
determinant
and
or
eigenvalues
of
a
matrix
cacm
august
1959
aegerter
m
j
ca590803
jb
march
22
1978
6
09
pm
70
5
70
70
5
70
70
5
70
</TEXT>
</DOC>
<DOC>
<DOCNO>71</DOCNO>
<TEXT>
proposal
for
a
feasible
programming
system
this
paper
proposes
designing
a
programming
facility
itself
involving
a
digital
computer
and
a
program
which
will
assist
the
preparation
of
large
scale
real
time
programs
this
facility
is
to
be
capable
of
preparing
programs
for
any
of
a
variety
of
machines
having
characteristics
similar
to
those
of
the
facility
computer
one
of
the
basic
assumptions
is
that
there
will
be
enough
random
access
storage
available
to
avoid
the
necessity
for
segmenting
a
constructed
program
in
any
fashion
other
than
a
trivial
one
while
this
assumption
is
somewhat
unrealistic
it
is
intended
to
provide
an
opportunity
to
concentrate
on
the
other
aspects
of
program
construction
the
programming
system
should
stress
the
discovery
in
source
program
statements
of
as
many
errors
as
possible
before
attempting
to
construct
an
object
program
among
the
computer
characteristics
which
are
advocated
are
a
program
interrupt
scheme
a
large
set
of
characters
and
indirect
addressing
cacm
august
1959
bagley
p
r
ca590802
jb
march
22
1978
6
16
pm
71
5
71
71
5
71
71
5
71
</TEXT>
</DOC>
<DOC>
<DOCNO>72</DOCNO>
<TEXT>
an
educational
program
in
computing
cacm
august
1959
hollingsworth
j
ca590801
jb
march
22
1978
6
18
pm
72
5
72
72
5
72
72
5
72
</TEXT>
</DOC>
<DOC>
<DOCNO>73</DOCNO>
<TEXT>
a
real
time
data
assimilator
cacm
july
1959
gschwind
h
w
ca590705
jb
march
22
1978
6
19
pm
73
5
73
73
5
73
73
5
73
</TEXT>
</DOC>
<DOC>
<DOCNO>74</DOCNO>
<TEXT>
a
high
speed
sorting
procedure
cacm
july
1959
shell
d
l
ca590704
jb
march
22
1978
6
20
pm
1919
5
74
74
5
74
74
5
74
74
5
74
852
5
74
864
5
74
865
5
74
864
6
74
1175
6
74
232
6
74
232
6
74
308
6
74
309
6
74
309
6
74
74
6
74
74
6
74
74
6
74
74
6
74
3187
6
74
</TEXT>
</DOC>
<DOC>
<DOCNO>75</DOCNO>
<TEXT>
parameter
estimation
for
simple
nonlinear
models
cacm
july
1959
chow
w
m
ca590703
jb
march
22
1978
6
22
pm
75
4
75
75
4
75
15
5
75
75
5
75
75
5
75
75
5
75
94
5
75
</TEXT>
</DOC>
<DOC>
<DOCNO>76</DOCNO>
<TEXT>
binary
conversion
with
fixed
decimal
precision
of
a
decimal
fraction
cacm
july
1959
taranto
d
ca590702
jb
march
22
1978
6
23
pm
76
5
76
76
5
76
76
5
76
</TEXT>
</DOC>
<DOC>
<DOCNO>77</DOCNO>
<TEXT>
on
gat
and
the
construction
of
translators
cacm
july
1959
arden
b
graham
r
ca590701
jb
march
22
1978
6
24
pm
1134
5
77
1141
5
77
364
5
77
405
5
77
438
5
77
44
5
77
77
5
77
77
5
77
77
5
77
561
5
77
100
6
77
224
6
77
224
6
77
224
6
77
224
6
77
249
6
77
303
6
77
393
6
77
17
6
77
44
6
77
55
6
77
77
6
77
77
6
77
77
6
77
77
6
77
77
6
77
77
6
77
77
6
77
93
6
77
98
6
77
408
6
77
</TEXT>
</DOC>
<DOC>
<DOCNO>78</DOCNO>
<TEXT>
remarks
on
the
practical
solution
of
characteristic
value
problems
this
paper
is
concerned
with
the
practical
solution
of
characteristic
value
problem
for
an
ordinary
differential
equation
it
is
at
once
apparent
that
sequential
computers
be
they
digital
or
analog
solve
initial
value
problems
rather
than
boundary
value
problems
and
some
mathematical
process
must
be
found
to
compensate
for
the
machine
inadequacy
compensating
for
machine
imperfection
is
of
course
the
normal
activity
of
the
numerical
analyst
a
number
of
other
papers
have
applied
particular
devices
to
particular
problems
the
purpose
of
this
note
is
to
establish
a
mathematical
framework
or
model
for
these
practical
procedures
and
thus
assist
in
the
use
and
extension
of
the
ideas
in
other
particular
problems
cacm
june
1959
wouk
a
ca590606
jb
march
22
1978
6
30
pm
78
5
78
78
5
78
78
5
78
</TEXT>
</DOC>
<DOC>
<DOCNO>79</DOCNO>
<TEXT>
programming
for
a
machine
with
an
extended
address
calculational
mechanism
cacm
june
1959
schecher
h
ca590605
jb
march
22
1978
6
31
pm
67
5
79
79
5
79
79
5
79
79
5
79
79
6
79
</TEXT>
</DOC>
<DOC>
<DOCNO>80</DOCNO>
<TEXT>
a
technique
for
computing
critical
rotational
speeds
of
flexible
shafts
on
an
automatic
computer
cacm
june
1959
schwartz
b
l
ca590604
jb
march
22
1978
6
35
pm
80
5
80
80
5
80
80
5
80
</TEXT>
</DOC>
<DOC>
<DOCNO>81</DOCNO>
<TEXT>
norc
high
speed
printer
cacm
june
1959
gleissner
g
h
ca590603
jb
march
22
1978
6
36
pm
81
5
81
81
5
81
81
5
81
</TEXT>
</DOC>
<DOC>
<DOCNO>82</DOCNO>
<TEXT>
handling
identifiers
as
internal
symbols
in
language
processors
substitution
of
computer
oriented
symbols
for
programmer
oriented
symbols
in
language
processors
is
examined
and
a
feasible
method
for
doing
so
is
presented
cacm
june
1959
williams
f
a
ca590602
jb
march
22
1978
6
38
pm
222
5
82
82
5
82
82
5
82
82
5
82
799
5
82
945
6
82
399
6
82
44
6
82
82
6
82
82
6
82
404
6
82
</TEXT>
</DOC>
<DOC>
<DOCNO>83</DOCNO>
<TEXT>
a
visit
to
computation
centers
in
the
soviet
union
cacm
june
1959
carr
iii
j
w
ca590601
jb
march
22
1978
6
39
pm
1134
4
83
83
4
83
1349
5
83
17
5
83
83
5
83
83
5
83
83
5
83
236
6
83
323
6
83
83
6
83
415
6
83
</TEXT>
</DOC>
<DOC>
<DOCNO>84</DOCNO>
<TEXT>
survey
of
progress
and
trend
of
development
and
use
of
automatic
data
processing
in
business
and
management
control
systems
of
the
federal
government
as
of
december
1957
ii
part
2
see
ca590406
cacm
may
1959
ca590502
jb
march
22
1978
6
42
pm
84
5
84
84
5
84
84
5
84
</TEXT>
</DOC>
<DOC>
<DOCNO>85</DOCNO>
<TEXT>
error
analysis
in
floating
point
arithmetic
cacm
may
1959
carr
iii
j
w
ca590501
jb
march
22
1978
6
43
pm
1148
5
85
85
5
85
85
5
85
85
5
85
85
6
85
</TEXT>
</DOC>
<DOC>
<DOCNO>86</DOCNO>
<TEXT>
survey
of
progress
and
trend
of
development
and
use
of
automatic
data
processing
in
business
and
management
control
systems
of
the
federal
government
as
of
december
1957
cacm
april
1959
controller
general
of
the
united
states
to
the
congress
of
the
united
states
ca590406
jb
march
22
1978
6
48
pm
86
5
86
86
5
86
86
5
86
</TEXT>
</DOC>
<DOC>
<DOCNO>87</DOCNO>
<TEXT>
a
note
on
a
method
for
generating
points
uniformly
on
n
dimensional
spheres
cacm
april
1959
muller
m
e
ca590405
jb
march
22
1978
7
04
pm
2333
4
87
87
4
87
2333
5
87
87
5
87
87
5
87
87
5
87
88
5
87
1793
6
87
87
6
87
88
6
87
</TEXT>
</DOC>
<DOC>
<DOCNO>88</DOCNO>
<TEXT>
an
efficient
method
for
generating
uniformly
distributed
points
on
the
surface
of
an
n
dimensional
sphere
cacm
april
1959
hicks
j
s
wheeling
r
f
ca590404
jb
march
22
1978
7
10
pm
2333
5
88
87
5
88
88
5
88
88
5
88
88
5
88
1793
6
88
87
6
88
88
6
88
88
6
88
</TEXT>
</DOC>
<DOC>
<DOCNO>89</DOCNO>
<TEXT>
a
routine
to
find
the
solution
of
simultaneous
linear
equations
with
polynomial
coefficients
cacm
april
1959
larson
e
h
marshall
d
p
ca590403
jb
march
22
1978
7
12
pm
89
5
89
89
5
89
89
5
89
</TEXT>
</DOC>
<DOC>
<DOCNO>90</DOCNO>
<TEXT>
binary
arithmetic
for
discretely
variable
word
length
in
a
serial
computer
cacm
april
1959
ercoli
p
vacca
r
ca590402
jb
march
22
1978
7
13
pm
107
5
90
90
5
90
90
5
90
90
5
90
90
6
90
</TEXT>
</DOC>
<DOC>
<DOCNO>91</DOCNO>
<TEXT>
a
mathematical
procedure
for
machine
division
cacm
april
1959
gilman
r
e
ca590401
jb
march
22
1978
7
14
pm
214
5
91
1593
5
91
91
5
91
91
5
91
91
5
91
1
6
91
1292
6
91
53
6
91
91
6
91
91
6
91
</TEXT>
</DOC>
<DOC>
<DOCNO>92</DOCNO>
<TEXT>
a
checklist
of
intelligence
for
programming
systems
a
remarkable
variation
exists
in
the
degree
of
sophistication
of
various
programming
systems
a
particular
manifestation
is
the
jungle
of
assorted
devices
for
reproducing
limited
human
decision
procedures
an
attempt
is
made
here
to
begin
a
systematic
classification
of
the
various
devices
for
educating
the
computer
to
take
over
the
decision
making
functions
of
one
or
many
human
operators
both
those
that
have
been
demonstrated
feasible
to
date
and
those
that
are
highly
desirable
for
the
future
cacm
march
1959
bemer
r
w
ca590304
jb
march
22
1978
8
01
pm
92
5
92
92
5
92
92
5
92
</TEXT>
</DOC>
<DOC>
<DOCNO>93</DOCNO>
<TEXT>
from
formulas
to
computer
oriented
language
a
technique
is
shown
for
enabling
a
computer
to
translate
simple
algebraic
formulas
into
a
three
address
computer
code
cacm
march
1959
wegstein
j
h
ca590303
jb
march
22
1978
8
03
pm
405
5
93
54
5
93
93
5
93
93
5
93
93
5
93
224
6
93
55
6
93
77
6
93
93
6
93
93
6
93
</TEXT>
</DOC>
<DOC>
<DOCNO>94</DOCNO>
<TEXT>
an
iterative
method
for
fitting
the
logistic
curve
an
iterative
method
is
given
for
finding
a
logistic
curve
of
best
least
squares
fit
to
a
set
of
two
dimensional
points
cacm
march
1959
howell
j
ca590302
jb
march
22
1978
8
04
pm
75
5
94
94
5
94
94
5
94
94
5
94
15
6
94
94
6
94
</TEXT>
</DOC>
<DOC>
<DOCNO>95</DOCNO>
<TEXT>
elimination
of
special
functions
from
differential
equations
a
set
of
ordinary
differential
equations
which
contains
mathematical
functions
requiring
the
use
of
subroutines
for
numerical
solution
by
electronic
computer
tabular
data
for
numerical
solution
by
hand
calculation
or
function
generators
when
analog
methods
are
applied
can
sometimes
be
expanded
to
an
equivalent
set
of
equations
which
do
not
contain
the
functions
this
is
practical
if
these
functions
satisfy
sufficiently
simple
differential
equations
thus
among
those
functions
which
can
be
eliminated
by
this
procedure
are
the
trigonometric
inverse
trigonometric
exponential
and
many
other
transcendental
functions
cacm
march
1959
powers
j
e
ca590301
jb
march
22
1978
8
08
pm
95
5
95
95
5
95
95
5
95
</TEXT>
</DOC>
<DOC>
<DOCNO>96</DOCNO>
<TEXT>
on
computing
radiation
integrals
the
relative
merit
and
cost
of
four
ways
of
evaluating
typical
radiation
integrals
containing
spherical
bessel
functions
are
investigated
these
methods
are
desk
machine
evaluation
of
a
finite
series
integration
of
the
appropriate
differential
equation
by
a
reeves
electronic
analog
computer
and
by
a
litton
40
ibm
704
computer
results
are
generally
applicable
to
equations
separated
from
a
helmholtz
or
wave
equation
cacm
february
1959
hansen
r
c
bailin
l
l
rutishauser
r
w
ca590205
jb
march
22
1978
8
16
pm
96
5
96
96
5
96
96
5
96
</TEXT>
</DOC>
<DOC>
<DOCNO>97</DOCNO>
<TEXT>
signal
corps
research
and
development
on
automatic
programming
of
digital
computers
cacm
february
1959
luebbert
capt
w
f
collom
jr
capt
p
w
ca590204
jb
march
22
1978
8
19
pm
97
5
97
97
5
97
97
5
97
</TEXT>
</DOC>
<DOC>
<DOCNO>98</DOCNO>
<TEXT>
the
arithmetic
translator
compiler
of
the
ibm
fortran
automatic
coding
system
cacm
february
1959
sheridan
p
b
ca590203
jb
march
22
1978
8
21
pm
224
5
98
364
5
98
98
5
98
98
5
98
98
5
98
100
6
98
224
6
98
44
6
98
77
6
98
98
6
98
98
6
98
</TEXT>
</DOC>
<DOC>
<DOCNO>99</DOCNO>
<TEXT>
possible
modifications
to
the
international
algebraic
language
cacm
february
1959
green
j
ca590202
jb
march
22
1978
8
22
pm
99
5
99
99
5
99
99
5
99
</TEXT>
</DOC>
<DOC>
<DOCNO>100</DOCNO>
<TEXT>
recursive
subscripting
compilers
and
list
types
memories
cacm
february
1959
carr
iii
j
w
ca590201
jb
march
22
1978
8
23
pm
205
4
100
210
4
100
214
4
100
1982
4
100
398
4
100
642
4
100
669
4
100
100
4
100
123
4
100
164
4
100
100
5
100
100
5
100
100
5
100
1
5
100
364
5
100
100
6
100
224
6
100
44
6
100
77
6
100
98
6
100
</TEXT>
</DOC>
<DOC>
<DOCNO>101</DOCNO>
<TEXT>
nuclear
reactor
codes
cacm
january
1959
nather
v
sangren
w
ca590101
jb
march
22
1978
8
24
pm
101
5
101
101
5
101
101
5
101
</TEXT>
</DOC>
<DOC>
<DOCNO>102</DOCNO>
<TEXT>
a
comparison
of
650
programming
methods
cacm
december
1960
curtz
t
b
riordan
j
f
spohn
m
ca601214
jb
march
20
1978
6
18
pm
102
5
102
102
5
102
102
5
102
</TEXT>
</DOC>
<DOC>
<DOCNO>103</DOCNO>
<TEXT>
cope
console
operator
proficiency
examination
each
year
electronic
computers
become
more
sophisticated
and
the
programs
they
must
process
become
more
complex
because
of
this
dependence
of
those
in
computing
on
the
skill
and
experience
of
operators
is
increasing
at
the
same
time
selection
and
training
of
qualified
operators
grows
more
difficult
to
meet
the
need
for
a
quick
accurate
uniform
operator
test
and
training
aid
the
authors
have
developed
cope
console
operator
proficiency
examination
outlined
below
while
this
examination
is
programmed
specifically
for
the
ibm
705
model
ii
with
two
tape
record
coordinators
similar
programs
could
be
developed
for
other
computers
cacm
december
1960
farbman
d
ketover
r
ca601213
jb
march
20
1978
6
23
pm
103
5
103
103
5
103
103
5
103
</TEXT>
</DOC>
<DOC>
<DOCNO>104</DOCNO>
<TEXT>
digital
simulation
of
discrete
flow
systems
the
discrete
flow
systems
discussed
are
characterized
by
the
movement
of
randomly
arriving
items
along
interacting
channels
programing
a
digital
computer
to
simulate
such
systems
utilizes
some
techniques
not
common
in
other
approaches
to
physical
problems
the
principal
portion
of
the
paper
is
a
discussion
of
two
simulation
studies
that
illustrate
some
of
the
programming
problems
involved
one
is
of
an
extensive
package
handling
plant
with
the
objective
being
optimization
of
parameters
such
as
storage
capacities
and
processing
rates
in
the
other
air
traffic
flow
and
control
procedures
are
simulated
to
compare
the
effects
of
alternative
control
decisions
cacm
december
1960
moore
c
j
lewis
t
s
ca601212
jb
march
20
1978
6
27
pm
104
5
104
104
5
104
104
5
104
</TEXT>
</DOC>
<DOC>
<DOCNO>105</DOCNO>
<TEXT>
two
methods
for
word
inversion
on
the
ibm
709
cacm
december
1960
price
r
a
jardins
p
d
ca601211
jb
march
20
1978
6
28
pm
105
5
105
105
5
105
105
5
105
</TEXT>
</DOC>
<DOC>
<DOCNO>106</DOCNO>
<TEXT>
a
method
for
overlapping
and
erasure
of
lists
an
important
property
of
the
newell
shaw
simon
scheme
for
computer
storage
of
lists
is
that
data
having
multiple
occurrences
need
not
be
stored
at
more
than
one
place
in
the
computer
that
is
lists
may
be
overlapped
unfortunately
overlapping
poses
a
problem
for
subsequent
erasure
given
a
list
that
is
no
longer
needed
it
is
desired
to
erase
just
those
parts
that
do
not
overlap
other
lists
in
lisp
mccarthy
employs
an
elegant
but
inefficient
solution
to
the
problem
the
present
paper
describes
a
general
method
which
enables
efficient
erasure
the
method
employs
interspersed
reference
counts
to
describe
the
extent
of
the
overlapping
cacm
december
1960
collins
g
e
ca601210
jb
march
20
1978
6
33
pm
1024
4
106
1051
4
106
1102
4
106
1132
4
106
1390
4
106
1486
4
106
1549
4
106
1706
4
106
1826
4
106
1878
4
106
378
4
106
2060
4
106
2155
4
106
2168
4
106
2719
4
106
2723
4
106
2838
4
106
2842
4
106
2855
4
106
2879
4
106
3077
4
106
3080
4
106
3106
4
106
627
4
106
106
4
106
106
5
106
106
5
106
106
5
106
1050
5
106
210
5
106
1393
5
106
1549
5
106
2023
5
106
3112
5
106
627
5
106
849
6
106
106
6
106
106
6
106
106
6
106
106
6
106
106
6
106
106
6
106
196
6
106
1051
6
106
1380
6
106
209
6
106
1826
6
106
210
6
106
210
6
106
1878
6
106
296
6
106
1972
6
106
367
6
106
2438
6
106
2723
6
106
2736
6
106
2833
6
106
2838
6
106
406
6
106
627
6
106
627
6
106
731
6
106
731
6
106
731
6
106
753
6
106
</TEXT>
</DOC>
<DOC>
<DOCNO>107</DOCNO>
<TEXT>
multiple
precision
arithmetic
cacm
december
1960
pope
d
a
stein
m
l
ca601209
jb
march
20
1978
6
34
pm
107
4
107
107
5
107
107
5
107
107
5
107
1026
5
107
1258
5
107
1292
5
107
1497
5
107
90
5
107
107
6
107
107
6
107
107
6
107
107
6
107
1026
6
107
1026
6
107
1026
6
107
1292
6
107
1593
6
107
</TEXT>
</DOC>
<DOC>
<DOCNO>108</DOCNO>
<TEXT>
programmed
error
correction
in
project
mercury
cacm
december
1960
dimsdale
b
weinberg
g
m
ca601208
jb
march
20
1978
6
35
pm
108
5
108
108
5
108
108
5
108
361
5
108
108
6
108
</TEXT>
</DOC>
<DOC>
<DOCNO>109</DOCNO>
<TEXT>
a
note
on
approximating
e
x
cacm
december
1960
lubkin
s
ca601207
jb
march
20
1978
6
37
pm
109
5
109
109
5
109
109
5
109
</TEXT>
</DOC>
<DOC>
<DOCNO>110</DOCNO>
<TEXT>
fibonaccian
searching
cacm
december
1960
ferguson
d
e
ca601206
jb
march
20
1978
6
38
pm
110
5
110
110
5
110
110
5
110
</TEXT>
</DOC>
<DOC>
<DOCNO>111</DOCNO>
<TEXT>
on
programming
the
numerical
solution
of
polynomial
equations
numerical
techniques
are
presented
for
computing
the
roots
of
polynomial
equations
by
applying
the
recommended
scaling
and
inversion
rules
the
basic
bairstow
and
newton
raphson
iterative
techniques
can
be
applied
with
great
reliability
both
a
high
degree
of
accuracy
and
rapid
convergence
are
realized
numerical
examples
are
shown
to
illustrate
the
pitfalls
and
to
show
how
these
are
circumvented
by
application
of
the
recommended
procedures
cacm
december
1960
ellenberger
k
w
ca601205
jb
march
20
1978
6
41
pm
111
5
111
111
5
111
111
5
111
</TEXT>
</DOC>
<DOC>
<DOCNO>112</DOCNO>
<TEXT>
numerical
solution
of
the
polynomial
equation
algorithm
30
cacm
december
1960
ellenberger
k
w
ca601204
jb
march
20
1978
6
44
pm
112
5
112
112
5
112
112
5
112
</TEXT>
</DOC>
<DOC>
<DOCNO>113</DOCNO>
<TEXT>
survey
of
coded
character
representation
cacm
december
1960
bemer
r
w
ca601203
jb
march
20
1978
6
44
pm
113
5
113
113
5
113
113
5
113
</TEXT>
</DOC>
<DOC>
<DOCNO>114</DOCNO>
<TEXT>
survey
of
punched
card
codes
cacm
december
1960
smith
h
j
williams
f
a
ca601202
jb
march
20
1978
6
45
pm
114
5
114
114
5
114
114
5
114
</TEXT>
</DOC>
<DOC>
<DOCNO>115</DOCNO>
<TEXT>
optimizers
their
structure
cacm
december
1960
wheeling
r
f
ca601201
jb
march
20
1978
6
46
pm
115
5
115
115
5
115
115
5
115
</TEXT>
</DOC>
<DOC>
<DOCNO>116</DOCNO>
<TEXT>
the
sumador
chino
on
a
recent
motor
trip
through
mexico
the
writer
came
across
on
adding
device
which
was
referred
to
as
a
sumador
chino
chinese
adder
a
survey
of
the
more
available
literature
on
the
history
of
mathematics
and
on
instruments
of
calculation
has
uncovered
no
reference
to
such
a
device
the
purpose
of
this
communication
is
to
enlist
the
help
of
other
members
in
bringing
to
light
whatever
may
be
known
concerning
the
evolution
and
present
status
of
the
sumador
chino
cacm
november
1960
rogers
j
l
ca601119
jb
march
20
1978
6
50
pm
116
5
116
116
5
116
116
5
116
</TEXT>
</DOC>
<DOC>
<DOCNO>117</DOCNO>
<TEXT>
an
estimation
of
the
relative
efficiency
of
two
internal
sorting
methods
cacm
november
1960
nagler
h
ca601118
jb
march
20
1978
6
51
pm
117
5
117
117
5
117
117
5
117
</TEXT>
</DOC>
<DOC>
<DOCNO>118</DOCNO>
<TEXT>
character
scanning
on
the
ibm
7070
cacm
november
1960
speckhard
a
e
ca601117
jb
march
20
1978
6
52
pm
118
5
118
118
5
118
118
5
118
</TEXT>
</DOC>
<DOC>
<DOCNO>119</DOCNO>
<TEXT>
note
on
eigenvalue
computation
cacm
november
1960
andrus
j
f
ca601116
jb
march
20
1978
6
53
pm
119
5
119
119
5
119
119
5
119
</TEXT>
</DOC>
<DOC>
<DOCNO>120</DOCNO>
<TEXT>
a
simple
technique
for
coding
differential
equations
cacm
november
1960
sefton
p
vaillancourt
r
ca601115
jb
march
20
1978
6
57
pm
120
4
120
120
5
120
120
5
120
120
5
120
175
5
120
</TEXT>
</DOC>
<DOC>
<DOCNO>121</DOCNO>
<TEXT>
over
all
computation
control
and
labelling
cacm
november
1960
holt
a
ca601114
jb
march
20
1978
6
58
pm
121
4
121
121
5
121
121
5
121
121
5
121
221
5
121
</TEXT>
</DOC>
<DOC>
<DOCNO>122</DOCNO>
<TEXT>
least
squares
fitting
of
a
great
circle
through
points
on
a
sphere
cacm
november
1960
dewitte
l
ca601113
jb
march
20
1978
6
59
pm
122
5
122
122
5
122
122
5
122
297
5
122
122
6
122
</TEXT>
</DOC>
<DOC>
<DOCNO>123</DOCNO>
<TEXT>
compilation
for
two
computers
with
neliac
neliac
a
compiler
based
on
algol
was
developed
at
the
u
navy
electronics
laboratory
san
diego
california
as
a
boot
strap
compiler
for
the
remington
rand
univac
countess
computer
this
compiler
was
used
to
generate
a
version
of
itself
which
running
as
a
countess
program
generated
machine
code
for
the
control
data
corporation
cdc
1604
all
three
versions
of
neliac
accepted
essentially
identical
input
language
cacm
november
1960
masterson
jr
k
s
ca601112
jb
march
20
1978
7
03
pm
205
4
123
210
4
123
214
4
123
249
4
123
254
4
123
272
4
123
1102
4
123
1109
4
123
1140
4
123
1188
4
123
1306
4
123
1464
4
123
1491
4
123
1767
4
123
1781
4
123
1787
4
123
1949
4
123
1982
4
123
321
4
123
398
4
123
2059
4
123
2126
4
123
435
4
123
437
4
123
463
4
123
483
4
123
491
4
123
2732
4
123
560
4
123
583
4
123
3073
4
123
627
4
123
631
4
123
632
4
123
637
4
123
642
4
123
642
4
123
644
4
123
653
4
123
669
4
123
680
4
123
761
4
123
762
4
123
763
4
123
100
4
123
123
4
123
123
4
123
123
4
123
140
4
123
164
4
123
919
4
123
989
4
123
123
5
123
123
5
123
123
5
123
165
5
123
196
5
123
1
5
123
1781
5
123
637
5
123
123
6
123
123
6
123
165
6
123
196
6
123
919
6
123
990
6
123
1007
6
123
1046
6
123
1131
6
123
1139
6
123
1140
6
123
1149
6
123
1198
6
123
1215
6
123
1223
6
123
1265
6
123
1303
6
123
1323
6
123
1358
6
123
1366
6
123
1421
6
123
1460
6
123
1462
6
123
1463
6
123
1467
6
123
1468
6
123
1477
6
123
1491
6
123
1496
6
123
1531
6
123
1535
6
123
1565
6
123
1601
6
123
1602
6
123
1613
6
123
1614
6
123
1626
6
123
1641
6
123
1787
6
123
1788
6
123
205
6
123
224
6
123
249
6
123
288
6
123
316
6
123
381
6
123
398
6
123
11
6
123
404
6
123
410
6
123
463
6
123
464
6
123
483
6
123
3184
6
123
3188
6
123
584
6
123
600
6
123
680
6
123
691
6
123
763
6
123
799
6
123
</TEXT>
</DOC>
<DOC>
<DOCNO>124</DOCNO>
<TEXT>
an
algorithm
for
the
assignment
problem
the
assignment
problem
is
formulated
and
briefly
discussed
an
efficient
algorithm
for
its
solution
is
presented
in
algol
code
an
empirical
relation
between
solution
time
and
the
size
of
the
problem
is
given
based
on
extensive
experiments
carried
out
on
a
digital
computer
cacm
november
1960
silver
r
ca601111
jb
march
20
1978
7
05
pm
124
5
124
124
5
124
124
5
124
2133
5
124
2134
5
124
124
6
124
124
6
124
2134
6
124
</TEXT>
</DOC>
<DOC>
<DOCNO>125</DOCNO>
<TEXT>
polynomial
transformer
algorithm
29
cacm
november
1960
mackinney
j
g
ca601110
jb
march
20
1978
7
06
pm
125
5
125
125
5
125
125
5
125
1816
5
125
125
6
125
</TEXT>
</DOC>
<DOC>
<DOCNO>126</DOCNO>
<TEXT>
least
squares
fit
by
orthogonal
polynomials
algorithm
28
cacm
november
1960
mackinney
j
g
ca601109
jb
march
20
1978
7
08
pm
126
5
126
126
5
126
126
5
126
</TEXT>
</DOC>
<DOC>
<DOCNO>127</DOCNO>
<TEXT>
assignment
algorithm
27
cacm
november
1960
silver
r
ca601108
jb
march
20
1978
7
09
pm
127
5
127
127
5
127
127
5
127
</TEXT>
</DOC>
<DOC>
<DOCNO>128</DOCNO>
<TEXT>
rootfinder
iii
algorithm
26
cacm
november
1960
herroit
j
g
ca601107
jb
march
20
1978
7
57
pm
128
5
128
128
5
128
128
5
128
</TEXT>
</DOC>
<DOC>
<DOCNO>129</DOCNO>
<TEXT>
rootfinder
ii
algorithm
15
cacm
november
1960
forsythe
g
e
herriot
j
g
ca601106
jb
march
20
1978
7
59
pm
129
5
129
129
5
129
129
5
129
</TEXT>
</DOC>
<DOC>
<DOCNO>130</DOCNO>
<TEXT>
real
zeros
of
an
arbitrary
function
algorithm
25
cacm
november
1960
leavenworth
b
ca601105
jb
march
20
1978
8
00
pm
130
5
130
130
5
130
130
5
130
</TEXT>
</DOC>
<DOC>
<DOCNO>131</DOCNO>
<TEXT>
solution
of
tri
diagonal
linear
equations
algorithm
24
cacm
november
1960
leavenworth
b
ca601104
jb
march
20
1978
8
01
pm
131
5
131
131
5
131
131
5
131
</TEXT>
</DOC>
<DOC>
<DOCNO>132</DOCNO>
<TEXT>
math
sort
algorithm
23
cacm
november
1960
feurzeig
w
ca601103
jb
march
20
1978
8
03
pm
132
5
132
132
5
132
132
5
132
</TEXT>
</DOC>
<DOC>
<DOCNO>133</DOCNO>
<TEXT>
riccati
bessel
functions
of
first
and
second
kind
algorithm
22
cacm
november
1960
oser
h
ca601102
jb
march
20
1978
8
04
pm
133
5
133
133
5
133
133
5
133
</TEXT>
</DOC>
<DOC>
<DOCNO>134</DOCNO>
<TEXT>
bessel
function
for
a
set
of
integer
orders
algorithm
21
cacm
november
1960
borsch
supan
w
ca601101
jb
march
20
1978
8
05
pm
134
5
134
134
5
134
134
5
134
1909
5
134
134
6
134
1023
6
134
1284
6
134
1316
6
134
</TEXT>
</DOC>
<DOC>
<DOCNO>135</DOCNO>
<TEXT>
digital
computers
in
universities
iv
cacm
october
1960
reeves
r
f
ca601013
jb
march
20
1978
8
07
pm
135
5
135
135
5
135
135
5
135
</TEXT>
</DOC>
<DOC>
<DOCNO>136</DOCNO>
<TEXT>
a
note
on
the
calculation
of
interest
cacm
october
1960
ingerman
p
z
ca601012
jb
march
20
1978
8
09
pm
136
5
136
136
5
136
136
5
136
</TEXT>
</DOC>
<DOC>
<DOCNO>137</DOCNO>
<TEXT>
evaluating
numbers
expressed
as
strings
of
english
words
cacm
october
1960
swift
c
j
ca601011
jb
march
20
1978
8
11
pm
137
5
137
137
5
137
137
5
137
</TEXT>
</DOC>
<DOC>
<DOCNO>138</DOCNO>
<TEXT>
some
thoughts
on
reconciling
various
character
set
proposals
corrigenda
cacm
october
1960
voorhees
e
a
ca601010
jb
march
20
1978
8
13
pm
138
5
138
138
5
138
138
5
138
</TEXT>
</DOC>
<DOC>
<DOCNO>139</DOCNO>
<TEXT>
binomial
coefficients
algorithm
19
cacm
october
1960
kenyon
r
r
ca601009
jb
march
20
1978
8
14
pm
139
5
139
139
5
139
139
5
139
</TEXT>
</DOC>
<DOC>
<DOCNO>140</DOCNO>
<TEXT>
crout
with
pivoting
algorithm
16
cacm
october
1960
forsythe
g
e
ca601008
jb
march
20
1978
8
15
pm
249
4
140
254
4
140
272
4
140
1102
4
140
1109
4
140
1140
4
140
1188
4
140
1306
4
140
1319
4
140
1464
4
140
1491
4
140
1767
4
140
1781
4
140
1787
4
140
1949
4
140
321
4
140
2059
4
140
2126
4
140
435
4
140
437
4
140
454
4
140
463
4
140
483
4
140
491
4
140
2732
4
140
560
4
140
583
4
140
3073
4
140
627
4
140
631
4
140
632
4
140
642
4
140
644
4
140
653
4
140
680
4
140
761
4
140
762
4
140
763
4
140
123
4
140
140
4
140
140
4
140
919
4
140
989
4
140
140
5
140
140
5
140
140
5
140
152
5
140
196
5
140
</TEXT>
</DOC>
<DOC>
<DOCNO>141</DOCNO>
<TEXT>
some
thoughts
on
parallel
processing
cacm
october
1960
yarbrough
l
d
ca601007
jb
march
20
1978
8
16
pm
141
5
141
141
5
141
141
5
141
</TEXT>
</DOC>
<DOC>
<DOCNO>142</DOCNO>
<TEXT>
comments
on
a
technique
for
counting
ones
cacm
october
1960
sherman
p
m
ca601006
jb
march
20
1978
8
18
pm
2952
4
142
2952
4
142
2952
4
142
142
4
142
142
4
142
142
4
142
142
5
142
142
5
142
142
5
142
162
5
142
163
5
142
192
5
142
362
5
142
2952
5
142
142
6
142
142
6
142
162
6
142
163
6
142
192
6
142
2185
6
142
2727
6
142
</TEXT>
</DOC>
<DOC>
<DOCNO>143</DOCNO>
<TEXT>
a
list
of
computer
systems
programs
for
the
ibm
650
datatron
205
and
univac
ss
80
cacm
october
1960
romberg
a
ca601005
jb
march
20
1978
8
21
pm
143
5
143
143
5
143
143
5
143
</TEXT>
</DOC>
<DOC>
<DOCNO>144</DOCNO>
<TEXT>
do
it
by
the
numbers
digital
shorthand
present
communications
systems
transmit
single
characters
in
groups
of
coded
pulses
between
simple
terminal
equipments
since
english
words
form
only
a
sparse
set
of
all
possible
alphabetic
combinations
present
methods
are
inefficient
when
computer
systems
are
substituted
for
these
terminals
using
numeric
representations
of
entire
words
or
common
phrases
rather
than
character
by
character
representations
requires
approximately
one
third
of
present
transmission
time
this
saving
is
reflected
in
overall
costs
other
benefits
accrue
in
code
and
language
translation
schemes
provision
is
made
for
transmission
of
purely
numeric
and
or
binary
streams
and
for
single
character
transmission
of
non
dictionary
words
such
as
the
names
of
people
or
places
cacm
october
1960
bemer
r
w
ca601004
jb
march
20
1978
8
27
pm
144
5
144
144
5
144
144
5
144
</TEXT>
</DOC>
<DOC>
<DOCNO>145</DOCNO>
<TEXT>
automatic
graders
for
programming
classes
cacm
october
1960
hollingsworth
j
ca601003
jb
march
20
1978
8
28
pm
145
5
145
145
5
145
145
5
145
1270
5
145
1902
5
145
145
6
145
145
6
145
1270
6
145
3184
6
145
</TEXT>
</DOC>
<DOC>
<DOCNO>146</DOCNO>
<TEXT>
the
use
of
computers
in
engineering
classroom
instruction
on
april
29
30
the
computer
committee
of
the
college
of
engineering
university
of
michigan
which
acts
as
a
steering
committee
for
the
ford
foundation
project
on
the
use
of
computers
in
engineering
education
held
a
special
conference
to
discuss
certain
timely
topics
pertinent
to
the
ford
project
this
report
contains
a
condensed
transcription
of
the
key
ideas
offered
by
the
conference
attendees
on
selected
topics
cacm
october
1960
katz
d
l
ca601002
jb
march
20
1978
8
37
pm
146
5
146
146
5
146
146
5
146
</TEXT>
</DOC>
<DOC>
<DOCNO>147</DOCNO>
<TEXT>
report
on
a
conference
of
university
computing
center
directors
cacm
october
1960
ca601001
jb
march
20
1978
8
38
pm
147
5
147
147
5
147
147
5
147
</TEXT>
</DOC>
<DOC>
<DOCNO>148</DOCNO>
<TEXT>
digital
computers
in
universities
iii
cacm
september
1960
reeves
r
f
ca600909
jb
march
20
1978
8
41
pm
148
5
148
148
5
148
148
5
148
</TEXT>
</DOC>
<DOC>
<DOCNO>149</DOCNO>
<TEXT>
a
decision
rule
for
improved
efficiency
in
solving
linear
programming
problems
with
the
simplex
algorithm
cacm
september
1960
dickson
j
c
frederick
f
p
ca600908
jb
march
20
1978
8
43
pm
149
5
149
149
5
149
149
5
149
</TEXT>
</DOC>
<DOC>
<DOCNO>150</DOCNO>
<TEXT>
rational
interpolation
by
continued
fractions
algorithm
18
cacm
september
1960
floyd
r
w
ca600907
jb
march
20
1978
8
44
pm
150
5
150
150
5
150
150
5
150
</TEXT>
</DOC>
<DOC>
<DOCNO>151</DOCNO>
<TEXT>
trdiag
algorithm
17
cacm
september
1960
sprague
iii
c
d
ca600906
jb
march
20
1978
8
45
pm
151
5
151
151
5
151
151
5
151
</TEXT>
</DOC>
<DOC>
<DOCNO>152</DOCNO>
<TEXT>
crout
with
pivoting
algorithm
16
cacm
september
1960
forsythe
g
e
ca600905
jb
march
20
1978
8
47
pm
140
5
152
152
5
152
152
5
152
152
5
152
1319
5
152
454
5
152
152
6
152
152
6
152
152
6
152
196
6
152
1128
6
152
586
6
152
</TEXT>
</DOC>
<DOC>
<DOCNO>153</DOCNO>
<TEXT>
comments
from
a
fortran
user
cacm
september
1960
blatt
j
m
ca600904
jb
march
20
1978
8
48
pm
153
5
153
153
5
153
153
5
153
754
5
153
153
6
153
</TEXT>
</DOC>
<DOC>
<DOCNO>154</DOCNO>
<TEXT>
rapidly
convergent
expressions
for
evaluating
e
x
cacm
september
1960
berin
a
ca600903
jb
march
20
1978
8
49
pm
154
5
154
154
5
154
154
5
154
</TEXT>
</DOC>
<DOC>
<DOCNO>155</DOCNO>
<TEXT>
trie
memory
cacm
september
1960
fredkin
e
ca600902
jb
march
20
1978
8
50
pm
155
5
155
155
5
155
155
5
155
944
5
155
2846
5
155
849
5
155
155
6
155
155
6
155
155
6
155
615
6
155
</TEXT>
</DOC>
<DOC>
<DOCNO>156</DOCNO>
<TEXT>
an
introductory
problem
in
symbol
manipulation
for
the
student
cacm
september
1960
rosin
r
f
ca600901
jb
march
20
1978
8
51
pm
156
5
156
156
5
156
156
5
156
</TEXT>
</DOC>
<DOC>
<DOCNO>157</DOCNO>
<TEXT>
digital
computers
in
universities
ii
cacm
august
1960
reeves
r
f
ca600809
jb
march
20
1978
8
54
pm
157
5
157
157
5
157
157
5
157
</TEXT>
</DOC>
<DOC>
<DOCNO>158</DOCNO>
<TEXT>
rootfinder
ii
algorithm
15
cacm
august
1960
thacher
jr
h
c
ca600808
jb
march
20
1978
8
55
pm
158
5
158
158
5
158
158
5
158
</TEXT>
</DOC>
<DOC>
<DOCNO>159</DOCNO>
<TEXT>
rootfinder
algorithm
2
cacm
august
1960
thacher
jr
h
c
ca600807
jb
march
20
1978
8
56
pm
159
5
159
159
5
159
159
5
159
</TEXT>
</DOC>
<DOC>
<DOCNO>160</DOCNO>
<TEXT>
rootfinder
ii
algorithm
15
cacm
august
1960
thacher
jr
h
c
ca600806
jb
march
20
1978
8
57
pm
160
5
160
160
5
160
160
5
160
</TEXT>
</DOC>
<DOC>
<DOCNO>161</DOCNO>
<TEXT>
abbreviating
words
systematically
corrigendum
cacm
august
1960
barrett
j
a
grems
m
ca600805
jb
march
20
1978
8
58
pm
161
5
161
161
5
161
161
5
161
</TEXT>
</DOC>
<DOC>
<DOCNO>162</DOCNO>
<TEXT>
a
variant
technique
for
counting
ones
cacm
august
1960
frieden
h
ca600804
jb
march
20
1978
9
00
pm
142
5
162
162
5
162
162
5
162
162
5
162
2952
5
162
142
6
162
162
6
162
162
6
162
163
6
162
163
6
162
192
6
162
192
6
162
2185
6
162
2727
6
162
</TEXT>
</DOC>
<DOC>
<DOCNO>163</DOCNO>
<TEXT>
counting
ones
on
the
ibm
7090
cacm
august
1960
kutler
s
s
ca600803
jb
march
20
1978
9
01
pm
142
5
163
163
5
163
163
5
163
163
5
163
2952
5
163
142
6
163
162
6
163
162
6
163
163
6
163
163
6
163
192
6
163
192
6
163
2185
6
163
2727
6
163
</TEXT>
</DOC>
<DOC>
<DOCNO>164</DOCNO>
<TEXT>
a
short
study
of
notation
efficiency
cacm
august
1960
smith
jr
h
j
ca600802
jb
march
20
1978
9
02
pm
205
4
164
210
4
164
214
4
164
1982
4
164
398
4
164
642
4
164
669
4
164
100
4
164
123
4
164
164
4
164
164
5
164
164
5
164
164
5
164
1
5
164
</TEXT>
</DOC>
<DOC>
<DOCNO>165</DOCNO>
<TEXT>
neliac
a
dialect
of
algol
cacm
august
1960
huskey
h
d
halstead
m
h
ca600801
jb
march
20
1978
9
03
pm
123
5
165
165
5
165
165
5
165
165
5
165
637
5
165
1
6
165
123
6
165
165
6
165
165
6
165
196
6
165
</TEXT>
</DOC>
<DOC>
<DOCNO>166</DOCNO>
<TEXT>
programming
compatibility
in
a
family
of
closely
related
digital
computers
cacm
july
1960
luebbert
w
f
ca600707
jb
march
20
1978
9
14
pm
166
5
166
166
5
166
166
5
166
</TEXT>
</DOC>
<DOC>
<DOCNO>167</DOCNO>
<TEXT>
combining
algol
statement
analysis
with
validity
checking
cacm
july
1960
mcisaac
p
ca600706
jb
march
20
1978
9
15
pm
167
5
167
167
5
167
167
5
167
</TEXT>
</DOC>
<DOC>
<DOCNO>168</DOCNO>
<TEXT>
multiprogram
scheduling
parts
3
and
4
scheduling
algorithm
and
external
constraints
cacm
july
1960
codd
e
f
ca600705
jb
march
20
1978
9
16
pm
491
4
168
168
4
168
168
5
168
168
5
168
168
5
168
1713
5
168
1901
5
168
491
5
168
46
5
168
168
6
168
168
6
168
168
6
168
185
6
168
185
6
168
185
6
168
196
6
168
1751
6
168
1754
6
168
46
6
168
</TEXT>
</DOC>
<DOC>
<DOCNO>169</DOCNO>
<TEXT>
the
multilingual
terminology
project
cacm
july
1960
holmstrom
j
e
ca600704
jb
march
20
1978
9
17
pm
169
5
169
169
5
169
169
5
169
</TEXT>
</DOC>
<DOC>
<DOCNO>170</DOCNO>
<TEXT>
some
thoughts
on
reconciling
various
character
set
proposals
cacm
july
1960
voorhees
e
a
ca600703
jb
march
20
1978
9
18
pm
170
5
170
170
5
170
170
5
170
</TEXT>
</DOC>
<DOC>
<DOCNO>171</DOCNO>
<TEXT>
digital
computers
in
universities
part
i
cacm
july
1960
reeves
r
f
ca600702
jb
march
20
1978
9
20
pm
171
5
171
171
5
171
171
5
171
</TEXT>
</DOC>
<DOC>
<DOCNO>172</DOCNO>
<TEXT>
complex
exponential
integral
algorithm
13
cacm
july
1960
beam
a
ca600701
jb
march
20
1978
9
21
pm
172
5
172
172
5
172
172
5
172
</TEXT>
</DOC>
<DOC>
<DOCNO>173</DOCNO>
<TEXT>
atlas
a
new
concept
in
large
computer
design
cacm
june
1960
ca600617
jb
march
20
1978
9
22
pm
173
5
173
173
5
173
173
5
173
</TEXT>
</DOC>
<DOC>
<DOCNO>174</DOCNO>
<TEXT>
interval
estimation
of
the
time
in
one
state
to
total
time
ratio
in
a
doubleexponential
process
cacm
june
1960
neal
w
r
ca600616
jb
march
20
1978
9
24
pm
174
5
174
174
5
174
174
5
174
</TEXT>
</DOC>
<DOC>
<DOCNO>175</DOCNO>
<TEXT>
the
solution
of
simultaneous
ordinary
differential
equations
using
a
general
purpose
digital
computer
cacm
june
1960
anderson
w
h
ca600615
jb
march
20
1978
9
25
pm
120
5
175
175
5
175
175
5
175
175
5
175
175
6
175
</TEXT>
</DOC>
<DOC>
<DOCNO>176</DOCNO>
<TEXT>
symbol
manipulation
by
threaded
lists
corrigendum
cacm
june
1960
perlis
a
j
thornton
c
ca600614
jb
march
20
1978
9
26
pm
176
5
176
176
5
176
176
5
176
</TEXT>
</DOC>
<DOC>
<DOCNO>177</DOCNO>
<TEXT>
solution
of
polynomial
equation
by
bairstow
hitchcock
method
a
a
grau
communications
acm
february
1960
algorithm
cacm
june
1960
thacher
jr
h
c
ca600613
jb
march
20
1978
9
31
pm
177
5
177
177
5
177
177
5
177
</TEXT>
</DOC>
<DOC>
<DOCNO>178</DOCNO>
<TEXT>
rootfinder
algorithm
cacm
june
1960
thacher
jr
h
c
ca600612
jb
march
20
1978
9
32
pm
178
5
178
178
5
178
178
5
178
1667
5
178
178
6
178
1242
6
178
327
6
178
</TEXT>
</DOC>
<DOC>
<DOCNO>179</DOCNO>
<TEXT>
evaluation
of
the
legendre
polynomial
pn
x
by
recursion
algorithm
cacm
june
1960
galler
g
m
ca600611
jb
march
20
1978
9
35
pm
179
5
179
179
5
179
179
5
179
</TEXT>
</DOC>
<DOC>
<DOCNO>180</DOCNO>
<TEXT>
evaluation
of
the
laguerre
polynomial
ln
x
by
recursion
algorithm
cacm
june
1960
galler
g
m
ca600610
jb
march
20
1978
9
36
pm
180
5
180
180
5
180
180
5
180
</TEXT>
</DOC>
<DOC>
<DOCNO>181</DOCNO>
<TEXT>
evaluation
of
the
hermite
polynomial
hn
x
by
recursion
algorithm
cacm
june
1960
galler
g
m
ca600609
jb
march
20
1978
9
37
pm
181
5
181
181
5
181
181
5
181
</TEXT>
</DOC>
<DOC>
<DOCNO>182</DOCNO>
<TEXT>
evaluation
of
the
chebyshev
polynomial
tn
x
by
recursion
algorithm
cacm
june
1960
galler
g
m
ca600608
jb
march
20
1978
9
38
pm
182
5
182
182
5
182
182
5
182
</TEXT>
</DOC>
<DOC>
<DOCNO>183</DOCNO>
<TEXT>
conversion
between
floating
point
representations
cacm
june
1960
perry
c
ca600607
jb
march
20
1978
9
40
pm
183
5
183
183
5
183
183
5
183
</TEXT>
</DOC>
<DOC>
<DOCNO>184</DOCNO>
<TEXT>
a
short
method
for
measuring
error
in
a
least
squares
power
series
cacm
june
1960
robinson
s
m
struble
g
w
ca600606
jb
march
20
1978
9
41
pm
184
5
184
184
5
184
184
5
184
</TEXT>
</DOC>
<DOC>
<DOCNO>185</DOCNO>
<TEXT>
multiprogram
scheduling
parts
1
and
2
introduction
and
theory
in
order
to
exploit
fully
a
fast
computer
which
possesses
simultaneous
processing
abilities
it
should
to
a
large
extent
schedule
its
own
workload
the
scheduling
routine
must
be
capable
of
extremely
rapid
execution
if
it
is
not
to
prove
self
defeating
the
construction
of
a
schedule
entails
determining
which
programs
are
to
be
run
concurrently
and
which
sequentially
with
respect
to
each
other
a
concise
scheduling
algorithm
is
described
which
tends
to
minimize
the
time
for
executing
the
entire
pending
workload
or
any
subset
of
it
subject
to
external
constraints
such
as
precedence
urgency
etc
the
algorithm
is
applicable
to
a
wide
class
of
machines
cacm
june
1960
codd
e
f
ca600605
jb
march
20
1978
9
46
pm
185
5
185
185
5
185
185
5
185
1713
5
185
1901
5
185
491
5
185
168
6
185
168
6
185
168
6
185
185
6
185
185
6
185
185
6
185
196
6
185
1751
6
185
1754
6
185
46
6
185
</TEXT>
</DOC>
<DOC>
<DOCNO>186</DOCNO>
<TEXT>
an
algorithm
defining
algol
assignment
statements
addendum
cacm
june
1960
floyd
r
w
ca600604
jb
march
20
1978
9
47
pm
186
5
186
186
5
186
186
5
186
</TEXT>
</DOC>
<DOC>
<DOCNO>187</DOCNO>
<TEXT>
compiling
connectives
cacm
june
1960
swift
c
j
ca600603
jb
march
20
1978
9
54
pm
187
5
187
187
5
187
187
5
187
</TEXT>
</DOC>
<DOC>
<DOCNO>188</DOCNO>
<TEXT>
the
department
of
computer
mathematics
at
moscow
state
university
cacm
june
1960
berezin
i
s
ca600602
jb
march
20
1978
9
56
pm
188
5
188
188
5
188
188
5
188
</TEXT>
</DOC>
<DOC>
<DOCNO>189</DOCNO>
<TEXT>
the
future
of
automatic
digital
computers
cacm
june
1960
booth
a
d
ca600601
jb
march
20
1978
9
57pm
189
5
189
189
5
189
189
5
189
</TEXT>
</DOC>
<DOC>
<DOCNO>190</DOCNO>
<TEXT>
bendix
g
20
system
cacm
may
1960
ca600507
jb
march
22
1978
1
28
pm
190
5
190
190
5
190
190
5
190
</TEXT>
</DOC>
<DOC>
<DOCNO>191</DOCNO>
<TEXT>
abbreviating
words
systematically
cacm
may
1960
barrett
j
a
grems
m
ca600506
jb
march
22
1978
1
29
pm
191
5
191
191
5
191
191
5
191
</TEXT>
</DOC>
<DOC>
<DOCNO>192</DOCNO>
<TEXT>
a
technique
for
counting
ones
in
a
binary
computer
cacm
may
1960
wegner
p
ca600505
jb
march
22
1978
1
30
pm
142
5
192
192
5
192
192
5
192
192
5
192
2952
5
192
142
6
192
162
6
192
162
6
192
163
6
192
163
6
192
192
6
192
192
6
192
2185
6
192
2727
6
192
</TEXT>
</DOC>
<DOC>
<DOCNO>193</DOCNO>
<TEXT>
a
start
at
automatic
storage
assignment
cacm
may
1960
patrick
r
l
ca600504
jb
march
22
1978
1
31
pm
193
5
193
193
5
193
193
5
193
</TEXT>
</DOC>
<DOC>
<DOCNO>194</DOCNO>
<TEXT>
divisionless
computation
of
square
roots
through
continued
squaring
cacm
may
1960
sarafyan
d
ca600503
jb
march
22
1978
1
32
pm
194
5
194
194
5
194
194
5
194
</TEXT>
</DOC>
<DOC>
<DOCNO>195</DOCNO>
<TEXT>
what
is
a
code
cacm
may
1960
patterson
g
w
ca600502
jb
march
22
1978
1
33
pm
195
5
195
195
5
195
195
5
195
</TEXT>
</DOC>
<DOC>
<DOCNO>196</DOCNO>
<TEXT>
report
on
the
algorithmic
language
algol
60
naur
p
backus
j
cacm
may
1960
ca600501
jb
march
22
1978
1
34
pm
123
5
196
140
5
196
196
5
196
196
5
196
196
5
196
919
5
196
989
5
196
1102
5
196
1109
5
196
1140
5
196
1188
5
196
1306
5
196
249
5
196
254
5
196
272
5
196
1464
5
196
1491
5
196
1767
5
196
1781
5
196
1787
5
196
1949
5
196
321
5
196
2059
5
196
2126
5
196
2732
5
196
435
5
196
437
5
196
463
5
196
483
5
196
491
5
196
560
5
196
583
5
196
3073
5
196
627
5
196
631
5
196
632
5
196
642
5
196
644
5
196
653
5
196
680
5
196
761
5
196
762
5
196
763
5
196
1
6
196
1
6
196
823
6
196
106
6
196
123
6
196
152
6
196
165
6
196
168
6
196
185
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
196
6
196
919
6
196
946
6
196
947
6
196
990
6
196
1007
6
196
1046
6
196
1131
6
196
1139
6
196
1140
6
196
1140
6
196
1141
6
196
1149
6
196
1198
6
196
1215
6
196
1215
6
196
1223
6
196
1265
6
196
1303
6
196
1303
6
196
1323
6
196
1358
6
196
1366
6
196
1421
6
196
1460
6
196
1462
6
196
1463
6
196
1467
6
196
1467
6
196
1468
6
196
1468
6
196
1477
6
196
1491
6
196
1491
6
196
1496
6
196
1496
6
196
1496
6
196
1531
6
196
1535
6
196
1565
6
196
1601
6
196
1602
6
196
1613
6
196
1614
6
196
1614
6
196
1626
6
196
1641
6
196
1693
6
196
1781
6
196
1787
6
196
1788
6
196
205
6
196
206
6
196
207
6
196
209
6
196
210
6
196
210
6
196
1834
6
196
224
6
196
224
6
196
224
6
196
249
6
196
249
6
196
271
6
196
288
6
196
288
6
196
303
6
196
316
6
196
321
6
196
381
6
196
387
6
196
398
6
196
11
6
196
46
6
196
51
6
196
2732
6
196
400
6
196
401
6
196
402
6
196
404
6
196
404
6
196
404
6
196
404
6
196
404
6
196
404
6
196
404
6
196
406
6
196
410
6
196
412
6
196
463
6
196
463
6
196
464
6
196
483
6
196
483
6
196
483
6
196
3184
6
196
3184
6
196
3184
6
196
3184
6
196
3184
6
196
3188
6
196
584
6
196
600
6
196
615
6
196
631
6
196
642
6
196
680
6
196
691
6
196
729
6
196
763
6
196
763
6
196
799
6
196
799
6
196
799
6
196
</TEXT>
</DOC>
<DOC>
<DOCNO>197</DOCNO>
<TEXT>
an
imaginary
number
system
cacm
april
1960
knuth
d
e
ca600414
jb
march
22
1978
1
35
pm
197
5
197
197
5
197
197
5
197
</TEXT>
</DOC>
<DOC>
<DOCNO>198</DOCNO>
<TEXT>
a
high
speed
multiplication
process
for
digital
computers
cacm
april
1960
gurzi
f
ca600413
jb
march
22
1978
1
36
pm
198
5
198
198
5
198
198
5
198
</TEXT>
</DOC>
<DOC>
<DOCNO>199</DOCNO>
<TEXT>
euclidian
algorithm
algorithm
7
cacm
april
1960
claussen
r
ca600412
jb
march
22
1978
1
37
pm
199
5
199
199
5
199
199
5
199
</TEXT>
</DOC>
<DOC>
<DOCNO>200</DOCNO>
<TEXT>
bessel
function
i
asymptotic
expansion
algorithm
6
cacm
april
1960
clarke
d
s
ca600411
jb
march
22
1978
1
39
pm
200
5
200
200
5
200
200
5
200
</TEXT>
</DOC>
<DOC>
<DOCNO>201</DOCNO>
<TEXT>
bessel
funtion
i
series
expansion
algorithm
5
cacm
april
1960
clarke
d
s
ca600410
jb
march
22
1978
1
40
pm
201
5
201
201
5
201
201
5
201
</TEXT>
</DOC>
<DOC>
<DOCNO>202</DOCNO>
<TEXT>
a
control
system
for
logical
block
diagnosis
with
data
loading
this
paper
describes
a
section
of
an
integrated
diagnostic
monitor
system
which
facilitates
the
checking
of
sections
of
instructions
or
subroutines
anywhere
in
the
object
program
a
new
method
of
specifying
all
diagnostic
operations
in
a
format
similar
to
a
computer
program
makes
the
system
convenient
to
use
and
relatively
simple
to
understand
the
paper
also
describes
a
number
of
other
novel
diagnostic
features
which
can
be
included
in
the
system
cacm
april
1960
senko
m
e
ca600409
jb
march
22
1978
1
45
pm
931
5
202
202
5
202
202
5
202
202
5
202
202
6
202
396
6
202
634
6
202
</TEXT>
</DOC>
<DOC>
<DOCNO>203</DOCNO>
<TEXT>
decoding
combinations
of
the
first
n
integers
taken
k
at
a
time
cacm
april
1960
brown
r
m
ca600408
jb
march
22
1978
1
46
pm
203
5
203
203
5
203
203
5
203
2690
5
203
203
6
203
579
6
203
</TEXT>
</DOC>
<DOC>
<DOCNO>204</DOCNO>
<TEXT>
proving
theorems
by
pattern
recognition
i
cacm
april
1960
wang
h
ca600407
jb
march
22
1978
1
47
pm
204
4
204
204
5
204
204
5
204
204
5
204
3194
5
204
</TEXT>
</DOC>
<DOC>
<DOCNO>205</DOCNO>
<TEXT>
macro
instruction
extensions
of
compiler
languages
macroinstruction
compilers
constructed
from
a
small
set
of
functions
can
be
made
extremely
powerful
in
particular
conditional
assembly
nested
definitions
and
parenthetical
notation
serve
to
make
a
compiler
capable
of
accepting
very
general
extensions
to
its
ground
language
cacm
april
1960
mcilroy
m
d
ca600406
jb
march
22
1978
1
49
pm
205
4
205
205
4
205
210
4
205
214
4
205
1982
4
205
398
4
205
642
4
205
669
4
205
100
4
205
123
4
205
164
4
205
1
5
205
205
5
205
205
5
205
205
5
205
1358
5
205
1565
5
205
1781
5
205
1788
5
205
43
5
205
123
6
205
196
6
205
919
6
205
990
6
205
1006
6
205
1007
6
205
1007
6
205
1046
6
205
1131
6
205
1139
6
205
1140
6
205
1149
6
205
1162
6
205
1198
6
205
1215
6
205
1223
6
205
1265
6
205
1303
6
205
1323
6
205
1358
6
205
1358
6
205
1366
6
205
1421
6
205
1455
6
205
1460
6
205
1460
6
205
1462
6
205
1463
6
205
1467
6
205
1468
6
205
1477
6
205
1491
6
205
1496
6
205
1531
6
205
1535
6
205
1565
6
205
1601
6
205
1602
6
205
1613
6
205
1614
6
205
1626
6
205
1641
6
205
1787
6
205
1788
6
205
205
6
205
205
6
205
205
6
205
205
6
205
224
6
205
249
6
205
288
6
205
316
6
205
381
6
205
398
6
205
11
6
205
404
6
205
410
6
205
463
6
205
464
6
205
483
6
205
3184
6
205
3184
6
205
3188
6
205
3189
6
205
584
6
205
600
6
205
680
6
205
691
6
205
729
6
205
763
6
205
799
6
205
799
6
205
</TEXT>
</DOC>
<DOC>
<DOCNO>206</DOCNO>
<TEXT>
symbol
manipulation
in
xtran
cacm
april
1960
green
j
ca600405
jb
march
22
1978
1
50
pm
206
4
206
207
4
206
206
5
206
206
5
206
206
5
206
64
5
206
644
5
206
196
6
206
206
6
206
207
6
206
</TEXT>
</DOC>
<DOC>
<DOCNO>207</DOCNO>
<TEXT>
syntactic
and
semantic
augments
to
algol
cacm
april
1960
smith
j
w
ca600404
jb
march
22
1978
1
54
pm
206
4
207
207
4
207
207
5
207
207
5
207
207
5
207
64
5
207
644
5
207
196
6
207
206
6
207
207
6
207
</TEXT>
</DOC>
<DOC>
<DOCNO>208</DOCNO>
<TEXT>
an
introduction
to
information
processing
language
v
cacm
april
1960
newell
a
tonge
f
m
ca600403
jb
march
22
1978
1
55
pm
208
5
208
208
5
208
208
5
208
378
5
208
208
6
208
209
6
208
210
6
208
</TEXT>
</DOC>
<DOC>
<DOCNO>209</DOCNO>
<TEXT>
symbol
manipulation
by
threaded
lists
cacm
april
1960
perlis
a
j
thornton
c
ca600402
jb
march
22
1978
1
56
pm
1050
5
209
1102
5
209
209
5
209
209
5
209
209
5
209
378
5
209
3008
5
209
731
5
209
798
5
209
849
6
209
106
6
209
196
6
209
208
6
209
209
6
209
209
6
209
209
6
209
209
6
209
209
6
209
209
6
209
210
6
209
210
6
209
367
6
209
406
6
209
483
6
209
627
6
209
627
6
209
</TEXT>
</DOC>
<DOC>
<DOCNO>210</DOCNO>
<TEXT>
recursive
functions
of
symbolic
expressions
and
their
computation
by
machine
part
i
cacm
april
1960
mccarthy
j
ca600401
jb
march
22
1978
1
57
pm
205
4
210
210
4
210
214
4
210
1982
4
210
398
4
210
642
4
210
669
4
210
100
4
210
123
4
210
164
4
210
106
5
210
1
5
210
1024
5
210
1051
5
210
1102
5
210
1132
5
210
210
5
210
210
5
210
210
5
210
1390
5
210
1486
5
210
1549
5
210
1706
5
210
1826
5
210
1878
5
210
378
5
210
2060
5
210
2155
5
210
2168
5
210
2719
5
210
2723
5
210
2838
5
210
2842
5
210
2855
5
210
2879
5
210
3077
5
210
3080
5
210
3106
5
210
627
5
210
106
6
210
106
6
210
196
6
210
196
6
210
1051
6
210
1180
6
210
1303
6
210
1380
6
210
1389
6
210
1421
6
210
1469
6
210
1477
6
210
1491
6
210
1549
6
210
1549
6
210
1549
6
210
1626
6
210
1626
6
210
1626
6
210
1749
6
210
208
6
210
209
6
210
209
6
210
1826
6
210
1826
6
210
1826
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
210
6
210
1834
6
210
1869
6
210
1878
6
210
1972
6
210
1972
6
210
378
6
210
378
6
210
2046
6
210
2060
6
210
2060
6
210
2060
6
210
2110
6
210
2148
6
210
2151
6
210
2167
6
210
2192
6
210
2210
6
210
2457
6
210
2513
6
210
2645
6
210
2651
6
210
2657
6
210
2665
6
210
2723
6
210
2766
6
210
2766
6
210
2833
6
210
2850
6
210
2855
6
210
2954
6
210
2998
6
210
2998
6
210
406
6
210
406
6
210
406
6
210
483
6
210
3184
6
210
3184
6
210
627
6
210
627
6
210
731
6
210
731
6
210
731
6
210
731
6
210
731
6
210
731
6
210
753
6
210
793
6
210
794
6
210
</TEXT>
</DOC>
<DOC>
<DOCNO>211</DOCNO>
<TEXT>
share
standard
flow
chart
symbols
cacm
march
1960
grems
m
ca600307
jb
march
22
1978
1
58
pm
211
5
211
211
5
211
211
5
211
</TEXT>
</DOC>
<DOC>
<DOCNO>212</DOCNO>
<TEXT>
bisection
routine
algorithm
4
cacm
march
1960
gorn
s
ca600306
jb
march
22
1978
1
59
pm
212
5
212
212
5
212
212
5
212
</TEXT>
</DOC>
<DOC>
<DOCNO>213</DOCNO>
<TEXT>
numerical
inversion
of
laplace
transforms
cacm
march
1960
schmittroth
l
a
ca600305
jb
march
22
1978
2
00
pm
213
5
213
213
5
213
213
5
213
</TEXT>
</DOC>
<DOC>
<DOCNO>214</DOCNO>
<TEXT>
an
algorithm
defining
algol
assignment
statements
cacm
march
1960
floyd
r
w
ca600304
jb
march
22
1978
2
01
pm
205
4
214
210
4
214
214
4
214
214
4
214
214
4
214
1593
4
214
1982
4
214
398
4
214
642
4
214
669
4
214
100
4
214
123
4
214
164
4
214
1
5
214
214
5
214
214
5
214
214
5
214
53
5
214
91
5
214
</TEXT>
</DOC>
<DOC>
<DOCNO>215</DOCNO>
<TEXT>
the
execute
operations
a
fourth
mode
of
instruction
sequencing
cacm
march
1960
brooks
f
p
ca600303
jb
march
22
1978
2
02
pm
215
4
215
215
5
215
215
5
215
215
5
215
58
5
215
</TEXT>
</DOC>
<DOC>
<DOCNO>216</DOCNO>
<TEXT>
a
note
on
the
use
of
the
abacus
in
number
conversion
cacm
march
1960
kanner
h
ca600302
jb
march
22
1978
2
03
pm
216
5
216
216
5
216
216
5
216
</TEXT>
</DOC>
<DOC>
<DOCNO>217</DOCNO>
<TEXT>
soviet
computer
technology
1959
cacm
march
1960
ca600301
jb
march
22
1978
2
04
pm
217
5
217
217
5
217
217
5
217
323
5
217
689
5
217
217
6
217
217
6
217
323
6
217
3197
6
217
</TEXT>
</DOC>
<DOC>
<DOCNO>218</DOCNO>
<TEXT>
computer
preparation
of
a
poetry
concordance
cacm
february
1960
painter
j
a
ca600214
jb
march
22
1978
2
05
pm
218
5
218
218
5
218
218
5
218
</TEXT>
</DOC>
<DOC>
<DOCNO>219</DOCNO>
<TEXT>
marriage
with
problems
cacm
february
1960
shuchter
j
p
ca600213
jb
march
22
1978
2
06
pm
219
5
219
219
5
219
219
5
219
</TEXT>
</DOC>
<DOC>
<DOCNO>220</DOCNO>
<TEXT>
a
new
method
of
computation
of
square
roots
without
using
division
cacm
february
1960
traub
j
f
ca600212
jb
march
22
1978
2
08
pm
220
5
220
220
5
220
220
5
220
</TEXT>
</DOC>
<DOC>
<DOCNO>221</DOCNO>
<TEXT>
the
basic
side
of
tape
labeling
cacm
february
1960
logan
w
a
ca600211
jb
march
22
1978
2
09
pm
121
5
221
221
5
221
221
5
221
221
5
221
221
6
221
</TEXT>
</DOC>
<DOC>
<DOCNO>222</DOCNO>
<TEXT>
coding
isomorphisms
the
coding
of
external
symbols
into
symbols
internal
to
a
compute
can
sometimes
be
carried
out
in
such
a
way
that
relevant
informational
properties
are
preserved
but
in
a
form
much
more
easily
dealt
with
a
case
in
point
is
presented
cacm
february
1960
lynch
w
c
ca600210
jb
march
22
1978
2
12
pm
222
4
222
222
4
222
364
4
222
799
4
222
222
5
222
222
5
222
222
5
222
44
5
222
82
5
222
</TEXT>
</DOC>
<DOC>
<DOCNO>223</DOCNO>
<TEXT>
selfcipher
programming
cacm
february
1960
pelta
h
n
ca600209
jb
march
22
1978
2
13
pm
223
5
223
223
5
223
223
5
223
</TEXT>
</DOC>
<DOC>
<DOCNO>224</DOCNO>
<TEXT>
sequential
formula
translation
the
syntax
of
an
algorithmic
language
such
as
algol
is
conveniently
described
as
a
sequence
of
states
indicated
by
an
element
called
cellar
transitions
are
controlled
by
admissible
state
symbol
pairs
which
may
be
represented
by
a
transition
matrix
this
description
of
syntax
furnishes
at
the
same
time
an
extremely
simple
rule
for
translating
into
machine
programs
statements
in
the
algorithmic
language
sequential
treatment
however
is
not
feasible
in
the
case
of
certain
optimizing
processes
such
as
recursive
address
calculation
cacm
february
1960
samelson
k
bauer
f
l
ca600208
jb
march
22
1978
2
17
pm
224
4
224
364
4
224
1139
5
224
1141
5
224
1215
5
224
1223
5
224
224
5
224
224
5
224
224
5
224
267
5
224
1647
5
224
1781
5
224
1787
5
224
1792
5
224
364
5
224
405
5
224
438
5
224
98
5
224
763
5
224
100
6
224
123
6
224
196
6
224
196
6
224
196
6
224
919
6
224
990
6
224
1007
6
224
1025
6
224
1046
6
224
1131
6
224
1139
6
224
1140
6
224
1141
6
224
1149
6
224
1179
6
224
1198
6
224
1215
6
224
1215
6
224
1223
6
224
1265
6
224
1303
6
224
1323
6
224
1358
6
224
1366
6
224
1421
6
224
1460
6
224
1462
6
224
1463
6
224
1467
6
224
1468
6
224
1477
6
224
1491
6
224
1491
6
224
1496
6
224
1496
6
224
1531
6
224
1535
6
224
1565
6
224
1601
6
224
1602
6
224
1605
6
224
1613
6
224
1614
6
224
1626
6
224
1641
6
224
1781
6
224
1787
6
224
1788
6
224
205
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
224
6
224
249
6
224
249
6
224
288
6
224
303
6
224
316
6
224
381
6
224
398
6
224
399
6
224
11
6
224
44
6
224
55
6
224
77
6
224
77
6
224
77
6
224
77
6
224
93
6
224
98
6
224
404
6
224
404
6
224
404
6
224
405
6
224
410
6
224
412
6
224
438
6
224
463
6
224
464
6
224
464
6
224
483
6
224
3184
6
224
3188
6
224
584
6
224
600
6
224
631
6
224
631
6
224
680
6
224
691
6
224
763
6
224
763
6
224
763
6
224
799
6
224
799
6
224
</TEXT>
</DOC>
<DOC>
<DOCNO>225</DOCNO>
<TEXT>
a
techniquefor
handling
macro
instructions
corrigendum
cacm
february
1960
greenwald
i
d
ca600207
jb
march
22
1978
2
18
pm
225
5
225
225
5
225
225
5
225
</TEXT>
</DOC>
<DOC>
<DOCNO>226</DOCNO>
<TEXT>
solution
of
polynomial
equation
by
bairstow
hitchcock
method
algorithm
3
cacm
february
1960
grau
a
a
ca600206
jb
march
22
1978
2
20
pm
226
5
226
226
5
226
226
5
226
</TEXT>
</DOC>
<DOC>
<DOCNO>227</DOCNO>
<TEXT>
rootfinder
algorithm
2
cacm
february
1960
wegstein
j
ca600205
jb
march
22
1978
2
20
pm
227
5
227
227
5
227
227
5
227
</TEXT>
</DOC>
<DOC>
<DOCNO>228</DOCNO>
<TEXT>
quadi
algorithm
1
cacm
february
1960
herbold
r
j
ca600204
jb
march
22
1978
2
21
pm
228
5
228
228
5
228
228
5
228
</TEXT>
</DOC>
<DOC>
<DOCNO>229</DOCNO>
<TEXT>
a
terminology
proposal
cacm
february
1960
gruenberger
f
ca600203
jb
march
22
1978
2
24
pm
229
5
229
229
5
229
229
5
229
</TEXT>
</DOC>
<DOC>
<DOCNO>230</DOCNO>
<TEXT>
a
proposal
for
character
code
compatibility
cacm
february
1960
bemer
r
w
ca600202
jb
march
22
1978
2
25
pm
230
5
230
230
5
230
230
5
230
333
5
230
230
6
230
</TEXT>
</DOC>
<DOC>
<DOCNO>231</DOCNO>
<TEXT>
a
proposal
for
a
set
of
publication
standards
for
use
by
the
acm
cacm
february
1960
kent
e
r
ca600201
jb
march
22
1978
2
26
pm
231
5
231
231
5
231
231
5
231
</TEXT>
</DOC>
<DOC>
<DOCNO>232</DOCNO>
<TEXT>
a
high
speed
sorting
procedure
cacm
january
1960
frank
r
m
lazarus
r
b
ca600104
jb
march
22
1978
2
27
pm
232
5
232
232
5
232
232
5
232
852
5
232
864
5
232
232
6
232
232
6
232
309
6
232
74
6
232
74
6
232
</TEXT>
</DOC>
<DOC>
<DOCNO>233</DOCNO>
<TEXT>
abstracts
additional
nuclear
reactor
codes
cacm
january
1960
nather
v
sangren
w
ca600103
jb
march
22
1978
2
29
pm
233
5
233
233
5
233
233
5
233
</TEXT>
</DOC>
<DOC>
<DOCNO>234</DOCNO>
<TEXT>
a
sap
like
assembly
program
for
the
ibm
650
cacm
january
1960
speckhard
a
e
ca600102jb
march
22
1978
2
30
pm
234
5
234
234
5
234
234
5
234
</TEXT>
</DOC>
<DOC>
<DOCNO>235</DOCNO>
<TEXT>
two
think
pieces
cacm
january
1960
bagley
p
r
ca600101
jb
march
22
1978
2
30
pm
235
5
235
235
5
235
235
5
235
</TEXT>
</DOC>
<DOC>
<DOCNO>236</DOCNO>
<TEXT>
soviet
cybernetics
and
computer
this
article
records
observations
on
soviet
research
and
technology
in
cybernetics
and
computer
science
made
by
the
author
during
a
visit
to
the
soviet
union
as
a
delegate
to
the
ifac
congress
on
automatic
control
held
in
moscow
in
the
summer
of
1960
cacm
december
1961
feigenbaum
e
a
ca611214
jb
march
15
1978
10
06
pm
1349
5
236
236
5
236
236
5
236
236
5
236
236
6
236
323
6
236
83
6
236
415
6
236
</TEXT>
</DOC>
<DOC>
<DOCNO>237</DOCNO>
<TEXT>
computer
production
of
peek
a
boo
sheets
cacm
december
1961
robbins
d
ca611213
jb
march
15
1978
10
07
pm
237
5
237
237
5
237
237
5
237
</TEXT>
</DOC>
<DOC>
<DOCNO>238</DOCNO>
<TEXT>
simulation
and
analysis
of
biochemical
systems
cacm
december
1961
garfinkel
d
rutledge
j
d
higgins
j
j
ca611212
jb
march
15
1978
10
09
pm
238
4
238
238
4
238
633
4
238
643
4
238
238
5
238
238
5
238
238
5
238
633
5
238
643
5
238
238
6
238
238
6
238
633
6
238
643
6
238
</TEXT>
</DOC>
<DOC>
<DOCNO>239</DOCNO>
<TEXT>
inefficiency
of
the
use
of
boolean
functions
for
information
retrieval
systems
cacm
december
1961
verhoeff
j
goffman
w
belzer
j
ca611211
jb
march
15
1978
10
10
pm
239
5
239
239
5
239
239
5
239
</TEXT>
</DOC>
<DOC>
<DOCNO>240</DOCNO>
<TEXT>
processing
magnetic
tape
files
with
variable
blocks
cacm
december
1961
graham
j
w
sprott
d
a
ca611210
jb
march
15
1978
10
11
pm
240
5
240
240
5
240
240
5
240
</TEXT>
</DOC>
<DOC>
<DOCNO>241</DOCNO>
<TEXT>
machine
calculation
of
moments
of
a
probability
distribution
a
method
is
presented
for
the
calculation
on
a
machine
of
the
moments
of
a
probability
distribution
necessitating
little
more
than
n
additions
and
n
references
to
memory
for
each
moment
instead
of
the
minimum
of
n
multiplication
2n
additions
and
2n
references
to
memory
required
by
the
most
straightforward
method
where
n
is
the
number
of
entries
in
the
probability
distribution
the
method
is
directly
applicable
when
a
tabulated
distribution
exists
as
when
it
has
been
computed
by
repeated
convolution
but
in
this
case
it
conserves
both
time
and
accuracy
cacm
december
1961
lechner
j
a
ca611209
jb
march
15
1978
10
15
pm
241
5
241
241
5
241
241
5
241
</TEXT>
</DOC>
<DOC>
<DOCNO>242</DOCNO>
<TEXT>
notes
on
geometric
weighted
check
digit
verification
this
note
describes
a
method
for
utilizing
geometric
weight
modulus
11
checking
digits
on
a
computer
which
does
not
have
either
multiplication
or
division
in
addition
some
attempt
has
been
made
to
show
some
limitations
of
this
system
cacm
december
1961
wilson
j
g
ca611208
jb
march
15
1978
10
17
pm
242
5
242
242
5
242
242
5
242
</TEXT>
</DOC>
<DOC>
<DOCNO>243</DOCNO>
<TEXT>
n
dimensional
codes
for
detecting
and
correcting
multiple
errors
the
paper
introduces
a
new
family
of
codes
for
detecting
and
correcting
multiple
errors
in
a
binary
coded
message
the
message
itself
is
arranged
conceptually
into
a
multidimensional
rectangular
array
the
processes
of
encoding
and
error
detection
are
based
upon
parity
evaluations
along
prescribed
dimensions
of
the
array
effectiveness
of
the
codes
is
increased
by
introducing
a
system
check
bit
which
is
essentially
a
parity
check
on
the
other
parity
bits
only
three
dimensional
codes
are
discussed
in
this
paper
with
parity
evaluations
along
the
horizontal
the
vertical
and
one
main
diagonal
however
the
family
of
codes
is
not
restricted
to
three
dimensions
as
evidenced
by
the
discussion
by
minnick
and
ashenhurst
on
a
similar
multidimensional
single
bit
selection
plan
used
for
another
purpose
6
a
four
dimensional
code
correcting
three
and
detecting
four
errors
has
been
developed
the
extension
to
higher
dimensional
codes
with
greater
correction
power
is
straightforward
cacm
december
1961
rubinoff
m
ca611207
jb
march
15
1978
10
23
pm
243
5
243
243
5
243
243
5
243
</TEXT>
</DOC>
<DOC>
<DOCNO>244</DOCNO>
<TEXT>
incomplete
elliptic
integrals
algorithm
73
cacm
december
1961
kriebel
d
c
ca611206
jb
march
15
1978
10
24
pm
244
5
244
244
5
244
244
5
244
</TEXT>
</DOC>
<DOC>
<DOCNO>245</DOCNO>
<TEXT>
a
set
of
associate
legendre
polynomials
of
the
second
kind
algorithm
62
cacm
december
1961
herndon
j
r
ca611205
jb
march
15
1978
10
25
pm
1222
5
245
245
5
245
245
5
245
245
5
245
1130
6
245
245
6
245
310
6
245
</TEXT>
</DOC>
<DOC>
<DOCNO>246</DOCNO>
<TEXT>
least
squares
fit
by
orthogonal
polynomials
algorithm
28
cacm
december
1961
macmillan
d
b
ca611204
jb
march
15
1978
10
27
pm
246
5
246
246
5
246
246
5
246
</TEXT>
</DOC>
<DOC>
<DOCNO>247</DOCNO>
<TEXT>
incomplete
elliptic
integrals
algorithm
73
cacm
december
1961
jefferson
d
k
ca611203
jb
march
15
1978
10
27
pm
247
5
247
247
5
247
247
5
247
</TEXT>
</DOC>
<DOC>
<DOCNO>248</DOCNO>
<TEXT>
what
is
proprietary
in
mathematical
programming
impressions
of
a
panel
discussion
a
panel
discussion
on
what
is
proprietary
in
mathematical
programming
was
sponsored
by
the
special
interest
committee
on
mathematical
programming
of
the
acm
during
a
hall
of
discussion
on
september
7th
at
the
16th
national
acm
meeting
in
los
angeles
this
note
consists
solely
of
the
impressions
garnered
by
the
moderator
of
the
panel
and
does
not
necessarily
represent
the
position
of
any
of
the
panelists
or
other
participants
in
the
discussion
cacm
december
1961
smith
l
w
ca611202
jb
march
15
1978
10
31
pm
248
5
248
248
5
248
248
5
248
</TEXT>
</DOC>
<DOC>
<DOCNO>249</DOCNO>
<TEXT>
specification
languages
for
mechanical
languages
and
their
processors
a
baker
dozen
cacm
december
1961
gorn
s
ca611201
jb
march
15
1978
10
32
pm
249
4
249
249
4
249
249
4
249
254
4
249
272
4
249
1102
4
249
1109
4
249
1140
4
249
1188
4
249
1306
4
249
1464
4
249
1491
4
249
1767
4
249
1781
4
249
1787
4
249
1949
4
249
321
4
249
2059
4
249
2126
4
249
435
4
249
437
4
249
438
4
249
463
4
249
483
4
249
491
4
249
2732
4
249
560
4
249
583
4
249
3073
4
249
3185
4
249
627
4
249
631
4
249
632
4
249
642
4
249
644
4
249
653
4
249
680
4
249
761
4
249
762
4
249
763
4
249
123
4
249
140
4
249
919
4
249
989
4
249
196
5
249
249
5
249
249
5
249
249
5
249
1425
5
249
1781
5
249
303
5
249
438
5
249
51
5
249
762
5
249
123
6
249
196
6
249
196
6
249
919
6
249
990
6
249
1007
6
249
1046
6
249
1131
6
249
1139
6
249
1140
6
249
1149
6
249
1198
6
249
1215
6
249
1223
6
249
1265
6
249
1303
6
249
1323
6
249
1358
6
249
1366
6
249
1421
6
249
1460
6
249
1462
6
249
1463
6
249
1467
6
249
1468
6
249
1477
6
249
1491
6
249
1496
6
249
1531
6
249
1535
6
249
1565
6
249
1601
6
249
1602
6
249
1613
6
249
1614
6
249
1626
6
249
1641
6
249
1787
6
249
1788
6
249
205
6
249
224
6
249
224
6
249
249
6
249
249
6
249
249
6
249
249
6
249
288
6
249
303
6
249
316
6
249
381
6
249
398
6
249
11
6
249
77
6
249
404
6
249
410
6
249
463
6
249
464
6
249
483
6
249
483
6
249
3184
6
249
3188
6
249
584
6
249
600
6
249
680
6
249
691
6
249
763
6
249
799
6
249
</TEXT>
</DOC>
<DOC>
<DOCNO>250</DOCNO>
<TEXT>
an
engineering
application
of
logic
structure
tables
cacm
november
1961
nickerson
r
c
ca611118
jb
march
15
1978
10
34
pm
250
4
250
1237
4
250
1237
5
250
250
5
250
250
5
250
250
5
250
320
5
250
2220
5
250
753
5
250
1172
6
250
1237
6
250
1327
6
250
1354
6
250
1489
6
250
1548
6
250
250
6
250
250
6
250
250
6
250
320
6
250
753
6
250
</TEXT>
</DOC>
<DOC>
<DOCNO>251</DOCNO>
<TEXT>
ballistic
cam
design
this
paper
presents
a
digital
computer
program
for
the
rapid
calculation
of
manufacturing
data
essential
to
the
design
of
preproduction
cams
which
are
utilized
in
ballistic
computers
of
tank
fire
control
systems
the
cam
profile
generated
introduces
the
superelevation
angle
required
by
tank
main
armament
for
a
particular
type
ammunition
cacm
november
1961
archambault
m
ca611117
jb
march
15
1978
10
37
pm
251
5
251
251
5
251
251
5
251
</TEXT>
</DOC>
<DOC>
<DOCNO>252</DOCNO>
<TEXT>
programming
a
duplex
computer
system
this
paper
describes
a
method
of
duplex
computer
programming
that
has
been
used
with
two
computers
in
a
military
defense
system
the
method
combines
special
programs
with
a
basic
data
processing
program
package
the
duplex
operation
gives
the
system
greater
reliability
after
achieving
the
required
level
of
integration
both
computers
do
similar
processing
on
the
same
inputs
and
continually
cross
check
the
intermediate
and
final
results
cacm
november
1961
dow
j
ca611116
jb
march
15
1978
10
40
pm
252
5
252
252
5
252
252
5
252
</TEXT>
</DOC>
<DOC>
<DOCNO>253</DOCNO>
<TEXT>
on
a
program
for
ray
chaudhuri
algorithm
for
a
minimum
cover
of
an
abstract
complex
cacm
november
1961
foata
d
c
ca611115
jb
march
15
1978
10
41
pm
253
5
253
253
5
253
253
5
253
</TEXT>
</DOC>
<DOC>
<DOCNO>254</DOCNO>
<TEXT>
smalgol
61
prior
to
and
during
the
1961
western
joint
computer
conference
several
people
in
the
joint
users
groups
had
expressed
interest
in
defining
a
smalgol
language
this
is
to
be
an
algol
language
for
use
with
compilers
on
relatively
small
size
computers
a
preliminary
report
resulted
at
the
acm
national
conference
four
months
later
after
considering
several
counter
proposals
a
final
version
was
agreed
upon
by
a
subcommittee
the
recommendations
of
the
subcommittee
for
a
standard
subset
of
algol
60
for
use
on
small
computers
is
presented
here
cacm
november
1961
bachelork
g
a
dempster
j
r
h
knuth
d
e
speroni
j
ca611114
jb
march
15
1978
10
44
pm
249
4
254
254
4
254
254
4
254
254
4
254
272
4
254
1102
4
254
1109
4
254
1140
4
254
1188
4
254
1234
4
254
1306
4
254
1464
4
254
1491
4
254
1767
4
254
1781
4
254
1787
4
254
1949
4
254
321
4
254
2059
4
254
2126
4
254
435
4
254
437
4
254
463
4
254
483
4
254
491
4
254
2732
4
254
560
4
254
583
4
254
3073
4
254
627
4
254
631
4
254
632
4
254
642
4
254
644
4
254
653
4
254
680
4
254
761
4
254
762
4
254
763
4
254
123
4
254
140
4
254
919
4
254
989
4
254
196
5
254
254
5
254
254
5
254
254
5
254
321
5
254
387
5
254
794
5
254
254
6
254
</TEXT>
</DOC>
<DOC>
<DOCNO>255</DOCNO>
<TEXT>
augmentation
algorithm
68
cacm
november
1961
breed
l
m
ca611113
jb
march
15
1978
10
45
pm
255
5
255
255
5
255
255
5
255
</TEXT>
</DOC>
<DOC>
<DOCNO>256</DOCNO>
<TEXT>
a
set
of
test
matrices
algorithm
52
cacm
november
1961
dubay
g
h
ca611112
jb
march
15
1978
10
46
pm
256
5
256
256
5
256
256
5
256
</TEXT>
</DOC>
<DOC>
<DOCNO>257</DOCNO>
<TEXT>
invert
algorithm
42
cacm
november
1961
knapp
a
w
shaman
p
ca611111
jb
march
15
1978
10
47
pm
257
5
257
257
5
257
257
5
257
</TEXT>
</DOC>
<DOC>
<DOCNO>258</DOCNO>
<TEXT>
composition
generator
algorithm
72
cacm
november
1961
hellerman
o
ogden
s
ca611110
jb
march
15
1978
10
48
pm
258
5
258
258
5
258
258
5
258
</TEXT>
</DOC>
<DOC>
<DOCNO>259</DOCNO>
<TEXT>
permutation
algorithm
71
cacm
november
1961
coveyou
r
r
sullivan
j
g
ca611109
jb
march
15
1978
10
52
pm
259
5
259
259
5
259
259
5
259
</TEXT>
</DOC>
<DOC>
<DOCNO>260</DOCNO>
<TEXT>
interpolation
by
aitken
algorithm
70
cacm
november
1961
mifsud
c
j
ca611108
jb
march
15
1978
10
53
pm
260
5
260
260
5
260
260
5
260
</TEXT>
</DOC>
<DOC>
<DOCNO>261</DOCNO>
<TEXT>
tape
splitting
cacm
november
1961
moore
d
p
ca611107
jb
march
15
1978
10
54
pm
261
5
261
261
5
261
261
5
261
</TEXT>
</DOC>
<DOC>
<DOCNO>262</DOCNO>
<TEXT>
map
cacm
november
1961
moore
c
l
ruwe
m
l
ca611106
jb
march
15
1978
10
54
pm
262
5
262
262
5
262
262
5
262
</TEXT>
</DOC>
<DOC>
<DOCNO>263</DOCNO>
<TEXT>
library
loading
with
alternate
routine
selection
cacm
november
1961
moore
d
p
ca611105
jb
march
15
1978
10
55
pm
263
5
263
263
5
263
263
5
263
</TEXT>
</DOC>
<DOC>
<DOCNO>264</DOCNO>
<TEXT>
a
generalized
polyphase
merge
algorithm
cacm
november
1961
reynolds
s
w
ca611104
jb
march
15
1978
10
56
pm
264
5
264
264
5
264
264
5
264
479
5
264
264
6
264
299
6
264
</TEXT>
</DOC>
<DOC>
<DOCNO>265</DOCNO>
<TEXT>
low
level
language
subroutines
for
use
within
fortran
this
paper
describes
some
subroutines
coded
in
symbolic
languages
and
for
use
within
fortran
coded
programs
to
deal
with
special
arithmetic
e
g
multi
precision
arithmetic
symbol
manipulation
bit
manipulation
and
expanded
character
set
input
output
and
visual
display
cacm
november
1961
barnett
m
p
ca611103
jb
march
15
1978
10
59
pm
265
5
265
265
5
265
265
5
265
464
5
265
720
5
265
265
6
265
265
6
265
404
6
265
464
6
265
474
6
265
</TEXT>
</DOC>
<DOC>
<DOCNO>266</DOCNO>
<TEXT>
fitting
spheres
by
the
method
of
least
squares
cacm
november
1961
robinson
s
m
ca611102
jb
march
15
1978
11
00
pm
266
5
266
266
5
266
266
5
266
</TEXT>
</DOC>
<DOC>
<DOCNO>267</DOCNO>
<TEXT>
some
proposals
for
improving
the
efficiency
of
algol
60
cacm
november
1961
wilkes
m
v
ca611101
jb
march
15
1978
11
01
pm
267
4
267
1139
4
267
1141
4
267
1215
4
267
1223
4
267
1647
4
267
1781
4
267
1787
4
267
1792
4
267
364
4
267
405
4
267
438
4
267
763
4
267
1323
5
267
224
5
267
267
5
267
267
5
267
267
5
267
267
6
267
3184
6
267
799
6
267
</TEXT>
</DOC>
<DOC>
<DOCNO>268</DOCNO>
<TEXT>
stochastic
evaluation
of
a
static
storage
allocation
cacm
october
1961
cohen
l
j
ca611013
jb
march
16
1978
12
48
pm
268
5
268
268
5
268
268
5
268
</TEXT>
</DOC>
<DOC>
<DOCNO>269</DOCNO>
<TEXT>
core
allocation
based
on
probability
cacm
october
1961
riskin
b
n
ca611012
jb
march
16
1978
12
49
pm
269
5
269
269
5
269
269
5
269
</TEXT>
</DOC>
<DOC>
<DOCNO>270</DOCNO>
<TEXT>
techniques
for
storage
allocation
algorithms
cacm
october
1961
kelley
jr
j
e
ca611011
jb
march
16
1978
12
50
pm
270
5
270
270
5
270
270
5
270
678
5
270
270
6
270
</TEXT>
</DOC>
<DOC>
<DOCNO>271</DOCNO>
<TEXT>
a
semi
automatic
storage
allocation
system
at
loading
time
cacm
october
1961
heising
w
p
larner
r
a
ca611010
jb
march
16
1978
12
51
pm
972
5
271
271
5
271
271
5
271
271
5
271
1774
5
271
560
5
271
800
6
271
196
6
271
1173
6
271
271
6
271
271
6
271
271
6
271
273
6
271
276
6
271
</TEXT>
</DOC>
<DOC>
<DOCNO>272</DOCNO>
<TEXT>
a
storage
allocation
scheme
for
algol
60
a
storage
allocation
scheme
for
a
machine
with
a
2048
instruction
core
store
and
a
magnetic
drum
is
described
the
use
of
the
drum
for
storing
program
blocks
and
or
data
must
be
directed
by
the
programmer
through
auxiliary
information
in
the
algol
program
the
administrative
routines
controlling
the
storage
at
run
time
are
described
in
full
a
detailed
example
is
given
cacm
october
1961
jensen
j
mondrup
p
naur
p
ca611009
jb
march
16
1978
12
54
pm
249
4
272
254
4
272
272
4
272
1102
4
272
1109
4
272
1140
4
272
1188
4
272
1306
4
272
1464
4
272
1491
4
272
1767
4
272
1781
4
272
1787
4
272
1949
4
272
321
4
272
2059
4
272
2126
4
272
435
4
272
437
4
272
463
4
272
483
4
272
491
4
272
2732
4
272
560
4
272
583
4
272
3073
4
272
627
4
272
631
4
272
632
4
272
642
4
272
644
4
272
653
4
272
680
4
272
761
4
272
762
4
272
763
4
272
123
4
272
140
4
272
919
4
272
989
4
272
196
5
272
272
5
272
272
5
272
272
5
272
</TEXT>
</DOC>
<DOC>
<DOCNO>273</DOCNO>
<TEXT>
experience
in
automatic
storage
allocation
cacm
october
1961
collins
jr
g
o
ca611008
jb
march
16
1978
12
55
pm
972
5
273
273
5
273
273
5
273
273
5
273
2911
5
273
1879
6
273
271
6
273
273
6
273
273
6
273
276
6
273
2435
6
273
2498
6
273
2734
6
273
2773
6
273
2983
6
273
</TEXT>
</DOC>
<DOC>
<DOCNO>274</DOCNO>
<TEXT>
dynamic
storage
allocation
in
the
atlas
computer
including
an
automatic
use
of
a
backing
store
cacm
october
1961
fotheringham
j
ca611007
jb
march
16
1978
12
57
pm
274
5
274
274
5
274
274
5
274
1754
5
274
2358
5
274
488
5
274
1746
6
274
1751
6
274
1753
6
274
274
6
274
274
6
274
274
6
274
376
6
274
</TEXT>
</DOC>
<DOC>
<DOCNO>275</DOCNO>
<TEXT>
dynamic
storage
allocation
for
an
information
retrieval
system
cacm
october
1961
sams
b
h
ca611006
jb
march
16
1978
12
58
pm
275
5
275
275
5
275
275
5
275
</TEXT>
</DOC>
<DOC>
<DOCNO>276</DOCNO>
<TEXT>
program
organization
and
record
keeping
for
dynamic
storage
allocation
the
material
presented
in
this
paper
is
part
of
the
design
plan
of
the
core
allocation
portion
of
the
ascii
matic
programming
system
project
ascii
matic
is
concerned
with
the
application
of
computer
techniques
to
the
activities
of
certain
headquarters
military
intelligence
operations
of
the
u
army
cacm
october
1961
holt
a
w
ca611005
jb
march
16
1978
1
02
pm
972
5
276
276
5
276
276
5
276
276
5
276
1471
5
276
800
6
276
271
6
276
273
6
276
276
6
276
276
6
276
</TEXT>
</DOC>
<DOC>
<DOCNO>277</DOCNO>
<TEXT>
problems
of
storage
allocation
in
a
multiprocessor
multiprogrammed
system
cacm
october
1961
maher
r
j
ca611004
jb
march
16
1978
1
12
pm
277
5
277
277
5
277
277
5
277
</TEXT>
</DOC>
<DOC>
<DOCNO>278</DOCNO>
<TEXT>
a
general
formulation
of
storage
allocation
formalization
of
a
general
computer
storage
allocation
process
is
attempted
with
a
given
computer
m
is
associated
a
fictitious
computer
m
essentially
identical
to
m
except
in
respect
to
possession
of
unbounded
primary
storage
mappings
of
the
total
storage
set
internal
and
external
of
m
into
the
direct
address
set
of
m
are
introduced
a
program
sequence
p
for
m
is
termed
m
admissible
relative
to
a
specific
execution
time
period
if
there
is
a
mapping
underwhich
p
and
its
effective
data
referents
are
all
located
in
the
direct
address
set
of
m
storage
allocation
is
considered
as
a
process
of
establishing
for
an
arbitrary
m
program
a
sequence
of
mappings
a
decoupling
of
the
program
into
m
admissible
subprograms
and
a
linking
set
of
interludes
an
existence
proof
in
terms
of
a
completely
interpretive
m
program
as
indicated
some
special
cases
are
discussed
various
restrictions
on
generality
of
m
programs
are
considered
under
which
more
practical
realization
of
allocation
processes
becomes
tractable
cacm
october
1961
roberts
jr
a
e
ca611003
jb
march
16
1978
1
22
pm
278
5
278
278
5
278
278
5
278
</TEXT>
</DOC>
<DOC>
<DOCNO>279</DOCNO>
<TEXT>
the
case
for
dynamic
storage
allocation
cacm
october
1961
sams
b
h
ca611002
jb
march
16
1978
1
23
pm
279
5
279
279
5
279
279
5
279
657
5
279
279
6
279
409
6
279
</TEXT>
</DOC>
<DOC>
<DOCNO>280</DOCNO>
<TEXT>
a
preplanned
approach
to
a
storage
allocating
compiler
cacm
october
1961
o
r
w
ca611001
jb
march
16
1978
1
24
pm
280
5
280
280
5
280
280
5
280
</TEXT>
</DOC>
<DOC>
<DOCNO>281</DOCNO>
<TEXT>
putting
a
hex
on
e
x
recent
notes
on
approximate
natural
antilogy
have
not
considered
indirect
formulations
for
describing
e
x
in
this
note
we
produce
a
particular
family
of
very
fast
high
precision
and
eminently
practical
exponential
evaluation
formulas
derived
from
one
such
formulation
cacm
october
1961
feurzeig
w
ca610913
jb
march
16
1978
1
27
pm
281
5
281
281
5
281
281
5
281
</TEXT>
</DOC>
<DOC>
<DOCNO>282</DOCNO>
<TEXT>
optimum
tape
writing
procedures
consider
a
magnetic
tape
system
with
a
read
check
after
writing
where
an
error
occurs
in
writing
a
record
a
programmed
error
routine
may
either
bypass
some
or
all
of
the
area
on
tape
or
try
to
rewrite
the
record
on
the
same
area
this
paper
evaluates
these
two
procedures
on
the
basis
of
expected
loss
of
computer
time
and
develops
a
decision
rule
for
selecting
the
optimum
procedure
the
rule
depends
critically
on
the
number
of
times
the
tape
being
written
will
be
used
in
the
future
in
the
case
where
the
optimum
procedure
is
to
bypass
an
area
a
second
decision
the
size
of
the
area
to
be
bypassed
is
necessary
a
formula
is
developed
to
determine
the
optimum
area
to
be
bypassed
for
each
procedure
cacm
september
1961
hutchinson
k
ca610912
jb
march
16
1978
1
32
pm
282
5
282
282
5
282
282
5
282
</TEXT>
</DOC>
<DOC>
<DOCNO>283</DOCNO>
<TEXT>
inversion
of
a
complex
matrix
cacm
september
1961
tornheim
l
ca610911
jb
march
16
1978
1
44
pm
283
5
283
283
5
283
283
5
283
</TEXT>
</DOC>
<DOC>
<DOCNO>284</DOCNO>
<TEXT>
manipulation
of
algebraic
expressions
an
algorithm
for
algebraically
manipulating
expressions
of
the
form
sum
cipi
i
1
n
has
been
developed
in
conjunction
with
the
development
of
programs
for
systems
analysis
problems
this
algorithm
enablesus
to
derive
over
all
system
transfer
functions
from
algebraically
described
block
diagrams
of
any
linear
continuous
multi
loop
feedback
system
the
machine
representation
of
the
derived
expression
is
by
virtue
of
the
algorithm
in
a
form
which
simplifies
the
task
of
compiling
the
algorithm
was
developed
for
a
particular
purpose
in
connection
with
system
analysis
studies
however
its
application
as
a
mathematical
device
extends
far
beyond
the
confines
of
the
original
problem
cacm
september
1961
rom
a
r
m
ca610910
jb
march
16
1978
9
36
pm
964
5
284
1396
5
284
284
5
284
284
5
284
284
5
284
964
6
284
1028
6
284
1029
6
284
1083
6
284
1132
6
284
1214
6
284
1278
6
284
1334
6
284
1365
6
284
1386
6
284
1387
6
284
1388
6
284
1392
6
284
1393
6
284
1394
6
284
1395
6
284
1396
6
284
1397
6
284
1496
6
284
284
6
284
284
6
284
407
6
284
3199
6
284
3200
6
284
3201
6
284
3202
6
284
3203
6
284
3204
6
284
561
6
284
561
6
284
730
6
284
759
6
284
</TEXT>
</DOC>
<DOC>
<DOCNO>285</DOCNO>
<TEXT>
solution
of
tridiagonal
matrices
cacm
september
1961
wenrick
r
c
houghton
a
v
ca610909
jb
march
16
1978
9
39
pm
285
5
285
285
5
285
285
5
285
</TEXT>
</DOC>
<DOC>
<DOCNO>286</DOCNO>
<TEXT>
an
iterative
method
for
inversion
of
power
series
cacm
september
1961
bramhall
j
n
ca610908
jb
march
16
1978
9
41
pm
286
5
286
286
5
286
286
5
286
</TEXT>
</DOC>
<DOC>
<DOCNO>287</DOCNO>
<TEXT>
the
generalized
important
event
technique
cacm
september
1961
shapiro
n
vreenegoor
h
ca610907
jb
march
16
1978
9
42
pm
287
5
287
287
5
287
287
5
287
</TEXT>
</DOC>
<DOC>
<DOCNO>288</DOCNO>
<TEXT>
a
syntactical
chart
of
algol
60
cacm
september
1961
taylor
w
turner
l
waychoff
r
ca610906jb
march
16
1978
9
43
pm
989
5
288
288
5
288
288
5
288
288
5
288
1781
5
288
729
5
288
123
6
288
196
6
288
196
6
288
919
6
288
990
6
288
1007
6
288
1046
6
288
1131
6
288
1139
6
288
1140
6
288
1149
6
288
1198
6
288
1215
6
288
1223
6
288
1265
6
288
1303
6
288
1323
6
288
1358
6
288
1366
6
288
1421
6
288
1460
6
288
1462
6
288
1463
6
288
1467
6
288
1468
6
288
1477
6
288
1491
6
288
1496
6
288
1531
6
288
1535
6
288
1565
6
288
1601
6
288
1602
6
288
1613
6
288
1614
6
288
1626
6
288
1641
6
288
1787
6
288
1788
6
288
205
6
288
224
6
288
249
6
288
288
6
288
288
6
288
288
6
288
316
6
288
381
6
288
398
6
288
11
6
288
404
6
288
410
6
288
463
6
288
464
6
288
483
6
288
3184
6
288
3184
6
288
3188
6
288
584
6
288
600
6
288
616
6
288
680
6
288
691
6
288
763
6
288
799
6
288
</TEXT>
</DOC>
<DOC>
<DOCNO>289</DOCNO>
<TEXT>
critical
path
scheduling
algorithm
40
cacm
september
1961
alexander
n
p
ca610905
jb
march
16
1978
9
44
pm
289
5
289
289
5
289
289
5
289
</TEXT>
</DOC>
<DOC>
<DOCNO>290</DOCNO>
<TEXT>
chain
tracing
algorithm
69
cacm
september
1961
mayoh
b
h
ca610904
jb
march
16
1978
9
45
pm
290
5
290
290
5
290
290
5
290
</TEXT>
</DOC>
<DOC>
<DOCNO>291</DOCNO>
<TEXT>
use
of
mobol
in
preparingretrieval
programs
cacm
september
1961
hoffman
j
opler
a
ca610903
jb
march
16
1978
9
50
pm
291
5
291
291
5
291
291
5
291
</TEXT>
</DOC>
<DOC>
<DOCNO>292</DOCNO>
<TEXT>
an
information
retrieval
language
for
legal
studies
cacm
september
1961
kehl
w
b
horty
j
f
bacon
c
r
t
mitchell
d
s
ca610902
jb
march
16
1978
9
51
pm
292
5
292
292
5
292
292
5
292
</TEXT>
</DOC>
<DOC>
<DOCNO>293</DOCNO>
<TEXT>
the
applied
mathematics
laboratory
of
the
david
w
taylor
model
basin
cacm
september
1961
richstone
m
ca610901
jb
march
16
1978
10
01
pm
293
5
293
293
5
293
293
5
293
</TEXT>
</DOC>
<DOC>
<DOCNO>294</DOCNO>
<TEXT>
an
imaginary
number
system
cacm
august
1961
knuth
d
ca610810
jb
march
16
1978
10
02
pm
294
5
294
294
5
294
294
5
294
</TEXT>
</DOC>
<DOC>
<DOCNO>295</DOCNO>
<TEXT>
rational
approximations
for
the
error
function
and
for
similar
functions
cacm
august
1961
clendenin
w
w
ca610809
jb
march
16
1978
10
03
pm
295
5
295
295
5
295
295
5
295
</TEXT>
</DOC>
<DOC>
<DOCNO>296</DOCNO>
<TEXT>
a
note
on
multiple
precision
arithmetic
cacm
august
1961
cox
a
g
luther
h
a
ca610808
jb
march
16
1978
10
04
pm
1393
5
296
296
5
296
296
5
296
296
5
296
106
6
296
296
6
296
731
6
296
</TEXT>
</DOC>
<DOC>
<DOCNO>297</DOCNO>
<TEXT>
a
note
on
fitting
great
circles
by
least
squares
cacm
august
1961
marcus
c
f
ca610807
jb
march
16
1978
10
05
pm
297
4
297
122
5
297
297
5
297
297
5
297
297
5
297
</TEXT>
</DOC>
<DOC>
<DOCNO>298</DOCNO>
<TEXT>
a
48
bit
pseudo
random
number
generator
a
new
48
bit
pseudo
random
number
generator
suitable
for
several
computers
was
tested
statistically
for
randomness
to
determine
its
adequacy
for
use
in
monte
carlo
programs
frequency
tests
distributions
of
certain
low
order
moments
runs
up
and
down
and
runs
above
and
below
the
mean
were
applied
to
one
half
million
generated
numbers
lying
within
the
interval
0
1
and
to
three
sets
of
integers
obtained
from
specified
bits
within
the
generated
numbers
these
tests
substantiated
the
randomness
of
all
numbers
except
for
the
set
of
integers
coming
from
the
least
significant
bits
cacm
august
1961
kuehn
h
g
ca610806
jb
march
16
1978
10
09
pm
298
5
298
298
5
298
298
5
298
</TEXT>
</DOC>
<DOC>
<DOCNO>299</DOCNO>
<TEXT>
a
generalized
polyphase
merge
algorithm
cacm
august
1961
reynolds
s
w
ca610805
jb
march
16
1978
10
10
pm
299
5
299
299
5
299
299
5
299
2146
5
299
479
5
299
862
5
299
863
5
299
861
6
299
862
6
299
863
6
299
264
6
299
299
6
299
299
6
299
299
6
299
299
6
299
479
6
299
</TEXT>
</DOC>
<DOC>
<DOCNO>300</DOCNO>
<TEXT>
cobol
a
sample
problem
a
simplified
merchandise
control
problem
has
been
chosen
for
presenting
cobol
to
users
and
potential
users
of
computing
systems
a
mythical
department
store
e
language
bros
inc
is
programming
in
the
cobol
language
one
of
the
many
runs
on
its
computer
cacm
august
1961
mackinson
t
n
ca610804
jb
march
16
1978
10
12
pm
300
5
300
300
5
300
300
5
300
638
5
300
300
6
300
</TEXT>
</DOC>
<DOC>
<DOCNO>301</DOCNO>
<TEXT>
a
set
of
test
matrices
algorithm
52
cacm
august
1961
gilbert
h
e
ca610803
jb
march
16
1978
10
13
pm
301
5
301
301
5
301
301
5
301
</TEXT>
</DOC>
<DOC>
<DOCNO>302</DOCNO>
<TEXT>
augmentation
algorithm
68
cacm
august
1961
rice
h
g
ca610802
jb
march
16
1978
10
14
pm
302
5
302
302
5
302
302
5
302
</TEXT>
</DOC>
<DOC>
<DOCNO>303</DOCNO>
<TEXT>
some
basic
terminology
connected
with
mechanical
languages
and
their
processors
the
suggestions
in
this
paper
are
part
of
the
terminology
used
in
work
for
the
university
of
pennsylvania
office
of
computer
research
and
education
the
work
is
jointly
supported
by
the
national
science
foundation
and
the
air
force
office
of
scientific
research
cacm
august
1961
gorn
s
ca610801
jb
march
16
1978
10
16
pm
249
5
303
303
5
303
303
5
303
303
5
303
438
5
303
3185
5
303
196
6
303
224
6
303
249
6
303
303
6
303
303
6
303
303
6
303
51
6
303
77
6
303
438
6
303
</TEXT>
</DOC>
<DOC>
<DOCNO>304</DOCNO>
<TEXT>
nth
roots
of
a
complex
number
algorithm
53
cacm
july
1961
nestor
jr
c
w
ca610713
jb
march
16
1978
10
17
pm
304
5
304
304
5
304
304
5
304
</TEXT>
</DOC>
<DOC>
<DOCNO>305</DOCNO>
<TEXT>
cram
algorithm
67
cacm
july
1961
caffrey
j
ca610712
jb
march
16
1978
10
18
pm
305
5
305
305
5
305
305
5
305
</TEXT>
</DOC>
<DOC>
<DOCNO>306</DOCNO>
<TEXT>
invrs
algorithm
66
cacm
july
1961
caffery
j
ca610711
jb
march
16
1978
10
19
pm
306
5
306
306
5
306
306
5
306
</TEXT>
</DOC>
<DOC>
<DOCNO>307</DOCNO>
<TEXT>
find
algorithm
65
cacm
july
1961
hoare
c
a
r
ca610710
jb
march
16
1978
10
20
pm
307
5
307
307
5
307
307
5
307
2227
5
307
2783
5
307
3054
5
307
1175
6
307
1834
6
307
1880
6
307
1919
6
307
1969
6
307
1980
6
307
1997
6
307
307
6
307
307
6
307
307
6
307
308
6
307
309
6
307
309
6
307
2017
6
307
2679
6
307
776
6
307
</TEXT>
</DOC>
<DOC>
<DOCNO>308</DOCNO>
<TEXT>
quicksort
algorithm
64
cacm
july
1961
hoare
c
a
r
ca610709
jb
march
16
1978
10
21
pm
1175
5
308
1919
5
308
1969
5
308
1997
5
308
308
5
308
308
5
308
308
5
308
2191
5
308
2388
5
308
2679
5
308
3054
5
308
3121
5
308
864
6
308
864
6
308
970
6
308
1175
6
308
1175
6
308
1175
6
308
1175
6
308
1190
6
308
1228
6
308
1312
6
308
1880
6
308
1919
6
308
1969
6
308
1969
6
308
1969
6
308
1980
6
308
1997
6
308
1997
6
308
307
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
308
6
308
309
6
308
309
6
308
309
6
308
309
6
308
309
6
308
2017
6
308
2042
6
308
2456
6
308
2679
6
308
2709
6
308
74
6
308
3187
6
308
3187
6
308
507
6
308
716
6
308
776
6
308
783
6
308
</TEXT>
</DOC>
<DOC>
<DOCNO>309</DOCNO>
<TEXT>
partition
algorithm
63
cacm
july
1961
hoare
c
a
r
ca610708
jb
march
16
1978
10
22
pm
1919
5
309
309
5
309
309
5
309
309
5
309
2191
5
309
2388
5
309
2783
5
309
2784
5
309
3054
5
309
3121
5
309
864
5
309
864
6
309
1175
6
309
1175
6
309
1312
6
309
1729
6
309
232
6
309
1880
6
309
1919
6
309
1969
6
309
1980
6
309
1997
6
309
307
6
309
307
6
309
308
6
309
308
6
309
308
6
309
308
6
309
308
6
309
309
6
309
309
6
309
309
6
309
309
6
309
309
6
309
309
6
309
309
6
309
309
6
309
2017
6
309
2456
6
309
2679
6
309
2709
6
309
74
6
309
74
6
309
2783
6
309
3187
6
309
776
6
309
</TEXT>
</DOC>
<DOC>
<DOCNO>310</DOCNO>
<TEXT>
a
set
of
associate
legendre
polynomials
of
the
second
kind
algorithm
62
cacm
july
1961
herndon
j
r
ca610707
jb
march
16
1978
10
23
pm
1222
5
310
310
5
310
310
5
310
310
5
310
1130
6
310
245
6
310
310
6
310
</TEXT>
</DOC>
<DOC>
<DOCNO>311</DOCNO>
<TEXT>
procedures
for
range
arithmetic
algorithm
61
cacm
july
1961
gibb
a
ca610706
jb
march
16
1978
10
25
pm
1524
5
311
1931
5
311
311
5
311
311
5
311
311
5
311
2214
5
311
2544
5
311
879
6
311
1177
6
311
1197
6
311
1524
6
311
311
6
311
311
6
311
311
6
311
311
6
311
2214
6
311
</TEXT>
</DOC>
<DOC>
<DOCNO>312</DOCNO>
<TEXT>
a
further
note
on
approximating
e
x
cacm
july
1961
olivier
d
ca610705
jb
march
16
1978
10
26
pm
312
5
312
312
5
312
312
5
312
</TEXT>
</DOC>
<DOC>
<DOCNO>313</DOCNO>
<TEXT>
an
iterative
method
for
inversion
of
power
series
cacm
july
1961
bramhall
j
n
ca610704
jb
march
16
1978
10
26
pm
313
5
313
313
5
313
313
5
313
</TEXT>
</DOC>
<DOC>
<DOCNO>314</DOCNO>
<TEXT>
a
divisionless
method
of
integer
conversion
cacm
july
1961
clarkson
w
k
prince
b
m
ca610703
jb
march
16
1978
10
27
pm
314
5
314
314
5
314
314
5
314
</TEXT>
</DOC>
<DOC>
<DOCNO>315</DOCNO>
<TEXT>
solution
of
tridiagonal
matrices
cacm
july
1961
wenrick
r
c
ca610702
jb
march
16
1978
10
28
pm
315
5
315
315
5
315
315
5
315
</TEXT>
</DOC>
<DOC>
<DOCNO>316</DOCNO>
<TEXT>
an
algorithm
for
equivalence
declarations
cacm
july
1961
arden
b
w
galler
a
graham
r
m
ca610701
jb
march
16
1978
10
29
pm
1072
5
316
1781
5
316
316
5
316
316
5
316
316
5
316
123
6
316
196
6
316
919
6
316
990
6
316
1007
6
316
1046
6
316
1131
6
316
1139
6
316
1140
6
316
1149
6
316
1198
6
316
1215
6
316
1223
6
316
1265
6
316
1303
6
316
1323
6
316
1358
6
316
1366
6
316
1421
6
316
1460
6
316
1462
6
316
1463
6
316
1467
6
316
1468
6
316
1477
6
316
1491
6
316
1496
6
316
1531
6
316
1535
6
316
1565
6
316
1601
6
316
1602
6
316
1613
6
316
1614
6
316
1626
6
316
1641
6
316
1787
6
316
1788
6
316
205
6
316
224
6
316
249
6
316
288
6
316
316
6
316
316
6
316
381
6
316
398
6
316
11
6
316
404
6
316
410
6
316
463
6
316
464
6
316
483
6
316
3184
6
316
3188
6
316
584
6
316
600
6
316
680
6
316
691
6
316
763
6
316
799
6
316
</TEXT>
</DOC>
<DOC>
<DOCNO>317</DOCNO>
<TEXT>
on
the
approximation
of
curves
by
line
segments
using
dynamic
programming
cacm
june
1961
bellman
r
ca610608
jb
march
16
1978
10
31
pm
317
5
317
317
5
317
317
5
317
497
5
317
867
5
317
317
6
317
317
6
317
497
6
317
</TEXT>
</DOC>
<DOC>
<DOCNO>318</DOCNO>
<TEXT>
combat
vehicle
firing
stability
active
suspension
cacm
june
1961
fischer
c
m
ca610607
jb
march
16
1978
10
32
pm
318
5
318
318
5
318
318
5
318
</TEXT>
</DOC>
<DOC>
<DOCNO>319</DOCNO>
<TEXT>
on
a
class
of
iteration
formulas
and
some
historical
notes
the
class
of
iteration
formulas
obtainable
by
rational
approximations
of
euler
formula
is
derived
with
the
corresponding
error
estimates
some
historical
notes
on
iterative
procedures
are
followed
by
a
derivation
of
euler
formula
with
the
associated
error
estimate
in
a
new
notation
which
simplifies
the
error
estimate
and
suggests
generalizations
the
final
section
considers
the
pade
approximants
to
the
euler
polynomial
and
shows
how
a
number
of
known
formulas
may
be
derived
from
this
unified
approach
there
is
a
short
discussion
of
the
best
formula
cacm
june
1961
traub
j
f
ca610606
jb
march
16
1978
10
36
pm
319
4
319
319
5
319
319
5
319
319
5
319
380
5
319
</TEXT>
</DOC>
<DOC>
<DOCNO>320</DOCNO>
<TEXT>
logic
structure
tables
logic
tables
are
an
excellent
way
of
developing
and
expressing
the
logic
required
in
procedures
operations
systems
and
circuits
a
set
of
rules
for
writing
and
using
logic
tables
is
explained
by
means
of
some
simple
examples
then
the
logic
structure
of
a
vending
machine
is
given
in
which
two
logic
tables
are
used
logic
tables
are
two
dimensional
in
nature
enabling
us
to
fully
express
and
consider
both
the
sequential
and
parallel
aspects
of
logic
they
can
be
compiled
directly
into
a
computer
program
and
so
eliminate
the
need
for
flow
charting
and
hand
coding
cacm
june
1961
cantrell
h
n
king
j
king
f
e
h
ca610605
jb
march
16
1978
10
40
pm
1237
5
320
250
5
320
320
5
320
320
5
320
320
5
320
250
6
320
320
6
320
320
6
320
753
6
320
</TEXT>
</DOC>
<DOC>
<DOCNO>321</DOCNO>
<TEXT>
algol
60
confidential
the
algol
60
report
when
first
encountered
seems
to
describe
a
very
complex
language
which
will
be
difficult
to
learn
the
metalinguistic
formulae
admirably
serve
the
purpose
of
precisely
specifying
a
language
but
they
are
certainly
not
very
readable
for
a
beginner
however
experience
has
shown
that
once
the
report
is
explained
it
is
in
fact
easy
to
learn
algol
and
to
write
algorithms
in
it
the
language
is
so
general
and
powerful
it
can
handle
an
enormous
class
of
problems
it
is
not
hard
to
learn
those
parts
of
algol
present
in
other
compiler
languages
how
to
write
assignment
and
go
to
and
for
statements
etc
indeed
a
lot
of
the
unnecessary
restrictions
imposed
by
other
compiling
languages
have
finally
been
lifted
but
algol
also
allows
many
unobvious
things
to
be
written
as
we
will
see
later
and
herein
lies
a
problem
algol
seems
to
have
become
too
general
so
many
restrictions
have
been
lifted
that
a
lot
of
technical
details
crop
up
which
are
hard
to
learn
and
to
use
correctly
in
this
paper
some
of
the
more
obscure
features
of
the
language
are
considered
and
their
usefulness
is
discussed
remarks
are
based
on
the
authors
interpretations
of
the
algol
60
report
cacm
june
1961
knuth
d
e
merner
j
n
ca610604
jb
march
16
1978
10
48
pm
249
4
321
254
4
321
272
4
321
1102
4
321
1109
4
321
1140
4
321
1188
4
321
1234
4
321
1234
4
321
1306
4
321
1464
4
321
1491
4
321
1767
4
321
1781
4
321
1787
4
321
1949
4
321
321
4
321
321
4
321
321
4
321
321
4
321
2059
4
321
2126
4
321
435
4
321
437
4
321
463
4
321
483
4
321
491
4
321
2732
4
321
560
4
321
583
4
321
3073
4
321
627
4
321
631
4
321
632
4
321
642
4
321
644
4
321
653
4
321
680
4
321
761
4
321
762
4
321
763
4
321
123
4
321
140
4
321
919
4
321
989
4
321
196
5
321
1234
5
321
254
5
321
321
5
321
321
5
321
321
5
321
400
5
321
401
5
321
402
5
321
196
6
321
944
6
321
321
6
321
321
6
321
385
6
321
387
6
321
400
6
321
402
6
321
404
6
321
3184
6
321
729
6
321
</TEXT>
</DOC>
<DOC>
<DOCNO>322</DOCNO>
<TEXT>
operational
compatibility
of
systems
conventions
the
general
standards
committee
of
the
share
organization
has
devoted
considerable
effort
to
the
problem
of
operating
a
computer
efficiently
in
view
of
the
growing
number
of
programming
systems
available
each
of
these
programming
systems
has
been
coded
to
utilize
a
fixed
set
of
hardware
components
without
recognizing
the
fact
that
others
may
be
occupying
a
storage
medium
required
by
the
first
these
incompatibilities
are
currently
resolved
by
manually
setting
up
the
computer
for
each
system
as
required
the
following
set
of
conventions
is
being
considered
to
minimize
computer
set
up
time
they
are
of
sufficiently
broad
interest
that
we
feel
other
computer
users
should
be
aware
of
them
george
f
ryckman
chairman
cacm
june
1961
bright
h
s
ca610603
jb
march
16
1978
10
55
pm
322
5
322
322
5
322
322
5
322
</TEXT>
</DOC>
<DOC>
<DOCNO>323</DOCNO>
<TEXT>
the
state
of
digital
computer
technology
in
europe
cacm
june
1961
blachman
n
m
ca610602
jb
march
16
1978
10
56
pm
323
4
323
689
4
323
1349
5
323
217
5
323
323
5
323
323
5
323
323
5
323
689
5
323
217
6
323
236
6
323
323
6
323
323
6
323
83
6
323
415
6
323
3197
6
323
</TEXT>
</DOC>
<DOC>
<DOCNO>324</DOCNO>
<TEXT>
romberg
integration
algorithm
60
cacm
june
1961
bauer
f
l
ca610601
jb
march
16
1978
10
57
pm
1352
5
324
1982
5
324
324
5
324
324
5
324
324
5
324
2040
5
324
1
6
324
834
6
324
872
6
324
1040
6
324
1092
6
324
1241
6
324
1241
6
324
1273
6
324
1273
6
324
1273
6
324
1352
6
324
1356
6
324
1883
6
324
324
6
324
324
6
324
324
6
324
429
6
324
570
6
324
621
6
324
621
6
324
786
6
324
</TEXT>
</DOC>
<DOC>
<DOCNO>325</DOCNO>
<TEXT>
numerical
solution
of
the
polynomial
equation
algorithm
30
cacm
may
1961
alexander
w
j
ca610509
jb
march
16
1978
10
58
pm
325
5
325
325
5
325
325
5
325
</TEXT>
</DOC>
<DOC>
<DOCNO>326</DOCNO>
<TEXT>
mathsort
algorithm
23
cacm
may
1961
ranshaw
r
w
ca610508
jb
march
16
1978
10
59
pm
326
5
326
326
5
326
326
5
326
</TEXT>
</DOC>
<DOC>
<DOCNO>327</DOCNO>
<TEXT>
zeros
of
a
real
polynomial
by
resultant
procedure
algorithm
59
cacm
may
1961
bareiss
e
h
fisherkeller
m
a
ca610507
jb
march
16
1978
11
01
pm
1667
5
327
327
5
327
327
5
327
327
5
327
178
6
327
1242
6
327
327
6
327
</TEXT>
</DOC>
<DOC>
<DOCNO>328</DOCNO>
<TEXT>
matrix
inversion
algorithm
58
cacm
may
1961
cohen
d
ca610506
jb
march
16
1978
11
03
pm
328
5
328
328
5
328
328
5
328
</TEXT>
</DOC>
<DOC>
<DOCNO>329</DOCNO>
<TEXT>
automatic
abstracting
and
indexing
survey
and
recommendations
in
preparation
for
the
widespread
use
of
automatic
scanners
which
will
read
documents
and
transmit
their
contents
to
other
machines
for
analysis
this
report
presents
a
new
concept
in
automatic
analysis
the
relative
frequency
approach
to
measuring
the
significance
of
words
word
groups
and
sentences
the
relative
frequency
approach
is
discussed
in
detail
as
is
its
application
to
problems
of
automatic
indexing
and
automatic
abstracting
included
in
the
report
is
a
summary
of
automatic
analysis
studies
published
as
of
the
date
of
writing
conclusions
are
that
point
toward
more
sophisticated
mathematical
and
linguistic
techniques
for
the
solution
of
problems
of
automatic
analysis
cacm
may
1961
edmundson
h
p
wyllys
r
e
ca610505
jb
march
16
1978
11
08
pm
1087
5
329
329
5
329
329
5
329
329
5
329
634
5
329
329
6
329
329
6
329
</TEXT>
</DOC>
<DOC>
<DOCNO>330</DOCNO>
<TEXT>
a
method
for
evaluating
the
area
of
the
normal
function
cacm
may
1961
baker
f
b
ca610504
jb
march
16
1978
11
09
pm
330
5
330
330
5
330
330
5
330
</TEXT>
</DOC>
<DOC>
<DOCNO>331</DOCNO>
<TEXT>
successive
approximations
and
computer
storage
problems
in
ordinary
differential
equations
cacm
may
1961
bellman
r
ca610503
jb
march
16
1978
11
10
pm
331
5
331
331
5
331
331
5
331
</TEXT>
</DOC>
<DOC>
<DOCNO>332</DOCNO>
<TEXT>
an
indirect
chaining
method
for
addressing
on
secondary
keys
methods
for
entering
random
access
files
on
the
basis
of
one
key
are
briefly
surveyed
the
widely
used
chaining
method
based
on
a
pseudo
random
key
transformation
is
reviewed
in
more
detail
an
efficient
generalization
of
the
chaining
method
which
permits
recovery
on
additional
keys
is
then
presented
cacm
may
1961
johnson
l
r
ca610502
jb
march
16
1978
11
13
pm
911
5
332
1271
5
332
1785
5
332
332
5
332
332
5
332
332
5
332
2543
5
332
2552
5
332
911
6
332
911
6
332
1785
6
332
1785
6
332
1786
6
332
1973
6
332
332
6
332
332
6
332
332
6
332
332
6
332
332
6
332
2107
6
332
2109
6
332
2203
6
332
492
6
332
492
6
332
</TEXT>
</DOC>
<DOC>
<DOCNO>333</DOCNO>
<TEXT>
design
of
an
improved
transmission
data
processing
code
cacm
may
1961
bemer
r
w
smith
jr
h
j
williams
jr
f
a
ca610501
jb
march
16
1978
11
14
pm
333
4
333
230
5
333
333
5
333
333
5
333
333
5
333
</TEXT>
</DOC>
<DOC>
<DOCNO>334</DOCNO>
<TEXT>
division
and
square
root
in
the
quater
imaginary
number
system
cacm
april
1961
nadler
m
ca610334
jb
march
16
1978
11
16
pm
334
5
334
334
5
334
334
5
334
</TEXT>
</DOC>
<DOC>
<DOCNO>335</DOCNO>
<TEXT>
some
numerical
experiments
using
newton
method
for
nonlinear
parabolic
and
ellipticboundary
value
problems
using
a
generalization
of
newton
method
a
nonlinear
parabolic
equation
of
the
form
u
t
u
xx
g
u
and
a
nonlinear
elliptic
equation
u
xx
u
yy
exp
u
are
solved
numerically
comparison
of
these
results
with
results
obtained
using
the
picard
iteration
procedure
show
that
in
many
cases
the
quisi
linearization
method
offers
substantial
advantages
in
both
time
and
accuracy
cacm
april
1961
bellman
r
juncosa
m
l
kalaba
r
ca610433
jb
march
16
1978
11
20
pm
335
5
335
335
5
335
335
5
335
</TEXT>
</DOC>
<DOC>
<DOCNO>336</DOCNO>
<TEXT>
a
practical
technique
for
the
determination
of
the
optimum
relaxation
factor
of
the
successive
over
relaxation
method
cacm
april
1961
kulsrud
h
e
ca610432
jb
march
16
1978
11
27
pm
336
5
336
336
5
336
336
5
336
</TEXT>
</DOC>
<DOC>
<DOCNO>337</DOCNO>
<TEXT>
further
survey
of
punched
card
codes
cacm
april
1961
ross
h
m
ca610431
jb
march
16
1978
11
34
pm
337
5
337
337
5
337
337
5
337
</TEXT>
</DOC>
<DOC>
<DOCNO>338</DOCNO>
<TEXT>
grout
ii
algorithm
43
cacm
april
1961
thacher
jr
h
ca610430
jb
march
16
1978
11
35
pm
338
5
338
338
5
338
338
5
338
</TEXT>
</DOC>
<DOC>
<DOCNO>339</DOCNO>
<TEXT>
real
exponential
integral
algorithm
20
cacm
april
1961
alexander
w
j
thacher
jr
h
c
ca610429
jb
march
16
1978
11
36
pm
339
5
339
339
5
339
339
5
339
</TEXT>
</DOC>
<DOC>
<DOCNO>340</DOCNO>
<TEXT>
legendre
polynomial
algorithm
13
cacm
april
1961
herndon
j
ca610428
jb
march
16
1978
11
37
pm
1611
5
340
340
5
340
340
5
340
340
5
340
1295
6
340
340
6
340
</TEXT>
</DOC>
<DOC>
<DOCNO>341</DOCNO>
<TEXT>
chebyschev
polynomial
algorithm
10
cacm
april
1961
herndon
j
ca610427
jb
march
16
1978
11
38
pm
341
5
341
341
5
341
341
5
341
</TEXT>
</DOC>
<DOC>
<DOCNO>342</DOCNO>
<TEXT>
solution
of
polynomial
equation
by
barstow
hitchcock
algorithm
3
cacm
april
1961
herndon
j
ca610426
jb
march
16
1978
11
39
pm
342
5
342
342
5
342
342
5
342
</TEXT>
</DOC>
<DOC>
<DOCNO>343</DOCNO>
<TEXT>
on
frequently
occurring
errors
in
algol
60
programs
algorithm
25
cacm
april
1961
herndon
j
ca610425
jb
march
16
1978
11
40
pm
343
5
343
343
5
343
343
5
343
</TEXT>
</DOC>
<DOC>
<DOCNO>344</DOCNO>
<TEXT>
ber
or
bei
function
algorithm
57
cacm
april
1961
herndon
j
r
ca610424
jb
march
16
1978
11
42
pm
344
5
344
344
5
344
344
5
344
</TEXT>
</DOC>
<DOC>
<DOCNO>345</DOCNO>
<TEXT>
complete
elliptic
integral
of
the
second
kind
algorithm
56
cacm
april
1961
herndon
j
r
ca610423
jb
march
16
197811
43
pm
345
5
345
345
5
345
345
5
345
</TEXT>
</DOC>
<DOC>
<DOCNO>346</DOCNO>
<TEXT>
complete
elliptic
integral
of
the
first
kind
algorithm
55
cacm
april
1961
herndon
j
r
ca610422
jb
march
16
1978
11
44
pm
346
5
346
346
5
346
346
5
346
</TEXT>
</DOC>
<DOC>
<DOCNO>347</DOCNO>
<TEXT>
gamma
function
for
range
1
to
2
algorithm
54
cacm
april
1961
herndon
j
r
ca610421
jb
march
16
1978
11
45
pm
347
5
347
347
5
347
347
5
347
</TEXT>
</DOC>
<DOC>
<DOCNO>348</DOCNO>
<TEXT>
nth
roots
of
a
complex
number
algorithm
53
cacm
april
1961
herndon
j
r
ca610420
jb
march
16
1978
11
47
pm
348
5
348
348
5
348
348
5
348
</TEXT>
</DOC>
<DOC>
<DOCNO>349</DOCNO>
<TEXT>
a
set
of
test
matrices
cacm
april
1961
herndon
j
r
ca610419
jb
march
16
1978
11
47
pm
349
5
349
349
5
349
349
5
349
</TEXT>
</DOC>
<DOC>
<DOCNO>350</DOCNO>
<TEXT>
adjust
inverse
of
a
matrix
when
an
element
is
perturbed
algorithm
51
cacm
april
1961
herndon
j
r
ca610418
jb
march
16
1978
11
49
pm
350
5
350
350
5
350
350
5
350
</TEXT>
</DOC>
<DOC>
<DOCNO>351</DOCNO>
<TEXT>
inverse
of
a
finite
segment
of
the
hilbert
matrix
algorithm
50
cacm
april
1961
herndon
j
r
ca610417
jb
march
16
1978
11
50
pm
351
5
351
351
5
351
351
5
351
</TEXT>
</DOC>
<DOC>
<DOCNO>352</DOCNO>
<TEXT>
spherical
neumant
function
algorithm
49
cacm
april
1961
herndon
j
r
ca610416
jb
march
16
1978
11
51
pm
352
5
352
352
5
352
352
5
352
</TEXT>
</DOC>
<DOC>
<DOCNO>353</DOCNO>
<TEXT>
logarithm
of
a
complex
number
algorithm
48
cacm
april
1961
herndon
j
r
ca610415
jb
march
16
1978
11
53
pm
353
5
353
353
5
353
353
5
353
</TEXT>
</DOC>
<DOC>
<DOCNO>354</DOCNO>
<TEXT>
associated
legendre
functions
of
the
first
kind
for
real
or
imaginary
arguments
algorithm
47
cacm
april
1961
herndon
j
r
ca610414
jb
march
16
1978
11
57
pm
354
5
354
354
5
354
354
5
354
</TEXT>
</DOC>
<DOC>
<DOCNO>355</DOCNO>
<TEXT>
exponential
of
a
complex
number
algorithm
46
cacm
april
1961
herndon
j
r
ca610413
jb
march
16
1978
11
59
pm
355
5
355
355
5
355
355
5
355
</TEXT>
</DOC>
<DOC>
<DOCNO>356</DOCNO>
<TEXT>
interest
algorithm
45
cacm
april
1961
ingerman
p
z
ca610412
jb
march
17
1978
12
00
am
356
5
356
356
5
356
356
5
356
</TEXT>
</DOC>
<DOC>
<DOCNO>357</DOCNO>
<TEXT>
bessel
functions
computed
recursively
algorithm
44
cacm
april
1961
wojcicki
m
e
ca610411
jb
march
17
1978
12
01
am
357
5
357
357
5
357
357
5
357
</TEXT>
</DOC>
<DOC>
<DOCNO>358</DOCNO>
<TEXT>
crout
with
pivoting
ii
algorithm
43
cacm
april
1961
thacher
jr
h
c
ca610410
jb
march
17
1978
12
02
am
358
5
358
358
5
358
358
5
358
</TEXT>
</DOC>
<DOC>
<DOCNO>359</DOCNO>
<TEXT>
invert
algorithm
42
cacm
april
1961
wood
t
c
ca610409
jb
march
17
1978
12
03
am
359
5
359
359
5
359
359
5
359
</TEXT>
</DOC>
<DOC>
<DOCNO>360</DOCNO>
<TEXT>
evaluation
of
determinant
algorithm
41
cacm
april
1961
solomon
j
g
ca610408
jb
march
17
1978
12
04
am
1946
5
360
360
5
360
360
5
360
360
5
360
878
6
360
902
6
360
1093
6
360
1177
6
360
1387
6
360
1393
6
360
360
6
360
731
6
360
</TEXT>
</DOC>
<DOC>
<DOCNO>361</DOCNO>
<TEXT>
programmed
error
correction
on
a
decimal
computer
cacm
april
1961
weinberg
g
m
ca610407
jb
march
17
1978
12
05
am
361
4
361
108
5
361
361
5
361
361
5
361
361
5
361
</TEXT>
</DOC>
<DOC>
<DOCNO>362</DOCNO>
<TEXT>
table
look
at
techniques
cacm
april
1961
sherman
p
m
ca610406
jb
march
17
1978
12
08
am
362
4
362
2952
4
362
142
5
362
362
5
362
362
5
362
362
5
362
</TEXT>
</DOC>
<DOC>
<DOCNO>363</DOCNO>
<TEXT>
on
approximating
transcendental
numbers
by
continued
fractions
cacm
april
1961
karst
e
ca610405
jb
march
17
1978
12
09
am
363
5
363
363
5
363
363
5
363
</TEXT>
</DOC>
<DOC>
<DOCNO>364</DOCNO>
<TEXT>
on
the
compilation
of
subscripted
variables
cacm
april
1961
nather
r
e
ca610404
jb
march
17
1978
12
10
am
222
4
364
224
4
364
267
4
364
1134
4
364
1139
4
364
1141
4
364
1141
4
364
1215
4
364
1223
4
364
1647
4
364
1781
4
364
1787
4
364
1792
4
364
364
4
364
364
4
364
364
4
364
364
4
364
364
4
364
405
4
364
405
4
364
438
4
364
438
4
364
561
4
364
44
4
364
763
4
364
100
5
364
224
5
364
364
5
364
364
5
364
364
5
364
44
5
364
77
5
364
98
5
364
</TEXT>
</DOC>
<DOC>
<DOCNO>365</DOCNO>
<TEXT>
bessel
functions
of
integral
order
and
complex
argument
cacm
april
1961
gray
m
c
ca610403
jb
march
17
1978
12
13
am
365
5
365
365
5
365
365
5
365
</TEXT>
</DOC>
<DOC>
<DOCNO>366</DOCNO>
<TEXT>
eigenvalues
of
a
symmetric
3
x
3
matrix
cacm
april
1961
smith
o
k
ca610402
jb
march
17
1978
12
14
am
366
5
366
366
5
366
366
5
366
</TEXT>
</DOC>
<DOC>
<DOCNO>367</DOCNO>
<TEXT>
topological
ordering
of
a
list
of
randomly
numbered
elements
of
a
network
a
network
of
directed
line
segments
free
of
circular
elements
is
assumed
the
lines
are
identified
by
their
terminal
nodes
and
the
nodes
are
assumed
to
be
numbered
by
a
non
topological
system
given
a
list
of
these
lines
in
numeric
order
a
simple
technique
can
be
used
to
create
at
high
speed
a
list
in
topological
order
cacm
april
1961
lasser
d
j
ca610401
jb
march
17
1978
12
17
am
1050
5
367
1226
5
367
367
5
367
367
5
367
367
5
367
441
5
367
758
5
367
849
6
367
106
6
367
209
6
367
367
6
367
367
6
367
367
6
367
367
6
367
441
6
367
627
6
367
</TEXT>
</DOC>
<DOC>
<DOCNO>368</DOCNO>
<TEXT>
real
zeros
of
an
arbitrary
function
algorithm
25
cacm
march
1961
collinge
r
m
ca610314
jb
march
17
1978
12
31
am
368
5
368
368
5
368
368
5
368
</TEXT>
</DOC>
<DOC>
<DOCNO>369</DOCNO>
<TEXT>
crout
with
pivoting
algorithm
16
cacm
march
1961
thacher
jr
h
c
ca610313
jb
march
17
1978
12
32
am
369
5
369
369
5
369
369
5
369
</TEXT>
</DOC>
<DOC>
<DOCNO>370</DOCNO>
<TEXT>
bisection
routine
algorithm
4
cacm
march
1961
rader
p
j
ca610312
jb
march
17
1978
12
33
am
370
5
370
370
5
370
370
5
370
</TEXT>
</DOC>
<DOC>
<DOCNO>371</DOCNO>
<TEXT>
remarks
on
algorithms
2
and
3
algorithm
15
and
algorithms
25
and
26
cacm
march
1961
wilkinson
j
h
ca610311
jb
march
17
1978
12
35
am
371
5
371
371
5
371
371
5
371
</TEXT>
</DOC>
<DOC>
<DOCNO>372</DOCNO>
<TEXT>
critical
path
scheduling
algorithm
40
cacm
march
1961
leavenworth
b
ca610310
jb
march
17
1978
12
36
am
372
5
372
372
5
372
372
5
372
</TEXT>
</DOC>
<DOC>
<DOCNO>373</DOCNO>
<TEXT>
correlation
coefficients
with
matrix
multiplication
algorithm
39
cacm
march
1961
sassouni
p
ca610309
jb
march
17
1978
12
37
am
373
5
373
373
5
373
373
5
373
</TEXT>
</DOC>
<DOC>
<DOCNO>374</DOCNO>
<TEXT>
telescope2
algorithm
38
cacm
march
1961
brons
k
a
ca610308
jb
march
17
1978
12
38
am
374
5
374
374
5
374
374
5
374
</TEXT>
</DOC>
<DOC>
<DOCNO>375</DOCNO>
<TEXT>
telescope1
algorithm
37
cacm
march
1961
brons
k
a
ca610307
jb
march
17
1978
12
39
am
375
5
375
375
5
375
375
5
375
</TEXT>
</DOC>
<DOC>
<DOCNO>376</DOCNO>
<TEXT>
tchebycheff
algorithm
36
cacm
march
1961
gianni
a
j
ca610306
jb
march
17
1978
12
40
am
1754
5
376
376
5
376
376
5
376
376
5
376
274
6
376
376
6
376
</TEXT>
</DOC>
<DOC>
<DOCNO>377</DOCNO>
<TEXT>
sieve
algorithm
35
cacm
march
1961
wood
t
c
ca610305
jb
march
17
1978
12
41
am
1841
5
377
377
5
377
377
5
377
377
5
377
2120
5
377
1537
6
377
1539
6
377
1539
6
377
1841
6
377
377
6
377
377
6
377
</TEXT>
</DOC>
<DOC>
<DOCNO>378</DOCNO>
<TEXT>
a
generalized
technique
for
symbol
manipulation
and
numerical
calculation
cacm
march
1961
ross
d
t
ca610304
jb
march
17
1978
12
42
am
1024
4
378
1050
4
378
1051
4
378
1102
4
378
1102
4
378
1132
4
378
1390
4
378
1486
4
378
1549
4
378
1706
4
378
1826
4
378
1878
4
378
378
4
378
378
4
378
378
4
378
2060
4
378
2155
4
378
2168
4
378
2719
4
378
2723
4
378
2838
4
378
2842
4
378
2855
4
378
2879
4
378
3008
4
378
3077
4
378
3080
4
378
3106
4
378
627
4
378
731
4
378
798
4
378
106
4
378
1051
5
378
208
5
378
209
5
378
210
5
378
1552
5
378
1665
5
378
1860
5
378
378
5
378
378
5
378
378
5
378
2155
5
378
1184
6
378
1366
6
378
1389
6
378
1389
6
378
1421
6
378
1421
6
378
1496
6
378
1626
6
378
1641
6
378
1781
6
378
1785
6
378
1786
6
378
210
6
378
210
6
378
378
6
378
378
6
378
378
6
378
378
6
378
378
6
378
2046
6
378
2060
6
378
406
6
378
3184
6
378
631
6
378
731
6
378
793
6
378
794
6
378
799
6
378
</TEXT>
</DOC>
<DOC>
<DOCNO>379</DOCNO>
<TEXT>
bitwise
operations
cacm
march
1961
strachey
c
ca610303
jb
march
17
1978
12
42
am
379
5
379
379
5
379
379
5
379
</TEXT>
</DOC>
<DOC>
<DOCNO>380</DOCNO>
<TEXT>
comparison
of
iterative
methods
for
the
calculation
of
nth
roots
three
iterative
methods
for
calculation
of
nth
roots
including
one
proposed
by
the
author
are
compared
in
two
ways
1
theoretical
convergence
estimates
are
given
2
a
new
macrocompiler
which
estimates
machine
running
time
is
used
to
compare
the
running
time
of
the
three
methods
for
a
variety
of
input
data
cacm
march
1961
traub
j
f
ca610302
jb
march
17
1978
12
45
am
319
5
380
380
5
380
380
5
380
380
5
380
380
6
380
</TEXT>
</DOC>
<DOC>
<DOCNO>381</DOCNO>
<TEXT>
an
alternate
form
of
the
uncol
diagram
cacm
march
1961
bratman
h
ca610301
jb
march
17
1978
12
46
am
1159
4
381
1988
4
381
381
4
381
1781
5
381
1988
5
381
381
5
381
381
5
381
381
5
381
14
5
381
123
6
381
196
6
381
919
6
381
990
6
381
1007
6
381
1046
6
381
1131
6
381
1139
6
381
1140
6
381
1149
6
381
1198
6
381
1215
6
381
1223
6
381
1265
6
381
1303
6
381
1323
6
381
1358
6
381
1366
6
381
1421
6
381
1460
6
381
1462
6
381
1463
6
381
1467
6
381
1468
6
381
1477
6
381
1491
6
381
1496
6
381
1496
6
381
1531
6
381
1535
6
381
1565
6
381
1601
6
381
1602
6
381
1613
6
381
1614
6
381
1626
6
381
1641
6
381
1787
6
381
1788
6
381
205
6
381
224
6
381
249
6
381
288
6
381
316
6
381
381
6
381
381
6
381
398
6
381
11
6
381
11
6
381
14
6
381
404
6
381
410
6
381
463
6
381
464
6
381
483
6
381
3184
6
381
3188
6
381
584
6
381
600
6
381
680
6
381
691
6
381
763
6
381
799
6
381
</TEXT>
</DOC>
<DOC>
<DOCNO>382</DOCNO>
<TEXT>
statistical
programs
at
the
university
of
north
carolina
cacm
february
1961
bush
n
ca610216
jb
march
17
1978
12
48
am
382
5
382
382
5
382
382
5
382
</TEXT>
</DOC>
<DOC>
<DOCNO>383</DOCNO>
<TEXT>
on
finding
minimum
routes
in
a
network
with
turn
penalties
cacm
february
1961
caldwell
t
ca610215
jb
march
17
1978
12
49
am
383
5
383
383
5
383
383
5
383
</TEXT>
</DOC>
<DOC>
<DOCNO>384</DOCNO>
<TEXT>
gamma
function
algorithm
34
cacm
february
1961
lipp
m
f
ca610214
jb
march
17
1978
12
49
am
384
5
384
384
5
384
384
5
384
</TEXT>
</DOC>
<DOC>
<DOCNO>385</DOCNO>
<TEXT>
factorial
algorithm
33
cacm
february
1961
lipp
m
f
ca610213
jb
march
17
1978
12
50
am
1234
5
385
385
5
385
385
5
385
385
5
385
944
6
385
321
6
385
385
6
385
400
6
385
402
6
385
404
6
385
3184
6
385
729
6
385
</TEXT>
</DOC>
<DOC>
<DOCNO>386</DOCNO>
<TEXT>
multint
algorithm
32
cacm
february
1961
freeman
jr
r
d
ca610212
jb
march
17
1978
12
52
am
1146
5
386
386
5
386
386
5
386
386
5
386
386
6
386
</TEXT>
</DOC>
<DOC>
<DOCNO>387</DOCNO>
<TEXT>
gamma
function
algorithm
31
cacm
february
1961
collinge
r
m
ca610211
jb
march
17
1978
12
53
am
254
5
387
387
5
387
387
5
387
387
5
387
196
6
387
321
6
387
387
6
387
</TEXT>
</DOC>
<DOC>
<DOCNO>388</DOCNO>
<TEXT>
solution
of
polynomial
equations
by
bairstow
hitchcock
method
algorithm
3
cacm
february
1961
vandergraft
j
s
ca610210
jb
march
17
1978
12
54
am
388
5
388
388
5
388
388
5
388
</TEXT>
</DOC>
<DOC>
<DOCNO>389</DOCNO>
<TEXT>
real
exponential
integral
algorithm
20
cacm
february
1961
peavy
s
ca610209
jb
march
17
1978
12
55
am
389
5
389
389
5
389
389
5
389
</TEXT>
</DOC>
<DOC>
<DOCNO>390</DOCNO>
<TEXT>
complex
exponential
integral
algorithm
13
cacm
february
1961
rader
p
j
thacher
jr
h
c
ca610208
jb
march
17
1978
12
56
am
390
5
390
390
5
390
390
5
390
</TEXT>
</DOC>
<DOC>
<DOCNO>391</DOCNO>
<TEXT>
the
bks
system
for
the
philco
2000
cacm
february
1961
smith
r
b
ca610207
jb
march
17
1978
12
57
am
391
5
391
391
5
391
391
5
391
</TEXT>
</DOC>
<DOC>
<DOCNO>392</DOCNO>
<TEXT>
comment
on
a
paper
on
parallel
processing
cacm
february
1961
nekora
m
r
ca610206
jb
march
17
1978
12
58
am
392
5
392
392
5
392
392
5
392
</TEXT>
</DOC>
<DOC>
<DOCNO>393</DOCNO>
<TEXT>
two
subroutines
for
symbol
manipulation
with
an
algebraic
compiler
cacm
february
1961
carr
iii
j
w
hanson
j
w
ca610205
jb
march
17
1978
12
59
am
393
5
393
393
5
393
393
5
393
561
5
393
393
6
393
77
6
393
</TEXT>
</DOC>
<DOC>
<DOCNO>394</DOCNO>
<TEXT>
multiple
programming
data
processing
cacm
february
1961
ryle
b
l
ca610204
jb
march
17
1978
1
00
am
394
5
394
394
5
394
394
5
394
</TEXT>
</DOC>
<DOC>
<DOCNO>395</DOCNO>
<TEXT>
multiple
precision
division
cacm
february
1961
rabinowitz
p
ca610202
jb
march
17
1978
1
01
am
395
5
395
395
5
395
395
5
395
</TEXT>
</DOC>
<DOC>
<DOCNO>396</DOCNO>
<TEXT>
automation
of
program
debugging
automatic
debugging
can
substantially
reduce
lead
time
between
the
coding
and
the
effective
use
of
a
complex
program
it
also
enforces
analysis
of
debugging
criteria
resulting
in
verifiably
accurate
programs
the
programmer
specifies
the
program
to
be
debugged
memory
areas
set
of
input
data
maximum
repetition
of
loops
and
checkpoint
information
for
each
set
of
data
the
executive
debugging
program
the
runs
the
program
to
be
debugged
performing
checking
functions
and
creating
a
trace
record
of
its
own
later
analysis
and
location
of
errors
applications
are
quite
flexible
and
the
system
can
be
used
alone
or
in
conjunction
with
other
debugging
techniques
cacm
july
1961
jacoby
k
layton
h
ca610714
es
march
17
1982
10
10
am
931
5
396
396
5
396
396
5
396
396
5
396
202
6
396
396
6
396
634
6
396
</TEXT>
</DOC>
<DOC>
<DOCNO>397</DOCNO>
<TEXT>
a
card
format
for
reference
files
in
information
processing
this
paper
proposes
a
card
format
suitable
for
a
variety
of
reference
files
in
information
processing
an
80
column
ibm
card
is
divided
into
two
fields
reference
material
field
columns
1
67
and
identification
field
columns
68
80
the
format
for
the
reference
material
is
flexible
while
the
format
for
the
identification
is
rigid
the
reference
material
includes
basically
an
index
title
source
class
summary
and
cross
reference
for
each
entry
the
identification
includes
basically
codes
for
a
matrix
of
descriptors
an
entry
number
and
the
kind
major
interest
and
source
of
the
reference
the
identification
also
provides
a
choice
to
identify
material
for
personal
as
well
as
general
files
since
this
card
format
is
sufficient
to
identify
the
material
normally
associated
with
reference
files
for
books
articles
programming
terms
hardware
terms
equipment
machine
systems
abbreviations
etc
it
is
suitable
as
a
standard
for
card
reference
files
in
information
processing
cacm
february
1961
grems
m
ca610201
jb
march
17
1978
1
08
am
929
5
397
397
5
397
397
5
397
397
5
397
397
6
397
</TEXT>
</DOC>
<DOC>
<DOCNO>398</DOCNO>
<TEXT>
the
slang
system
cacm
january
1961
sibley
r
a
ca610116
jb
march
17
1978
1
10
am
205
4
398
210
4
398
214
4
398
1982
4
398
398
4
398
642
4
398
669
4
398
100
4
398
123
4
398
164
4
398
1
5
398
1781
5
398
398
5
398
398
5
398
398
5
398
123
6
398
196
6
398
919
6
398
990
6
398
1007
6
398
1046
6
398
1131
6
398
1139
6
398
1140
6
398
1149
6
398
1198
6
398
1215
6
398
1223
6
398
1265
6
398
1303
6
398
1323
6
398
1358
6
398
1366
6
398
1421
6
398
1460
6
398
1462
6
398
1463
6
398
1467
6
398
1468
6
398
1477
6
398
1491
6
398
1496
6
398
1531
6
398
1535
6
398
1565
6
398
1601
6
398
1602
6
398
1613
6
398
1614
6
398
1626
6
398
1641
6
398
1787
6
398
1788
6
398
205
6
398
224
6
398
249
6
398
288
6
398
316
6
398
381
6
398
398
6
398
11
6
398
404
6
398
410
6
398
463
6
398
464
6
398
483
6
398
3184
6
398
3188
6
398
584
6
398
600
6
398
680
6
398
691
6
398
763
6
398
799
6
398
</TEXT>
</DOC>
<DOC>
<DOCNO>399</DOCNO>
<TEXT>
compiling
techniques
for
boolean
expressions
and
conditional
statements
in
algol
60
cacm
january
1961
huskey
h
d
wattenburg
w
h
ca610115
jb
march
17
1978
1
12
am
1139
5
399
1947
5
399
399
5
399
399
5
399
399
5
399
556
5
399
799
5
399
945
6
399
1134
6
399
1223
6
399
1248
6
399
224
6
399
399
6
399
399
6
399
399
6
399
399
6
399
82
6
399
404
6
399
404
6
399
438
6
399
464
6
399
631
6
399
</TEXT>
</DOC>
<DOC>
<DOCNO>400</DOCNO>
<TEXT>
comments
on
the
implementation
of
recursive
procedures
and
blocks
in
algol
60
cacm
january
1961
irons
e
t
feurzeig
w
ca610114
jb
march
17
1978
1
13
am
1234
5
400
321
5
400
400
5
400
400
5
400
400
5
400
196
6
400
944
6
400
321
6
400
385
6
400
400
6
400
400
6
400
401
6
400
402
6
400
402
6
400
404
6
400
3184
6
400
729
6
400
</TEXT>
</DOC>
<DOC>
<DOCNO>401</DOCNO>
<TEXT>
allocation
of
storage
for
arrays
in
algol
60
cacm
january
1961
sattley
k
ca610113
jb
march
17
1978
1
14
am
321
5
401
401
5
401
401
5
401
401
5
401
196
6
401
400
6
401
401
6
401
402
6
401
</TEXT>
</DOC>
<DOC>
<DOCNO>402</DOCNO>
<TEXT>
dynamic
declarations
cacm
january
1961
ingerman
p
z
ca610112
jb
march
17
1978
1
14
am
1234
5
402
321
5
402
402
5
402
402
5
402
402
5
402
196
6
402
944
6
402
321
6
402
385
6
402
400
6
402
400
6
402
401
6
402
402
6
402
402
6
402
404
6
402
3184
6
402
729
6
402
</TEXT>
</DOC>
<DOC>
<DOCNO>403</DOCNO>
<TEXT>
thunks
a
way
of
compiling
procedure
statements
with
some
comments
on
procedure
declarations
cacm
january
1961
ingerman
p
z
ca610111
jb
march
17
1978
1
16
am
403
5
403
403
5
403
403
5
403
</TEXT>
</DOC>
<DOC>
<DOCNO>404</DOCNO>
<TEXT>
a
syntax
directed
compiler
for
algol
60
cacm
january
1961
irons
e
t
ca610110
jb
march
17
1978
1
16
am
945
5
404
1046
5
404
1105
5
404
1139
5
404
1140
5
404
1234
5
404
1263
5
404
1265
5
404
1496
5
404
1781
5
404
1824
5
404
2126
5
404
2546
5
404
404
5
404
404
5
404
404
5
404
464
5
404
584
5
404
631
5
404
653
5
404
680
5
404
763
5
404
795
5
404
799
5
404
823
6
404
123
6
404
196
6
404
196
6
404
196
6
404
196
6
404
196
6
404
196
6
404
196
6
404
919
6
404
931
6
404
944
6
404
945
6
404
989
6
404
990
6
404
1007
6
404
1046
6
404
1131
6
404
1137
6
404
1139
6
404
1140
6
404
1141
6
404
1149
6
404
1198
6
404
1215
6
404
1223
6
404
1265
6
404
1303
6
404
1323
6
404
1358
6
404
1358
6
404
1366
6
404
1421
6
404
1460
6
404
1462
6
404
1463
6
404
1467
6
404
1468
6
404
1477
6
404
1477
6
404
1491
6
404
1491
6
404
1496
6
404
1531
6
404
1535
6
404
1565
6
404
1601
6
404
1602
6
404
1613
6
404
1614
6
404
1614
6
404
1614
6
404
1626
6
404
1641
6
404
1693
6
404
1781
6
404
1787
6
404
1788
6
404
205
6
404
224
6
404
224
6
404
224
6
404
249
6
404
265
6
404
288
6
404
316
6
404
321
6
404
381
6
404
385
6
404
398
6
404
399
6
404
399
6
404
11
6
404
2126
6
404
82
6
404
400
6
404
402
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
404
6
404
410
6
404
412
6
404
438
6
404
463
6
404
464
6
404
464
6
404
464
6
404
483
6
404
3184
6
404
3184
6
404
3184
6
404
3184
6
404
3184
6
404
3188
6
404
584
6
404
600
6
404
631
6
404
631
6
404
631
6
404
635
6
404
680
6
404
691
6
404
729
6
404
763
6
404
799
6
404
</TEXT>
</DOC>
<DOC>
<DOCNO>405</DOCNO>
<TEXT>
an
algorithm
for
coding
efficient
arithmetic
operations
most
existing
formula
translation
schemes
yield
inefficient
coding
a
method
is
described
which
reduces
the
number
of
store
and
fetch
operations
evaluates
constant
subexpressions
during
compilation
and
recognizes
many
equivalent
subexpressions
cacm
january
1961
floyd
r
w
ca610109
jb
march
17
1978
1
19
am
267
4
405
1134
4
405
1139
4
405
1141
4
405
1141
4
405
1215
4
405
1223
4
405
1647
4
405
1781
4
405
1787
4
405
1792
4
405
364
4
405
364
4
405
405
4
405
405
4
405
405
4
405
405
4
405
438
4
405
438
4
405
561
4
405
44
4
405
54
4
405
763
4
405
1223
5
405
224
5
405
1388
5
405
405
5
405
405
5
405
405
5
405
436
5
405
55
5
405
77
5
405
93
5
405
224
6
405
405
6
405
405
6
405
405
6
405
731
6
405
</TEXT>
</DOC>
<DOC>
<DOCNO>406</DOCNO>
<TEXT>
the
use
of
threaded
lists
in
constructing
a
combined
algol
and
machine
like
assembly
processor
cacm
january
1961
evans
jr
a
perlis
a
j
van
zoeren
h
ca610108
jb
march
17
1978
1
20
am
1051
5
406
1102
5
406
1549
5
406
406
5
406
406
5
406
406
5
406
106
6
406
196
6
406
1051
6
406
209
6
406
210
6
406
210
6
406
210
6
406
378
6
406
406
6
406
406
6
406
406
6
406
483
6
406
627
6
406
731
6
406
731
6
406
753
6
406
793
6
406
794
6
406
</TEXT>
</DOC>
<DOC>
<DOCNO>407</DOCNO>
<TEXT>
madcap
a
scientific
compiler
for
a
displayed
formula
textbook
language
cacm
january
1961
wells
m
b
ca610107
jb
march
17
1978
1
21
am
1083
5
407
1396
5
407
407
5
407
407
5
407
407
5
407
679
5
407
964
6
407
1028
6
407
1029
6
407
1083
6
407
1132
6
407
1214
6
407
1278
6
407
1334
6
407
1365
6
407
1386
6
407
1387
6
407
1388
6
407
1392
6
407
1393
6
407
1394
6
407
1395
6
407
1396
6
407
1397
6
407
1496
6
407
284
6
407
21
6
407
407
6
407
407
6
407
407
6
407
3184
6
407
3192
6
407
3193
6
407
3199
6
407
3200
6
407
3201
6
407
3202
6
407
3203
6
407
3204
6
407
561
6
407
730
6
407
730
6
407
</TEXT>
</DOC>
<DOC>
<DOCNO>408</DOCNO>
<TEXT>
the
internal
organization
of
the
mad
translator
cacm
january
1961
arden
b
w
galler
b
a
graham
r
m
ca610106
jb
march
17
1978
1
22
am
1134
5
408
1179
5
408
1861
5
408
408
5
408
408
5
408
408
5
408
830
6
408
1614
6
408
1781
6
408
17
6
408
77
6
408
408
6
408
408
6
408
408
6
408
</TEXT>
</DOC>
<DOC>
<DOCNO>409</DOCNO>
<TEXT>
cl
1
an
environment
for
a
compiler
a
flexible
large
scale
programming
system
to
facilitate
the
solution
of
information
processing
problems
and
to
provide
intercommunication
between
programs
and
or
programmers
has
been
developed
and
realized
on
the
ibm
709
7090
computer
the
system
is
based
on
a
master
file
concept
and
has
provisions
for
accepting
storing
and
retrieving
both
descriptions
and
instances
of
large
and
complex
data
sets
as
well
as
algorithms
defined
on
these
data
sets
both
data
and
algorithms
may
be
expressed
in
a
family
of
command
and
descriptive
languages
the
concept
of
distinct
data
descriptions
and
the
content
and
use
of
such
descriptions
are
discussed
in
some
detail
cacm
january
1961
cheatham
jr
t
e
collins
jr
g
o
leonard
g
f
ca610105
jb
march
17
1978
1
26
am
409
5
409
409
5
409
409
5
409
657
5
409
279
6
409
409
6
409
</TEXT>
</DOC>
<DOC>
<DOCNO>410</DOCNO>
<TEXT>
the
clip
translator
cacm
january
1961
englund
d
clark
e
ca610104
jb
march
17
1978
1
27
am
1781
5
410
410
5
410
410
5
410
410
5
410
669
5
410
1
6
410
123
6
410
196
6
410
919
6
410
990
6
410
1007
6
410
1046
6
410
1131
6
410
1139
6
410
1140
6
410
1149
6
410
1198
6
410
1215
6
410
1223
6
410
1265
6
410
1303
6
410
1323
6
410
1358
6
410
1366
6
410
1421
6
410
1460
6
410
1462
6
410
1463
6
410
1467
6
410
1468
6
410
1477
6
410
1491
6
410
1496
6
410
1531
6
410
1535
6
410
1565
6
410
1601
6
410
1602
6
410
1613
6
410
1614
6
410
1626
6
410
1641
6
410
1787
6
410
1788
6
410
205
6
410
224
6
410
249
6
410
288
6
410
316
6
410
381
6
410
398
6
410
11
6
410
404
6
410
410
6
410
410
6
410
463
6
410
464
6
410
483
6
410
3184
6
410
3184
6
410
3188
6
410
584
6
410
600
6
410
680
6
410
691
6
410
763
6
410
799
6
410
</TEXT>
</DOC>
<DOC>
<DOCNO>411</DOCNO>
<TEXT>
use
of
magnetic
tape
for
data
storage
in
the
oracle
algol
translator
cacm
january
1961
bottenbruch
h
ca610103
jb
march
17
1978
1
28
am
411
5
411
411
5
411
411
5
411
</TEXT>
</DOC>
<DOC>
<DOCNO>412</DOCNO>
<TEXT>
recursive
processes
and
algol
translation
cacm
january
1961
gray
a
a
ca610102
jb
march
17
1978
1
29
am
412
5
412
412
5
412
412
5
412
763
5
412
196
6
412
224
6
412
404
6
412
412
6
412
631
6
412
</TEXT>
</DOC>
<DOC>
<DOCNO>413</DOCNO>
<TEXT>
a
basic
compiler
for
arithmetic
expressions
cacm
january
1961
huskey
h
d
wattenburg
w
h
ca610101
jb
march
17
1978
1
30
am
413
5
413
413
5
413
413
5
413
</TEXT>
</DOC>
<DOC>
<DOCNO>414</DOCNO>
<TEXT>
ibm
1440
data
processing
system
features
five
new
units
the
ibm
1440
data
processing
system
announced
recently
by
the
international
business
machines
corporation
not
only
features
the
1311
disk
storage
drive
with
interchangeable
disk
packs
but
four
other
newly
developed
units
cacm
december
1961
wheeling
r
ca621225
jb
march
17
1978
4
30
pm
414
5
414
414
5
414
414
5
414
</TEXT>
</DOC>
<DOC>
<DOCNO>415</DOCNO>
<TEXT>
the
use
of
digital
computers
in
western
germany
cacm
december
1962
schuff
h
k
ca621224
jb
march
17
1978
4
32
pm
1349
5
415
415
5
415
415
5
415
415
5
415
236
6
415
323
6
415
83
6
415
415
6
415
</TEXT>
</DOC>
<DOC>
<DOCNO>416</DOCNO>
<TEXT>
multiple
shooting
method
for
two
point
boundary
value
problems
cacm
december
1962
morrison
d
d
riley
j
d
zancanaro
j
f
ca621223
jb
march
17
1978
4
33
pm
1049
5
416
416
5
416
416
5
416
416
5
416
416
6
416
</TEXT>
</DOC>
<DOC>
<DOCNO>417</DOCNO>
<TEXT>
legal
implications
of
computer
use
this
paper
points
out
a
variety
of
ways
computer
systems
used
in
business
and
industry
can
be
involved
in
legal
entanglements
and
suggests
that
computer
specialists
have
a
responsibility
to
call
for
assistance
in
forestalling
or
minimizing
those
entanglements
during
the
planning
stage
techniques
are
suggested
for
making
legal
clearance
effective
with
the
least
burden
on
the
new
technology
and
for
achieving
a
favorable
legal
climate
for
it
generally
computer
specialists
also
are
alerted
to
potential
opportunities
to
interpret
to
lawyers
the
technical
aspects
of
computer
systems
involved
in
legal
situations
cacm
december
1962
freed
r
n
ca621222
jb
march
17
1978
4
37
pm
417
5
417
417
5
417
417
5
417
</TEXT>
</DOC>
<DOC>
<DOCNO>418</DOCNO>
<TEXT>
random
algorithm
133
cacm
december
1962
behrenz
p
g
ca621221
jb
march
17
1978
4
38
pm
418
5
418
418
5
418
418
5
418
</TEXT>
</DOC>
<DOC>
<DOCNO>419</DOCNO>
<TEXT>
magic
square
algorithm
118
cacm
december
1962
thacher
jr
h
c
ca621220
jb
march
17
1978
4
52
pm
419
5
419
419
5
419
419
5
419
</TEXT>
</DOC>
<DOC>
<DOCNO>420</DOCNO>
<TEXT>
perm
algorithm
115
cacm
december
1962
phillips
e
s
ca621219
jb
march
17
1978
4
53
pm
420
5
420
420
5
420
420
5
420
</TEXT>
</DOC>
<DOC>
<DOCNO>421</DOCNO>
<TEXT>
position
of
point
relative
to
polygon
algorithm
112
cacm
december
1962
hacker
r
ca621218
jb
march
17
1978
4
54
pm
1804
5
421
2987
5
421
421
5
421
421
5
421
421
5
421
1326
6
421
1630
6
421
2125
6
421
2547
6
421
2633
6
421
421
6
421
421
6
421
524
6
421
524
6
421
</TEXT>
</DOC>
<DOC>
<DOCNO>422</DOCNO>
<TEXT>
combination
algorithm
94
cacm
december
1962
grench
r
e
ca621217
jb
march
17
1978
4
56
pm
422
5
422
422
5
422
422
5
422
</TEXT>
</DOC>
<DOC>
<DOCNO>423</DOCNO>
<TEXT>
matrix
inversion
algorithm
58
cacm
december
1962
behrenz
p
g
ca621216
jb
march
17
1978
4
57
pm
423
5
423
423
5
423
423
5
423
</TEXT>
</DOC>
<DOC>
<DOCNO>424</DOCNO>
<TEXT>
gamma
function
algorithm
31
cacm
december
1962
behrenz
p
g
ca621215
jb
march
17
1978
4
58
pm
424
5
424
424
5
424
424
5
424
</TEXT>
</DOC>
<DOC>
<DOCNO>425</DOCNO>
<TEXT>
complete
elliptic
integral
algorithm
149
cacm
december
1962
merner
j
n
ca621214
jb
march
17
1978
4
59
pm
425
5
425
425
5
425
425
5
425
</TEXT>
</DOC>
<DOC>
<DOCNO>426</DOCNO>
<TEXT>
term
of
magic
square
algorithm
148
cacm
december
1962
collison
d
m
ca621213
jb
march
17
1978
5
00
pm
426
5
426
426
5
426
426
5
426
</TEXT>
</DOC>
<DOC>
<DOCNO>427</DOCNO>
<TEXT>
psif
algorithm
147
cacm
december
1962
amit
d
ca621212
jb
march
17
1978
5
03
pm
427
5
427
427
5
427
427
5
427
</TEXT>
</DOC>
<DOC>
<DOCNO>428</DOCNO>
<TEXT>
multiple
integration
algorithm
146
cacm
december
1962
mckeeman
w
m
ca621211
jb
march
17
1978
5
04
pm
428
5
428
428
5
428
428
5
428
</TEXT>
</DOC>
<DOC>
<DOCNO>429</DOCNO>
<TEXT>
adaptive
nimerical
integration
by
simpson
rule
algorithm
145
cacm
december
1962
mckeeman
w
m
ca621210
jb
march
17
1978
5
06
pm
1352
5
429
2048
5
429
2074
5
429
2093
5
429
2550
5
429
429
5
429
429
5
429
429
5
429
834
6
429
834
6
429
834
6
429
834
6
429
872
6
429
872
6
429
872
6
429
1040
6
429
1092
6
429
1092
6
429
1241
6
429
1273
6
429
1298
6
429
1573
6
429
1573
6
429
324
6
429
2074
6
429
429
6
429
429
6
429
429
6
429
429
6
429
429
6
429
570
6
429
621
6
429
786
6
429
786
6
429
786
6
429
</TEXT>
</DOC>
<DOC>
<DOCNO>430</DOCNO>
<TEXT>
treesort2
algorithm
144
cacm
december
1962
kaupe
jr
a
f
ca621209
jb
march
17
1978
5
07
pm
430
5
430
430
5
430
430
5
430
</TEXT>
</DOC>
<DOC>
<DOCNO>431</DOCNO>
<TEXT>
treesort1
algorithm
143
cacm
december
1962
kaupe
jr
a
f
ca621208
jb
march
17
1978
5
08
pm
431
5
431
431
5
431
431
5
431
</TEXT>
</DOC>
<DOC>
<DOCNO>432</DOCNO>
<TEXT>
triangular
regression
algorithm
142
cacm
december
1962
hafley
w
l
lewis
j
s
ca621207
jb
march
17
1978
5
09
pm
432
5
432
432
5
432
432
5
432
</TEXT>
</DOC>
<DOC>
<DOCNO>433</DOCNO>
<TEXT>
fixed
world
length
arrays
in
variable
word
length
computers
cacm
december
1962
sonquist
j
a
ca621206
jb
march
17
1978
5
10
pm
433
5
433
433
5
433
433
5
433
</TEXT>
</DOC>
<DOC>
<DOCNO>434</DOCNO>
<TEXT>
character
manipulation
in
1620
fortran
ii
cacm
december
1962
poore
jr
j
h
ca621205
jb
march
17
1978
5
11
pm
434
5
434
434
5
434
434
5
434
</TEXT>
</DOC>
<DOC>
<DOCNO>435</DOCNO>
<TEXT>
a
decision
matrix
as
the
basis
for
a
simple
data
input
routine
currently
a
great
deal
of
time
and
effort
is
being
spent
on
the
development
of
bigger
and
better
compiler
languages
multiprogram
executive
systems
etc
since
the
implementation
of
of
new
methods
and
procedures
is
not
instantaneous
but
rather
occurs
by
an
evolutionary
process
we
should
be
concerned
also
with
the
problem
of
maintaining
improving
and
incorporating
new
ideas
into
existing
systems
it
is
with
this
somewhat
neglected
area
that
the
author
is
interested
a
method
employing
a
decision
matrix
is
presented
for
the
handling
of
a
standard
systems
programming
problem
that
of
providing
a
data
input
routine
cacm
december
1962
vasilakos
g
j
ca621204
jb
march
17
1978
5
15
pm
249
4
435
254
4
435
272
4
435
1102
4
435
1109
4
435
1140
4
435
1188
4
435
1306
4
435
1464
4
435
1491
4
435
1767
4
435
1781
4
435
1787
4
435
1949
4
435
321
4
435
2059
4
435
2126
4
435
435
4
435
435
4
435
437
4
435
463
4
435
483
4
435
491
4
435
2732
4
435
560
4
435
583
4
435
3073
4
435
627
4
435
631
4
435
632
4
435
642
4
435
644
4
435
653
4
435
680
4
435
761
4
435
762
4
435
763
4
435
849
4
435
123
4
435
140
4
435
919
4
435
989
4
435
196
5
435
1053
5
435
435
5
435
435
5
435
435
5
435
615
5
435
435
6
435
474
6
435
718
6
435
720
6
435
</TEXT>
</DOC>
<DOC>
<DOCNO>436</DOCNO>
<TEXT>
evaluation
of
polynomials
by
computer
cacm
december
1962
knuth
d
e
ca621203
jb
march
17
1978
5
16
pm
1223
4
436
1388
4
436
436
4
436
1620
5
436
405
5
436
436
5
436
436
5
436
436
5
436
819
5
436
819
6
436
436
6
436
436
6
436
</TEXT>
</DOC>
<DOC>
<DOCNO>437</DOCNO>
<TEXT>
compiling
matrix
operations
cacm
december
1962
galler
b
a
perlis
a
j
ca621202
jb
march
17
1978
5
17
pm
249
4
437
254
4
437
272
4
437
1102
4
437
1109
4
437
1140
4
437
1188
4
437
1306
4
437
1464
4
437
1491
4
437
1767
4
437
1781
4
437
1787
4
437
1949
4
437
321
4
437
2059
4
437
2126
4
437
435
4
437
437
4
437
463
4
437
483
4
437
491
4
437
2732
4
437
560
4
437
583
4
437
3073
4
437
627
4
437
631
4
437
632
4
437
642
4
437
644
4
437
653
4
437
680
4
437
761
4
437
762
4
437
763
4
437
123
4
437
140
4
437
919
4
437
989
4
437
196
5
437
1614
5
437
2253
5
437
2557
5
437
437
5
437
437
5
437
437
5
437
2081
6
437
437
6
437
437
6
437
437
6
437
3184
6
437
</TEXT>
</DOC>
<DOC>
<DOCNO>438</DOCNO>
<TEXT>
mechanical
pragmatics
a
time
motion
study
of
a
miniature
mechanical
linguistic
system
cacm
december
1962
gorn
s
ca621201
jb
march
17
1978
5
19
pm
249
4
438
267
4
438
1134
4
438
1139
4
438
1141
4
438
1141
4
438
1215
4
438
1223
4
438
1425
4
438
1647
4
438
1781
4
438
1781
4
438
1787
4
438
1792
4
438
364
4
438
364
4
438
405
4
438
405
4
438
438
4
438
438
4
438
438
4
438
438
4
438
561
4
438
44
4
438
3185
4
438
762
4
438
763
4
438
1139
5
438
224
5
438
249
5
438
303
5
438
438
5
438
438
5
438
438
5
438
77
5
438
3185
5
438
224
6
438
303
6
438
399
6
438
404
6
438
438
6
438
438
6
438
464
6
438
631
6
438
</TEXT>
</DOC>
<DOC>
<DOCNO>439</DOCNO>
<TEXT>
on
line
digital
computer
for
measurement
of
a
neurological
control
system
cacm
november
1962
stark
l
payne
r
okabe
y
ca621122
jb
march
17
1978
5
20
pm
439
5
439
439
5
439
439
5
439
</TEXT>
</DOC>
<DOC>
<DOCNO>440</DOCNO>
<TEXT>
record
linkage
special
difficulties
are
encountered
in
devising
reliable
systems
for
searching
and
updating
any
large
files
of
documents
that
must
be
identified
primarily
on
the
basis
of
names
and
other
personal
particulars
the
underlying
problem
is
that
of
making
nearly
maximum
use
of
items
of
identifying
information
that
are
individually
unreliable
but
that
may
collectively
be
of
considerable
discriminating
power
rules
that
can
be
applied
generally
to
name
retrieval
systems
have
been
developed
in
a
methodological
study
of
the
linkage
of
vital
and
health
records
into
family
groupings
for
demographic
research
purposes
these
rules
are
described
and
the
ways
in
which
information
utilization
for
matching
may
be
optimized
are
discussed
cacm
november
1962
newcombe
h
b
kennedy
j
m
ca621121
jb
march
17
1978
5
51
pm
1112
4
440
1592
4
440
2111
4
440
2339
4
440
440
4
440
2339
5
440
440
5
440
440
5
440
440
5
440
619
5
440
1112
6
440
1592
6
440
440
6
440
619
6
440
</TEXT>
</DOC>
<DOC>
<DOCNO>441</DOCNO>
<TEXT>
topological
sorting
of
large
networks
topological
sorting
is
a
procedure
required
for
many
problems
involving
analysis
of
networks
an
example
of
one
such
problem
is
pert
the
present
paper
presents
a
very
general
method
for
obtaining
topological
order
it
permits
treatment
of
larger
networks
than
can
be
handled
on
present
procedures
and
achieves
this
with
greater
efficiency
although
the
procedure
can
be
adapted
to
any
machine
it
is
discussed
in
terms
of
the
7090
a
pert
network
of
30
000
activities
can
be
ordered
in
less
than
one
hour
of
machine
time
the
method
was
developed
as
a
byproduct
of
procedures
needed
by
westinghouse
baltimore
it
has
not
been
programmed
and
at
present
there
are
no
plans
to
implement
it
in
regard
to
the
techniques
described
westinghouse
present
and
anticipated
needs
are
completely
served
by
the
lockheed
program
which
is
in
current
use
cacm
november
1962
kahn
a
b
ca621120
jb
march
17
1978
5
58
pm
1050
4
441
1226
4
441
441
4
441
758
4
441
1723
5
441
367
5
441
441
5
441
441
5
441
441
5
441
758
5
441
367
6
441
441
6
441
441
6
441
</TEXT>
</DOC>
<DOC>
<DOCNO>442</DOCNO>
<TEXT>
crout
with
equilibration
and
iteration
algorithm
135
cacm
november
1962
mckeeman
w
m
ca621119
jb
march
17
1978
5
59
pm
442
5
442
442
5
442
442
5
442
</TEXT>
</DOC>
<DOC>
<DOCNO>443</DOCNO>
<TEXT>
complex
number
to
a
real
power
algorithm
106
cacm
december
1962
erwin
jr
g
w
ca621118
jb
march
17
1978
6
01
pm
443
5
443
443
5
443
443
5
443
</TEXT>
</DOC>
<DOC>
<DOCNO>444</DOCNO>
<TEXT>
evaluation
of
jacobi
symbol
algorithm
99
cacm
november
1962
may
r
w
ca621117
jb
march
17
1978
6
02
pm
444
5
444
444
5
444
444
5
444
</TEXT>
</DOC>
<DOC>
<DOCNO>445</DOCNO>
<TEXT>
combination
algorithm
94
cacm
november
1962
may
r
w
ca621116
jb
march
17
1978
6
03
pm
445
5
445
445
5
445
445
5
445
</TEXT>
</DOC>
<DOC>
<DOCNO>446</DOCNO>
<TEXT>
simpson
integration
algorithm
84
cacm
november
1962
behrenz
p
g
ca621115
jb
march
17
1978
6
04
pm
446
5
446
446
5
446
446
5
446
</TEXT>
</DOC>
<DOC>
<DOCNO>447</DOCNO>
<TEXT>
certification
of
the
calculation
of
easter
cacm
november
1962
williams
m
r
ca621114
jb
march
17
1978
6
05
pm
447
5
447
447
5
447
447
5
447
</TEXT>
</DOC>
<DOC>
<DOCNO>448</DOCNO>
<TEXT>
path
matrix
algorithm
141
cacm
november
1962
ingerman
p
z
ca621113
jb
march
17
1978
6
06
pm
448
5
448
448
5
448
448
5
448
</TEXT>
</DOC>
<DOC>
<DOCNO>449</DOCNO>
<TEXT>
matrix
inversion
algorithm
140
cacm
november
1962
ingerman
p
z
ca621112
jb
march
17
1978
6
12
pm
449
5
449
449
5
449
449
5
449
</TEXT>
</DOC>
<DOC>
<DOCNO>450</DOCNO>
<TEXT>
solution
of
the
diophantine
equation
algorithm
139
cacm
november
1962
peck
j
e
l
ca621111
jb
march
17
1978
6
13
pm
2031
5
450
450
5
450
450
5
450
450
5
450
1022
6
450
450
6
450
</TEXT>
</DOC>
<DOC>
<DOCNO>451</DOCNO>
<TEXT>
nesting
of
for
statement
ii
algorithm
138
cacm
november
1962
dahm
d
m
wells
m
ca621110
jb
march
17
1978
6
14
pm
451
5
451
451
5
451
451
5
451
</TEXT>
</DOC>
<DOC>
<DOCNO>452</DOCNO>
<TEXT>
nesting
of
for
statement
i
algorithm
137
cacm
november
1962
dahm
d
m
wells
m
ca621109
jb
march
17
1978
6
15
pm
452
5
452
452
5
452
452
5
452
</TEXT>
</DOC>
<DOC>
<DOCNO>453</DOCNO>
<TEXT>
enlargement
of
a
group
algorithm
136
cacm
november
1962
wells
m
ca621108
jb
march
17
1978
6
17
pm
453
5
453
453
5
453
453
5
453
</TEXT>
</DOC>
<DOC>
<DOCNO>454</DOCNO>
<TEXT>
crout
with
equilibration
and
iteration
algorithm
135
cacm
november
1962
mckeeman
w
m
ca621107
jb
march
17
1978
6
51
pm
1319
4
454
454
4
454
454
4
454
140
4
454
152
5
454
1177
5
454
454
5
454
454
5
454
454
5
454
586
5
454
806
5
454
932
6
454
454
6
454
454
6
454
</TEXT>
</DOC>
<DOC>
<DOCNO>455</DOCNO>
<TEXT>
exponentiation
of
series
algorithm
134
cacm
november
1962
fettis
h
e
ca621106
jb
march
17
1978
6
52
pm
455
5
455
455
5
455
455
5
455
</TEXT>
</DOC>
<DOC>
<DOCNO>456</DOCNO>
<TEXT>
random
algorithm
133
cacm
november
1962
behrenz
p
g
ca621105
jb
march
17
1978
6
53
pm
1190
5
456
456
5
456
456
5
456
456
5
456
456
6
456
</TEXT>
</DOC>
<DOC>
<DOCNO>457</DOCNO>
<TEXT>
quantum
mechanical
integrals
over
all
slater
type
integrals
cacm
november
1962
browne
j
c
ca621104
jb
march
17
1978
6
54
pm
457
5
457
457
5
457
457
5
457
</TEXT>
</DOC>
<DOC>
<DOCNO>458</DOCNO>
<TEXT>
coefficient
determination
algorithm
131
cacm
november
1962
smith
v
h
allen
m
l
ca621103
jb
march
17
1978
6
56
pm
458
5
458
458
5
458
458
5
458
</TEXT>
</DOC>
<DOC>
<DOCNO>459</DOCNO>
<TEXT>
permute
algorithm
130
cacm
november
1962
eaves
lt
b
c
ca621102
jb
march
17
1978
6
57
pm
459
5
459
459
5
459
459
5
459
</TEXT>
</DOC>
<DOC>
<DOCNO>460</DOCNO>
<TEXT>
minifun
algorithm
129
cacm
november
1962
whitley
v
w
ca621101
jb
march
17
1978
6
58
pm
460
5
460
460
5
460
460
5
460
</TEXT>
</DOC>
<DOC>
<DOCNO>461</DOCNO>
<TEXT>
coding
of
medical
case
history
data
for
computer
analysis
cacm
october
1962
lipkin
m
woodbury
m
a
ca621019
jb
march
17
1978
6
59
pm
461
5
461
461
5
461
461
5
461
</TEXT>
</DOC>
<DOC>
<DOCNO>462</DOCNO>
<TEXT>
computer
pattern
recognition
techniques
electrocardiographic
diagnosis
the
use
of
programmed
digital
computers
as
general
pattern
classification
and
recognition
devices
is
one
phase
of
the
current
lively
interest
in
artificial
intelligence
it
is
important
to
choose
a
class
of
signals
which
is
at
present
undergoing
a
good
deal
of
visual
inspection
by
trained
people
for
the
purpose
of
pattern
recognition
in
this
way
comparisons
between
machine
and
human
performance
may
be
obtained
a
practical
result
also
serves
as
additional
motivation
clinical
electrocardiograms
make
up
such
a
class
of
signals
the
approach
to
the
problem
presented
here
centers
upon
the
use
of
multiple
adaptive
matched
filters
that
classify
normalized
signals
the
present
report
fives
some
of
the
background
for
the
application
of
this
method
cacm
october
1962
stark
l
okajima
m
whipple
g
h
ca621018
jb
march
17
1978
7
04
pm
1325
5
462
462
5
462
462
5
462
462
5
462
462
6
462
</TEXT>
</DOC>
<DOC>
<DOCNO>463</DOCNO>
<TEXT>
on
ambiguity
in
phrase
structure
languages
cacm
october
1962
floyd
r
w
ca621017
jb
march
17
1978
7
05
pm
249
4
463
254
4
463
272
4
463
1102
4
463
1109
4
463
1140
4
463
1188
4
463
1306
4
463
1464
4
463
1491
4
463
1767
4
463
1781
4
463
1787
4
463
1949
4
463
321
4
463
2059
4
463
2126
4
463
435
4
463
437
4
463
463
4
463
483
4
463
491
4
463
2732
4
463
560
4
463
583
4
463
3073
4
463
627
4
463
631
4
463
632
4
463
642
4
463
644
4
463
653
4
463
680
4
463
761
4
463
762
4
463
763
4
463
123
4
463
140
4
463
919
4
463
989
4
463
196
5
463
1306
5
463
1781
5
463
463
5
463
463
5
463
463
5
463
123
6
463
196
6
463
196
6
463
919
6
463
990
6
463
1007
6
463
1046
6
463
1131
6
463
1139
6
463
1140
6
463
1149
6
463
1198
6
463
1215
6
463
1223
6
463
1265
6
463
1303
6
463
1323
6
463
1358
6
463
1366
6
463
1421
6
463
1460
6
463
1462
6
463
1463
6
463
1467
6
463
1468
6
463
1477
6
463
1491
6
463
1496
6
463
1531
6
463
1535
6
463
1565
6
463
1601
6
463
1602
6
463
1613
6
463
1614
6
463
1626
6
463
1641
6
463
1787
6
463
1788
6
463
205
6
463
224
6
463
249
6
463
288
6
463
316
6
463
381
6
463
398
6
463
11
6
463
404
6
463
410
6
463
463
6
463
463
6
463
464
6
463
483
6
463
3184
6
463
3188
6
463
584
6
463
600
6
463
680
6
463
691
6
463
763
6
463
799
6
463
</TEXT>
</DOC>
<DOC>
<DOCNO>464</DOCNO>
<TEXT>
syntactic
analysis
by
digital
computer
this
paper
provides
an
account
of
the
shadow
language
that
is
used
to
describe
syntax
and
of
a
corresponding
subroutine
that
enables
a
computer
to
perform
syntactic
analysis
the
input
to
this
subroutine
consists
of
a
string
to
be
analyzed
and
a
description
of
the
syntax
that
is
to
be
used
the
syntax
is
expressed
in
the
shadow
language
the
output
consists
of
a
trace
table
that
expresses
the
results
of
the
syntactic
analysis
in
a
tabular
form
several
versions
of
the
subroutine
and
some
associated
programs
have
been
in
use
now
for
over
three
years
the
present
account
of
the
language
and
the
subroutine
contains
a
summary
of
material
that
has
been
described
previously
in
unpublished
reports
and
also
some
additional
discussion
of
the
work
in
relation
to
the
more
general
questions
of
problem
oriented
languages
and
string
transformations
cacm
october
1962
barnett
m
p
futrelle
r
p
ca621016
jb
march
17
1978
7
11
pm
1046
4
464
1105
4
464
1139
4
464
1140
4
464
1234
4
464
1263
4
464
1265
4
464
1496
4
464
1781
4
464
1824
4
464
2126
4
464
2546
4
464
464
4
464
464
4
464
584
4
464
631
4
464
653
4
464
680
4
464
720
4
464
763
4
464
795
4
464
799
4
464
945
4
464
1062
5
464
1121
5
464
1139
5
464
1265
5
464
265
5
464
1781
5
464
404
5
464
464
5
464
464
5
464
464
5
464
720
5
464
759
5
464
123
6
464
196
6
464
919
6
464
990
6
464
1007
6
464
1046
6
464
1131
6
464
1139
6
464
1140
6
464
1149
6
464
1198
6
464
1215
6
464
1223
6
464
1265
6
464
1303
6
464
1323
6
464
1358
6
464
1366
6
464
1421
6
464
1460
6
464
1462
6
464
1463
6
464
1467
6
464
1468
6
464
1477
6
464
1491
6
464
1496
6
464
1531
6
464
1535
6
464
1565
6
464
1601
6
464
1602
6
464
1613
6
464
1614
6
464
1626
6
464
1641
6
464
1787
6
464
1788
6
464
205
6
464
224
6
464
224
6
464
249
6
464
265
6
464
288
6
464
316
6
464
381
6
464
398
6
464
399
6
464
11
6
464
404
6
464
404
6
464
404
6
464
410
6
464
438
6
464
463
6
464
464
6
464
464
6
464
464
6
464
464
6
464
464
6
464
464
6
464
464
6
464
474
6
464
483
6
464
3184
6
464
3184
6
464
3188
6
464
584
6
464
600
6
464
631
6
464
631
6
464
635
6
464
680
6
464
691
6
464
759
6
464
763
6
464
794
6
464
799
6
464
</TEXT>
</DOC>
<DOC>
<DOCNO>465</DOCNO>
<TEXT>
perm
algorithm
115
cacm
october
1962
schrack
g
f
ca621015
jb
march
17
1978
7
12
pm
465
5
465
465
5
465
465
5
465
</TEXT>
</DOC>
<DOC>
<DOCNO>466</DOCNO>
<TEXT>
general
order
arithmetic
algorithm
93
cacm
october
1962
george
r
ca621014
jb
march
17
1978
7
13
pm
466
5
466
466
5
466
466
5
466
</TEXT>
</DOC>
<DOC>
<DOCNO>467</DOCNO>
<TEXT>
permutation
generator
algorithm
87
cacm
october
1962
schrack
g
f
shimrat
m
ca621013
jb
march
17
1978
7
14
pm
467
5
467
467
5
467
467
5
467
</TEXT>
</DOC>
<DOC>
<DOCNO>468</DOCNO>
<TEXT>
incomplete
elliptic
integrals
algorithm
73
cacm
october
1962
jefferson
d
k
ca621012
jb
march
17
1978
7
14
pm
468
5
468
468
5
468
468
5
468
</TEXT>
</DOC>
<DOC>
<DOCNO>469</DOCNO>
<TEXT>
critical
path
scheduling
algorithm
40
cacm
october
1962
hellberg
l
ca621011
jb
march
17
1978
7
15
pm
469
5
469
469
5
469
469
5
469
</TEXT>
</DOC>
<DOC>
<DOCNO>470</DOCNO>
<TEXT>
summation
of
fourier
series
algorithm
128
cacm
october
1962
wells
m
ca621010
jb
march
17
1978
7
16
pm
470
5
470
470
5
470
470
5
470
</TEXT>
</DOC>
<DOC>
<DOCNO>471</DOCNO>
<TEXT>
ortho
algorithm
127
cacm
october
1962
walsh
p
j
ca621009
jb
march
17
1978
7
17
pm
471
5
471
471
5
471
471
5
471
</TEXT>
</DOC>
<DOC>
<DOCNO>472</DOCNO>
<TEXT>
gauss
method
algorithm
126
cacm
october
1962
counts
j
w
ca621008
jb
march
17
1978
7
18
pm
2075
5
472
472
5
472
472
5
472
472
5
472
472
6
472
</TEXT>
</DOC>
<DOC>
<DOCNO>473</DOCNO>
<TEXT>
weightcoeff
algorithm
125
cacm
october
1962
rutishauser
h
ca621007
jb
march
17
1978
7
19
pm
473
5
473
473
5
473
473
5
473
</TEXT>
</DOC>
<DOC>
<DOCNO>474</DOCNO>
<TEXT>
input
data
organization
in
fortran
cacm
october
1962
yarbrough
l
ca621006
jb
march
17
1978
7
20
pm
1053
5
474
474
5
474
474
5
474
474
5
474
720
5
474
265
6
474
435
6
474
464
6
474
474
6
474
474
6
474
718
6
474
720
6
474
</TEXT>
</DOC>
<DOC>
<DOCNO>475</DOCNO>
<TEXT>
a
test
matrix
for
inversion
procedures
cacm
october
1962
pei
m
l
ca621005
jb
march
17
1978
7
21
pm
1963
5
475
475
5
475
475
5
475
475
5
475
909
6
475
475
6
475
750
6
475
</TEXT>
</DOC>
<DOC>
<DOCNO>476</DOCNO>
<TEXT>
further
remarks
on
sampling
a
tape
file
ii
cacm
october
1962
nadler
m
ca621004
jb
march
17
1978
7
22
pm
476
5
476
476
5
476
476
5
476
</TEXT>
</DOC>
<DOC>
<DOCNO>477</DOCNO>
<TEXT>
further
remarks
on
sampling
a
tape
file
i
cacm
october
1962
muller
m
e
ca621003
jb
march
17
1978
7
23
pm
477
4
477
6
5
477
477
5
477
477
5
477
477
5
477
</TEXT>
</DOC>
<DOC>
<DOCNO>478</DOCNO>
<TEXT>
implementing
a
stack
cacm
october
1962
baecker
h
ca621002
jb
march
17
1978
7
25
pm
478
5
478
478
5
478
478
5
478
</TEXT>
</DOC>
<DOC>
<DOCNO>479</DOCNO>
<TEXT>
a
dispersion
pass
algorithm
for
the
polyphase
merge
this
paper
presents
a
new
manner
of
dispersing
strings
for
a
polyphase
merge
if
the
number
of
strings
dispersed
is
between
two
levels
acceptable
by
polyphase
merge
a
more
economical
technique
of
reaching
the
next
level
for
polyphase
merge
is
shown
and
proved
cacm
october
1962
mendoza
a
g
ca621001
jb
march
17
1978
7
27
pm
2146
4
479
479
4
479
479
4
479
862
4
479
863
4
479
264
5
479
299
5
479
479
5
479
479
5
479
479
5
479
860
5
479
862
5
479
861
6
479
299
6
479
479
6
479
479
6
479
</TEXT>
</DOC>
<DOC>
<DOCNO>480</DOCNO>
<TEXT>
quick
calculation
of
jacobian
elliptic
functions
corrigendum
cacm
september
1962
salzer
h
e
ca620912
jb
march
17
1978
7
28
pm
480
5
480
480
5
480
480
5
480
</TEXT>
</DOC>
<DOC>
<DOCNO>481</DOCNO>
<TEXT>
a
one
day
look
at
computing
cacm
september
1962
armerding
g
w
gruenberger
f
j
marks
s
l
parkin
t
r
ca620911
jb
march
17
1978
7
30
pm
481
5
481
481
5
481
481
5
481
</TEXT>
</DOC>
<DOC>
<DOCNO>482</DOCNO>
<TEXT>
tall
a
list
processor
for
the
philco
200
computer
cacm
september
1962
feldman
j
ca620910
jb
march
17
1978
7
31
pm
482
5
482
482
5
482
482
5
482
</TEXT>
</DOC>
<DOC>
<DOCNO>483</DOCNO>
<TEXT>
on
the
nonexistence
of
a
phrase
structure
grammar
for
algol
60
algol
60
is
defined
partly
by
formal
mechanisms
of
phrase
structure
grammar
partly
by
informally
stated
restrictions
it
is
shown
that
no
formal
mechanisms
of
the
type
used
are
sufficient
to
define
algol
60
cacm
september
1962
floyd
r
w
ca620909
jb
march
17
1978
7
33
pm
249
4
483
254
4
483
272
4
483
1102
4
483
1109
4
483
1140
4
483
1188
4
483
1306
4
483
1464
4
483
1491
4
483
1767
4
483
1781
4
483
1787
4
483
1949
4
483
321
4
483
2059
4
483
2126
4
483
435
4
483
437
4
483
463
4
483
483
4
483
491
4
483
2732
4
483
560
4
483
583
4
483
3073
4
483
627
4
483
631
4
483
632
4
483
642
4
483
644
4
483
653
4
483
680
4
483
761
4
483
762
4
483
763
4
483
123
4
483
140
4
483
919
4
483
989
4
483
196
5
483
949
5
483
1102
5
483
1142
5
483
1781
5
483
1945
5
483
483
5
483
483
5
483
483
5
483
762
5
483
823
6
483
123
6
483
196
6
483
196
6
483
196
6
483
914
6
483
915
6
483
917
6
483
919
6
483
984
6
483
989
6
483
990
6
483
990
6
483
1007
6
483
1012
6
483
1046
6
483
1084
6
483
1098
6
483
1122
6
483
1131
6
483
1138
6
483
1139
6
483
1139
6
483
1140
6
483
1141
6
483
1149
6
483
1198
6
483
1200
6
483
1215
6
483
1223
6
483
1223
6
483
1265
6
483
1265
6
483
1303
6
483
1323
6
483
1336
6
483
1358
6
483
1366
6
483
1396
6
483
1421
6
483
1455
6
483
1460
6
483
1462
6
483
1463
6
483
1467
6
483
1468
6
483
1477
6
483
1477
6
483
1487
6
483
1491
6
483
1491
6
483
1496
6
483
1496
6
483
1531
6
483
1535
6
483
1565
6
483
1601
6
483
1602
6
483
1613
6
483
1614
6
483
1626
6
483
1641
6
483
1787
6
483
1788
6
483
205
6
483
209
6
483
210
6
483
224
6
483
249
6
483
249
6
483
288
6
483
316
6
483
381
6
483
398
6
483
11
6
483
404
6
483
406
6
483
410
6
483
463
6
483
464
6
483
483
6
483
483
6
483
483
6
483
483
6
483
483
6
483
483
6
483
3184
6
483
3184
6
483
3188
6
483
584
6
483
584
6
483
584
6
483
600
6
483
669
6
483
680
6
483
680
6
483
691
6
483
763
6
483
763
6
483
799
6
483
</TEXT>
</DOC>
<DOC>
<DOCNO>484</DOCNO>
<TEXT>
hankel
function
algorithm
124
cacm
september
1962
schaefer
l
j
ca620908
jb
march
17
1978
7
34
pm
484
5
484
484
5
484
484
5
484
</TEXT>
</DOC>
<DOC>
<DOCNO>485</DOCNO>
<TEXT>
real
error
function
erf
x
algorithm
123
cacm
september
1962
crawford
m
techo
r
ca620907
jb
march
17
1978
7
35
pm
1157
5
485
485
5
485
485
5
485
485
5
485
836
6
485
1081
6
485
485
6
485
714
6
485
</TEXT>
</DOC>
<DOC>
<DOCNO>486</DOCNO>
<TEXT>
tridiagonal
matrix
algorithm
122
cacm
september
1962
dietzel
g
f
ca620906
jb
march
17
1978
7
36
pm
486
5
486
486
5
486
486
5
486
</TEXT>
</DOC>
<DOC>
<DOCNO>487</DOCNO>
<TEXT>
normdev
algorithm
121
cacm
september
1962
shafer
d
ca620905
jb
march
17
1978
7
38
pm
487
5
487
487
5
487
487
5
487
</TEXT>
</DOC>
<DOC>
<DOCNO>488</DOCNO>
<TEXT>
a
heuristic
for
page
turning
in
a
multiprogrammed
computer
cacm
september
1962
weil
j
w
ca620904
jb
march
17
1978
7
40
pm
1754
4
488
2358
4
488
488
4
488
274
5
488
488
5
488
488
5
488
488
5
488
</TEXT>
</DOC>
<DOC>
<DOCNO>489</DOCNO>
<TEXT>
current
status
of
ipl
v
for
the
philco
2000
computer
june
1962
cacm
september
1962
shaffer
s
s
ca620903
jb
march
17
1978
7
41
pm
489
5
489
489
5
489
489
5
489
</TEXT>
</DOC>
<DOC>
<DOCNO>490</DOCNO>
<TEXT>
programmed
methods
for
printer
graphical
output
cacm
september
1962
garfinkel
d
ca620902
jb
march
17
1978
8
56
pm
490
5
490
490
5
490
490
5
490
</TEXT>
</DOC>
<DOC>
<DOCNO>491</DOCNO>
<TEXT>
use
of
multiprogramming
in
the
design
of
a
low
cost
digital
computer
cacm
september
1962
penny
j
p
pearcey
t
ca620901
jb
march
17
1978
8
57
pm
249
4
491
254
4
491
272
4
491
1102
4
491
1109
4
491
1140
4
491
1188
4
491
1306
4
491
1464
4
491
1491
4
491
1713
4
491
1713
4
491
1767
4
491
1781
4
491
1787
4
491
1901
4
491
1901
4
491
1949
4
491
321
4
491
2059
4
491
2126
4
491
435
4
491
437
4
491
463
4
491
483
4
491
491
4
491
491
4
491
491
4
491
491
4
491
2732
4
491
560
4
491
583
4
491
3073
4
491
627
4
491
631
4
491
632
4
491
642
4
491
644
4
491
653
4
491
680
4
491
761
4
491
762
4
491
763
4
491
123
4
491
140
4
491
168
4
491
919
4
491
989
4
491
168
5
491
185
5
491
196
5
491
491
5
491
491
5
491
491
5
491
46
5
491
3193
5
491
796
5
491
491
6
491
491
6
491
</TEXT>
</DOC>
<DOC>
<DOCNO>492</DOCNO>
<TEXT>
analysis
of
a
file
addressing
method
this
paper
presents
a
new
file
addressing
method
based
on
the
calculation
of
an
address
from
the
identification
of
a
record
for
large
recirculating
type
files
it
seems
to
be
more
advantageous
than
customary
ones
the
probability
distribution
of
the
displacement
of
records
from
their
calculated
address
which
is
one
less
than
the
number
of
probes
required
to
address
a
record
is
computed
on
the
basis
of
a
markov
chain
model
for
the
reader
not
interested
in
the
mathematics
the
introduction
and
the
summary
should
be
sufficient
cacm
august
1962
schay
jr
g
spruth
w
g
ca620836
jb
march
17
1978
9
02
pm
911
5
492
1785
5
492
2203
5
492
2860
5
492
492
5
492
492
5
492
492
5
492
911
6
492
911
6
492
1328
6
492
1785
6
492
1786
6
492
332
6
492
332
6
492
2107
6
492
2109
6
492
2203
6
492
492
6
492
492
6
492
492
6
492
492
6
492
</TEXT>
</DOC>
<DOC>
<DOCNO>493</DOCNO>
<TEXT>
the
property
classification
method
of
file
design
and
processing
cacm
august
1962
mcgee
w
c
ca620835
jb
march
17
1978
9
03
pm
1135
4
493
1136
4
493
493
4
493
2710
4
493
2765
4
493
2888
4
493
2906
4
493
729
4
493
1136
5
493
493
5
493
493
5
493
493
5
493
616
5
493
493
6
493
616
6
493
657
6
493
</TEXT>
</DOC>
<DOC>
<DOCNO>494</DOCNO>
<TEXT>
a
finite
sequentially
compact
process
for
the
adjoints
of
matrices
over
arbitrary
integral
domains
cacm
august
1962
luther
h
a
guseman
jr
l
f
ca620834
jb
march
17
1978
9
04
pm
494
5
494
494
5
494
494
5
494
</TEXT>
</DOC>
<DOC>
<DOCNO>495</DOCNO>
<TEXT>
a
procedure
for
inverting
large
symmetric
matrices
in
the
least
squares
method
for
simultaneous
adjustment
of
several
parameters
the
coefficients
of
the
normal
equations
are
the
elements
of
a
symmetric
positive
definite
matrix
in
order
to
solve
the
normal
equations
and
evaluate
the
precision
measures
of
the
resulting
parameters
inversion
of
this
matrix
of
coefficients
is
required
many
available
procedures
for
matrix
inversion
do
not
take
advantage
of
the
symmetry
thus
when
programmed
for
a
high
speed
computer
all
n
2
elements
must
be
stored
and
manipulated
whereas
only
n
1
2
of
them
are
independent
in
order
to
allow
a
computer
of
given
memory
capacity
to
handle
a
larger
matrix
the
following
procedure
for
inverting
a
symmetric
matrix
has
been
devised
cacm
august
1962
busing
w
r
levy
h
s
ca620833
jb
march
17
1978
9
09
pm
495
5
495
495
5
495
495
5
495
</TEXT>
</DOC>
<DOC>
<DOCNO>496</DOCNO>
<TEXT>
a
set
of
matrices
for
testing
computer
programs
cacm
august
1962
brenner
j
l
ca620832
jb
march
17
1978
9
10
pm
1047
5
496
496
5
496
496
5
496
496
5
496
496
6
496
</TEXT>
</DOC>
<DOC>
<DOCNO>497</DOCNO>
<TEXT>
further
remarks
on
line
segment
curve
fitting
using
dynamic
programming
in
a
recent
paper
bellman
showed
how
dynamic
programming
could
be
used
to
determine
the
solution
to
a
problem
previously
considered
by
stone
the
problem
comprises
the
determination
given
n
of
the
n
points
of
subdivision
of
a
given
interval
a
b
and
the
corresponding
line
segments
that
give
the
best
least
squares
fit
to
a
function
g
x
in
the
interval
bellman
confined
himself
primarily
to
the
analytical
derivation
suggesting
briefly
however
how
the
solution
of
the
equation
derived
for
each
particular
point
of
subdivision
u
i
could
be
reduced
to
a
discrete
search
in
this
paper
the
computational
procedure
is
considered
more
fully
and
the
similarities
to
some
of
stone
equations
are
indicated
it
is
further
shown
that
an
equation
for
u
i
involving
no
minimization
may
be
found
in
addition
it
is
shown
how
bellman
method
may
be
applied
to
the
curve
fitting
problem
when
the
additional
constraints
are
added
that
the
ends
of
the
line
segments
must
be
on
the
curve
cacm
august
1962
gluss
b
ca620831
jb
march
17
1978
9
19
pm
497
4
497
867
4
497
317
5
497
497
5
497
497
5
497
497
5
497
867
5
497
317
6
497
497
6
497
</TEXT>
</DOC>
<DOC>
<DOCNO>498</DOCNO>
<TEXT>
magic
square
algorithm
117
118
cacm
august
1962
collison
d
m
ca620830
jb
march
17
1978
9
20
pm
498
5
498
498
5
498
498
5
498
</TEXT>
</DOC>
<DOC>
<DOCNO>499</DOCNO>
<TEXT>
permutation
generator
algorithm
87
cacm
august
1962
collison
d
m
ca620829
jb
march
17
1978
9
22
pm
499
5
499
499
5
499
499
5
499
</TEXT>
</DOC>
<DOC>
<DOCNO>500</DOCNO>
<TEXT>
permute
algorithm
86
cacm
august
1962
collison
d
m
ca620828
jb
march
17
1978
9
23
pm
500
5
500
500
5
500
500
5
500
</TEXT>
</DOC>
<DOC>
<DOCNO>501</DOCNO>
<TEXT>
jacobi
algorithm
85
cacm
august
1962
hillmore
j
s
ca620827
jb
march
17
1978
9
24
pm
2349
5
501
501
5
501
501
5
501
501
5
501
1648
6
501
1716
6
501
1794
6
501
1894
6
501
2043
6
501
501
6
501
613
6
501
774
6
501
</TEXT>
</DOC>
<DOC>
<DOCNO>502</DOCNO>
<TEXT>
simpson
integration
algorithm
84
cacm
august
1962
george
r
ca620826
jb
march
17
1978
9
25
pm
502
5
502
502
5
502
502
5
502
</TEXT>
</DOC>
<DOC>
<DOCNO>503</DOCNO>
<TEXT>
rational
roots
of
polynomials
with
integer
coefficients
algorithm
78
cacm
august
1962
collison
d
m
ca620825
jb
march
17
1978
9
27
pm
503
5
503
503
5
503
503
5
503
</TEXT>
</DOC>
<DOC>
<DOCNO>504</DOCNO>
<TEXT>
factors
algorithm
75
cacm
august
1962
hillmore
j
s
ca620824
jb
march
17
1978
9
28
pm
504
5
504
504
5
504
504
5
504
</TEXT>
</DOC>
<DOC>
<DOCNO>505</DOCNO>
<TEXT>
composition
generator
algorithm
72
cacm
august
1962
collison
d
m
ca620823
jb
march
17
1978
9
29
pm
505
5
505
505
5
505
505
5
505
</TEXT>
</DOC>
<DOC>
<DOCNO>506</DOCNO>
<TEXT>
permutation
algorithm
71
cacm
august
1962
hillmore
j
s
ca620822
jb
march
17
1978
9
30
pm
506
5
506
506
5
506
506
5
506
</TEXT>
</DOC>
<DOC>
<DOCNO>507</DOCNO>
<TEXT>
partition
quicksort
find
algorithm
63
64
65
cacm
august
1962
hillmore
j
s
ca620821
jb
march
17
1978
9
32
pm
2679
5
507
507
5
507
507
5
507
507
5
507
970
6
507
1175
6
507
1190
6
507
1228
6
507
1969
6
507
1997
6
507
308
6
507
2042
6
507
3187
6
507
507
6
507
716
6
507
783
6
507
</TEXT>
</DOC>
<DOC>
<DOCNO>508</DOCNO>
<TEXT>
matrix
inversion
algorithm
58
cacm
august
1962
george
r
ca620820
jb
march
17
1978
9
32
pm
508
5
508
508
5
508
508
5
508
</TEXT>
</DOC>
<DOC>
<DOCNO>509</DOCNO>
<TEXT>
matrix
inversion
algorithm
58
cacm
august
1962
struble
g
ca620819
jb
march
17
1978
9
33
pm
509
5
509
509
5
509
509
5
509
</TEXT>
</DOC>
<DOC>
<DOCNO>510</DOCNO>
<TEXT>
ber
or
bei
function
algorithm
57
cacm
august
1962
thacher
jr
h
c
ca620818
jb
march
17
1978
9
34
pm
510
5
510
510
5
510
510
5
510
</TEXT>
</DOC>
<DOC>
<DOCNO>511</DOCNO>
<TEXT>
a
set
of
test
matrices
algorithm
52
cacm
august
1962
hillmore
j
s
ca620817
jb
march
17
1978
9
35
pm
1707
5
511
511
5
511
511
5
511
511
5
511
1047
6
511
511
6
511
</TEXT>
</DOC>
<DOC>
<DOCNO>512</DOCNO>
<TEXT>
telescope
1
algorithm
37
cacm
august
1962
thacher
jr
h
c
ca620816
jb
march
17
1978
9
36
pm
512
5
512
512
5
512
512
5
512
</TEXT>
</DOC>
<DOC>
<DOCNO>513</DOCNO>
<TEXT>
sieve
algorithm
35
cacm
august
1962
hillmore
j
s
ca620815
jb
march
17
1978
9
37
pm
513
5
513
513
5
513
513
5
513
</TEXT>
</DOC>
<DOC>
<DOCNO>514</DOCNO>
<TEXT>
binomial
coefficients
algorithm
19
cacm
august
1962
george
r
ca620814
jb
march
17
1978
9
40
pm
514
5
514
514
5
514
514
5
514
</TEXT>
</DOC>
<DOC>
<DOCNO>515</DOCNO>
<TEXT>
rational
interpolation
by
continued
fractions
algorithm
18
cacm
august
1962
thacher
jr
h
c
ca620813
jb
march
17
1978
9
41
pm
515
5
515
515
5
515
515
5
515
</TEXT>
</DOC>
<DOC>
<DOCNO>516</DOCNO>
<TEXT>
matrix
inversion
ii
algorithm
120
cacm
august
1962
george
r
ca620812
jb
march
17
1978
9
42
pm
516
5
516
516
5
516
516
5
516
</TEXT>
</DOC>
<DOC>
<DOCNO>517</DOCNO>
<TEXT>
evaluation
of
pert
network
algorithm
119
cacm
august
1962
eisenman
b
shapiro
m
ca620811
jb
march
17
1978
9
44
pm
517
5
517
517
5
517
517
5
517
</TEXT>
</DOC>
<DOC>
<DOCNO>518</DOCNO>
<TEXT>
magic
square
odd
order
algorithm
118
cacm
august
1962
collison
d
m
ca620810
jb
march
17
1978
9
45
pm
2082
5
518
518
5
518
518
5
518
518
5
518
1491
6
518
518
6
518
</TEXT>
</DOC>
<DOC>
<DOCNO>519</DOCNO>
<TEXT>
magic
square
even
order
algorithm
117
cacm
august
1962
collison
d
m
ca620809
jb
march
17
1978
9
46
pm
519
5
519
519
5
519
519
5
519
</TEXT>
</DOC>
<DOC>
<DOCNO>520</DOCNO>
<TEXT>
complex
division
algorithm
116
cacm
august
1962
smith
r
l
ca620808
jb
march
17
1978
9
47
pm
520
5
520
520
5
520
520
5
520
</TEXT>
</DOC>
<DOC>
<DOCNO>521</DOCNO>
<TEXT>
perm
algorithm
115
cacm
august
1962
trotter
h
f
ca620807
jb
march
17
1978
9
57
pm
2044
5
521
2189
5
521
2417
5
521
2505
5
521
2874
5
521
2908
5
521
521
5
521
521
5
521
521
5
521
996
6
521
1558
6
521
1594
6
521
1682
6
521
2087
6
521
2189
6
521
2227
6
521
2230
6
521
2292
6
521
2317
6
521
2505
6
521
2683
6
521
2871
6
521
2884
6
521
3191
6
521
521
6
521
521
6
521
521
6
521
521
6
521
521
6
521
521
6
521
</TEXT>
</DOC>
<DOC>
<DOCNO>522</DOCNO>
<TEXT>
generation
of
partitions
with
constraints
algorithm
114
cacm
august
1962
stockmal
f
ca620806
jb
march
17
1978
7
28
pm
522
5
522
522
5
522
522
5
522
</TEXT>
</DOC>
<DOC>
<DOCNO>523</DOCNO>
<TEXT>
treesort
algorithm
113
cacm
august
1962
floyd
r
w
ca620805
jb
march
17
1978
7
29
pm
523
5
523
523
5
523
523
5
523
</TEXT>
</DOC>
<DOC>
<DOCNO>524</DOCNO>
<TEXT>
position
of
point
relative
to
polygon
algorithm
112
cacm
august
1962
shimrat
m
ca620804
jb
march
17
1978
7
30
pm
1804
5
524
2987
5
524
524
5
524
524
5
524
524
5
524
1326
6
524
1630
6
524
2125
6
524
2547
6
524
2633
6
524
421
6
524
421
6
524
524
6
524
524
6
524
</TEXT>
</DOC>
<DOC>
<DOCNO>525</DOCNO>
<TEXT>
a
computer
technique
for
handling
analysis
of
variance
cacm
august
1962
howell
j
r
ca620803
jb
march
17
1978
7
32
pm
525
5
525
525
5
525
525
5
525
</TEXT>
</DOC>
<DOC>
<DOCNO>526</DOCNO>
<TEXT>
character
manipulation
in
fortran
cacm
august
1962
pyle
i
c
ca620802
jb
march
17
1978
7
33
pm
526
5
526
526
5
526
526
5
526
</TEXT>
</DOC>
<DOC>
<DOCNO>527</DOCNO>
<TEXT>
the
description
list
of
concepts
a
concept
is
defined
as
a
class
of
objects
whose
members
can
be
distinguished
by
processing
its
properties
property
is
defined
to
mean
a
partition
of
the
set
of
all
objects
into
disjoint
classes
the
formal
definition
of
a
concept
is
recursive
in
nature
a
concept
is
described
by
a
list
structure
a
one
to
one
correspondence
is
established
between
the
recursive
definition
of
a
concept
and
its
description
list
structure
like
the
definition
the
description
list
structure
of
a
concept
is
also
built
up
from
elementary
list
structures
by
a
recursive
process
the
list
structures
obtained
this
way
are
compared
with
the
description
list
structure
discussed
by
the
author
in
a
previous
publication
cacm
august
1962
banerji
r
b
ca620801
jb
march
17
1978
7
39
pm
527
5
527
527
5
527
527
5
527
</TEXT>
</DOC>
<DOC>
<DOCNO>528</DOCNO>
<TEXT>
fortran
for
business
data
processing
cacm
july
1962
robbins
d
k
ca620733
jb
march
17
1978
7
41
pm
1330
5
528
528
5
528
528
5
528
528
5
528
528
6
528
728
6
528
</TEXT>
</DOC>
<DOC>
<DOCNO>529</DOCNO>
<TEXT>
regression
and
coded
patterns
in
data
editing
cacm
july
1962
robison
d
e
aroian
l
a
ca620732
jb
march
17
1978
7
42
pm
529
5
529
529
5
529
529
5
529
</TEXT>
</DOC>
<DOC>
<DOCNO>530</DOCNO>
<TEXT>
a
computer
method
for
radiation
treatment
planning
cacm
july
1962
siler
w
laughlin
j
s
ca620731
jb
march
17
1978
7
43
pm
530
5
530
530
5
530
530
5
530
</TEXT>
</DOC>
<DOC>
<DOCNO>531</DOCNO>
<TEXT>
person
matching
by
electronic
methods
record
linkage
in
the
updating
of
files
is
accomplished
in
many
establishments
through
the
use
of
a
preassigned
number
such
as
payroll
number
customer
number
or
social
security
number
in
vital
and
health
records
however
a
unique
number
is
generally
not
preassigned
to
an
individual
for
purposes
of
reporting
services
received
to
the
health
department
in
order
to
determine
whether
different
physician
reports
refer
to
the
same
individual
name
and
other
identification
must
be
compared
this
is
a
laborious
operation
which
is
subject
to
various
errors
because
of
name
misspellings
changes
of
name
upon
marriage
and
other
problems
we
are
interested
in
the
maintenance
of
a
psychiatric
case
register
in
maryland
where
many
of
the
reports
from
over
a
hundred
psychiatric
agencies
refer
to
the
same
patient
these
records
must
be
linked
in
order
to
provide
unduplicated
counts
of
individuals
under
care
and
longitudinal
records
of
psychiatric
history
an
earlier
paper
1
describes
our
general
procedures
for
register
maintenance
by
use
of
a
digital
computer
honeywell
800
here
we
present
in
more
detail
our
initial
procedures
for
the
person
matching
process
in
order
to
elicit
comments
and
suggestions
from
persons
who
have
had
experience
in
matching
cacm
july
1962
phillips
jr
w
bahn
a
k
miyasaki
m
ca620730
jb
march
17
1978
7
51
pm
531
5
531
531
5
531
531
5
531
</TEXT>
</DOC>
<DOC>
<DOCNO>532</DOCNO>
<TEXT>
on
the
computation
of
rational
approximations
to
continuous
functions
cacm
july
1962
fraser
w
hart
j
f
ca620729
jb
march
17
1978
7
52
pm
951
5
532
1015
5
532
1346
5
532
1440
5
532
1645
5
532
532
5
532
532
5
532
532
5
532
951
6
532
962
6
532
532
6
532
532
6
532
532
6
532
532
6
532
532
6
532
</TEXT>
</DOC>
<DOC>
<DOCNO>533</DOCNO>
<TEXT>
digital
synthesis
of
correlated
stationary
noise
in
this
note
we
propose
a
method
of
generating
stationary
noise
with
a
prescribed
auto
covariance
function
by
digital
methods
the
need
for
such
a
technique
often
arises
in
testing
the
performance
of
data
processing
and
engineering
systems
where
inputs
corrupted
with
correlated
noise
of
a
known
form
are
required
the
technique
is
quite
simple
and
produces
strict
sense
stationary
noise
which
agrees
approximately
with
r
t
the
prescribed
auto
covariance
function
acf
over
an
interval
t
0
t
0
the
method
consists
of
approximating
the
spectral
density
by
a
periodic
process
with
spectral
lines
and
then
synthesizing
the
periodic
noise
with
random
phases
and
appropriate
amplitudes
in
order
to
simplify
discussion
of
the
statistical
properties
of
the
noise
generated
the
technique
is
first
presented
in
terms
of
exact
harmonic
analysis
in
practice
discrete
harmonic
analysis
as
presented
in
the
third
section
is
used
cacm
july
1962
peabody
p
r
adorno
d
s
ca620728
jb
march
17
1978
7
59
pm
533
5
533
533
5
533
533
5
533
</TEXT>
</DOC>
<DOC>
<DOCNO>534</DOCNO>
<TEXT>
quick
calculation
of
jacobian
elliptic
functions
cacm
july
1962
salzer
h
e
ca620727
jb
march
17
1978
8
01
pm
534
5
534
534
5
534
534
5
534
</TEXT>
</DOC>
<DOC>
<DOCNO>535</DOCNO>
<TEXT>
triangular
walk
pattern
for
the
down
hill
method
of
solving
a
transcendental
equation
cacm
july
1962
onoe
m
ca620726
jb
march
17
1978
8
02
pm
1806
5
535
535
5
535
535
5
535
535
5
535
535
6
535
</TEXT>
</DOC>
<DOC>
<DOCNO>536</DOCNO>
<TEXT>
nonlinear
regression
and
the
solution
of
simultaneous
equations
if
one
has
a
set
of
observables
z1
zm
which
are
bound
in
a
relation
with
certain
parameters
a1
an
by
an
equation
s
z1
a1
0
one
frequently
has
the
problem
of
determining
a
set
of
values
of
the
ai
which
minimizes
the
sum
of
squares
of
differences
between
observed
and
calculated
values
of
a
distinguished
observable
say
zm
if
the
solution
of
the
above
equation
for
zm
zm
n
z1
a1
gives
rise
to
a
function
n
which
is
nonlinear
in
the
ai
then
one
may
rely
on
a
version
of
gaussian
regression
1
2
for
an
iteration
scheme
that
converges
to
a
minimizing
set
of
values
it
is
shown
here
that
this
same
minimization
technique
may
be
used
for
the
solution
of
simultaneous
not
necessarily
linear
equations
cacm
july
1962
baer
r
m
ca620725
jb
march
17
1978
8
09
pm
536
5
536
536
5
536
536
5
536
</TEXT>
</DOC>
<DOC>
<DOCNO>537</DOCNO>
<TEXT>
a
machine
program
for
theorem
proving
the
program
of
a
proof
procedure
is
discussed
in
connection
with
trial
runs
and
possible
improvements
cacm
july
1962
davis
m
logemann
g
loveland
d
ca620724
jb
march
17
1978
8
11
pm
537
5
537
537
5
537
537
5
537
</TEXT>
</DOC>
<DOC>
<DOCNO>538</DOCNO>
<TEXT>
quantum
mechanical
integrals
of
slater
type
orbitals
algorithm
110
cacm
july
1962
kruglyak
y
a
whitman
d
r
ca620723
jb
march
17
1978
8
13
pm
538
5
538
538
5
538
538
5
538
</TEXT>
</DOC>
<DOC>
<DOCNO>539</DOCNO>
<TEXT>
definite
exponential
integrals
b
algorithm
109
cacm
july
1962
kruglyak
y
a
whitman
d
r
ca620722
jb
march
17
1978
8
15
pm
539
5
539
539
5
539
539
5
539
</TEXT>
</DOC>
<DOC>
<DOCNO>540</DOCNO>
<TEXT>
definite
exponential
integrals
a
algorithm
108
cacm
july
1962
kruglyak
y
a
whitman
d
r
ca620721
jb
march
17
1978
8
16
pm
540
5
540
540
5
540
540
5
540
</TEXT>
</DOC>
<DOC>
<DOCNO>541</DOCNO>
<TEXT>
simpson
integration
algorithm
84
cacm
july
1962
relph
a
p
ca620720
jb
march
17
1978
8
17
pm
541
5
541
541
5
541
541
5
541
</TEXT>
</DOC>
<DOC>
<DOCNO>542</DOCNO>
<TEXT>
factors
algorithm
75
cacm
july
1962
relph
a
p
ca620719
jb
march
17
1978
8
18
pm
542
5
542
542
5
542
542
5
542
</TEXT>
</DOC>
<DOC>
<DOCNO>543</DOCNO>
<TEXT>
interpolation
by
aitken
algorithm
70
cacm
july
1962
relph
a
p
ca620718
jb
march
17
1978
8
19
pm
543
5
543
543
5
543
543
5
543
</TEXT>
</DOC>
<DOC>
<DOCNO>544</DOCNO>
<TEXT>
ber
or
bei
function
algorithm
57
cacm
july
1962
relph
a
p
ca620717
jb
march
17
1978
8
21
pm
544
5
544
544
5
544
544
5
544
</TEXT>
</DOC>
<DOC>
<DOCNO>545</DOCNO>
<TEXT>
adjust
inverse
of
a
matrix
when
an
element
is
perturbed
algorithm
51
cacm
july
1962
george
r
ca620716
jb
march
17
1978
8
22
pm
545
5
545
545
5
545
545
5
545
</TEXT>
</DOC>
<DOC>
<DOCNO>546</DOCNO>
<TEXT>
logarithm
of
a
complex
number
algorithm
48
cacm
july
1962
johnson
m
l
sangren
w
ca620715
jb
march
17
1978
8
23
pm
546
5
546
546
5
546
546
5
546
</TEXT>
</DOC>
<DOC>
<DOCNO>547</DOCNO>
<TEXT>
gamma
function
algorithm
34
cacm
july
1962
johnson
m
l
sangren
w
ca620714
jb
march
17
1978
8
25
pm
547
5
547
547
5
547
547
5
547
</TEXT>
</DOC>
<DOC>
<DOCNO>548</DOCNO>
<TEXT>
molecular
orbital
calculation
of
molecular
interactions
cacm
july
1962
kruglyak
y
a
whitman
d
r
ca620713
jb
march
17
1978
8
26
pm
548
5
548
548
5
548
548
5
548
</TEXT>
</DOC>
<DOC>
<DOCNO>549</DOCNO>
<TEXT>
quantum
mechanical
integrals
of
slater
type
orbitals
cacm
july
1962
kruglyak
y
a
whitman
d
r
ca620712
jb
march
17
1978
8
27
pm
549
5
549
549
5
549
549
5
549
</TEXT>
</DOC>
<DOC>
<DOCNO>550</DOCNO>
<TEXT>
definite
exponential
integrals
b
algorithm
109
cacm
july
1962
kruglyak
y
a
whitman
d
r
ca620711
jb
march
17
1978
8
30
pm
550
5
550
550
5
550
550
5
550
</TEXT>
</DOC>
<DOC>
<DOCNO>551</DOCNO>
<TEXT>
definite
exponential
integrals
a
algorithm
108
cacm
july
1962
kruglyak
y
a
whitman
d
r
ca620710
jb
march
17
1978
8
31
pm
551
5
551
551
5
551
551
5
551
</TEXT>
</DOC>
<DOC>
<DOCNO>552</DOCNO>
<TEXT>
gauss
method
algorithm
107
cacm
july
1962
counts
j
w
ca620709
jb
march
17
1978
8
33
pm
552
5
552
552
5
552
552
5
552
</TEXT>
</DOC>
<DOC>
<DOCNO>553</DOCNO>
<TEXT>
complex
number
to
a
real
power
algorithm
106
cacm
july
1962
johnson
m
l
sangren
w
ca620708
jb
march
17
1978
8
34
pm
553
5
553
553
5
553
553
5
553
</TEXT>
</DOC>
<DOC>
<DOCNO>554</DOCNO>
<TEXT>
newton
maehly
algorithm
105
cacm
july
1962
bauer
f
l
stoer
j
ca620707
jb
march
17
1978
8
44
pm
554
5
554
554
5
554
554
5
554
</TEXT>
</DOC>
<DOC>
<DOCNO>555</DOCNO>
<TEXT>
reduction
to
jacobi
algorithm
104
cacm
july
1962
rutishausr
h
ca620706
jb
march
17
1978
8
45
pm
555
5
555
555
5
555
555
5
555
</TEXT>
</DOC>
<DOC>
<DOCNO>556</DOCNO>
<TEXT>
on
translation
of
boolean
expressions
cacm
july
1972
bottenbirruch
h
h
grau
a
a
ca620705
jb
march
17
1978
8
52
pm
1139
4
556
1947
4
556
556
4
556
799
4
556
399
5
556
556
5
556
556
5
556
556
5
556
</TEXT>
</DOC>
<DOC>
<DOCNO>557</DOCNO>
<TEXT>
simulation
of
computer
timing
device
cacm
july
1962
ca620704
jb
march
17
1978
8
57
pm
1380
4
557
1552
4
557
1693
4
557
1781
4
557
1854
4
557
1860
4
557
2060
4
557
557
4
557
1421
5
557
557
5
557
557
5
557
557
5
557
3184
5
557
1198
6
557
1749
6
557
557
6
557
</TEXT>
</DOC>
<DOC>
<DOCNO>558</DOCNO>
<TEXT>
a
modified
inversion
procedure
for
product
form
of
the
inverse
linear
programming
codes
this
paper
describes
a
new
algorithm
for
the
selection
of
the
pivot
row
in
matrix
inversion
when
using
the
product
form
of
the
inverse
this
algorithm
has
been
developed
for
linear
programming
codes
however
it
would
be
valuable
for
the
inversion
of
any
non
dense
matrix
the
procedures
described
in
this
paper
have
been
thoroughly
tested
and
have
been
in
operation
on
the
esso
research
and
engineering
ibm
7090
computer
for
nine
months
substantial
computer
cost
savings
have
been
realized
because
of
this
procedure
cacm
july
1962
larsen
l
j
ca620703
jb
march
17
1978
9
07
pm
558
5
558
558
5
558
558
5
558
</TEXT>
</DOC>
<DOC>
<DOCNO>559</DOCNO>
<TEXT>
solution
of
eigenvalue
problems
with
approximately
known
eigenvectors
cacm
july
1962
appel
k
ca620702
jb
march
17
1978
9
10
pm
559
5
559
559
5
559
559
5
559
</TEXT>
</DOC>
<DOC>
<DOCNO>560</DOCNO>
<TEXT>
communication
between
independently
translated
blocks
cacm
july
1962
wegner
p
ca620701
jb
march
17
1978
9
11
pm
249
4
560
254
4
560
272
4
560
1102
4
560
1109
4
560
1140
4
560
1188
4
560
1306
4
560
1464
4
560
1491
4
560
1767
4
560
1774
4
560
1781
4
560
1787
4
560
1949
4
560
321
4
560
2059
4
560
2126
4
560
435
4
560
437
4
560
463
4
560
483
4
560
491
4
560
2732
4
560
560
4
560
560
4
560
583
4
560
3073
4
560
627
4
560
631
4
560
632
4
560
642
4
560
644
4
560
653
4
560
680
4
560
761
4
560
762
4
560
763
4
560
123
4
560
140
4
560
919
4
560
972
4
560
989
4
560
196
5
560
271
5
560
560
5
560
560
5
560
560
5
560
</TEXT>
</DOC>
<DOC>
<DOCNO>561</DOCNO>
<TEXT>
analytic
differentiation
by
computer
cacm
june
1962
hanson
j
w
caviness
j
s
joseph
c
ca620624
jb
march
17
1978
9
12
pm
1134
4
561
1141
4
561
364
4
561
405
4
561
438
4
561
561
4
561
561
4
561
44
4
561
964
5
561
1028
5
561
1216
5
561
1396
5
561
1392
5
561
393
5
561
77
5
561
561
5
561
561
5
561
561
5
561
964
6
561
1028
6
561
1028
6
561
1029
6
561
1029
6
561
1029
6
561
1083
6
561
1132
6
561
1214
6
561
1278
6
561
1334
6
561
1365
6
561
1386
6
561
1387
6
561
1388
6
561
1392
6
561
1393
6
561
1394
6
561
1395
6
561
1396
6
561
1397
6
561
1496
6
561
284
6
561
284
6
561
407
6
561
3199
6
561
3200
6
561
3201
6
561
3202
6
561
3203
6
561
3204
6
561
561
6
561
561
6
561
561
6
561
561
6
561
561
6
561
730
6
561
759
6
561
</TEXT>
</DOC>
<DOC>
<DOCNO>562</DOCNO>
<TEXT>
avint
algorithm
77
cacm
june
1962
whittier
v
e
ca620623
jb
march
17
1978
9
14
pm
562
5
562
562
5
562
562
5
562
</TEXT>
</DOC>
<DOC>
<DOCNO>563</DOCNO>
<TEXT>
sorting
procedures
algorithm
76
cacm
june
1962
randell
b
ca620622
jb
march
17
1978
9
15
pm
563
5
563
563
5
563
563
5
563
</TEXT>
</DOC>
<DOC>
<DOCNO>564</DOCNO>
<TEXT>
cram
algorithm
67
cacm
june
1962
relph
a
p
ca620621
jb
march
17
1978
9
17
pm
564
5
564
564
5
564
564
5
564
</TEXT>
</DOC>
<DOC>
<DOCNO>565</DOCNO>
<TEXT>
invrs
algorithm
66
cacm
june
1962
caffrey
j
ca620620
jb
march
17
1978
9
18
pm
565
5
565
565
5
565
565
5
565
</TEXT>
</DOC>
<DOC>
<DOCNO>566</DOCNO>
<TEXT>
matrix
inversion
algorithm
58
cacm
june
1962
conger
r
a
ca620619
jb
march
17
1978
9
19
pm
566
5
566
566
5
566
566
5
566
</TEXT>
</DOC>
<DOC>
<DOCNO>567</DOCNO>
<TEXT>
logarithm
of
a
complex
number
algorithm
48
cacm
june
1962
relph
a
p
ca620618
jb
march
17
1978
9
20
pm
567
5
567
567
5
567
567
5
567
</TEXT>
</DOC>
<DOC>
<DOCNO>568</DOCNO>
<TEXT>
exponential
of
a
complex
number
algorithm
46
cacm
june
1962
relph
a
p
ca620617
jb
march
17
1978
9
21
pm
568
5
568
568
5
568
568
5
568
</TEXT>
</DOC>
<DOC>
<DOCNO>569</DOCNO>
<TEXT>
binomial
coefficients
algorithm
19
cacm
june
1962
steck
b
ca620616
jb
march
17
1978
9
22
pm
569
5
569
569
5
569
569
5
569
</TEXT>
</DOC>
<DOC>
<DOCNO>570</DOCNO>
<TEXT>
simpson
rule
integrator
algorithm
103
cacm
june
1962
kuncir
g
f
ca620615
jb
march
17
1978
9
24
pm
1352
5
570
570
5
570
570
5
570
570
5
570
834
6
570
872
6
570
1040
6
570
1092
6
570
1241
6
570
1273
6
570
324
6
570
429
6
570
570
6
570
621
6
570
786
6
570
</TEXT>
</DOC>
<DOC>
<DOCNO>571</DOCNO>
<TEXT>
permutation
in
lexicographical
order
algorithm
102
cacm
june
1962
schrack
g
f
shimrat
m
ca620614
jb
march
17
1978
9
25
pm
571
5
571
571
5
571
571
5
571
</TEXT>
</DOC>
<DOC>
<DOCNO>572</DOCNO>
<TEXT>
add
item
to
chain
linked
list
algorithm
100
cacm
june
1962
kiviat
p
j
ca620612
jb
march
17
1978
9
26
pm
572
5
572
572
5
572
572
5
572
</TEXT>
</DOC>
<DOC>
<DOCNO>573</DOCNO>
<TEXT>
remove
item
from
chain
linked
list
algorithm
101
cacm
june
1962
kiviat
p
j
ca620613
jb
march
17
1978
9
27
pm
573
5
573
573
5
573
573
5
573
</TEXT>
</DOC>
<DOC>
<DOCNO>574</DOCNO>
<TEXT>
evaluation
of
jacobi
symbol
algorithm
99
cacm
june
1962
garland
s
j
knapp
a
w
ca620611
jb
march
17
1978
9
28
pm
574
5
574
574
5
574
574
5
574
</TEXT>
</DOC>
<DOC>
<DOCNO>575</DOCNO>
<TEXT>
evaluation
of
definite
complex
line
integrals
algorithm
98
cacm
june
1962
pfaltz
j
l
ca620610
jb
march
17
1978
9
29
pm
575
5
575
575
5
575
575
5
575
</TEXT>
</DOC>
<DOC>
<DOCNO>576</DOCNO>
<TEXT>
shortest
path
algorithm
97
cacm
june
1962
floyd
r
w
ca620609
jb
march
17
1978
9
30
pm
1846
5
576
2630
5
576
2650
5
576
576
5
576
576
5
576
576
5
576
830
6
576
1380
6
576
1424
6
576
1484
6
576
1572
6
576
2111
6
576
576
6
576
576
6
576
576
6
576
680
6
576
</TEXT>
</DOC>
<DOC>
<DOCNO>577</DOCNO>
<TEXT>
ancestor
algorithm
96
cacm
june
1962
floyd
r
w
ca620608
jb
march
17
19789
31
pm
1836
5
577
577
5
577
577
5
577
577
5
577
1191
6
577
1477
6
577
1491
6
577
1781
6
577
577
6
577
</TEXT>
</DOC>
<DOC>
<DOCNO>578</DOCNO>
<TEXT>
generation
of
partitions
in
part
count
form
algorithm
95
cacm
june
1962
stockmal
f
ca620607
jb
march
17
1978
9
32
pm
578
5
578
578
5
578
578
5
578
</TEXT>
</DOC>
<DOC>
<DOCNO>579</DOCNO>
<TEXT>
combination
algorithm
94
cacm
june
1962
kurtzberg
j
ca620606
jb
march
17
1978
9
33
pm
2690
5
579
2853
5
579
579
5
579
579
5
579
579
5
579
3115
5
579
907
6
579
203
6
579
2045
6
579
2417
6
579
2466
6
579
2690
6
579
2884
6
579
579
6
579
579
6
579
579
6
579
785
6
579
</TEXT>
</DOC>
<DOC>
<DOCNO>580</DOCNO>
<TEXT>
general
order
arithmetic
algorithm
93
cacm
june
1962
perstein
m
h
ca620605
jb
march
17
1978
9
34
pm
580
5
580
580
5
580
580
5
580
</TEXT>
</DOC>
<DOC>
<DOCNO>581</DOCNO>
<TEXT>
a
note
on
sampling
a
tape
file
cacm
june
1962
jones
t
g
ca620604
jb
march
17
1978
9
35
pm
581
5
581
581
5
581
581
5
581
</TEXT>
</DOC>
<DOC>
<DOCNO>582</DOCNO>
<TEXT>
one
lost
bit
cacm
june
1962
oster
c
a
ca620603
jb
march
17
1978
9
36
pm
582
5
582
582
5
582
582
5
582
</TEXT>
</DOC>
<DOC>
<DOCNO>583</DOCNO>
<TEXT>
a
redundancy
check
for
algol
programs
cacm
june
1962
thacher
jr
h
c
ca620602
jb
march
17
1978
9
37
pm
249
4
583
254
4
583
272
4
583
1102
4
583
1109
4
583
1140
4
583
1188
4
583
1306
4
583
1464
4
583
1491
4
583
1767
4
583
1781
4
583
1787
4
583
1949
4
583
321
4
583
2059
4
583
2126
4
583
435
4
583
437
4
583
463
4
583
483
4
583
491
4
583
2732
4
583
560
4
583
583
4
583
3073
4
583
627
4
583
631
4
583
632
4
583
642
4
583
644
4
583
653
4
583
680
4
583
761
4
583
762
4
583
763
4
583
123
4
583
140
4
583
919
4
583
989
4
583
196
5
583
583
5
583
583
5
583
583
5
583
</TEXT>
</DOC>
<DOC>
<DOCNO>584</DOCNO>
<TEXT>
report
on
the
algorithmic
language
fortran
ii
cacm
june
1962
rabinowitz
i
n
ca620601
jb
march
17
1978
9
38
pm
1046
4
584
1105
4
584
1139
4
584
1140
4
584
1234
4
584
1263
4
584
1265
4
584
1496
4
584
1781
4
584
1824
4
584
2126
4
584
2546
4
584
464
4
584
584
4
584
631
4
584
653
4
584
680
4
584
763
4
584
795
4
584
799
4
584
945
4
584
949
5
584
1781
5
584
1945
5
584
404
5
584
584
5
584
584
5
584
584
5
584
823
6
584
123
6
584
196
6
584
914
6
584
915
6
584
917
6
584
919
6
584
984
6
584
989
6
584
990
6
584
990
6
584
1007
6
584
1012
6
584
1046
6
584
1084
6
584
1098
6
584
1122
6
584
1131
6
584
1138
6
584
1139
6
584
1139
6
584
1140
6
584
1141
6
584
1149
6
584
1198
6
584
1200
6
584
1215
6
584
1223
6
584
1223
6
584
1265
6
584
1265
6
584
1303
6
584
1323
6
584
1336
6
584
1358
6
584
1366
6
584
1396
6
584
1421
6
584
1455
6
584
1460
6
584
1462
6
584
1463
6
584
1467
6
584
1468
6
584
1477
6
584
1477
6
584
1487
6
584
1491
6
584
1491
6
584
1496
6
584
1496
6
584
1531
6
584
1535
6
584
1565
6
584
1601
6
584
1602
6
584
1613
6
584
1614
6
584
1626
6
584
1641
6
584
1787
6
584
1788
6
584
205
6
584
224
6
584
249
6
584
288
6
584
316
6
584
381
6
584
398
6
584
11
6
584
404
6
584
410
6
584
463
6
584
464
6
584
483
6
584
483
6
584
483
6
584
3184
6
584
3184
6
584
3188
6
584
584
6
584
584
6
584
584
6
584
600
6
584
669
6
584
680
6
584
680
6
584
691
6
584
763
6
584
763
6
584
799
6
584
</TEXT>
</DOC>
<DOC>
<DOCNO>585</DOCNO>
<TEXT>
initial
experience
with
an
operating
multiprogramming
system
the
lewis
research
center
has
been
using
various
forms
and
degrees
of
program
simultaneity
in
the
operation
of
its
modified
sperry
rand
univac
scientific
model
1103
computer
during
the
last
five
years
this
simultaneity
has
evolved
from
an
initial
achievement
of
self
searching
input
and
output
to
the
automatic
time
sharing
of
independently
coded
problems
several
important
machine
and
program
system
modifications
were
necessary
to
accomplish
this
evolution
several
additional
modifications
although
not
required
were
added
to
facilitate
ease
of
coding
and
operation
all
modifications
had
to
proceed
at
a
relatively
temperate
pace
to
insure
that
the
basic
data
reduction
work
load
of
the
computing
center
was
completed
on
schedule
some
educationally
valuable
mistakes
were
made
and
their
suggested
cures
often
pointed
the
way
to
useful
future
improvements
or
emphasized
some
of
the
basic
principles
of
a
multiprogramming
system
the
material
that
follows
is
a
description
of
the
evolution
of
the
programming
and
hardware
system
which
has
developed
into
the
present
multiprogramming
system
at
lewis
research
center
cacm
may
1962
landis
n
manos
a
turner
l
r
ca620520
jb
march
17
1978
9
45
pm
585
5
585
585
5
585
585
5
585
</TEXT>
</DOC>
<DOC>
<DOCNO>586</DOCNO>
<TEXT>
simultaneous
system
of
equations
and
matrix
inversion
routine
algorithm
92
cacm
may
1962
roek
d
j
ca620519
jb
march
20
1978
1
31
pm
454
5
586
586
5
586
586
5
586
586
5
586
152
6
586
586
6
586
</TEXT>
</DOC>
<DOC>
<DOCNO>587</DOCNO>
<TEXT>
romberg
integration
algorithm
60
cacm
may
1962
buchner
k
h
ca620518
jb
march
20
1978
1
33
pm
1040
5
587
587
5
587
587
5
587
587
5
587
885
6
587
587
6
587
621
6
587
</TEXT>
</DOC>
<DOC>
<DOCNO>588</DOCNO>
<TEXT>
chebyshev
curve
fit
algorithm
91
cacm
may
1962
newhouse
a
ca620517
jb
march
20
1978
1
34
pm
588
5
588
588
5
588
588
5
588
</TEXT>
</DOC>
<DOC>
<DOCNO>589</DOCNO>
<TEXT>
evaluation
of
the
fresnel
cosine
integral
algorithm
90
cacm
may
1962
cundiff
j
l
ca620516
jb
march
20
1978
1
35
pm
589
5
589
589
5
589
589
5
589
</TEXT>
</DOC>
<DOC>
<DOCNO>590</DOCNO>
<TEXT>
evaluation
of
the
fresnel
sine
integral
algorithm
89
cacm
may
1962
cundiff
j
l
ca620515
jb
march
20
1978
1
36
pm
590
5
590
590
5
590
590
5
590
</TEXT>
</DOC>
<DOC>
<DOCNO>591</DOCNO>
<TEXT>
evaluation
of
asymptotic
expression
for
the
fresnel
sine
and
cosine
integrals
algorithm
88
cacm
may
1962
cundiff
j
l
ca620514
jb
march
20
1978
1
37
pm
591
5
591
591
5
591
591
5
591
</TEXT>
</DOC>
<DOC>
<DOCNO>592</DOCNO>
<TEXT>
cobol
batching
problems
cacm
may
1962
mullen
j
w
ca620513
jb
march
20
1978
1
38
pm
592
5
592
592
5
592
592
5
592
</TEXT>
</DOC>
<DOC>
<DOCNO>593</DOCNO>
<TEXT>
an
introduction
to
a
machine
independent
data
division
cacm
may
1962
mullin
j
p
ca620512
jb
march
20
1978
1
39
pm
593
5
593
593
5
593
593
5
593
</TEXT>
</DOC>
<DOC>
<DOCNO>594</DOCNO>
<TEXT>
an
advanced
input
output
system
for
a
cobol
compiler
cacm
may
1962
bouman
c
a
ca620511
jb
march
20
1978
1
40
pm
594
5
594
594
5
594
594
5
594
</TEXT>
</DOC>
<DOC>
<DOCNO>595</DOCNO>
<TEXT>
guides
to
teaching
cobol
the
teaching
of
cobol
can
be
divided
into
three
main
subject
areas
they
are
the
syntax
of
cobol
the
use
of
such
syntax
in
solving
any
given
problem
and
programming
concepts
it
is
generally
accepted
that
some
knowledge
of
the
hardware
and
computer
logic
must
be
possessed
by
the
programmer
the
teaching
problem
arises
in
determining
how
thoroughly
a
student
must
know
the
hardware
and
logic
for
that
computer
for
which
he
will
write
cobol
programs
unfortunately
historical
data
concerning
students
programming
proficiency
is
almost
non
existent
and
at
best
difficult
to
measure
how
then
might
we
approach
solving
this
problem
cacm
may
1962
greene
i
ca620510
jb
march
20
1978
1
44
pm
595
5
595
595
5
595
595
5
595
</TEXT>
</DOC>
<DOC>
<DOCNO>596</DOCNO>
<TEXT>
floating
point
arithmetic
in
cobol
in
this
paper
the
basic
operations
of
floating
point
arithmetic
are
examined
and
cobol
procedures
for
carrying
these
out
are
given
along
with
specification
of
working
storage
the
paper
concludes
with
an
example
in
which
these
procedures
are
used
cacm
may
1962
kesner
o
ca620509
jb
march
20
1978
1
46
pm
596
5
596
596
5
596
596
5
596
</TEXT>
</DOC>
<DOC>
<DOCNO>597</DOCNO>
<TEXT>
modular
data
processing
systems
written
in
cobol
cacm
may
1962
emery
j
c
ca620508
jb
march
20
1978
1
47
pm
597
5
597
597
5
597
597
5
597
</TEXT>
</DOC>
<DOC>
<DOCNO>598</DOCNO>
<TEXT>
the
cobol
librarian
a
key
to
object
program
efficiency
many
answers
to
the
question
how
may
a
cobol
compiler
be
forced
into
the
generation
of
an
efficient
object
program
the
purpose
of
this
article
is
to
present
one
possible
answer
the
creation
and
full
utilization
of
a
well
constructed
cobol
library
cacm
may
1962
hicks
w
ca620507
jb
march
20
1978
1
50
pm
598
5
598
598
5
598
598
5
598
</TEXT>
</DOC>
<DOC>
<DOCNO>599</DOCNO>
<TEXT>
a
report
writer
for
cobol
cacm
may
1962
donally
w
l
ca620506
jb
march
20
1978
1
51
pm
599
5
599
599
5
599
599
5
599
</TEXT>
</DOC>
<DOC>
<DOCNO>600</DOCNO>
<TEXT>
syntactical
charts
of
cobol
61
cacm
may
1962
berman
r
sharp
j
sturges
l
ca620505
jb
march
20
1978
1
52
pm
1781
5
600
600
5
600
600
5
600
600
5
600
123
6
600
196
6
600
919
6
600
990
6
600
1007
6
600
1046
6
600
1131
6
600
1139
6
600
1140
6
600
1149
6
600
1198
6
600
1215
6
600
1223
6
600
1265
6
600
1303
6
600
1323
6
600
1358
6
600
1366
6
600
1421
6
600
1460
6
600
1462
6
600
1463
6
600
1467
6
600
1468
6
600
1477
6
600
1491
6
600
1496
6
600
1531
6
600
1535
6
600
1565
6
600
1601
6
600
1602
6
600
1613
6
600
1614
6
600
1626
6
600
1641
6
600
1787
6
600
1788
6
600
205
6
600
224
6
600
249
6
600
288
6
600
316
6
600
381
6
600
398
6
600
11
6
600
404
6
600
410
6
600
463
6
600
464
6
600
483
6
600
3184
6
600
3188
6
600
584
6
600
600
6
600
680
6
600
691
6
600
763
6
600
799
6
600
</TEXT>
</DOC>
<DOC>
<DOCNO>601</DOCNO>
<TEXT>
interim
report
on
bureau
of
ships
cobol
evaluation
program
cacm
may
1962
siegel
m
smith
a
e
ca620504
jb
march
20
1978
1
53
pm
601
5
601
601
5
601
601
5
601
</TEXT>
</DOC>
<DOC>
<DOCNO>602</DOCNO>
<TEXT>
cobol
and
compatibility
cacm
may
1962
lippitt
a
ca620503
jb
march
20
1978
1
54
pm
602
5
602
602
5
602
602
5
602
</TEXT>
</DOC>
<DOC>
<DOCNO>603</DOCNO>
<TEXT>
basic
elements
of
cobol
61
cacm
may
1962
sammet
j
e
ca620502
jb
march
20
1978
1
54
pm
1084
5
603
603
5
603
603
5
603
603
5
603
868
6
603
603
6
603
644
6
603
669
6
603
791
6
603
797
6
603
</TEXT>
</DOC>
<DOC>
<DOCNO>604</DOCNO>
<TEXT>
why
cobol
cacm
may
1962
cunningham
j
f
ca620501
jb
march
20
1978
1
55
pm
604
5
604
604
5
604
604
5
604
</TEXT>
</DOC>
<DOC>
<DOCNO>605</DOCNO>
<TEXT>
computer
simulation
of
city
traffic
in
simulating
traffic
flow
on
city
streets
the
national
bureau
of
standards
has
used
data
processing
techniques
to
tabulate
and
make
motion
pictures
of
vehicle
movements
in
the
model
each
vehicle
is
assigned
a
digital
identification
giving
points
of
entry
and
exit
type
of
vehicle
desired
speed
and
actual
speed
in
proportions
simulating
field
data
changes
in
the
model
can
be
made
to
observe
their
consequences
and
to
determine
the
ability
of
a
real
street
to
carry
loads
expected
in
the
future
cacm
april
1962
ca620412
jb
march
20
1978
2
00
pm
605
5
605
605
5
605
605
5
605
</TEXT>
</DOC>
<DOC>
<DOCNO>606</DOCNO>
<TEXT>
a
method
for
eliminating
ambiguity
due
to
signal
coincidence
in
digital
design
cacm
april
1962
kaiser
c
j
ca620411
jb
march
20
1978
2
16
pm
606
5
606
606
5
606
606
5
606
</TEXT>
</DOC>
<DOC>
<DOCNO>607</DOCNO>
<TEXT>
the
calculation
of
easter
cacm
april
1962
knuth
d
ca620410
jb
march
20
1978
2
17
pm
607
5
607
607
5
607
607
5
607
</TEXT>
</DOC>
<DOC>
<DOCNO>608</DOCNO>
<TEXT>
permutation
algorithm
71
cacm
april
1962
peck
j
e
l
schrack
g
f
ca620409
jb
march
20
1978
2
18
pm
608
5
608
608
5
608
608
5
608
</TEXT>
</DOC>
<DOC>
<DOCNO>609</DOCNO>
<TEXT>
permutation
algorithm
71
cacm
april
1962
brown
p
j
ca620408
jb
march
20
1978
2
19
pm
609
5
609
609
5
609
609
5
609
</TEXT>
</DOC>
<DOC>
<DOCNO>610</DOCNO>
<TEXT>
sieve
algorithm
35
cacm
april
1962
brown
p
j
ca620407
jb
march
20
1978
2
20
pm
610
5
610
610
5
610
610
5
610
</TEXT>
</DOC>
<DOC>
<DOCNO>611</DOCNO>
<TEXT>
permutation
generator
algorithm
87
cacm
april
1962
howell
j
r
ca620406
jb
march
20
1978
2
20
pm
611
5
611
611
5
611
611
5
611
</TEXT>
</DOC>
<DOC>
<DOCNO>612</DOCNO>
<TEXT>
permute
algorithm
86
cacm
april
1962
peck
j
e
l
schrack
g
f
ca620405
jb
march
20
1978
2
21
pm
3188
5
612
612
5
612
612
5
612
612
5
612
1594
6
612
612
6
612
</TEXT>
</DOC>
<DOC>
<DOCNO>613</DOCNO>
<TEXT>
jacobi
algorithm
85
cacm
april
1962
evans
t
g
ca620404
jb
march
20
1978
2
22
pm
2349
5
613
613
5
613
613
5
613
613
5
613
1648
6
613
1716
6
613
1794
6
613
1894
6
613
2043
6
613
501
6
613
613
6
613
774
6
613
</TEXT>
</DOC>
<DOC>
<DOCNO>614</DOCNO>
<TEXT>
simpson
integration
algorithm
84
cacm
april
1962
hennion
p
e
ca620403
jb
march
20
1978
2
25
pm
614
5
614
614
5
614
614
5
614
</TEXT>
</DOC>
<DOC>
<DOCNO>615</DOCNO>
<TEXT>
addressing
multidimensional
arrays
a
useful
method
of
representing
a
function
of
n
variables
is
to
consider
the
function
to
assume
its
values
at
selected
points
in
n
dimensional
space
although
this
picture
is
of
value
to
the
analyst
the
elements
of
an
n
dimensional
array
must
exist
in
conventional
storage
as
a
linear
array
or
vector
the
means
of
performing
the
transformation
of
a
set
of
indices
locating
on
array
element
in
n
space
to
the
location
address
of
the
element
in
its
storage
vector
is
the
subject
of
this
paper
it
is
noted
that
the
index
address
transformation
is
computationally
identical
to
the
conversion
of
a
number
from
a
fixed
to
a
mixed
radix
number
system
several
ways
of
implementing
the
transformation
are
described
cacm
april
1962
hellerman
h
ca620402
jb
march
20
1978
2
29
pm
435
5
615
615
5
615
615
5
615
615
5
615
849
5
615
155
6
615
196
6
615
615
6
615
615
6
615
</TEXT>
</DOC>
<DOC>
<DOCNO>616</DOCNO>
<TEXT>
an
information
algebra
phase
i
report
language
structure
group
of
the
codasyl
development
committee
this
report
represents
the
results
of
the
first
phase
of
the
work
of
the
language
structure
group
the
goal
of
this
work
is
to
arrive
at
a
proper
structure
for
a
machine
independent
problem
defining
language
at
the
systems
level
of
data
processing
the
report
is
based
for
the
most
part
on
a
mathematical
model
called
an
information
algebra
developed
primarily
by
r
bosak
it
is
hoped
that
this
report
will
be
read
a
with
avid
interest
by
programming
language
designers
and
implementors
and
all
those
interested
in
developing
a
theoretical
approach
to
data
processing
b
with
interest
and
understanding
by
professional
programmers
and
systems
analysts
and
c
with
appreciation
by
the
businessman
analyst
manager
the
authors
have
not
attempted
an
exhaustive
discourse
in
this
report
rather
they
have
tried
to
present
a
philosophy
to
the
professional
people
who
are
vitally
concerned
with
providing
a
working
language
for
the
systems
analyst
use
they
trust
that
the
ideas
in
this
report
will
stimulate
others
to
think
along
similar
lines
questions
and
comments
will
be
welcomed
and
can
be
addressed
to
any
of
the
members
of
the
language
structure
group
robert
bosak
system
development
corporation
richard
f
clippinger
honeywell
edp
division
carey
dobbs
remington
rand
univac
division
roy
goldfinger
chairman
ibm
corporation
renee
b
jasper
navy
management
office
william
keating
national
cash
register
george
kendrick
general
electric
company
jean
e
sammet
ibm
corporation
cacm
april
1962
ca620401
jb
march
20
1978
2
40
pm
1135
5
616
1136
5
616
2710
5
616
2765
5
616
2888
5
616
2906
5
616
493
5
616
616
5
616
616
5
616
616
5
616
729
5
616
1515
6
616
288
6
616
1936
6
616
1976
6
616
2046
6
616
2046
6
616
2046
6
616
2451
6
616
2452
6
616
2715
6
616
493
6
616
616
6
616
616
6
616
616
6
616
616
6
616
616
6
616
616
6
616
616
6
616
616
6
616
657
6
616
</TEXT>
</DOC>
<DOC>
<DOCNO>617</DOCNO>
<TEXT>
poseidon
any
computer
that
forms
part
of
a
control
system
whether
completely
automatic
or
partly
human
must
work
at
the
same
speed
as
the
control
system
it
must
perform
its
calculations
or
data
processing
fast
enough
for
the
results
to
be
available
at
the
required
instants
in
the
action
of
the
control
system
this
known
as
working
in
real
time
cacm
march
1962
wheeling
r
f
ca620315
jb
march
20
1978
2
51
pm
617
5
617
617
5
617
617
5
617
</TEXT>
</DOC>
<DOC>
<DOCNO>618</DOCNO>
<TEXT>
computers
the
key
to
total
systems
control
an
industrial
viewpoint
man
man
machine
processes
are
characterized
in
five
main
types
and
the
markets
for
each
type
are
shown
for
1950
and
1960
and
estimated
for
1970
cacm
march
1962
carlson
w
m
ca620314
jb
march
20
1978
2
53
pm
618
5
618
618
5
618
618
5
618
</TEXT>
</DOC>
<DOC>
<DOCNO>619</DOCNO>
<TEXT>
retrieval
of
misspelled
names
in
an
airlines
passenger
record
system
this
paper
discusses
the
limited
problem
of
recognition
and
retrieval
of
a
given
misspelled
name
from
among
a
roster
of
several
hundred
names
such
as
the
reservation
inventory
for
a
given
flight
of
a
large
jet
airliner
a
program
has
been
developed
and
operated
on
the
telefile
a
stored
program
core
and
drum
memory
solid
state
computer
which
will
retrieve
passengers
records
successfully
despite
significant
misspellings
either
at
original
entry
time
or
at
retrieval
time
the
procedure
involves
an
automatic
scoring
technique
which
matches
the
names
in
a
condensed
form
only
those
few
names
most
closely
resembling
the
requested
name
with
their
phone
numbers
annexed
are
presented
for
the
agents
final
manual
selecton
the
program
has
successfully
isolated
and
retrieved
names
which
were
subjected
to
a
number
of
unusual
as
well
as
usual
misspellings
cacm
march
1962
davidson
l
ca620313
jb
march
20
1978
2
59
pm
1112
5
619
1592
5
619
2111
5
619
2339
5
619
440
5
619
619
5
619
619
5
619
619
5
619
830
6
619
982
6
619
1112
6
619
1112
6
619
1112
6
619
1592
6
619
1592
6
619
440
6
619
619
6
619
619
6
619
619
6
619
619
6
619
619
6
619
</TEXT>
</DOC>
<DOC>
<DOCNO>620</DOCNO>
<TEXT>
ratfact
algorithm
78
cacm
march
1962
halstead
m
h
ca620312
jb
march
20
1978
3
00
pm
620
5
620
620
5
620
620
5
620
</TEXT>
</DOC>
<DOC>
<DOCNO>621</DOCNO>
<TEXT>
romberg
integration
algorithm
60
cacm
march
1962
thacher
jr
h
c
ca620311
jb
march
20
1978
3
01
pm
1040
5
621
1352
5
621
2040
5
621
621
5
621
621
5
621
621
5
621
834
6
621
872
6
621
885
6
621
1040
6
621
1092
6
621
1241
6
621
1241
6
621
1273
6
621
1273
6
621
1352
6
621
1356
6
621
324
6
621
324
6
621
429
6
621
570
6
621
587
6
621
621
6
621
621
6
621
621
6
621
786
6
621
</TEXT>
</DOC>
<DOC>
<DOCNO>622</DOCNO>
<TEXT>
optimal
classification
of
objects
algorithm
83
cacm
march
1962
mayoh
b
h
ca620310
jb
march
20
1978
3
02
pm
622
5
622
622
5
622
622
5
622
</TEXT>
</DOC>
<DOC>
<DOCNO>623</DOCNO>
<TEXT>
economising
a
sequence
2
algorithm
82
cacm
march
1962
mayoh
b
h
ca620309
jb
march
20
1978
3
03
pm
623
5
623
623
5
623
623
5
623
</TEXT>
</DOC>
<DOC>
<DOCNO>624</DOCNO>
<TEXT>
economising
a
sequence
1
algorithm
81
cacm
march
1962
mayoh
b
h
ca620308
jb
march
20
1978
3
04
pm
624
5
624
624
5
624
624
5
624
</TEXT>
</DOC>
<DOC>
<DOCNO>625</DOCNO>
<TEXT>
reciprocal
gamma
function
of
real
argument
algorithm
80
cacm
march
1962
holsten
w
ca620307
jb
march
20
1978
3
05
pm
625
5
625
625
5
625
625
5
625
</TEXT>
</DOC>
<DOC>
<DOCNO>626</DOCNO>
<TEXT>
a
method
of
representation
storage
and
retrieval
of
13
random
codes
in
a
4
digit
number
or
16
random
codes
in
a
5
digit
number
cacm
march
1962
foster
m
b
ca620306
jb
march
20
1978
3
07
pm
626
5
626
626
5
626
626
5
626
</TEXT>
</DOC>
<DOC>
<DOCNO>627</DOCNO>
<TEXT>
knotted
list
structures
cacm
march
1962
weizenbaum
j
ca620305
jb
march
20
1978
3
07
pm
249
4
627
254
4
627
272
4
627
1024
4
627
1050
4
627
1051
4
627
1102
4
627
1102
4
627
1109
4
627
1132
4
627
1140
4
627
1188
4
627
1306
4
627
1390
4
627
1393
4
627
1464
4
627
1486
4
627
1491
4
627
1549
4
627
1549
4
627
1706
4
627
1767
4
627
1781
4
627
1787
4
627
1826
4
627
1878
4
627
1949
4
627
321
4
627
378
4
627
2023
4
627
2059
4
627
2060
4
627
2126
4
627
2155
4
627
2168
4
627
435
4
627
437
4
627
463
4
627
483
4
627
491
4
627
2719
4
627
2723
4
627
2732
4
627
2838
4
627
2842
4
627
2855
4
627
2879
4
627
560
4
627
583
4
627
3073
4
627
3077
4
627
3080
4
627
3106
4
627
3112
4
627
627
4
627
627
4
627
627
4
627
631
4
627
632
4
627
642
4
627
644
4
627
653
4
627
680
4
627
761
4
627
762
4
627
763
4
627
106
4
627
123
4
627
140
4
627
919
4
627
989
4
627
106
5
627
196
5
627
1050
5
627
210
5
627
1549
5
627
2723
5
627
2882
5
627
627
5
627
627
5
627
627
5
627
731
5
627
793
5
627
849
6
627
106
6
627
106
6
627
1051
6
627
1549
6
627
1749
6
627
209
6
627
209
6
627
1826
6
627
210
6
627
210
6
627
367
6
627
2198
6
627
2452
6
627
2651
6
627
406
6
627
627
6
627
627
6
627
627
6
627
627
6
627
627
6
627
627
6
627
731
6
627
731
6
627
753
6
627
</TEXT>
</DOC>
<DOC>
<DOCNO>628</DOCNO>
<TEXT>
on
a
floating
point
number
representation
for
use
with
algorithmic
languages
cacm
march
1962
grau
a
a
ca620304
jb
march
20
1978
3
09
pm
628
5
628
628
5
628
628
5
628
</TEXT>
</DOC>
<DOC>
<DOCNO>629</DOCNO>
<TEXT>
on
a
wired
in
binary
to
decimal
conversion
scheme
cacm
march
1962
lynch
w
c
ca620303
jb
march
20
1978
3
10
pm
629
5
629
629
5
629
629
5
629
</TEXT>
</DOC>
<DOC>
<DOCNO>630</DOCNO>
<TEXT>
an
evaluation
of
autocode
readability
of
the
many
requirements
of
an
autocode
the
pair
of
requirements
easy
to
read
and
easy
to
write
are
not
often
compatible
this
paper
argues
that
readability
can
be
added
automatically
in
the
translation
process
so
that
the
programmer
can
enjoy
the
utmost
economy
of
expression
while
for
management
a
full
and
valid
cobol
version
is
printed
to
give
all
the
advantages
of
readability
and
compatibility
cacm
march
1962
ellis
p
v
ca620302
jb
march
20
1978
3
15
pm
630
5
630
630
5
630
630
5
630
</TEXT>
</DOC>
<DOC>
<DOCNO>631</DOCNO>
<TEXT>
automatic
programming
language
translation
through
syntactical
analysis
cacm
march
1962
ledley
r
wilson
j
b
ca620301
jb
march
20
1978
3
17
pm
249
4
631
254
4
631
272
4
631
1046
4
631
1102
4
631
1105
4
631
1109
4
631
1139
4
631
1140
4
631
1140
4
631
1188
4
631
1234
4
631
1263
4
631
1265
4
631
1306
4
631
1464
4
631
1491
4
631
1496
4
631
1767
4
631
1781
4
631
1781
4
631
1787
4
631
1824
4
631
1949
4
631
321
4
631
2059
4
631
2126
4
631
2126
4
631
2546
4
631
435
4
631
437
4
631
463
4
631
464
4
631
483
4
631
491
4
631
2732
4
631
560
4
631
583
4
631
584
4
631
3073
4
631
627
4
631
631
4
631
631
4
631
632
4
631
642
4
631
644
4
631
653
4
631
653
4
631
680
4
631
680
4
631
761
4
631
762
4
631
763
4
631
763
4
631
795
4
631
799
4
631
123
4
631
140
4
631
919
4
631
945
4
631
989
4
631
196
5
631
1139
5
631
1265
5
631
1665
5
631
404
5
631
631
5
631
631
5
631
631
5
631
763
5
631
196
6
631
1781
6
631
224
6
631
224
6
631
378
6
631
399
6
631
404
6
631
404
6
631
404
6
631
412
6
631
438
6
631
464
6
631
464
6
631
3184
6
631
631
6
631
631
6
631
631
6
631
631
6
631
635
6
631
799
6
631
</TEXT>
</DOC>
<DOC>
<DOCNO>632</DOCNO>
<TEXT>
vectorcardiographic
diagnosis
with
the
aid
of
algol
cacm
february
1962
forsythe
g
e
von
der
groeben
j
toole
j
g
ca620211
jb
march
20
1978
3
41
pm
249
4
632
254
4
632
272
4
632
1102
4
632
1109
4
632
1140
4
632
1188
4
632
1306
4
632
1464
4
632
1491
4
632
1767
4
632
1781
4
632
1787
4
632
1949
4
632
321
4
632
2059
4
632
2126
4
632
435
4
632
437
4
632
463
4
632
483
4
632
491
4
632
2732
4
632
560
4
632
583
4
632
3073
4
632
627
4
632
631
4
632
632
4
632
642
4
632
644
4
632
653
4
632
680
4
632
761
4
632
762
4
632
763
4
632
123
4
632
140
4
632
919
4
632
989
4
632
196
5
632
632
5
632
632
5
632
632
5
632
</TEXT>
</DOC>
<DOC>
<DOCNO>633</DOCNO>
<TEXT>
simulation
and
analysis
of
biochemical
systems
iii
analysis
and
pattern
recognition
cacm
february
1962
garfinkel
d
polk
w
higgins
j
j
ochser
r
t
ca620210
jb
march
20
1978
3
43
pm
238
4
633
633
4
633
633
4
633
643
4
633
238
5
633
633
5
633
633
5
633
633
5
633
643
5
633
238
6
633
633
6
633
633
6
633
643
6
633
</TEXT>
</DOC>
<DOC>
<DOCNO>634</DOCNO>
<TEXT>
manipulation
of
trees
in
information
retrieval
cacm
february
1962
salton
g
ca620209
jb
march
20
1978
3
44
pm
1087
4
634
634
4
634
931
5
634
1324
5
634
329
5
634
634
5
634
634
5
634
634
5
634
202
6
634
396
6
634
634
6
634
634
6
634
652
6
634
653
6
634
</TEXT>
</DOC>
<DOC>
<DOCNO>635</DOCNO>
<TEXT>
a
note
on
multiplying
boolean
matrices
cacm
february
1962
baker
j
j
ca620208
jb
march
20
1978
3
45
pm
1151
5
635
1265
5
635
2769
5
635
635
5
635
635
5
635
635
5
635
404
6
635
464
6
635
3184
6
635
631
6
635
635
6
635
635
6
635
635
6
635
</TEXT>
</DOC>
<DOC>
<DOCNO>636</DOCNO>
<TEXT>
tape
splitting
in
an
iterative
program
cacm
february
1962
weisert
c
ca620207
jb
march
20
1978
3
46
pm
1117
5
636
636
5
636
636
5
636
636
5
636
861
6
636
862
6
636
636
6
636
</TEXT>
</DOC>
<DOC>
<DOCNO>637</DOCNO>
<TEXT>
a
neliac
generated
7090
1401
compiler
neliac
systems
for
several
different
machines
have
been
generated
using
the
original
neliac
system
developed
at
the
naval
electronics
laboratory
san
diego
in
1958
a
basic
bootstrap
process
was
used
to
generate
all
but
the
first
i
e
the
systems
were
described
in
the
neliac
language
and
generated
by
an
existing
neliac
compiler
this
experience
has
shown
there
is
no
inherent
difficulty
in
building
compilers
with
compilers
indeed
it
pointed
out
many
advantages
in
using
a
pol
for
constructing
programming
systems
this
report
presents
the
results
of
a
project
completed
in
may
1961
in
which
the
neliac
system
was
used
to
generate
a
compiler
for
the
ibm
1401
the
1401
compiler
which
runs
on
the
7090
and
produces
1401
programs
was
described
in
the
neliac
language
and
generated
with
7090
neliac
system
the
reduction
in
programming
time
and
the
improvement
in
documentation
of
the
system
were
very
significant
cacm
february
1962
watt
j
b
wattenburg
w
h
ca620206
jb
march
20
1978
3
52
pm
1781
4
637
637
4
637
637
4
637
123
4
637
123
5
637
165
5
637
637
5
637
637
5
637
637
5
637
</TEXT>
</DOC>
<DOC>
<DOCNO>638</DOCNO>
<TEXT>
surge
a
recoding
of
the
cobol
merchandise
control
algorithm
cacm
february
1962
longo
l
f
ca620205
jb
march
20
1978
3
53
pm
638
4
638
300
5
638
638
5
638
638
5
638
638
5
638
</TEXT>
</DOC>
<DOC>
<DOCNO>639</DOCNO>
<TEXT>
difference
expression
coefficients
algorithm
79
cacm
february
1962
giammo
t
p
ca620204
jb
march
20
1978
3
54
pm
639
5
639
639
5
639
639
5
639
</TEXT>
</DOC>
<DOC>
<DOCNO>640</DOCNO>
<TEXT>
rational
roots
of
polynomials
with
integer
coefficients
algorithm
78
cacm
february
1962
perry
c
ca620203
jb
march
20
1978
3
55
pm
640
5
640
640
5
640
640
5
640
</TEXT>
</DOC>
<DOC>
<DOCNO>641</DOCNO>
<TEXT>
interpolation
differentiation
and
integration
algorithm
77
cacm
february
1962
hennion
p
e
ca620202
jb
march
20
1978
3
56
pm
641
5
641
641
5
641
641
5
641
</TEXT>
</DOC>
<DOC>
<DOCNO>642</DOCNO>
<TEXT>
an
introduction
to
algol
cacm
february
1962
schwarz
h
r
ca620201
jb
march
20
1978
3
57
pm
205
4
642
210
4
642
214
4
642
249
4
642
254
4
642
272
4
642
1102
4
642
1109
4
642
1140
4
642
1188
4
642
1306
4
642
1464
4
642
1491
4
642
1767
4
642
1781
4
642
1787
4
642
1949
4
642
1982
4
642
321
4
642
398
4
642
2059
4
642
2126
4
642
435
4
642
437
4
642
463
4
642
483
4
642
491
4
642
2732
4
642
560
4
642
583
4
642
3073
4
642
627
4
642
631
4
642
632
4
642
642
4
642
642
4
642
644
4
642
653
4
642
669
4
642
680
4
642
761
4
642
762
4
642
763
4
642
100
4
642
123
4
642
123
4
642
140
4
642
164
4
642
919
4
642
989
4
642
196
5
642
1
5
642
1173
5
642
1188
5
642
642
5
642
642
5
642
642
5
642
196
6
642
642
6
642
642
6
642
</TEXT>
</DOC>
<DOC>
<DOCNO>643</DOCNO>
<TEXT>
simulation
and
analysis
of
biochemcial
systems
ii
solution
of
differential
equations
cacm
january
1962
larson
r
sellers
p
meyer
r
ca620116
jb
march
20
1978
3
58
pm
238
4
643
633
4
643
643
4
643
643
4
643
238
5
643
633
5
643
643
5
643
643
5
643
643
5
643
238
6
643
633
6
643
643
6
643
643
6
643
</TEXT>
</DOC>
<DOC>
<DOCNO>644</DOCNO>
<TEXT>
a
string
language
for
symbol
manipulation
based
on
algol
60
an
artificial
computer
programming
language
is
proposed
for
describing
the
manipulation
of
strings
of
characters
and
symbols
the
concept
of
strings
introduced
in
the
algol
60
report
is
extended
by
adding
1
the
declaration
of
strings
substrings
and
string
arrays
with
explicit
lengths
2
the
ability
to
concatenate
and
shift
strings
and
3
the
ranking
of
symbols
for
comparing
stings
in
boolean
relations
a
primer
or
informal
description
of
the
language
is
followed
by
examples
a
description
of
experiments
with
the
language
on
an
ibm
704
computer
and
a
formal
description
which
taken
with
the
algol
60
report
defines
the
proposed
string
language
cacm
january
1962
wegstein
j
h
youden
w
w
ca620115
jb
march
20
1978
4
02
pm
249
4
644
254
4
644
272
4
644
1102
4
644
1109
4
644
1140
4
644
1188
4
644
1306
4
644
1464
4
644
1491
4
644
1767
4
644
1781
4
644
1787
4
644
1949
4
644
321
4
644
2059
4
644
2126
4
644
435
4
644
437
4
644
463
4
644
483
4
644
491
4
644
2732
4
644
560
4
644
583
4
644
3073
4
644
627
4
644
631
4
644
632
4
644
642
4
644
644
4
644
644
4
644
644
4
644
653
4
644
680
4
644
761
4
644
762
4
644
763
4
644
123
4
644
140
4
644
919
4
644
989
4
644
196
5
644
1084
5
644
206
5
644
207
5
644
644
5
644
644
5
644
644
5
644
868
6
644
603
6
644
644
6
644
669
6
644
791
6
644
797
6
644
</TEXT>
</DOC>
<DOC>
<DOCNO>645</DOCNO>
<TEXT>
invrs
algorithm
66
cacm
january
1962
randell
b
broyden
c
g
ca620114
jb
march
20
1978
4
04
pm
645
5
645
645
5
645
645
5
645
</TEXT>
</DOC>
<DOC>
<DOCNO>646</DOCNO>
<TEXT>
inverse
of
a
finite
segment
of
the
hilbert
matrix
algorithm
50
cacm
january
1962
randell
b
ca620113
jb
march
20
1978
4
31
pm
646
5
646
646
5
646
646
5
646
</TEXT>
</DOC>
<DOC>
<DOCNO>647</DOCNO>
<TEXT>
numerical
solution
of
the
polynomial
equation
algorithm
30
cacm
january
1962
cohen
k
j
ca620112
jb
march
20
1978
4
32
pm
647
5
647
647
5
647
647
5
647
</TEXT>
</DOC>
<DOC>
<DOCNO>648</DOCNO>
<TEXT>
sorting
procedures
algorithm
76
cacm
january
1962
flores
i
ca620111
jb
march
20
1978
4
33
pm
648
5
648
648
5
648
648
5
648
</TEXT>
</DOC>
<DOC>
<DOCNO>649</DOCNO>
<TEXT>
factors
algorithm
75
cacm
january
1962
peck
j
e
l
ca620110
jb
march
20
1978
4
34
pm
649
5
649
649
5
649
649
5
649
</TEXT>
</DOC>
<DOC>
<DOCNO>650</DOCNO>
<TEXT>
curve
fitting
with
constraints
algorithm
74
cacm
january
1962
peck
j
e
l
ca620109
jb
march
20
1978
4
35
pm
650
5
650
650
5
650
650
5
650
</TEXT>
</DOC>
<DOC>
<DOCNO>651</DOCNO>
<TEXT>
a
survey
of
languages
and
systems
for
information
retrieval
cacm
january
1962
grems
m
ca620108
jb
march
20
1978
4
36
pm
651
5
651
651
5
651
651
5
651
</TEXT>
</DOC>
<DOC>
<DOCNO>652</DOCNO>
<TEXT>
use
of
semantic
structure
in
information
systems
cacm
january
1962
sable
j
d
ca620107
jb
march
20
1978
4
37
pm
1324
5
652
652
5
652
652
5
652
652
5
652
634
6
652
652
6
652
653
6
652
</TEXT>
</DOC>
<DOC>
<DOCNO>653</DOCNO>
<TEXT>
translation
of
retrieval
requests
couched
in
a
semiformal
english
like
language
cacm
january
1962
cheatham
jr
t
e
warshall
s
ca620106
jb
march
20
1978
4
39
pm
249
4
653
254
4
653
272
4
653
1046
4
653
1102
4
653
1105
4
653
1109
4
653
1139
4
653
1140
4
653
1140
4
653
1188
4
653
1234
4
653
1263
4
653
1265
4
653
1306
4
653
1464
4
653
1491
4
653
1496
4
653
1767
4
653
1781
4
653
1781
4
653
1787
4
653
1824
4
653
1949
4
653
321
4
653
2059
4
653
2126
4
653
2126
4
653
2546
4
653
435
4
653
437
4
653
463
4
653
464
4
653
483
4
653
491
4
653
2732
4
653
560
4
653
583
4
653
584
4
653
3073
4
653
627
4
653
631
4
653
631
4
653
632
4
653
642
4
653
644
4
653
653
4
653
653
4
653
680
4
653
680
4
653
761
4
653
762
4
653
763
4
653
763
4
653
795
4
653
799
4
653
123
4
653
140
4
653
919
4
653
945
4
653
989
4
653
196
5
653
1324
5
653
404
5
653
653
5
653
653
5
653
653
5
653
892
5
653
634
6
653
652
6
653
653
6
653
653
6
653
656
6
653
</TEXT>
</DOC>
<DOC>
<DOCNO>654</DOCNO>
<TEXT>
language
problems
posed
by
heavily
structured
data
cacm
january
1962
barnes
r
f
ca620105
jb
march
20
1978
4
40
pm
654
5
654
654
5
654
654
5
654
</TEXT>
</DOC>
<DOC>
<DOCNO>655</DOCNO>
<TEXT>
comit
as
an
ir
language
many
of
the
features
that
make
comit
a
good
all
around
symbol
manipulation
language
also
render
it
well
suited
to
various
types
of
information
retrieval
programs
presented
here
is
a
general
discussion
of
this
unique
and
different
programming
language
and
an
examination
of
some
of
its
applications
cacm
january
1962
yngve
v
h
ca620104
jb
march
20
1978
4
46
pm
1145
5
655
655
5
655
655
5
655
655
5
655
655
6
655
</TEXT>
</DOC>
<DOC>
<DOCNO>656</DOCNO>
<TEXT>
an
information
system
with
the
ability
to
extract
intelligence
from
data
cacm
january
1962
wang
t
l
ca620103
jb
march
20
1978
4
47
pm
1309
5
656
656
5
656
656
5
656
656
5
656
892
5
656
653
6
656
656
6
656
656
6
656
</TEXT>
</DOC>
<DOC>
<DOCNO>657</DOCNO>
<TEXT>
information
structures
for
processing
and
retrieving
cacm
january
1962
colilla
r
a
sams
b
h
ca620102
jb
march
20
1978
4
48
pm
657
4
657
657
4
657
1136
5
657
279
5
657
409
5
657
657
5
657
657
5
657
657
5
657
493
6
657
616
6
657
657
6
657
</TEXT>
</DOC>
<DOC>
<DOCNO>658</DOCNO>
<TEXT>
discussion
the
pros
and
cons
of
a
special
ir
language
cacm
january
1962
sammet
j
e
ohlman
h
bohnest
h
g
ca620101
jb
march
20
1978
4
50
pm
658
5
658
658
5
658
658
5
658
</TEXT>
</DOC>
<DOC>
<DOCNO>659</DOCNO>
<TEXT>
reversion
of
series
algorithm
193
cacm
december
1963
thacher
jr
h
c
ca631215
jb
march
23
1978
8
08
pm
1121
4
659
659
4
659
964
4
659
659
5
659
659
5
659
659
5
659
759
5
659
</TEXT>
</DOC>
<DOC>
<DOCNO>660</DOCNO>
<TEXT>
more
test
matrices
for
determinants
and
inverses
pracnique
cacm
december
1963
englar
t
s
ca631214
jb
march
13
1978
2
46
pm
660
5
660
660
5
660
660
5
660
</TEXT>
</DOC>
<DOC>
<DOCNO>661</DOCNO>
<TEXT>
indexing
and
the
lambda
notation
some
methods
of
indexing
sequentially
stored
elements
of
sparse
multi
dimensional
arrays
are
described
in
the
scheme
a
notation
cacm
december
1963
barnett
m
p
ca631213
jb
march
13
1978
2
51
pm
661
5
661
661
5
661
661
5
661
</TEXT>
</DOC>
<DOC>
<DOCNO>662</DOCNO>
<TEXT>
shuttle
sort
algorithm
175
cacm
december
1963
juelich
o
c
ca631212
jb
march
13
1978
2
52
pm
662
5
662
662
5
662
662
5
662
</TEXT>
</DOC>
<DOC>
<DOCNO>663</DOCNO>
<TEXT>
determinant
algorithm
159
cacm
december
1963
lapidus
a
ca631211
jb
march
13
1978
2
53
pm
663
5
663
663
5
663
663
5
663
</TEXT>
</DOC>
<DOC>
<DOCNO>664</DOCNO>
<TEXT>
assignment
algorithm
27
cacm
december
1963
witty
r
d
ca631210
jb
march
13
1978
2
54
pm
664
5
664
664
5
664
664
5
664
</TEXT>
</DOC>
<DOC>
<DOCNO>665</DOCNO>
<TEXT>
gauss
seidel
algorithm
220
cacm
december
1963
shantz
p
w
ca631209
jb
march
13
1978
2
55
pm
665
5
665
665
5
665
665
5
665
</TEXT>
</DOC>
<DOC>
<DOCNO>666</DOCNO>
<TEXT>
topological
ordering
for
pert
networks
algorithm
219
cacm
december
1963
kase
r
h
ca631208
jb
march
13
1978
2
56
pm
1916
5
666
666
5
666
666
5
666
666
5
666
1533
6
666
666
6
666
</TEXT>
</DOC>
<DOC>
<DOCNO>667</DOCNO>
<TEXT>
kutta
merson
algorithm
218
cacm
december
1963
lukehart
p
m
ca631207
jb
march
13
1978
2
57
pm
667
5
667
667
5
667
667
5
667
</TEXT>
</DOC>
<DOC>
<DOCNO>668</DOCNO>
<TEXT>
minimum
excess
cost
curve
algorithm
217
cacm
december
1963
briggs
w
a
ca631206
jb
march
13
1978
2
58
pm
668
5
668
668
5
668
668
5
668
</TEXT>
</DOC>
<DOC>
<DOCNO>669</DOCNO>
<TEXT>
a
specification
of
jovial
cacm
december
1963
shaw
c
j
ca631205
jb
march
13
1978
2
59
pm
205
4
669
210
4
669
214
4
669
1086
4
669
1132
4
669
1234
4
669
1263
4
669
1265
4
669
1270
4
669
1323
4
669
1358
4
669
1379
4
669
1380
4
669
1453
4
669
1464
4
669
1484
4
669
1491
4
669
1498
4
669
1613
4
669
1614
4
669
1781
4
669
1781
4
669
1825
4
669
1860
4
669
1982
4
669
398
4
669
2083
4
669
2178
4
669
2179
4
669
2252
4
669
2325
4
669
2341
4
669
2546
4
669
2645
4
669
2652
4
669
2684
4
669
2842
4
669
2929
4
669
2934
4
669
3069
4
669
642
4
669
669
4
669
669
4
669
669
4
669
679
4
669
691
4
669
761
4
669
100
4
669
123
4
669
164
4
669
949
4
669
989
4
669
1
5
669
1084
5
669
1379
5
669
1625
5
669
1945
5
669
410
5
669
3184
5
669
669
5
669
669
5
669
669
5
669
823
6
669
868
6
669
914
6
669
915
6
669
917
6
669
984
6
669
989
6
669
990
6
669
1012
6
669
1084
6
669
1098
6
669
1122
6
669
1138
6
669
1139
6
669
1141
6
669
1200
6
669
1223
6
669
1248
6
669
1263
6
669
1265
6
669
1336
6
669
1396
6
669
1455
6
669
1477
6
669
1477
6
669
1487
6
669
1491
6
669
1496
6
669
483
6
669
3184
6
669
584
6
669
603
6
669
644
6
669
669
6
669
669
6
669
669
6
669
669
6
669
680
6
669
761
6
669
763
6
669
791
6
669
797
6
669
</TEXT>
</DOC>
<DOC>
<DOCNO>670</DOCNO>
<TEXT>
some
legal
implications
of
the
use
of
computers
in
the
banking
business
the
introduction
of
computers
in
to
the
banking
business
has
a
wide
variety
of
legal
implications
that
merit
careful
attention
at
this
very
early
stage
the
industry
is
highly
regulated
by
government
and
hence
is
subject
to
many
statutes
and
regulations
it
also
is
affected
by
important
common
law
rules
established
by
courts
the
legal
ramifications
involve
not
only
the
mechanization
itself
but
also
the
very
significant
economically
attractive
phenomenon
of
off
premises
processing
it
is
essential
to
identify
and
provide
for
many
legal
aspects
right
now
before
systems
and
practices
crystallize
in
order
to
avoid
the
later
impact
of
unanticipated
physical
complications
and
expense
the
legal
aspects
of
computerization
in
the
banking
business
are
especially
diverse
in
some
states
there
might
be
the
basic
question
whether
banks
are
authorized
by
law
to
invest
in
the
new
facilities
either
directly
or
through
cooperatives
more
challenging
are
questions
relating
to
off
premises
processors
particularly
with
respect
to
the
obligation
not
to
disclose
information
concerning
a
bank
customers
the
adequacy
of
fidelity
bond
coverage
the
extent
of
liability
for
improper
refusal
to
pay
a
check
and
susceptibility
to
regulation
by
government
agencies
also
pertinent
is
the
propriety
of
data
processing
by
banks
for
nonbank
entities
and
particularly
of
the
rendering
of
that
service
without
charge
for
bank
depositors
cacm
december
1963
freed
r
n
ca631204
jb
march
13
1978
3
09
pm
670
5
670
670
5
670
670
5
670
</TEXT>
</DOC>
<DOC>
<DOCNO>671</DOCNO>
<TEXT>
telefile
a
case
study
of
an
on
line
savings
bank
application
the
development
of
an
on
line
computer
system
for
a
savings
bank
institution
is
traced
from
the
early
conceptual
needs
of
the
bank
to
the
consummation
of
design
by
the
teleregister
corporation
both
bank
and
equipment
criteria
are
specified
which
led
to
the
development
of
the
telefile
system
of
the
teleregister
corporation
operation
of
the
on
line
and
off
line
programs
are
described
and
statistics
are
cited
for
reliability
and
performance
of
the
system
benefits
to
the
bank
are
discussed
from
the
banker
point
of
view
an
indication
of
future
trends
in
the
on
line
savings
bank
field
is
also
discussed
cacm
december
1963
sanders
m
ca631203
jb
march
13
1978
3
13
pm
671
5
671
671
5
671
671
5
671
</TEXT>
</DOC>
<DOC>
<DOCNO>672</DOCNO>
<TEXT>
recent
developments
affecting
adp
in
tax
administration
cacm
december
1963
leibowitz
g
j
ca631202
jb
march
13
1978
3
14
pm
672
5
672
672
5
672
672
5
672
</TEXT>
</DOC>
<DOC>
<DOCNO>673</DOCNO>
<TEXT>
account
classification
at
automating
banks
cacm
december
1963
eckert
j
b
ca631201
jb
march
13
1978
3
15
pm
673
5
673
673
5
673
673
5
673
</TEXT>
</DOC>
<DOC>
<DOCNO>674</DOCNO>
<TEXT>
application
of
ibm
1620
edp
methods
to
the
calculation
of
the
formation
constants
of
complex
irons
cacm
november
1963
andrews
a
c
hassler
j
decou
f
ca631118
jb
march
13
1978
3
18
pm
674
5
674
674
5
674
674
5
674
</TEXT>
</DOC>
<DOC>
<DOCNO>675</DOCNO>
<TEXT>
coding
clinical
laboratory
data
for
automatic
storage
and
retrieval
a
series
of
clinical
laboratory
codes
have
been
developed
to
accept
and
store
urin
analysis
blood
chemistry
and
hematology
test
results
for
automatic
data
processing
the
codes
although
constructed
as
part
of
a
computerized
hospital
simulation
have
been
able
to
handle
the
results
of
every
laboratory
test
that
they
have
encountered
the
unique
feature
of
these
codes
is
that
they
can
accept
conventionally
recorded
qualitative
as
well
as
quantitative
test
results
consequently
clinical
test
results
need
not
be
arbitrarily
stratified
standardized
or
altered
in
any
way
to
be
coded
this
paper
describes
how
the
codes
were
developed
and
presents
a
listing
of
the
urin
analysis
codes
five
criteria
used
in
developing
the
codes
are
outlined
and
the
problem
of
multiple
synonymous
terminology
is
discussed
a
solution
to
the
problem
is
described
flexible
computer
produced
composite
laboratory
reports
are
also
discussed
along
with
reproduction
of
such
a
report
the
paper
concludes
that
even
though
many
problems
remain
unsolved
the
next
ten
years
could
witness
the
emergence
of
a
practical
automated
information
system
in
the
laboratory
cacm
november
1963
gross
l
d
ca631117
jb
march
13
1978
3
26
pm
675
5
675
675
5
675
675
5
675
</TEXT>
</DOC>
<DOC>
<DOCNO>676</DOCNO>
<TEXT>
on
the
computation
of
a
certain
type
of
incompletebeta
functions
cacm
november
1963
tang
i
c
ca631116
jb
march
13
1978
3
27
pm
676
5
676
676
5
676
676
5
676
</TEXT>
</DOC>
<DOC>
<DOCNO>677</DOCNO>
<TEXT>
length
of
strings
for
a
merge
sort
detailed
statistics
are
given
on
the
length
of
maximal
sorted
strings
which
result
form
the
first
internal
sort
phase
of
a
merge
sort
onto
tapes
it
is
shown
that
the
strings
produced
by
an
alternating
method
i
e
one
which
produces
ascending
and
descending
strings
alternately
tend
to
be
only
three
fourths
as
long
as
those
in
a
method
which
produces
only
ascending
strings
contrary
to
statements
which
have
appeared
previously
in
the
literature
a
slight
modification
of
the
read
backward
polyphase
merge
algorithm
is
therefore
suggested
cacm
november
1963
knuth
d
e
ca631115
jb
march
13
1978
3
31
pm
1117
4
677
2017
4
677
2146
4
677
677
4
677
860
4
677
1638
5
677
2176
5
677
2272
5
677
677
5
677
677
5
677
677
5
677
861
5
677
1638
6
677
677
6
677
677
6
677
677
6
677
</TEXT>
</DOC>
<DOC>
<DOCNO>678</DOCNO>
<TEXT>
optimizing
bit
time
computer
simulation
a
major
component
of
a
bit
time
computer
simulation
program
is
the
boolean
compiler
the
compiler
accepts
the
boolean
functions
representing
the
simulated
computer
digital
circuits
and
generates
corresponding
sets
of
machine
instructions
which
are
subsequently
executed
on
the
host
computer
techniques
are
discussed
for
increasing
the
sophistication
of
the
boolean
compiler
so
as
to
optimize
bit
time
computer
simulation
the
techniques
are
applicable
to
any
general
purpose
computer
cacm
november
1963
katz
j
h
ca631114
jb
march
13
1978
3
34
pm
678
4
678
1030
5
678
270
5
678
1886
5
678
1939
5
678
678
5
678
678
5
678
678
5
678
1030
6
678
678
6
678
678
6
678
678
6
678
</TEXT>
</DOC>
<DOC>
<DOCNO>679</DOCNO>
<TEXT>
recent
improvements
in
madcap
madcap
is
a
programming
language
admitting
subscripts
superscripts
and
certain
forms
of
displayed
formulas
the
basic
implementation
of
this
language
was
described
in
a
previous
paper
madcap
a
scientific
compiler
for
a
displayed
formula
textbook
language
comm
acm
4
jan
61
31
36
this
paper
discusses
recent
improvements
in
the
language
in
three
areas
complex
display
logical
control
and
subprogramming
in
the
area
of
complex
display
the
most
prominent
improvements
are
a
notation
for
integration
and
for
the
binomial
coefficients
in
the
area
of
logical
control
the
chief
new
feature
is
a
notation
for
variably
nested
looping
the
discussion
of
subprogramming
is
focused
on
madcap
notation
for
and
use
of
procedures
cacm
november
1963
wells
m
b
ca631113
jb
march
13
1978
3
39
pm
1083
4
679
1086
4
679
1132
4
679
1234
4
679
1263
4
679
1265
4
679
1270
4
679
1323
4
679
1358
4
679
1379
4
679
1380
4
679
1396
4
679
1453
4
679
1464
4
679
1484
4
679
1491
4
679
1498
4
679
1613
4
679
1614
4
679
1781
4
679
1825
4
679
1860
4
679
2083
4
679
2178
4
679
2179
4
679
2252
4
679
2325
4
679
2341
4
679
2546
4
679
2645
4
679
2652
4
679
2684
4
679
2842
4
679
2929
4
679
2934
4
679
3069
4
679
669
4
679
679
4
679
679
4
679
679
4
679
691
4
679
761
4
679
949
4
679
989
4
679
407
5
679
21
5
679
3184
5
679
679
5
679
679
5
679
679
5
679
</TEXT>
</DOC>
<DOC>
<DOCNO>680</DOCNO>
<TEXT>
an
error
correcting
parse
algorithm
cacm
november
1963
irons
e
t
ca631112
jb
march
13
1978
3
40
pm
249
4
680
254
4
680
272
4
680
1046
4
680
1102
4
680
1105
4
680
1109
4
680
1139
4
680
1140
4
680
1140
4
680
1188
4
680
1234
4
680
1263
4
680
1265
4
680
1306
4
680
1464
4
680
1491
4
680
1496
4
680
1767
4
680
1781
4
680
1781
4
680
1787
4
680
1824
4
680
1949
4
680
321
4
680
2059
4
680
2126
4
680
2126
4
680
2546
4
680
435
4
680
437
4
680
463
4
680
464
4
680
483
4
680
491
4
680
2732
4
680
560
4
680
583
4
680
584
4
680
3073
4
680
627
4
680
631
4
680
631
4
680
632
4
680
642
4
680
644
4
680
653
4
680
653
4
680
680
4
680
680
4
680
761
4
680
762
4
680
763
4
680
763
4
680
795
4
680
799
4
680
123
4
680
140
4
680
919
4
680
945
4
680
989
4
680
196
5
680
1225
5
680
1350
5
680
1646
5
680
1781
5
680
1945
5
680
2650
5
680
2698
5
680
2708
5
680
404
5
680
3093
5
680
680
5
680
680
5
680
680
5
680
823
6
680
830
6
680
830
6
680
123
6
680
196
6
680
914
6
680
915
6
680
917
6
680
919
6
680
984
6
680
987
6
680
989
6
680
990
6
680
990
6
680
1007
6
680
1012
6
680
1012
6
680
1012
6
680
1046
6
680
1072
6
680
1084
6
680
1098
6
680
1122
6
680
1131
6
680
1138
6
680
1139
6
680
1139
6
680
1140
6
680
1141
6
680
1149
6
680
1179
6
680
1198
6
680
1200
6
680
1215
6
680
1223
6
680
1223
6
680
1225
6
680
1265
6
680
1265
6
680
1265
6
680
1303
6
680
1323
6
680
1336
6
680
1358
6
680
1366
6
680
1396
6
680
1399
6
680
1421
6
680
1455
6
680
1460
6
680
1462
6
680
1463
6
680
1467
6
680
1468
6
680
1477
6
680
1477
6
680
1477
6
680
1477
6
680
1487
6
680
1491
6
680
1491
6
680
1491
6
680
1491
6
680
1491
6
680
1496
6
680
1496
6
680
1531
6
680
1535
6
680
1565
6
680
1601
6
680
1602
6
680
1613
6
680
1614
6
680
1626
6
680
1641
6
680
1647
6
680
1781
6
680
1787
6
680
1787
6
680
1788
6
680
205
6
680
224
6
680
249
6
680
288
6
680
316
6
680
381
6
680
398
6
680
2110
6
680
2111
6
680
2111
6
680
11
6
680
2179
6
680
2534
6
680
2556
6
680
2556
6
680
2708
6
680
404
6
680
410
6
680
463
6
680
464
6
680
483
6
680
483
6
680
3184
6
680
3188
6
680
576
6
680
584
6
680
584
6
680
600
6
680
669
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
680
6
680
691
6
680
763
6
680
763
6
680
799
6
680
799
6
680
</TEXT>
</DOC>
<DOC>
<DOCNO>681</DOCNO>
<TEXT>
flexible
abbreviation
of
words
in
a
computer
language
cacm
november
1963
lomis
r
g
rubin
j
ca631111
jb
march
13
1978
3
42
pm
681
5
681
681
5
681
681
5
681
</TEXT>
</DOC>
<DOC>
<DOCNO>682</DOCNO>
<TEXT>
recursive
programming
in
fortran
ii
cacm
november
1963
ayers
j
a
ca631110
jb
march
13
1978
3
43
pm
682
5
682
682
5
682
682
5
682
</TEXT>
</DOC>
<DOC>
<DOCNO>683</DOCNO>
<TEXT>
a
serial
technique
to
determine
minimum
paths
cacm
november
1963
weimer
d
l
ca631109
jb
march
13
1978
3
44
pm
683
5
683
683
5
683
683
5
683
</TEXT>
</DOC>
<DOC>
<DOCNO>684</DOCNO>
<TEXT>
interpolation
differentiation
and
integration
algorithm
77
cacm
november
1963
hennion
p
e
ca631108
jb
march
13
1978
3
45
pm
684
5
684
684
5
684
684
5
684
</TEXT>
</DOC>
<DOC>
<DOCNO>685</DOCNO>
<TEXT>
euler
summation
algorithm
8
cacm
november
1963
thacher
jr
h
c
ca631108
jb
march
13
1978
3
46
pm
685
5
685
685
5
685
685
5
685
</TEXT>
</DOC>
<DOC>
<DOCNO>686</DOCNO>
<TEXT>
smooth
algorithm
216
cacm
november
1963
george
r
ca631106
jb
march
13
1978
3
47
pm
686
5
686
686
5
686
686
5
686
</TEXT>
</DOC>
<DOC>
<DOCNO>687</DOCNO>
<TEXT>
shanks
algorithm
215
cacm
november
1963
thacher
jr
h
c
ca631105
jb
march
13
1978
3
48
pm
687
5
687
687
5
687
687
5
687
</TEXT>
</DOC>
<DOC>
<DOCNO>688</DOCNO>
<TEXT>
q
bessel
functions
in
t
algorithm
214
cacm
november
1963
simoes
pereira
j
m
s
ca631104
jb
march
13
1978
3
49
pm
688
5
688
688
5
688
688
5
688
</TEXT>
</DOC>
<DOC>
<DOCNO>689</DOCNO>
<TEXT>
report
of
a
visit
to
discuss
common
programming
languages
in
czechoslovakia
and
poland
1963
cacm
november
1963
gosden
j
a
merner
j
n
gay
r
e
jones
j
l
christopher
j
s
ca631103
jb
march
13
1978
3
51
pm
1349
4
689
323
4
689
689
4
689
689
4
689
689
4
689
217
5
689
323
5
689
3197
5
689
689
5
689
689
5
689
689
5
689
</TEXT>
</DOC>
<DOC>
<DOCNO>690</DOCNO>
<TEXT>
usa
participation
in
an
international
standard
glossary
on
information
processing
cacm
november
1963
traub
j
f
ca631102
jb
march
13
1978
3
52
pm
690
4
690
690
4
690
690
4
690
929
5
690
3195
5
690
690
5
690
690
5
690
690
5
690
890
5
690
</TEXT>
</DOC>
<DOC>
<DOCNO>691</DOCNO>
<TEXT>
a
description
of
the
apt
language
the
apt
automatically
programmed
tools
language
for
numerical
control
programming
is
described
using
the
metalinguistic
notation
introduced
in
the
algol
60
report
examples
of
apt
usage
are
included
presented
also
are
an
historical
summary
of
the
development
of
apt
and
a
statement
concerning
its
present
status
cacm
november
1963
brown
s
a
drayton
c
e
mittman
b
ca631101
jb
march
13
1978
3
59
pm
1086
4
691
1132
4
691
1234
4
691
1263
4
691
1265
4
691
1270
4
691
1323
4
691
1358
4
691
1379
4
691
1380
4
691
1453
4
691
1464
4
691
1484
4
691
1491
4
691
1498
4
691
1613
4
691
1614
4
691
1781
4
691
1825
4
691
1860
4
691
1945
4
691
2083
4
691
2126
4
691
2178
4
691
2179
4
691
2252
4
691
2325
4
691
2341
4
691
2546
4
691
2645
4
691
2652
4
691
2684
4
691
2842
4
691
2929
4
691
2934
4
691
3069
4
691
669
4
691
679
4
691
691
4
691
691
4
691
761
4
691
949
4
691
989
4
691
1781
5
691
3184
5
691
691
5
691
691
5
691
691
5
691
823
5
691
123
6
691
196
6
691
919
6
691
990
6
691
1007
6
691
1046
6
691
1131
6
691
1139
6
691
1140
6
691
1149
6
691
1198
6
691
1215
6
691
1223
6
691
1265
6
691
1303
6
691
1323
6
691
1358
6
691
1366
6
691
1421
6
691
1460
6
691
1462
6
691
1463
6
691
1467
6
691
1468
6
691
1477
6
691
1491
6
691
1496
6
691
1531
6
691
1535
6
691
1565
6
691
1601
6
691
1602
6
691
1613
6
691
1614
6
691
1626
6
691
1641
6
691
1787
6
691
1788
6
691
205
6
691
224
6
691
249
6
691
288
6
691
316
6
691
381
6
691
398
6
691
11
6
691
404
6
691
410
6
691
463
6
691
464
6
691
483
6
691
3184
6
691
3188
6
691
584
6
691
600
6
691
680
6
691
691
6
691
763
6
691
799
6
691
</TEXT>
</DOC>
<DOC>
<DOCNO>692</DOCNO>
<TEXT>
on
the
inverse
of
a
test
matrix
cacm
october
1963
stockmal
f
j
ca631033
jb
march
27
1978
9
00
pm
692
5
692
692
5
692
692
5
692
</TEXT>
</DOC>
<DOC>
<DOCNO>693</DOCNO>
<TEXT>
an
extension
of
fibonaccian
search
to
several
variables
a
technique
which
uses
fibonaccian
search
concepts
has
been
developed
to
solve
optimization
problems
involving
unimodal
functions
of
several
variables
the
technique
has
not
been
proven
to
be
optimal
in
the
sense
that
the
one
dimensional
fibonaccian
search
is
however
it
is
valuable
for
certain
kinds
of
calculations
cacm
october
1963
krolak
p
cooper
l
ca631032
jb
march
13
1978
4
19
pm
693
5
693
693
5
693
693
5
693
</TEXT>
</DOC>
<DOC>
<DOCNO>694</DOCNO>
<TEXT>
a
comparison
of
disks
and
tapes
the
principal
characteristics
of
current
magnetic
disks
and
tape
units
are
summarized
and
compared
some
of
the
characteristics
of
disk
files
are
illustrated
in
a
sorting
example
and
compared
to
a
tapesort
the
conclusion
is
presented
that
disk
files
are
competitive
to
tapes
in
some
important
applications
cacm
october
1963
hess
h
ca631031
jb
march
13
1978
4
21
pm
694
5
694
694
5
694
694
5
694
</TEXT>
</DOC>
<DOC>
<DOCNO>695</DOCNO>
<TEXT>
use
of
the
disk
file
on
stretch
the
paper
begins
by
briefly
describing
the
stretch
ibm
7030
computer
with
special
emphasis
given
to
the
organization
and
operation
of
its
input
output
equipment
physical
characteristics
of
the
two
disk
system
4
194
304
72
bit
words
8
usec
per
word
transmission
rate
etc
are
noted
timing
limitations
due
to
arm
motion
and
disk
rotation
are
discussed
applications
of
disk
usage
are
discussed
separately
for
problem
programs
and
for
systems
programs
such
as
compilers
and
the
supervisory
program
approximately
260
000
words
of
disk
storage
are
reserved
for
the
storage
of
systems
programs
and
the
subroutine
library
problem
programs
however
are
not
currently
filed
on
the
disk
certain
programming
techniques
are
discussed
for
transmitting
words
between
disk
and
core
storage
with
minimum
delaying
and
interruption
of
the
arithmetic
unit
dumps
on
disk
are
considered
for
both
recovery
from
computer
malfunction
and
for
mathematical
or
physical
developments
during
the
calculation
some
comments
are
made
regarding
the
reliability
economics
utility
and
weaknesses
or
limitations
of
the
disk
system
several
possible
future
applications
are
noted
which
appear
to
have
disk
connotations
cacm
october
1963
carlson
b
g
voorhes
e
a
ca631030
jb
march
13
1978
4
28
pm
695
5
695
695
5
695
695
5
695
</TEXT>
</DOC>
<DOC>
<DOCNO>696</DOCNO>
<TEXT>
an
automatic
data
acquisition
and
inquiry
system
using
disk
files
lockheed
missiles
and
space
company
has
installed
a
large
scale
automatic
data
acquisition
ada
system
which
ties
together
the
company
manufacturing
facilities
located
in
van
nuys
and
sunnyvale
california
the
system
includes
over
200
remote
input
stations
which
collect
and
transmit
company
operating
data
to
a
central
data
processing
center
two
rca
301
edp
systems
are
used
to
record
and
control
the
flow
of
data
transmitted
to
the
data
processing
center
a
large
capacity
rca
366
data
disc
file
is
used
to
store
information
required
to
provide
up
to
date
information
in
response
to
inquiries
received
from
remotely
located
inquiry
stations
in
addition
to
storage
of
data
on
the
disk
files
the
system
automatically
records
all
incoming
and
outgoing
data
on
magnetic
tape
to
be
used
as
input
to
the
company
conventional
off
line
business
data
processing
applications
cacm
october
1963
edwards
j
d
ca631029
jb
march
13
1978
4
34
pm
696
5
696
696
5
696
696
5
696
</TEXT>
</DOC>
<DOC>
<DOCNO>697</DOCNO>
<TEXT>
a
numerical
method
for
the
determination
of
moving
field
isodose
curves
for
treatment
planning
in
radiotherapy
cacm
october
1963
dalrymple
g
v
perez
tamayo
r
ca631028
jb
march
13
1978
5
19
pm
697
5
697
697
5
697
697
5
697
</TEXT>
</DOC>
<DOC>
<DOCNO>698</DOCNO>
<TEXT>
data
dial
two
way
communication
with
computers
from
ordinary
dial
telephones
an
operating
system
is
described
which
allows
users
to
call
up
a
remotely
located
computer
from
ordinary
dial
telephones
no
special
hardware
or
connections
are
required
at
the
users
telephones
input
to
the
computer
is
through
the
telephone
dial
output
from
the
computer
is
in
spoken
form
results
of
a
test
with
telephones
in
the
boston
area
are
reported
cacm
october
1963
marill
t
edwards
d
feurzeig
w
ca631027
jb
march
13
1978
5
23
pm
1181
5
698
698
5
698
698
5
698
698
5
698
698
6
698
</TEXT>
</DOC>
<DOC>
<DOCNO>699</DOCNO>
<TEXT>
a
contour
map
program
for
x
ray
crystallography
a
fortran
program
is
described
for
use
with
the
ibm
7090
system
and
an
x
y
plotter
to
produce
a
contour
map
a
matrix
of
points
evenly
spaced
in
each
dimension
is
contoured
scale
factors
along
the
axes
may
be
different
and
the
axes
need
not
be
perpendicular
cacm
october
1963
dayhoff
m
o
ca631026
jb
march
13
1978
5
26
pm
2633
5
699
699
5
699
699
5
699
699
5
699
699
6
699
</TEXT>
</DOC>
<DOC>
<DOCNO>700</DOCNO>
<TEXT>
hermite
interpolation
algorithm
210
cacm
october
1963
dwyer
t
a
ca631025
jb
march
13
1978
5
27
pm
700
5
700
700
5
700
700
5
700
</TEXT>
</DOC>
<DOC>
<DOCNO>701</DOCNO>
<TEXT>
shuttle
sort
algorithm
175
cacm
october
1963
schubert
g
r
ca631024
jb
march
13
1978
5
29
pm
701
5
701
701
5
701
701
5
701
</TEXT>
</DOC>
<DOC>
<DOCNO>702</DOCNO>
<TEXT>
assign
algorithm
173
cacm
october
1963
filsak
z
vrchovecka
l
ca631023
jb
march
13
1978
5
31
pm
702
5
702
702
5
702
702
5
702
</TEXT>
</DOC>
<DOC>
<DOCNO>703</DOCNO>
<TEXT>
assign
algorithm
173
cacm
october
1963
scowen
r
s
ca631022
jb
march
13
1978
5
32
pm
703
5
703
703
5
703
703
5
703
</TEXT>
</DOC>
<DOC>
<DOCNO>704</DOCNO>
<TEXT>
combinatorial
of
m
things
taken
one
at
a
time
two
at
a
time
up
to
n
at
a
time
algorithm
161
cacm
october
1963
collins
d
h
ca631021
jb
march
13
1978
5
34
pm
704
5
704
704
5
704
704
5
704
</TEXT>
</DOC>
<DOC>
<DOCNO>705</DOCNO>
<TEXT>
combinatorial
of
m
things
taken
n
at
a
time
algorithm
160
cacm
october
1963
blakely
r
e
ca631020
jb
march
13
1978
5
36
pm
705
5
705
705
5
705
705
5
705
</TEXT>
</DOC>
<DOC>
<DOCNO>706</DOCNO>
<TEXT>
fourier
series
approximation
algorithm
157
cacm
october
1963
schubert
g
r
ca631019
jb
march
13
1978
5
37
pm
706
5
706
706
5
706
706
5
706
</TEXT>
</DOC>
<DOC>
<DOCNO>707</DOCNO>
<TEXT>
erf
x
algorithm
123
cacm
october
1963
ibbetson
d
ca631018
jb
march
13
1978
5
40
pm
1583
5
707
707
5
707
707
5
707
707
5
707
831
6
707
967
6
707
1126
6
707
707
6
707
</TEXT>
</DOC>
<DOC>
<DOCNO>708</DOCNO>
<TEXT>
evaluation
of
the
fresnel
integrals
algorithm
88
89
90
cacm
october
1963
gray
m
d
ca631017jb
march
13
1978
5
45
pm
708
5
708
708
5
708
708
5
708
</TEXT>
</DOC>
<DOC>
<DOCNO>709</DOCNO>
<TEXT>
assignment
algorithm
27
cacm
october
1963
newhouse
a
ca631016
jb
march
13
1978
5
46
pm
709
5
709
709
5
709
709
5
709
</TEXT>
</DOC>
<DOC>
<DOCNO>710</DOCNO>
<TEXT>
fresnel
integrals
algorithm
213
cacm
october
1963
gray
m
d
ca631015
jb
march
13
1978
5
47
pm
710
5
710
710
5
710
710
5
710
</TEXT>
</DOC>
<DOC>
<DOCNO>711</DOCNO>
<TEXT>
frequency
distribution
algorithm
212
cacm
october
1963
gray
m
d
ca631014
jb
march
13
1978
5
50
pm
711
5
711
711
5
711
711
5
711
</TEXT>
</DOC>
<DOC>
<DOCNO>712</DOCNO>
<TEXT>
hermite
interpolation
algorithm
211
cacm
october
1963
schubert
g
r
ca631013
jb
march
13
1978
5
51
pm
712
5
712
712
5
712
712
5
712
</TEXT>
</DOC>
<DOC>
<DOCNO>713</DOCNO>
<TEXT>
lagrangian
interpolation
algorithm
210
cacm
october
1963
schubert
g
r
ca631012
jb
march
13
1978
5
52
pm
713
5
713
713
5
713
713
5
713
</TEXT>
</DOC>
<DOC>
<DOCNO>714</DOCNO>
<TEXT>
gauss
algorithm
209
cacm
october
1963
ibbetson
d
ca631011
jb
march
13
1978
5
52
pm
1157
5
714
1779
5
714
1920
5
714
1944
5
714
1987
5
714
2548
5
714
714
5
714
714
5
714
714
5
714
836
6
714
1081
6
714
1561
6
714
1581
6
714
1778
6
714
1779
6
714
1779
6
714
1944
6
714
485
6
714
714
6
714
714
6
714
714
6
714
714
6
714
714
6
714
714
6
714
</TEXT>
</DOC>
<DOC>
<DOCNO>715</DOCNO>
<TEXT>
discrete
convolution
algorithm
208
cacm
october
1963
foreman
jr
w
t
ca631010
jb
march
13
1978
5
53
pm
715
5
715
715
5
715
715
5
715
</TEXT>
</DOC>
<DOC>
<DOCNO>716</DOCNO>
<TEXT>
stringsort
algorithm
207
cacm
october
1963
boothroyd
j
ca631009
jb
march
13
1978
5
54
pm
2679
5
716
716
5
716
716
5
716
716
5
716
970
6
716
1175
6
716
1190
6
716
1228
6
716
1969
6
716
1997
6
716
308
6
716
2042
6
716
3187
6
716
507
6
716
716
6
716
783
6
716
</TEXT>
</DOC>
<DOC>
<DOCNO>717</DOCNO>
<TEXT>
partitioning
algorithms
for
finite
sets
the
partitions
of
a
set
with
n
elements
are
represented
by
certain
n
tuples
of
positive
integers
algorithm
are
described
which
generate
without
repetitions
the
n
tuples
corresponding
to
1
all
partitions
of
the
given
set
2
all
partitions
of
the
given
set
into
m
or
fewer
sets
1
m
n
and
3
all
partitions
of
the
given
set
into
exactly
m
sets
1
m
n
cacm
october
1963
hutchinson
g
ca631008
jb
march
13
1978
5
57
pm
717
5
717
717
5
717
717
5
717
</TEXT>
</DOC>
<DOC>
<DOCNO>718</DOCNO>
<TEXT>
an
experiment
in
automatic
verification
of
programs
how
effective
is
a
compiler
at
replacing
explicit
verification
and
what
is
the
cost
of
this
technique
cacm
october
1963
weinberg
g
m
gressett
g
l
ca631007
jb
march
13
1978
5
59
pm
1053
5
718
718
5
718
718
5
718
718
5
718
435
6
718
474
6
718
718
6
718
720
6
718
</TEXT>
</DOC>
<DOC>
<DOCNO>719</DOCNO>
<TEXT>
variable
width
stacks
character
addressable
variable
field
computers
permit
ready
establishment
and
manipulation
of
variable
width
stacks
single
machine
commands
may
push
variable
field
items
down
into
such
stacks
or
pop
them
up
the
availability
of
a
variety
of
field
delimiters
allows
the
machine
to
push
down
or
pop
up
more
than
one
variable
width
item
with
one
command
since
these
stacking
operations
can
be
made
the
basis
of
compiler
decoding
algorithms
the
proper
use
of
machines
of
this
class
for
compilation
has
advantages
over
machines
with
fixed
length
words
cacm
october
1963
rotenberg
n
opler
a
ca631006
jb
march
13
1978
6
25
pm
719
5
719
719
5
719
719
5
719
</TEXT>
</DOC>
<DOC>
<DOCNO>720</DOCNO>
<TEXT>
format
free
input
in
fortran
cacm
october
1963
bailey
m
j
barnett
m
p
futrelle
r
p
ca631005
jb
march
13
1978
6
26
pm
1053
4
720
1062
4
720
1121
4
720
1139
4
720
1265
4
720
1781
4
720
464
4
720
720
4
720
720
4
720
720
4
720
759
4
720
1053
5
720
265
5
720
464
5
720
474
5
720
720
5
720
720
5
720
720
5
720
435
6
720
474
6
720
718
6
720
720
6
720
</TEXT>
</DOC>
<DOC>
<DOCNO>721</DOCNO>
<TEXT>
report
on
proposed
american
standard
flowchart
symbols
for
information
processing
this
paper
presents
the
essential
contents
of
the
proposed
american
standard
flowchart
symbols
for
information
processing
this
is
the
first
proposed
standard
prepared
by
subcommittee
x3
6
on
problem
description
and
analysis
of
the
american
standards
association
asa
cacm
october
1963
rossheim
r
j
ca631004
jb
march
13
1978
6
33
pm
2961
5
721
721
5
721
721
5
721
721
5
721
721
6
721
</TEXT>
</DOC>
<DOC>
<DOCNO>722</DOCNO>
<TEXT>
alcor
group
representation
of
algol
symbols
cacm
october
1963
ca631003
jb
march
13
1978
6
36
pm
722
5
722
722
5
722
722
5
722
</TEXT>
</DOC>
<DOC>
<DOCNO>723</DOCNO>
<TEXT>
ecma
subset
of
algol
60
cacm
october
1963
ca631002
jb
march
13
1978
6
38
pm
723
5
723
723
5
723
723
5
723
</TEXT>
</DOC>
<DOC>
<DOCNO>724</DOCNO>
<TEXT>
a
profile
of
the
programmer
synopsis
549
members
of
the
acm
participated
in
a
study
concerned
primarily
with
the
attitudes
of
programmers
toward
their
careers
and
jobs
a
very
high
percentage
of
programmers
have
apparently
entered
their
careers
by
accident
it
has
proven
a
happy
choice
for
most
and
they
expect
to
remain
in
the
field
during
the
next
five
years
their
principal
job
satisfactions
relate
to
the
nature
of
their
work
and
mostfind
their
jobs
offer
high
level
of
professional
interest
and
good
working
conditions
salary
and
advancement
prospects
however
are
not
as
satisfactory
more
than
half
report
a
positive
attitude
toward
programmers
and
programming
on
the
part
of
their
organizations
turnover
among
themselves
is
attributed
primarily
to
poor
management
salary
is
seen
as
the
principal
motivating
factor
in
turnover
among
other
programmers
nature
of
the
work
offered
and
salary
are
principal
determinants
in
accepting
a
new
job
programmers
are
less
mobile
than
expected
programmers
tend
to
see
their
colleagues
in
a
favorable
light
on
the
whole
personalities
seem
to
vary
with
function
systems
programmers
differing
from
applications
programmers
four
principal
problems
for
programming
in
the
immediate
future
are
listed
by
participants
languages
personnel
various
specific
applications
and
techniques
and
building
programming
as
a
profession
cacm
october
1963
ca631001
jb
march
13
1978
6
48
pm
724
5
724
724
5
724
724
5
724
</TEXT>
</DOC>
<DOC>
<DOCNO>725</DOCNO>
<TEXT>
group
participation
computer
demonstration
cacm
october
1963
mccormick
e
m
ca630933
jb
march
13
1978
6
50
pm
725
5
725
725
5
725
725
5
725
</TEXT>
</DOC>
<DOC>
<DOCNO>726</DOCNO>
<TEXT>
a
general
program
for
the
analysis
of
square
and
rectangular
lattice
designs
this
paper
describes
a
general
purpose
program
that
will
handle
those
incomplete
block
designs
known
as
square
and
rectangular
lattices
flow
diagrams
are
given
so
that
the
method
of
calculation
may
be
programmed
for
any
digital
computer
cacm
september
1963
smillie
k
w
ca630932
jb
march
13
1978
6
53
pm
726
5
726
726
5
726
726
5
726
</TEXT>
</DOC>
<DOC>
<DOCNO>727</DOCNO>
<TEXT>
on
the
approximate
solution
of
delta
u
f
u
three
dimensional
dirichlet
problems
for
delta
u
f
u
fu
0
are
treated
numerically
by
an
exceptionally
fast
exceptionally
accurate
numerical
method
programming
details
numerous
examples
and
mathematical
theory
are
suppliedxtension
of
the
method
in
a
natural
way
to
n
dimensional
problems
is
indicated
by
means
of
a
4
dimensional
example
cacm
september
1963
greenspan
d
yohe
m
ca630931
jb
march
13
1978
6
57
pm
727
5
727
727
5
727
727
5
727
</TEXT>
</DOC>
<DOC>
<DOCNO>728</DOCNO>
<TEXT>
computer
drawn
flowcharts
to
meet
the
need
for
improved
documentation
of
written
computer
programs
a
simple
system
for
effective
communication
is
presented
which
has
shown
great
promise
the
programmer
describes
his
program
in
a
simple
format
and
the
computer
prepares
flow
charts
and
other
cross
referenced
listings
from
this
input
the
description
can
be
kept
up
to
date
easily
and
the
final
output
clearly
explains
the
original
program
the
system
has
also
proved
to
be
a
valuable
debugging
and
coding
aid
cacm
september
1963
knuth
d
e
ca630930
jb
march
13
1978
7
01
pm
728
4
728
728
4
728
920
5
728
1330
5
728
1348
5
728
2315
5
728
45
5
728
728
5
728
728
5
728
728
5
728
1348
6
728
1834
6
728
1987
6
728
528
6
728
728
6
728
728
6
728
728
6
728
</TEXT>
</DOC>
<DOC>
<DOCNO>729</DOCNO>
<TEXT>
a
generalization
of
algol
cacm
september
1963
wirth
n
ca630929
jb
march
13
1978
7
02
pm
1135
4
729
1136
4
729
1781
4
729
493
4
729
2710
4
729
2765
4
729
2888
4
729
2906
4
729
729
4
729
729
4
729
989
4
729
1037
5
729
1234
5
729
1358
5
729
288
5
729
1491
5
729
616
5
729
729
5
729
729
5
729
729
5
729
196
6
729
944
6
729
1140
6
729
1303
6
729
1460
6
729
205
6
729
321
6
729
385
6
729
400
6
729
402
6
729
404
6
729
3184
6
729
3184
6
729
3184
6
729
729
6
729
729
6
729
729
6
729
729
6
729
799
6
729
</TEXT>
</DOC>
<DOC>
<DOCNO>730</DOCNO>
<TEXT>
mirfag
a
compiler
based
on
standard
mathematical
notation
and
plain
english
a
pilot
version
of
the
compiler
mirfag
now
in
operation
is
described
the
chief
features
of
the
system
which
is
intended
for
the
solution
of
scientific
problems
are
the
presentation
of
mathematical
formulas
entirely
in
standard
textbook
notation
the
use
of
plain
english
for
organizational
instructions
automatic
error
diagnosis
indicating
the
actual
location
of
the
error
in
the
uncompiled
program
and
an
attempt
to
minimize
that
fragmentation
of
the
original
problem
statement
which
is
a
normal
feature
of
programming
systems
cacm
september
1963
gawlik
h
j
ca630928
jb
march
13
1978
7
06
pm
1083
5
730
1396
5
730
730
5
730
730
5
730
730
5
730
964
6
730
1028
6
730
1029
6
730
1083
6
730
1132
6
730
1214
6
730
1278
6
730
1334
6
730
1365
6
730
1386
6
730
1387
6
730
1388
6
730
1392
6
730
1393
6
730
1394
6
730
1395
6
730
1396
6
730
1397
6
730
1496
6
730
284
6
730
407
6
730
407
6
730
3192
6
730
3193
6
730
3199
6
730
3200
6
730
3201
6
730
3202
6
730
3203
6
730
3204
6
730
561
6
730
730
6
730
730
6
730
</TEXT>
</DOC>
<DOC>
<DOCNO>731</DOCNO>
<TEXT>
symmetric
list
processor
a
list
processing
system
in
which
each
list
cell
contains
both
a
forward
and
a
backward
link
as
well
as
a
datum
is
described
this
system
is
intended
for
imbeding
in
higher
level
languages
capable
of
calling
functions
and
subroutines
coded
in
machine
language
the
presentation
is
in
the
form
of
fortran
programs
depending
on
only
a
limited
set
of
fortran
programs
depending
on
only
a
limited
set
of
primitive
machine
language
subroutines
which
are
also
defined
finally
a
set
of
field
particularly
character
manipulation
primitives
are
given
to
round
out
the
system
cacm
september
1963
weizenbaum
j
ca630927
jb
march
13
1978
7
10
pm
1050
4
731
1050
4
731
1102
4
731
1549
4
731
378
4
731
2723
4
731
2882
4
731
3008
4
731
731
4
731
731
4
731
793
4
731
798
4
731
1024
5
731
1051
5
731
1098
5
731
1214
5
731
209
5
731
1380
5
731
1388
5
731
1393
5
731
1485
5
731
1487
5
731
1549
5
731
1570
5
731
1878
5
731
1946
5
731
1957
5
731
2168
5
731
2723
5
731
2857
5
731
3112
5
731
627
5
731
731
5
731
731
5
731
731
5
731
878
6
731
106
6
731
106
6
731
106
6
731
902
6
731
1051
6
731
1093
6
731
1098
6
731
1132
6
731
1177
6
731
1380
6
731
1387
6
731
1389
6
731
1393
6
731
1393
6
731
1421
6
731
1549
6
731
1626
6
731
1749
6
731
1826
6
731
1826
6
731
1826
6
731
210
6
731
210
6
731
210
6
731
210
6
731
210
6
731
210
6
731
1860
6
731
1878
6
731
296
6
731
1972
6
731
360
6
731
378
6
731
2438
6
731
2651
6
731
2723
6
731
2736
6
731
2833
6
731
2838
6
731
405
6
731
406
6
731
406
6
731
3184
6
731
627
6
731
627
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
731
6
731
753
6
731
793
6
731
794
6
731
799
6
731
</TEXT>
</DOC>
<DOC>
<DOCNO>732</DOCNO>
<TEXT>
monte
carlo
inverse
algorithm
166
cacm
september
1963
rodman
r
d
ca630926
jb
march
13
1978
7
11
pm
732
5
732
732
5
732
732
5
732
</TEXT>
</DOC>
<DOC>
<DOCNO>733</DOCNO>
<TEXT>
newton
interpolation
with
forward
divided
differences
algorithm
169
cacm
september
1963
thacher
jr
h
c
ca630925
jb
march
13
1978
7
13
pm
733
5
733
733
5
733
733
5
733
</TEXT>
</DOC>
<DOC>
<DOCNO>734</DOCNO>
<TEXT>
newton
interpolation
with
backward
divided
differences
algorithm
168
cacm
september
1963
thacher
jr
h
c
ca630924
jb
march
13
1978
7
15
pm
734
5
734
734
5
734
734
5
734
</TEXT>
</DOC>
<DOC>
<DOCNO>735</DOCNO>
<TEXT>
calculation
of
confluent
divided
differences
algorithm
167
cacm
september
1963
thacher
jr
h
c
ca630923
jb
march
13
1978
7
17
pm
735
5
735
735
5
735
735
5
735
</TEXT>
</DOC>
<DOC>
<DOCNO>736</DOCNO>
<TEXT>
modified
hankel
functions
algorithm
163
cacm
september
1963
thacher
jr
h
c
ca630922
jb
march
13
1978
7
18
pm
736
5
736
736
5
736
736
5
736
</TEXT>
</DOC>
<DOC>
<DOCNO>737</DOCNO>
<TEXT>
exponentiation
of
series
algorithm
158
cacm
september
1963
lawrence
j
d
ca630921
jb
march
13
1978
7
19
pm
737
5
737
737
5
737
737
5
737
</TEXT>
</DOC>
<DOC>
<DOCNO>738</DOCNO>
<TEXT>
fourier
series
approximation
algorithm
157
cacm
september
1963
george
r
ca630920
jb
march
13
1978
7
20
pm
738
5
738
738
5
738
738
5
738
</TEXT>
</DOC>
<DOC>
<DOCNO>739</DOCNO>
<TEXT>
minifun
algorithm
129
cacm
september
1963
wasscher
e
j
ca630919
jb
march
13
1978
7
22
pm
739
5
739
739
5
739
739
5
739
</TEXT>
</DOC>
<DOC>
<DOCNO>740</DOCNO>
<TEXT>
interest
algorithm
45
cacm
september
1963
wright
c
b
ca630918
jb
march
13
1978
7
23
pm
740
5
740
740
5
740
740
5
740
</TEXT>
</DOC>
<DOC>
<DOCNO>741</DOCNO>
<TEXT>
evaluation
of
determinant
algorithm
41
cacm
september
1963
freed
b
h
ca630917
jb
march
13
1978
7
24
pm
741
5
741
741
5
741
741
5
741
</TEXT>
</DOC>
<DOC>
<DOCNO>742</DOCNO>
<TEXT>
evaluation
of
determinant
algorithm
41
cacm
september
1963
freed
b
h
ca630916
jb
march
13
1978
7
25
pm
742
5
742
742
5
742
742
5
742
</TEXT>
</DOC>
<DOC>
<DOCNO>743</DOCNO>
<TEXT>
arccosin
algorithm
206
cacm
september
1963
konda
m
ca630915
jb
march
13
1978
7
26
pm
743
5
743
743
5
743
743
5
743
</TEXT>
</DOC>
<DOC>
<DOCNO>744</DOCNO>
<TEXT>
ative
algorithm
205
cacm
september
1963
haubrich
j
g
a
ca630914
jb
march
13
1978
7
28
pm
744
5
744
744
5
744
744
5
744
</TEXT>
</DOC>
<DOC>
<DOCNO>745</DOCNO>
<TEXT>
steep2
algorithm
204
cacm
september
1963
wasscher
e
j
ca630913
jb
march
13
1978
7
29
pm
745
5
745
745
5
745
745
5
745
</TEXT>
</DOC>
<DOC>
<DOCNO>746</DOCNO>
<TEXT>
steep1
algorithm
203
cacm
september
1963
wasscher
e
j
ca630912
jb
march
13
1978
7
30
pm
746
5
746
746
5
746
746
5
746
</TEXT>
</DOC>
<DOC>
<DOCNO>747</DOCNO>
<TEXT>
generation
of
permutations
in
lexicographical
order
algorithm
202
cacm
september
1963
shen
m
k
ca630911
jb
march
13
1978
7
31
pm
2443
5
747
747
5
747
747
5
747
747
5
747
747
6
747
</TEXT>
</DOC>
<DOC>
<DOCNO>748</DOCNO>
<TEXT>
a
semi
iterative
process
for
evaluating
arctangents
cacm
september
1963
chu
w
h
saathoff
d
r
ca630910
jb
march
13
1978
7
33
pm
748
5
748
748
5
748
748
5
748
</TEXT>
</DOC>
<DOC>
<DOCNO>749</DOCNO>
<TEXT>
note
onstochastic
matrices
cacm
september
1963
dumey
a
i
ca630909
jb
march
13
1978
7
35
pm
749
5
749
749
5
749
749
5
749
</TEXT>
</DOC>
<DOC>
<DOCNO>750</DOCNO>
<TEXT>
pei
matrix
eigenvectors
cacm
september
1963
newbery
a
c
r
ca630908
jb
march
13
1978
7
36
pm
1963
5
750
750
5
750
750
5
750
750
5
750
909
6
750
475
6
750
750
6
750
</TEXT>
</DOC>
<DOC>
<DOCNO>751</DOCNO>
<TEXT>
a
note
on
a
set
of
test
matrices
for
inversion
cacm
september
1963
rodman
r
d
ca630907
jb
march
13
1978
7
38
pm
751
5
751
751
5
751
751
5
751
</TEXT>
</DOC>
<DOC>
<DOCNO>752</DOCNO>
<TEXT>
closing
out
a
print
tape
cacm
september
1963
moore
d
p
ca630906
jb
march
13
1978
7
39
pm
752
5
752
752
5
752
752
5
752
</TEXT>
</DOC>
<DOC>
<DOCNO>753</DOCNO>
<TEXT>
a
procedure
for
converting
logic
table
conditions
into
an
efficient
sequence
of
test
instructions
cacm
september
1963
egler
j
f
ca630905
jb
march
13
1978
7
40
pm
1237
4
753
2220
4
753
753
4
753
1237
5
753
250
5
753
1549
5
753
1564
5
753
2453
5
753
753
5
753
753
5
753
753
5
753
106
6
753
1051
6
753
1172
6
753
1354
6
753
210
6
753
250
6
753
320
6
753
2053
6
753
2220
6
753
406
6
753
627
6
753
731
6
753
753
6
753
753
6
753
753
6
753
753
6
753
</TEXT>
</DOC>
<DOC>
<DOCNO>754</DOCNO>
<TEXT>
ye
indiscreet
monitor
cacm
september
1963
blatt
j
m
ca630904
jb
march
13
1978
7
41
pm
754
4
754
153
5
754
754
5
754
754
5
754
754
5
754
</TEXT>
</DOC>
<DOC>
<DOCNO>755</DOCNO>
<TEXT>
an
exponential
method
of
numerical
integration
of
ordinary
differential
equations
a
formula
for
numerical
integration
is
prepared
which
involves
an
exponential
term
this
formula
is
compared
to
two
standard
integration
methods
and
it
is
shown
that
for
a
large
class
of
differential
equations
the
exponential
formula
has
superior
stability
properties
for
large
step
sizes
thus
this
formula
may
be
used
with
a
large
step
size
to
decrease
the
total
computing
time
for
a
solution
significantly
particularly
in
those
engineering
problems
where
high
accuracy
is
not
needed
cacm
august
1963
pope
d
a
ca630843
jb
march
13
1978
7
52
pm
2567
5
755
755
5
755
755
5
755
755
5
755
2268
6
755
755
6
755
</TEXT>
</DOC>
<DOC>
<DOCNO>756</DOCNO>
<TEXT>
a
computer
program
for
editing
the
news
cacm
august
1963
danielson
w
a
briggs
b
ca630842
jb
march
13
1978
7
53
pm
756
5
756
756
5
756
756
5
756
</TEXT>
</DOC>
<DOC>
<DOCNO>757</DOCNO>
<TEXT>
simulation
of
a
traffic
network
cacm
august
1963
katz
j
h
ca630841
jb
march
13
1978
7
55
pm
1890
5
757
757
5
757
757
5
757
757
5
757
757
6
757
</TEXT>
</DOC>
<DOC>
<DOCNO>758</DOCNO>
<TEXT>
skeletal
structure
of
pert
and
cpa
computer
programs
an
introduction
to
the
inner
mechanics
of
pert
and
cpa
computer
programs
is
provided
the
major
components
of
these
programs
as
well
as
their
purposes
and
interrelationships
are
outlined
cacm
august
1963
kahn
a
b
ca630840
jb
march
13
1978
7
58
pm
1050
4
758
1226
4
758
1723
4
758
441
4
758
758
4
758
758
4
758
367
5
758
441
5
758
758
5
758
758
5
758
758
5
758
</TEXT>
</DOC>
<DOC>
<DOCNO>759</DOCNO>
<TEXT>
continued
operation
notation
for
symbol
manipulation
and
array
processing
a
brief
account
is
given
of
a
notational
device
that
is
very
useful
in
the
formal
representation
of
syntaxes
string
relationships
and
string
transformation
procedures
and
also
of
computing
procedures
that
deal
with
arrays
of
functions
of
many
variables
the
device
consists
of
the
use
of
certain
continued
operation
or
collective
symbols
that
are
analogous
to
the
summation
symbol
sigma
and
continued
multiplication
symbol
pi
of
conventional
mathematics
cacm
august
1963
barnett
m
p
ca630839
jb
march
13
1978
8
02
pm
1062
4
759
1121
4
759
1139
4
759
1265
4
759
1781
4
759
720
4
759
759
4
759
964
5
759
1121
5
759
464
5
759
659
5
759
759
5
759
759
5
759
759
5
759
284
6
759
464
6
759
561
6
759
759
6
759
759
6
759
759
6
759
</TEXT>
</DOC>
<DOC>
<DOCNO>760</DOCNO>
<TEXT>
dialects
of
fortran
cacm
august
1963
pyle
i
c
ca630838
jb
march
13
1978
8
03
pm
760
5
760
760
5
760
760
5
760
</TEXT>
</DOC>
<DOC>
<DOCNO>761</DOCNO>
<TEXT>
a
note
on
the
dangling
else
in
algol
60
some
revisions
of
algol
60
are
proposed
which
not
only
eliminate
certain
ambiguous
statements
but
also
add
some
convenience
to
the
language
a
discussion
of
the
background
of
the
problem
and
a
sketch
of
a
proof
that
the
ambiguities
have
been
removed
is
included
cacm
august
1963
kaupe
jr
a
f
ca630837
jb
march
13
1978
8
06
pm
249
4
761
254
4
761
272
4
761
1086
4
761
1102
4
761
1109
4
761
1132
4
761
1140
4
761
1188
4
761
1234
4
761
1263
4
761
1265
4
761
1270
4
761
1306
4
761
1323
4
761
1358
4
761
1379
4
761
1380
4
761
1453
4
761
1464
4
761
1464
4
761
1484
4
761
1491
4
761
1491
4
761
1498
4
761
1613
4
761
1614
4
761
1767
4
761
1781
4
761
1781
4
761
1787
4
761
1825
4
761
1860
4
761
1949
4
761
321
4
761
2059
4
761
2083
4
761
2126
4
761
2178
4
761
2179
4
761
2252
4
761
2325
4
761
2341
4
761
2546
4
761
435
4
761
437
4
761
463
4
761
483
4
761
491
4
761
2645
4
761
2652
4
761
2684
4
761
2732
4
761
2842
4
761
2929
4
761
2934
4
761
560
4
761
583
4
761
3069
4
761
3073
4
761
627
4
761
631
4
761
632
4
761
642
4
761
644
4
761
653
4
761
669
4
761
679
4
761
680
4
761
691
4
761
761
4
761
761
4
761
761
4
761
762
4
761
763
4
761
123
4
761
140
4
761
919
4
761
949
4
761
989
4
761
989
4
761
196
5
761
947
5
761
1379
5
761
3184
5
761
761
5
761
761
5
761
761
5
761
1263
6
761
1477
6
761
3184
6
761
669
6
761
761
6
761
</TEXT>
</DOC>
<DOC>
<DOCNO>762</DOCNO>
<TEXT>
some
remarks
on
the
syntax
of
symbolic
programming
languages
cacm
august
1963
diforino
a
c
ca630836
jb
march
13
1978
8
07
pm
249
4
762
254
4
762
272
4
762
1102
4
762
1102
4
762
1109
4
762
1140
4
762
1142
4
762
1188
4
762
1306
4
762
1425
4
762
1464
4
762
1491
4
762
1767
4
762
1781
4
762
1781
4
762
1781
4
762
1787
4
762
1945
4
762
1949
4
762
321
4
762
2059
4
762
2126
4
762
435
4
762
437
4
762
438
4
762
463
4
762
483
4
762
491
4
762
2732
4
762
560
4
762
583
4
762
3073
4
762
627
4
762
631
4
762
632
4
762
642
4
762
644
4
762
653
4
762
680
4
762
761
4
762
762
4
762
762
4
762
762
4
762
763
4
762
123
4
762
140
4
762
919
4
762
949
4
762
989
4
762
196
5
762
249
5
762
483
5
762
762
5
762
762
5
762
762
5
762
</TEXT>
</DOC>
<DOC>
<DOCNO>763</DOCNO>
<TEXT>
a
syntax
controlled
generator
of
formal
language
processors
cacm
august
1963
eickel
j
bauer
f
l
paul
m
samelson
k
ca630835
jb
march
13
1978
8
08
pm
249
4
763
254
4
763
267
4
763
272
4
763
1046
4
763
1102
4
763
1105
4
763
1109
4
763
1139
4
763
1139
4
763
1139
4
763
1140
4
763
1140
4
763
1141
4
763
1188
4
763
1215
4
763
1223
4
763
1234
4
763
1263
4
763
1265
4
763
1265
4
763
1306
4
763
1464
4
763
1491
4
763
1496
4
763
1647
4
763
1665
4
763
1767
4
763
1781
4
763
1781
4
763
1781
4
763
1787
4
763
1787
4
763
1792
4
763
1824
4
763
1949
4
763
321
4
763
364
4
763
2059
4
763
2126
4
763
2126
4
763
405
4
763
2546
4
763
435
4
763
437
4
763
438
4
763
463
4
763
464
4
763
483
4
763
491
4
763
2732
4
763
560
4
763
583
4
763
584
4
763
3073
4
763
627
4
763
631
4
763
631
4
763
632
4
763
642
4
763
644
4
763
653
4
763
653
4
763
680
4
763
680
4
763
761
4
763
762
4
763
763
4
763
763
4
763
763
4
763
763
4
763
763
4
763
795
4
763
799
4
763
123
4
763
140
4
763
919
4
763
945
4
763
989
4
763
196
5
763
1215
5
763
224
5
763
1781
5
763
1787
5
763
1945
5
763
2603
5
763
404
5
763
412
5
763
631
5
763
763
5
763
763
5
763
763
5
763
823
6
763
123
6
763
196
6
763
196
6
763
914
6
763
915
6
763
917
6
763
919
6
763
984
6
763
989
6
763
990
6
763
990
6
763
1007
6
763
1012
6
763
1025
6
763
1046
6
763
1084
6
763
1098
6
763
1122
6
763
1131
6
763
1138
6
763
1139
6
763
1139
6
763
1140
6
763
1141
6
763
1141
6
763
1149
6
763
1198
6
763
1200
6
763
1215
6
763
1215
6
763
1223
6
763
1223
6
763
1265
6
763
1265
6
763
1303
6
763
1323
6
763
1336
6
763
1358
6
763
1366
6
763
1396
6
763
1421
6
763
1455
6
763
1460
6
763
1462
6
763
1463
6
763
1467
6
763
1468
6
763
1477
6
763
1477
6
763
1487
6
763
1491
6
763
1491
6
763
1491
6
763
1491
6
763
1496
6
763
1496
6
763
1496
6
763
1531
6
763
1535
6
763
1565
6
763
1601
6
763
1602
6
763
1613
6
763
1614
6
763
1626
6
763
1641
6
763
1781
6
763
1787
6
763
1788
6
763
205
6
763
224
6
763
224
6
763
224
6
763
249
6
763
288
6
763
316
6
763
381
6
763
398
6
763
11
6
763
404
6
763
410
6
763
463
6
763
464
6
763
483
6
763
483
6
763
3184
6
763
3188
6
763
584
6
763
584
6
763
600
6
763
669
6
763
680
6
763
680
6
763
691
6
763
763
6
763
763
6
763
763
6
763
763
6
763
763
6
763
799
6
763
799
6
763
</TEXT>
</DOC>
<DOC>
<DOCNO>764</DOCNO>
<TEXT>
reduction
of
a
matrix
containing
polynomial
elements
algorithm
170
cacm
august
1963
hennion
p
e
ca630834
jb
march
13
1978
8
09
pm
764
5
764
764
5
764
764
5
764
</TEXT>
</DOC>
<DOC>
<DOCNO>765</DOCNO>
<TEXT>
orthogonal
polynomial
least
squares
surface
fit
algorithm
164
cacm
august
1963
bitterli
c
v
ca630833
jb
march
13
1978
8
10
pm
765
5
765
765
5
765
765
5
765
</TEXT>
</DOC>
<DOC>
<DOCNO>766</DOCNO>
<TEXT>
xy
move
plotting
algorithm
162
cacm
august
1963
fletcher
w
e
ca630832
jb
march
13
1978
8
12
pm
766
5
766
766
5
766
766
5
766
</TEXT>
</DOC>
<DOC>
<DOCNO>767</DOCNO>
<TEXT>
certification
of
algorithm
161
combinatorial
of
m
things
taken
one
at
a
time
two
at
a
time
up
to
n
at
a
time
m
l
wolfson
and
h
v
wright
comm
acm
apr
1963
cacm
august
1963
thoro
d
ca630831
jb
march
13
1978
8
13
pm
767
5
767
767
5
767
767
5
767
</TEXT>
</DOC>
<DOC>
<DOCNO>768</DOCNO>
<TEXT>
certification
of
algorithm
160
combinatorial
of
m
things
taken
n
at
a
time
m
l
wolfson
and
h
v
wright
comm
acm
apr
1963
cacm
august
1963
thoro
d
ca630830
jb
march
13
1978
8
14
pm
768
5
768
768
5
768
768
5
768
</TEXT>
</DOC>
<DOC>
<DOCNO>769</DOCNO>
<TEXT>
algebra
of
sets
algorithm
156
cacm
august
1963
bosworth
k
m
ca630829
jb
march
13
1978
8
15
pm
769
5
769
769
5
769
769
5
769
</TEXT>
</DOC>
<DOC>
<DOCNO>770</DOCNO>
<TEXT>
combination
in
any
order
algorithm
155
cacm
august
1963
bosworth
k
m
ca630828
jb
march
13
1978
8
17
pm
770
5
770
770
5
770
770
5
770
</TEXT>
</DOC>
<DOC>
<DOCNO>771</DOCNO>
<TEXT>
combination
in
lexicographical
order
algorithm
154
cacm
august
1963
bosworth
k
m
ca630827
jb
march
13
1978
8
18
pm
771
5
771
771
5
771
771
5
771
</TEXT>
</DOC>
<DOC>
<DOCNO>772</DOCNO>
<TEXT>
gomory
algorithm
153
cacm
august
1963
lefkowitz
b
d
d
a
ca630826
jb
march
13
1978
8
19
pm
772
5
772
772
5
772
772
5
772
</TEXT>
</DOC>
<DOC>
<DOCNO>773</DOCNO>
<TEXT>
matrix
inversion
algorithm
140
cacm
august
1963
george
r
ca630825
jb
march
13
1978
8
20
pm
2061
5
773
773
5
773
773
5
773
773
5
773
1140
6
773
1141
6
773
1477
6
773
1491
6
773
1825
6
773
773
6
773
</TEXT>
</DOC>
<DOC>
<DOCNO>774</DOCNO>
<TEXT>
jacobi
algorithm
85
cacm
august
1963
naur
p
ca630824
jb
march
13
1978
8
21
pm
2349
5
774
774
5
774
774
5
774
774
5
774
1648
6
774
1716
6
774
1794
6
774
1894
6
774
2043
6
774
501
6
774
613
6
774
774
6
774
</TEXT>
</DOC>
<DOC>
<DOCNO>775</DOCNO>
<TEXT>
interpolation
differentiation
and
integration
algorithm
77
cacm
august
1963
hennion
p
e
ca630823
jb
march
13
1978
8
22
pm
775
5
775
775
5
775
775
5
775
</TEXT>
</DOC>
<DOC>
<DOCNO>776</DOCNO>
<TEXT>
partition
quicksort
and
find
algorithm
62
64
65
cacm
august
1963
randell
b
russell
l
j
ca630822
jb
march
13
1978
8
23
pm
3054
5
776
776
5
776
776
5
776
776
5
776
1175
6
776
1880
6
776
1919
6
776
1969
6
776
1980
6
776
1997
6
776
307
6
776
308
6
776
309
6
776
2017
6
776
2679
6
776
776
6
776
</TEXT>
</DOC>
<DOC>
<DOCNO>777</DOCNO>
<TEXT>
a
set
of
test
matrices
algorithm
52
cacm
august
1963
naur
p
ca630821
jb
march
13
1978
8
24
pm
777
5
777
777
5
777
777
5
777
</TEXT>
</DOC>
<DOC>
<DOCNO>778</DOCNO>
<TEXT>
associated
legendre
functions
of
the
first
kind
for
real
or
imaginary
arguments
algorithm
47
cacm
august
1963
george
r
ca630820
jb
march
13
1978
8
26
pm
1818
5
778
778
5
778
778
5
778
778
5
778
778
6
778
</TEXT>
</DOC>
<DOC>
<DOCNO>779</DOCNO>
<TEXT>
crout
ii
algorithm
43
cacm
august
1963
domingo
c
rodriguez
gil
f
ca630819
jb
march
13
1978
8
27
pm
779
5
779
779
5
779
779
5
779
</TEXT>
</DOC>
<DOC>
<DOCNO>780</DOCNO>
<TEXT>
algorithm
42
invert
alg
107
gauss
method
alg
120
inversion
ii
and
gjr
cacm
august
1963
naur
p
ca630818
jb
march
13
1978
8
29
pm
780
5
780
780
5
780
780
5
780
</TEXT>
</DOC>
<DOC>
<DOCNO>781</DOCNO>
<TEXT>
telescope
2
algorithm
38
cacm
august
1963
bridges
j
f
ca630817
jb
march
13
1978
8
30
pm
781
5
781
781
5
781
781
5
781
</TEXT>
</DOC>
<DOC>
<DOCNO>782</DOCNO>
<TEXT>
telescope
1
algorithm
37
cacm
august
1963
bridges
j
f
ca630816
jb
march
13
1978
8
31
pm
782
5
782
782
5
782
782
5
782
</TEXT>
</DOC>
<DOC>
<DOCNO>783</DOCNO>
<TEXT>
shellsort
algorithm
201
cacm
august
1963
boothroyd
j
ca630815
jb
march
13
1978
8
32
pm
2679
5
783
783
5
783
783
5
783
783
5
783
970
6
783
1175
6
783
1190
6
783
1228
6
783
1969
6
783
1997
6
783
308
6
783
2042
6
783
3187
6
783
507
6
783
716
6
783
783
6
783
</TEXT>
</DOC>
<DOC>
<DOCNO>784</DOCNO>
<TEXT>
normal
random
algorithm
200
cacm
august
1963
george
r
ca630814
jb
march
13
1978
8
33
pm
784
5
784
784
5
784
784
5
784
</TEXT>
</DOC>
<DOC>
<DOCNO>785</DOCNO>
<TEXT>
conversions
between
calendar
date
and
julian
day
number
algorithm
199
cacm
august
1963
tantzen
r
g
ca630813
jb
march
13
1978
8
34
pm
2269
5
785
3115
5
785
785
5
785
785
5
785
785
5
785
907
6
785
2045
6
785
2417
6
785
2466
6
785
2884
6
785
579
6
785
785
6
785
785
6
785
</TEXT>
</DOC>
<DOC>
<DOCNO>786</DOCNO>
<TEXT>
adaptive
integration
and
multiple
integration
algorithm
198
cacm
august
1963
mckeeman
w
m
ca630812
jb
march
13
1978
8
35
pm
1352
5
786
2048
5
786
2074
5
786
786
5
786
786
5
786
786
5
786
834
6
786
834
6
786
834
6
786
872
6
786
872
6
786
1040
6
786
1092
6
786
1241
6
786
1273
6
786
324
6
786
429
6
786
429
6
786
429
6
786
570
6
786
621
6
786
786
6
786
786
6
786
786
6
786
</TEXT>
</DOC>
<DOC>
<DOCNO>787</DOCNO>
<TEXT>
matrix
division
algorithm
197
cacm
august
1963
wells
m
ca630811
jb
march
13
1978
8
37
pm
787
5
787
787
5
787
787
5
787
</TEXT>
</DOC>
<DOC>
<DOCNO>788</DOCNO>
<TEXT>
muller
method
for
finding
roots
of
an
arbitrary
function
algorithm
196
cacm
august
1963
roman
r
d
ca630810
jb
march
13
1978
8
38
pm
788
5
788
788
5
788
788
5
788
</TEXT>
</DOC>
<DOC>
<DOCNO>789</DOCNO>
<TEXT>
bandsolve
algorithm
195
cacm
august
1963
thurnau
d
h
ca630809
jb
march
13
1978
8
39
pm
789
5
789
789
5
789
789
5
789
</TEXT>
</DOC>
<DOC>
<DOCNO>790</DOCNO>
<TEXT>
zersol
algorithm
194
cacm
august
1963
domingo
c
ca630808
jb
march
13
1978
8
40
pm
790
5
790
790
5
790
790
5
790
</TEXT>
</DOC>
<DOC>
<DOCNO>791</DOCNO>
<TEXT>
character
manipulation
in
7090
fortran
cacm
august
1963
smith
d
d
ca630807
jb
march
13
1978
8
41
pm
1084
5
791
791
5
791
791
5
791
791
5
791
868
6
791
603
6
791
644
6
791
669
6
791
791
6
791
797
6
791
</TEXT>
</DOC>
<DOC>
<DOCNO>792</DOCNO>
<TEXT>
multiple
precision
binary
to
decimal
integer
conversion
using
only
addition
and
subtraction
cacm
august
1963
keyes
d
f
moore
d
p
ca630806
jb
march
13
1978
8
42
pm
792
5
792
792
5
792
792
5
792
</TEXT>
</DOC>
<DOC>
<DOCNO>793</DOCNO>
<TEXT>
mapped
list
structures
cacm
august
1963
baecker
h
d
ca630805
jb
march
13
1978
8
43
pm
1050
4
793
1549
4
793
2723
4
793
2882
4
793
731
4
793
793
4
793
1051
5
793
627
5
793
793
5
793
793
5
793
793
5
793
210
6
793
378
6
793
406
6
793
731
6
793
793
6
793
794
6
793
</TEXT>
</DOC>
<DOC>
<DOCNO>794</DOCNO>
<TEXT>
a
list
type
storage
technique
for
alphameric
information
a
method
which
is
economic
in
terms
of
space
and
time
is
proposed
for
the
storage
and
manipulation
of
character
strings
of
arbitrary
length
in
a
fixed
word
length
computer
the
method
is
illustrated
in
an
application
to
algol
type
identifiers
in
an
algol
like
block
structure
cacm
august
1963
bowlden
h
j
ca630804
jb
march
13
1978
8
45
pm
794
4
794
1051
5
794
1062
5
794
254
5
794
794
5
794
794
5
794
794
5
794
210
6
794
378
6
794
406
6
794
464
6
794
731
6
794
793
6
794
794
6
794
794
6
794
</TEXT>
</DOC>
<DOC>
<DOCNO>795</DOCNO>
<TEXT>
debugging
systems
at
the
source
language
level
cacm
august
1963
ferguson
h
e
berner
e
ca630803
jb
march
13
1978
8
46
pm
1046
4
795
1105
4
795
1139
4
795
1140
4
795
1234
4
795
1263
4
795
1265
4
795
1496
4
795
1781
4
795
1824
4
795
2126
4
795
2546
4
795
464
4
795
2616
4
795
584
4
795
631
4
795
653
4
795
680
4
795
763
4
795
795
4
795
795
4
795
799
4
795
945
4
795
931
5
795
404
5
795
795
5
795
795
5
795
795
5
795
</TEXT>
</DOC>
<DOC>
<DOCNO>796</DOCNO>
<TEXT>
sabrag
a
time
sharing
low
cost
computer
the
serial
sabrac
computer
designed
and
built
in
the
scientific
department
of
the
israel
defense
ministry
has
a
5000
location
magnetic
drum
main
store
to
avoid
a
need
to
resort
to
optimum
programming
techniques
and
to
increase
its
overall
efficiency
the
computer
has
also
been
given
a
224
word
ferrite
core
store
from
which
the
program
is
obeyed
transfers
between
the
core
and
drum
stores
and
to
and
from
the
twin
paper
tape
input
and
output
channels
are
all
available
autonomously
concurrently
time
shared
multiplication
and
division
orders
are
also
autonomous
so
that
the
machine
may
be
executing
up
to
three
orders
simultaneously
all
functions
naturally
are
interlocked
a
number
of
other
advanced
orders
and
facilities
are
also
incorporatedn
particular
an
execute
order
permits
a
temporary
jump
for
up
to
four
orders
and
a
second
modifier
register
permits
double
modification
in
general
and
relative
addressing
of
subroutines
in
particular
thus
the
overall
effective
speed
of
the
machine
is
muchhigher
than
its
basic
specification
would
lead
one
to
expect
and
its
design
indicates
one
way
in
which
the
concepts
of
time
sharing
may
be
incorporated
in
low
cost
computers
cacm
august
1963
lehman
m
netter
z
eshed
r
ca630802
jb
march
13
1978
8
54
pm
3193
4
796
796
4
796
491
5
796
796
5
796
796
5
796
796
5
796
</TEXT>
</DOC>
<DOC>
<DOCNO>797</DOCNO>
<TEXT>
american
standard
code
for
information
interchange
cacm
august
1963
ca630801
jb
march
13
1978
8
55
pm
1084
5
797
797
5
797
797
5
797
797
5
797
868
6
797
603
6
797
644
6
797
669
6
797
791
6
797
797
6
797
</TEXT>
</DOC>
<DOC>
<DOCNO>798</DOCNO>
<TEXT>
a
catalogue
entry
retrieval
system
scheff
b
h
cacm
july
1963
ca630726
jb
march
14
1978
8
08
am
1050
4
798
1102
4
798
378
4
798
3008
4
798
731
4
798
798
4
798
209
5
798
798
5
798
798
5
798
798
5
798
</TEXT>
</DOC>
<DOC>
<DOCNO>799</DOCNO>
<TEXT>
design
of
a
separable
transition
diagram
compiler
a
cobol
compiler
design
is
presented
which
is
compact
enough
to
permit
rapid
one
pass
compilation
of
a
large
subset
of
cobol
on
a
moderately
large
computer
versions
of
the
same
compiler
for
smaller
machines
require
only
two
working
tapes
plus
a
compiler
tape
the
methods
given
are
largely
applicable
to
the
construction
of
algol
compilers
cacm
july
1963
conway
m
e
ca630725
jb
march
14
1978
8
11
am
222
4
799
1046
4
799
1105
4
799
1139
4
799
1139
4
799
1140
4
799
1234
4
799
1263
4
799
1265
4
799
1496
4
799
1781
4
799
1824
4
799
1947
4
799
2126
4
799
2546
4
799
464
4
799
556
4
799
584
4
799
631
4
799
653
4
799
680
4
799
763
4
799
795
4
799
799
4
799
799
4
799
799
4
799
799
4
799
945
4
799
945
5
799
1323
5
799
1358
5
799
1380
5
799
1665
5
799
1781
5
799
1787
5
799
1989
5
799
399
5
799
2112
5
799
2534
5
799
2541
5
799
2698
5
799
2733
5
799
2820
5
799
404
5
799
82
5
799
3073
5
799
3155
5
799
799
5
799
799
5
799
799
5
799
830
6
799
123
6
799
196
6
799
196
6
799
196
6
799
919
6
799
990
6
799
1007
6
799
1046
6
799
1131
6
799
1139
6
799
1140
6
799
1141
6
799
1149
6
799
1198
6
799
1215
6
799
1215
6
799
1223
6
799
1265
6
799
1303
6
799
1323
6
799
1358
6
799
1366
6
799
1421
6
799
1421
6
799
1460
6
799
1460
6
799
1462
6
799
1463
6
799
1467
6
799
1468
6
799
1477
6
799
1477
6
799
1491
6
799
1491
6
799
1491
6
799
1496
6
799
1496
6
799
1531
6
799
1535
6
799
1565
6
799
1601
6
799
1602
6
799
1613
6
799
1614
6
799
1626
6
799
1641
6
799
1781
6
799
1781
6
799
1781
6
799
1781
6
799
1787
6
799
1787
6
799
1788
6
799
205
6
799
205
6
799
224
6
799
224
6
799
249
6
799
267
6
799
288
6
799
1959
6
799
1973
6
799
316
6
799
378
6
799
381
6
799
398
6
799
2110
6
799
2110
6
799
2111
6
799
11
6
799
2179
6
799
2182
6
799
2204
6
799
2247
6
799
2423
6
799
2534
6
799
2556
6
799
2732
6
799
2786
6
799
404
6
799
410
6
799
463
6
799
464
6
799
483
6
799
3073
6
799
3184
6
799
3184
6
799
3184
6
799
3184
6
799
3186
6
799
3188
6
799
584
6
799
600
6
799
631
6
799
680
6
799
680
6
799
691
6
799
729
6
799
731
6
799
763
6
799
763
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
799
6
799
</TEXT>
</DOC>
<DOC>
<DOCNO>800</DOCNO>
<TEXT>
the
linking
segment
subprogram
language
and
linking
loader
cacm
july
1963
mccarthy
j
corbato
f
j
daggett
m
m
ca630724
jb
march
14
1978
8
13
am
1471
5
800
1774
5
800
800
5
800
800
5
800
800
5
800
800
6
800
800
6
800
1173
6
800
271
6
800
276
6
800
</TEXT>
</DOC>
<DOC>
<DOCNO>801</DOCNO>
<TEXT>
least
squares
solution
with
constraints
algorithm
177
cacm
july
1963
synge
m
j
ca630723
jb
march
14
1978
8
14
am
801
5
801
801
5
801
801
5
801
</TEXT>
</DOC>
<DOC>
<DOCNO>802</DOCNO>
<TEXT>
syminv2
algorithm
150
cacm
july
1963
rutishauser
h
ca630722jb
march
14
1978
8
15
am
802
5
802
802
5
802
802
5
802
</TEXT>
</DOC>
<DOC>
<DOCNO>803</DOCNO>
<TEXT>
syminv2
algorithm
150
cacm
july
1963
evans
jr
a
ca630721
jb
march
14
1978
8
16
am
803
5
803
803
5
803
803
5
803
</TEXT>
</DOC>
<DOC>
<DOCNO>804</DOCNO>
<TEXT>
exponentiation
of
series
algorithms
134
cacm
july
1963
thacher
jr
h
c
ca630720
jb
march
14
1978
8
19
am
804
5
804
804
5
804
804
5
804
</TEXT>
</DOC>
<DOC>
<DOCNO>805</DOCNO>
<TEXT>
newton
maehly
algorithm
105
cacm
july
1963
kondo
j
ca630719
jb
march
14
1978
8
20
am
805
5
805
805
5
805
805
5
805
</TEXT>
</DOC>
<DOC>
<DOCNO>806</DOCNO>
<TEXT>
remark
on
certification
of
matrix
inversion
procedures
cacm
july
1963
moler
c
ca630718
jb
march
14
1978
8
21
am
1177
4
806
806
4
806
806
4
806
932
5
806
454
5
806
806
5
806
806
5
806
806
5
806
</TEXT>
</DOC>
<DOC>
<DOCNO>807</DOCNO>
<TEXT>
reversion
of
series
algorithm
193
cacm
july
1963
fettis
h
e
ca630717
jb
march
14
1978
8
22
am
807
5
807
807
5
807
807
5
807
</TEXT>
</DOC>
<DOC>
<DOCNO>808</DOCNO>
<TEXT>
confluent
hypergeometric
algorithm
192
cacm
july
1963
relph
a
p
ca630716
jb
march
14
1978
8
29
am
808
5
808
808
5
808
808
5
808
</TEXT>
</DOC>
<DOC>
<DOCNO>809</DOCNO>
<TEXT>
hypergeometric
algorithm
191
cacm
july
1963
relph
a
p
ca630715
jb
march
14
1978
8
30
am
809
5
809
809
5
809
809
5
809
</TEXT>
</DOC>
<DOC>
<DOCNO>810</DOCNO>
<TEXT>
complex
power
algorithm
190
cacm
july
1963
relph
a
p
ca630714
jb
march
14
1978
8
32
am
810
5
810
810
5
810
810
5
810
</TEXT>
</DOC>
<DOC>
<DOCNO>811</DOCNO>
<TEXT>
smoothing
2
algorithm
189
cacm
july
1963
rodriguez
gil
f
ca630713
jb
march
14
1978
8
33
am
811
5
811
811
5
811
811
5
811
</TEXT>
</DOC>
<DOC>
<DOCNO>812</DOCNO>
<TEXT>
smoothing
1
algorithm
188
cacm
july
1963
rodriguez
gil
f
ca630712
jb
march
14
1978
8
34
am
812
5
812
812
5
812
812
5
812
</TEXT>
</DOC>
<DOC>
<DOCNO>813</DOCNO>
<TEXT>
differences
and
derivatives
algorithm
187
cacm
july
1963
vande
riet
r
p
ca630711
jb
march
14
1978
8
35
am
813
5
813
813
5
813
813
5
813
</TEXT>
</DOC>
<DOC>
<DOCNO>814</DOCNO>
<TEXT>
complex
arithmetic
algorithm
186
cacm
july
1963
vande
riet
r
p
ca630710
jb
march
14
1978
8
36
am
814
5
814
814
5
814
814
5
814
</TEXT>
</DOC>
<DOC>
<DOCNO>815</DOCNO>
<TEXT>
normal
probability
for
curve
fitting
algorithm
185
cacm
july
1963
colker
a
ca630709
jb
march
14
1978
8
38
am
815
5
815
815
5
815
815
5
815
</TEXT>
</DOC>
<DOC>
<DOCNO>816</DOCNO>
<TEXT>
erlang
probability
for
curve
fitting
algorithm
184
cacm
july
1963
colker
a
ca630708
jb
march
14
1978
8
39
am
816
5
816
816
5
816
816
5
816
</TEXT>
</DOC>
<DOC>
<DOCNO>817</DOCNO>
<TEXT>
nexcom
algorithm
152
cacm
july
1963
hopley
j
ca630707
jb
march
14
1978
8
40
am
817
5
817
817
5
817
817
5
817
</TEXT>
</DOC>
<DOC>
<DOCNO>818</DOCNO>
<TEXT>
realizing
boolean
connectives
on
the
ibm
1620
cacm
july
1963
hellerman
h
senzig
d
n
ca630706
jb
march
14
1978
8
44
am
818
5
818
818
5
818
818
5
818
</TEXT>
</DOC>
<DOC>
<DOCNO>819</DOCNO>
<TEXT>
polynomial
evaluation
revised
cacm
july
1963
eisman
s
h
ca630705
jb
march
14
1978
8
46
am
1620
4
819
819
4
819
1620
5
819
436
5
819
819
5
819
819
5
819
819
5
819
819
6
819
436
6
819
</TEXT>
</DOC>
<DOC>
<DOCNO>820</DOCNO>
<TEXT>
checking
for
loops
in
networks
cacm
july
1963
gordon
r
m
ca630704
jb
march
14
1978
8
47
am
820
5
820
820
5
820
820
5
820
</TEXT>
</DOC>
<DOC>
<DOCNO>821</DOCNO>
<TEXT>
further
remarks
on
sampling
a
tape
file
iii
cacm
july
1963
juelich
o
c
ca630703
jb
march
14
1978
8
48
am
821
5
821
821
5
821
821
5
821
</TEXT>
</DOC>
<DOC>
<DOCNO>822</DOCNO>
<TEXT>
real
time
programming
specifications
problems
in
the
implementation
of
large
real
time
applications
are
treated
and
suggested
guidelines
for
both
program
and
file
specifications
are
developed
the
problems
delineated
also
occur
in
systems
programming
cacm
july
1963
head
r
v
ca630702
jb
march
14
1978
8
50
am
822
5
822
822
5
822
822
5
822
</TEXT>
</DOC>
<DOC>
<DOCNO>823</DOCNO>
<TEXT>
a
syntactic
description
of
bc
nelliac
cacm
july
1963
huskey
h
d
love
r
wirth
n
ca630701
jb
march
14
1978
8
51
am
1945
5
823
2126
5
823
691
5
823
823
5
823
823
5
823
823
5
823
823
6
823
823
6
823
823
6
823
196
6
823
914
6
823
915
6
823
917
6
823
984
6
823
989
6
823
990
6
823
1012
6
823
1084
6
823
1098
6
823
1122
6
823
1138
6
823
1139
6
823
1141
6
823
1200
6
823
1223
6
823
1265
6
823
1336
6
823
1396
6
823
1455
6
823
1477
6
823
1487
6
823
1491
6
823
1496
6
823
1614
6
823
1693
6
823
404
6
823
483
6
823
3184
6
823
584
6
823
669
6
823
680
6
823
763
6
823
</TEXT>
</DOC>
<DOC>
<DOCNO>824</DOCNO>
<TEXT>
descriptran
automated
descriptive
geometry
descriptive
geometry
consists
of
procedures
originally
designed
to
solve
3
space
geometry
problems
by
graphical
constructions
and
measurement
instead
of
by
computation
however
in
addition
to
this
it
unifies
and
simplifies
the
approach
to
many
such
problems
when
one
can
call
subroutines
that
compute
new
coordinates
that
correspond
to
those
obtainable
from
the
graphical
constructions
there
is
the
three
way
advantage
of
the
approach
of
descriptive
geometry
the
accuracy
of
computation
and
the
speed
of
the
digital
computer
descriptran
makes
it
possible
to
program
many
problems
in
3
space
with
a
few
statements
it
consists
of
15
subroutines
analogous
to
the
procedures
of
descriptive
geometry
cacm
june
1963
kliphardt
r
a
ca630625
jb
march
14
1978
9
56
am
824
5
824
824
5
824
824
5
824
</TEXT>
</DOC>
<DOC>
<DOCNO>825</DOCNO>
<TEXT>
pip
a
photo
interpretive
program
for
the
analysis
of
spark
chamber
data
an
operating
computer
program
that
processes
photographically
recorded
data
is
described
the
input
to
the
program
consists
of
spark
chamber
photographs
on
which
tracks
of
high
energy
particles
are
recorded
the
program
automatically
scans
measures
and
performs
the
preliminary
interpretation
of
these
photographs
in
continuous
operation
a
processing
rate
of
5
000
photographic
frames
per
hour
is
achieved
cacm
june
1963
rudloe
h
deutsch
m
marill
t
ca630624
jb
march
14
1978
9
59
am
825
5
825
825
5
825
825
5
825
</TEXT>
</DOC>
<DOC>
<DOCNO>826</DOCNO>
<TEXT>
remarks
on
fortran
subroutines
for
time
series
analysis
cacm
june
1963
bennett
c
m
ca630623
jb
march
14
1978
10
00
am
1118
4
826
826
4
826
948
4
826
942
5
826
1118
5
826
826
5
826
826
5
826
826
5
826
826
6
826
942
6
826
</TEXT>
</DOC>
<DOC>
<DOCNO>827</DOCNO>
<TEXT>
disk
file
sorting
sorting
techniques
using
an
ibm
1401
with
a
random
access
storage
device
are
evaluated
cacm
june
1963
schick
t
ca630622
jb
march
14
1978
10
02
am
827
5
827
827
5
827
827
5
827
</TEXT>
</DOC>
<DOC>
<DOCNO>828</DOCNO>
<TEXT>
incompressible
flow
network
calculations
a
general
method
for
the
calculation
of
flows
and
pressures
in
fluid
flow
networks
is
presented
the
method
is
applicable
to
computer
use
cacm
june
1963
cantrell
h
n
ca630621
jb
march
14
1978
10
03
am
828
5
828
828
5
828
828
5
828
</TEXT>
</DOC>
<DOC>
<DOCNO>829</DOCNO>
<TEXT>
the
external
language
klipa
for
the
ural
2
digital
computer
cacm
june
1963
greniewski
m
turski
w
ca630620
jb
march
14
1978
10
04
am
2905
5
829
829
5
829
829
5
829
829
5
829
829
6
829
</TEXT>
</DOC>
<DOC>
<DOCNO>830</DOCNO>
<TEXT>
corc
the
cornell
computing
language
cacm
june
1963
conway
r
w
maxwell
w
l
ca630619
jb
march
14
1978
10
06
am
1179
5
830
1288
5
830
1544
5
830
1646
5
830
2111
5
830
2534
5
830
2556
5
830
2650
5
830
830
5
830
830
5
830
830
5
830
830
6
830
830
6
830
830
6
830
830
6
830
830
6
830
830
6
830
830
6
830
830
6
830
987
6
830
1072
6
830
1112
6
830
1179
6
830
1592
6
830
1647
6
830
1787
6
830
1935
6
830
1936
6
830
1959
6
830
1973
6
830
2111
6
830
2111
6
830
2111
6
830
2182
6
830
408
6
830
576
6
830
619
6
830
680
6
830
680
6
830
799
6
830
</TEXT>
</DOC>
<DOC>
<DOCNO>831</DOCNO>
<TEXT>
real
error
function
erf
algorithm
123
cacm
june
1963
thacher
jr
h
c
ca630618
jb
march
14
1978
10
07
am
1583
5
831
831
5
831
831
5
831
831
5
831
831
6
831
967
6
831
1126
6
831
707
6
831
</TEXT>
</DOC>
<DOC>
<DOCNO>832</DOCNO>
<TEXT>
curve
fitting
with
constraints
algorithm
74
cacm
june
1963
isoda
k
ca630617
jb
march
14
1978
10
08
am
832
5
832
832
5
832
832
5
832
</TEXT>
</DOC>
<DOC>
<DOCNO>833</DOCNO>
<TEXT>
reduction
of
a
symmetric
bandmatrix
to
triple
diagonal
form
cacm
june
1963
schwartz
h
r
ca630616jb
march
14
1978
10
09
am
833
5
833
833
5
833
833
5
833
</TEXT>
</DOC>
<DOC>
<DOCNO>834</DOCNO>
<TEXT>
nonrecursive
adaptive
integration
algorithm
182
cacm
june
1963
mckeeman
w
m
tesler
l
ca630615
jb
march
14
1978
10
10
am
1352
5
834
2048
5
834
2074
5
834
2093
5
834
834
5
834
834
5
834
834
5
834
834
6
834
834
6
834
834
6
834
834
6
834
872
6
834
872
6
834
872
6
834
1040
6
834
1092
6
834
1092
6
834
1241
6
834
1273
6
834
1298
6
834
1573
6
834
324
6
834
429
6
834
429
6
834
429
6
834
429
6
834
570
6
834
621
6
834
786
6
834
786
6
834
786
6
834
</TEXT>
</DOC>
<DOC>
<DOCNO>835</DOCNO>
<TEXT>
complementary
error
function
large
x
algorithm
181
cacm
june
1963
thacher
jr
h
c
ca630614
jb
march
14
1978
10
12
am
835
5
835
835
5
835
835
5
835
</TEXT>
</DOC>
<DOC>
<DOCNO>836</DOCNO>
<TEXT>
error
function
large
x
algorithm
180
cacm
june
1963
thacher
jr
h
c
ca630613
jb
march
14
1978
10
13
am
1157
5
836
836
5
836
836
5
836
836
5
836
836
6
836
1081
6
836
485
6
836
714
6
836
</TEXT>
</DOC>
<DOC>
<DOCNO>837</DOCNO>
<TEXT>
incomplete
beta
ratio
algorithm
179
cacm
june
1963
ludwig
o
g
ca630612
jb
march
14
1978
10
15
am
837
5
837
837
5
837
837
5
837
</TEXT>
</DOC>
<DOC>
<DOCNO>838</DOCNO>
<TEXT>
direct
search
algorithm
178
cacm
june
1963
kaupe
jr
a
f
ca630611
jb
march
14
1978
10
16
am
838
5
838
838
5
838
838
5
838
</TEXT>
</DOC>
<DOC>
<DOCNO>839</DOCNO>
<TEXT>
least
squares
solution
with
constraints
algorithm
177
cacm
june
1963
synge
m
j
ca630610
jb
march
14
1978
10
17
am
839
5
839
839
5
839
839
5
839
</TEXT>
</DOC>
<DOC>
<DOCNO>840</DOCNO>
<TEXT>
least
squares
surface
fit
algorithm
176
cacm
june
1963
arthurs
t
d
ca630609
jb
march
14
1978
10
18
am
840
5
840
840
5
840
840
5
840
</TEXT>
</DOC>
<DOC>
<DOCNO>841</DOCNO>
<TEXT>
shuttle
sort
algorithm
175
cacm
june
1963
shaw
c
j
trimble
t
n
ca630608
jb
march
14
1978
10
20
am
841
5
841
841
5
841
841
5
841
</TEXT>
</DOC>
<DOC>
<DOCNO>842</DOCNO>
<TEXT>
a
posteriori
bounds
on
a
zero
of
a
polynomial
algorithm
174
cacm
june
1963
gibb
a
ca630607
jb
march
14
1978
10
21
am
842
5
842
842
5
842
842
5
842
</TEXT>
</DOC>
<DOC>
<DOCNO>843</DOCNO>
<TEXT>
assign
algorithm
173
cacm
june
1963
hajek
o
ca630606
jb
march
14
1978
10
22
am
843
5
843
843
5
843
843
5
843
</TEXT>
</DOC>
<DOC>
<DOCNO>844</DOCNO>
<TEXT>
1410
fortran
edit
feature
cacm
june
1963
fedako
j
e
ca630605
jb
march
14
1978
10
23
am
844
5
844
844
5
844
844
5
844
</TEXT>
</DOC>
<DOC>
<DOCNO>845</DOCNO>
<TEXT>
another
test
matrix
for
determinants
and
inverses
cacm
june
1963
caffrey
j
ca630604
jb
march
14
1978
10
24
am
845
5
845
845
5
845
845
5
845
</TEXT>
</DOC>
<DOC>
<DOCNO>846</DOCNO>
<TEXT>
self
inverse
conversion
table
cacm
june
1963
sanborn
t
g
ca630603
jb
march
14
1978
10
25
am
846
5
846
846
5
846
846
5
846
</TEXT>
</DOC>
<DOC>
<DOCNO>847</DOCNO>
<TEXT>
a
penny
matching
program
the
logic
of
a
penny
matching
program
written
for
the
csx
1
is
described
cacm
june
1963
wall
e
brown
r
m
ca630602
jb
march
14
1978
10
27
am
847
5
847
847
5
847
847
5
847
</TEXT>
</DOC>
<DOC>
<DOCNO>848</DOCNO>
<TEXT>
a
note
on
range
transformations
for
square
root
and
logarithm
there
was
the
germ
of
an
idea
in
two
previous
papers
1
2
which
no
one
seems
to
have
picked
up
in
almost
five
years
for
certain
functions
it
seems
desirable
to
transform
the
argument
to
a
short
range
symmetric
about
10
1
will
give
examples
of
this
usage
for
the
square
root
and
logarithm
function
for
both
binary
and
decimal
machines
cacm
june
1963
bemer
r
w
ca630601
jb
march
14
1978
10
41
am
848
4
848
848
4
848
26
5
848
35
5
848
848
5
848
848
5
848
848
5
848
</TEXT>
</DOC>
<DOC>
<DOCNO>849</DOCNO>
<TEXT>
use
of
tree
structures
for
processing
files
in
data
processing
problems
files
are
frequently
used
which
must
both
be
searched
and
altered
binary
search
techniques
are
efficient
for
searching
large
files
but
the
associated
file
organization
is
not
readily
adapted
to
the
file
alterations
conversely
a
chained
file
allocation
permits
efficient
alteration
but
cannot
be
searched
efficiently
a
file
organized
into
a
tree
like
structure
is
discussed
and
it
is
shown
that
such
a
file
may
both
be
searched
and
altered
with
times
proportional
to
slog
s
n
where
n
is
the
number
of
file
items
and
s
is
a
parameter
of
the
tree
it
is
also
shown
that
optimizing
the
value
of
s
leads
to
a
search
time
which
is
only
25
per
cent
slower
than
the
binary
search
the
tree
organization
employs
two
data
chains
and
may
be
considered
to
be
a
compromise
between
the
organizations
for
the
binary
search
and
the
chained
file
the
relation
of
the
tree
organization
to
multidimensional
indexing
and
to
the
trie
structure
is
also
discussed
cacm
may
1963
sussenguth
jr
e
h
ca630518
jb
march
14
1978
10
49
am
435
4
849
2846
4
849
849
4
849
849
4
849
944
4
849
155
5
849
1050
5
849
1935
5
849
1936
5
849
2017
5
849
2032
5
849
2257
5
849
2360
5
849
2451
5
849
2452
5
849
615
5
849
849
5
849
849
5
849
849
5
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
849
6
849
850
6
849
851
6
849
852
6
849
853
6
849
854
6
849
855
6
849
856
6
849
857
6
849
858
6
849
859
6
849
860
6
849
861
6
849
862
6
849
863
6
849
864
6
849
865
6
849
866
6
849
106
6
849
944
6
849
1115
6
849
1785
6
849
209
6
849
1831
6
849
1831
6
849
1935
6
849
1936
6
849
1936
6
849
1936
6
849
1936
6
849
1976
6
849
367
6
849
2198
6
849
2360
6
849
627
6
849
</TEXT>
</DOC>
<DOC>
<DOCNO>850</DOCNO>
<TEXT>
conversion
reconversion
and
comparison
techniques
in
variable
length
sorting
the
logic
is
described
for
converting
highly
variable
input
records
into
a
format
that
can
be
easily
and
efficiently
processed
by
a
sorting
program
the
internal
record
formats
are
discussed
in
relation
to
1
their
conversion
from
input
formats
2
their
reconversion
to
output
formats
and
3
comparison
techniques
between
internal
formats
cacm
may
1963
waks
d
j
ca630517
jb
march
14
1978
10
52
am
2017
5
850
850
5
850
850
5
850
850
5
850
849
6
850
850
6
850
851
6
850
852
6
850
853
6
850
854
6
850
855
6
850
856
6
850
857
6
850
858
6
850
859
6
850
860
6
850
861
6
850
862
6
850
863
6
850
864
6
850
865
6
850
866
6
850
</TEXT>
</DOC>
<DOC>
<DOCNO>851</DOCNO>
<TEXT>
design
and
characteristics
of
a
variable
length
record
sort
using
new
fixed
length
record
sorting
techniques
this
paper
describes
the
application
of
several
new
techniques
for
sorting
fixed
length
records
to
the
problems
of
variable
length
record
sorting
the
techniques
have
been
implemented
on
a
sylvania
9400
computer
system
with
32
000
fixed
length
words
of
memory
specifically
the
techniques
sequence
variable
length
records
of
unrestricted
size
produce
long
initial
strings
of
data
merge
strings
of
data
at
the
power
of
t
1
where
t
is
the
number
of
work
tapes
in
a
system
and
do
not
restrict
the
volume
of
input
data
cacm
may
1963
goetz
m
a
ca630516
jb
march
14
1978
10
57
am
2017
4
851
2017
4
851
851
4
851
851
4
851
2017
5
851
851
5
851
851
5
851
851
5
851
858
5
851
865
5
851
849
6
851
850
6
851
851
6
851
852
6
851
853
6
851
854
6
851
855
6
851
856
6
851
857
6
851
858
6
851
859
6
851
860
6
851
861
6
851
862
6
851
863
6
851
864
6
851
865
6
851
866
6
851
</TEXT>
</DOC>
<DOC>
<DOCNO>852</DOCNO>
<TEXT>
a
method
of
comparing
the
time
requirements
of
sorting
methods
cacm
may
1963
hall
m
h
ca630515
jb
march
14
1978
10
58
am
1919
4
852
852
4
852
852
4
852
864
4
852
864
4
852
865
4
852
232
5
852
2017
5
852
74
5
852
852
5
852
852
5
852
852
5
852
849
6
852
850
6
852
851
6
852
852
6
852
853
6
852
854
6
852
855
6
852
856
6
852
857
6
852
858
6
852
859
6
852
860
6
852
861
6
852
862
6
852
863
6
852
864
6
852
865
6
852
866
6
852
</TEXT>
</DOC>
<DOC>
<DOCNO>853</DOCNO>
<TEXT>
the
cobol
sort
verb
cacm
may
1963
paterson
j
b
ca630514
jb
march
14
1978
10
59
am
2017
5
853
853
5
853
853
5
853
853
5
853
849
6
853
850
6
853
851
6
853
852
6
853
853
6
853
854
6
853
855
6
853
856
6
853
857
6
853
858
6
853
859
6
853
860
6
853
861
6
853
862
6
853
863
6
853
864
6
853
865
6
853
866
6
853
</TEXT>
</DOC>
<DOC>
<DOCNO>854</DOCNO>
<TEXT>
some
characteristics
of
sorting
in
computing
systems
using
random
access
storage
devices
the
substantial
differences
in
characteristics
of
random
access
storage
and
tape
devices
dictate
that
concepts
and
objectives
of
computer
program
design
be
considered
from
the
viewpoint
of
the
external
file
medium
used
this
is
particularly
true
in
the
case
of
sorting
in
a
tape
oriented
system
the
major
sorting
problem
is
that
of
minimizing
merge
time
despite
the
limited
orders
of
merge
possible
in
contrast
sorting
in
a
random
access
oriented
system
encourages
the
selection
of
the
optimum
order
of
merge
from
many
possible
orders
the
latter
problem
is
discussed
in
this
paper
along
with
criteria
developed
for
determining
the
optimum
order
of
merge
according
to
the
various
properties
of
random
access
storage
devices
attention
is
also
given
to
the
problem
of
key
sorting
versus
record
sorting
and
the
possibly
serious
disadvantage
of
key
sorting
on
a
random
access
system
cacm
may
1963
hubbard
g
u
ca630513
jb
march
14
1978
11
05
am
1956
5
854
2017
5
854
854
5
854
854
5
854
854
5
854
849
6
854
850
6
854
851
6
854
852
6
854
853
6
854
854
6
854
854
6
854
855
6
854
856
6
854
857
6
854
858
6
854
859
6
854
860
6
854
861
6
854
862
6
854
863
6
854
864
6
854
865
6
854
866
6
854
</TEXT>
</DOC>
<DOC>
<DOCNO>855</DOCNO>
<TEXT>
organization
and
structure
of
dataon
disk
file
memory
systems
for
efficient
sorting
and
other
data
processing
programs
an
approach
to
the
organization
and
structure
of
data
on
bryant
disc
file
memory
systems
for
sorting
and
performing
other
data
processing
functions
is
presented
the
following
areas
are
covered
characteristics
of
bryant
disc
file
systems
on
the
bendix
g
20
and
rca
301
two
proposed
chaining
structures
for
data
and
functions
of
a
disk
file
executive
routine
the
concepts
for
sorting
and
performing
file
maintenance
processing
using
the
proposed
structure
and
executive
routine
are
discussed
additionally
it
is
shown
that
sorting
can
be
accomplished
without
the
use
of
disk
storage
work
areas
cacm
may
1963
goetz
m
a
ca630512
jb
march
14
1978
11
10
am
2017
5
855
855
5
855
855
5
855
855
5
855
849
6
855
850
6
855
851
6
855
852
6
855
853
6
855
854
6
855
855
6
855
856
6
855
857
6
855
858
6
855
859
6
855
860
6
855
861
6
855
862
6
855
863
6
855
864
6
855
865
6
855
866
6
855
</TEXT>
</DOC>
<DOC>
<DOCNO>856</DOCNO>
<TEXT>
sorting
with
large
volume
random
access
drum
storage
an
approach
to
sorting
records
is
described
using
random
access
drum
memory
the
sort
program
described
is
designed
to
be
a
generalized
self
generating
sort
applicable
to
a
variety
of
record
statements
this
description
is
divided
into
three
parts
the
first
part
presents
the
operating
environment
the
second
defines
the
general
solution
the
third
part
describes
the
internal
sort
merge
technique
cacm
may
1963
falkin
j
savastano
jr
s
ca630511
jb
march
14
1978
11
14
am
2017
5
856
856
5
856
856
5
856
856
5
856
849
6
856
850
6
856
851
6
856
852
6
856
853
6
856
854
6
856
855
6
856
856
6
856
857
6
856
858
6
856
859
6
856
860
6
856
861
6
856
862
6
856
863
6
856
864
6
856
865
6
856
866
6
856
</TEXT>
</DOC>
<DOC>
<DOCNO>857</DOCNO>
<TEXT>
sorting
nonredundant
files
techniques
used
in
the
fact
compiler
some
typical
file
structures
including
some
called
non
redundant
are
examined
and
the
methods
used
in
fact
to
sort
such
files
are
discussed
cacm
may
1963
glore
j
b
ca630510
jb
march
14
1978
11
16
am
2017
5
857
857
5
857
857
5
857
857
5
857
849
6
857
850
6
857
851
6
857
852
6
857
853
6
857
854
6
857
855
6
857
856
6
857
857
6
857
858
6
857
859
6
857
860
6
857
861
6
857
862
6
857
863
6
857
864
6
857
865
6
857
866
6
857
</TEXT>
</DOC>
<DOC>
<DOCNO>858</DOCNO>
<TEXT>
a
tape
file
merge
pattern
generator
a
routine
is
presented
which
specifies
the
sequence
of
merge
cycles
to
effect
the
merging
of
sorted
tape
files
the
routine
is
designed
to
minimize
elapsed
computer
time
by
varying
the
power
of
the
merge
cycles
so
as
to
use
all
the
available
tape
drives
with
its
characteristic
of
assigning
one
drive
to
a
single
reel
file
and
two
drives
to
each
multiple
reel
file
cacm
may
1963
cooke
w
s
ca630509
jb
march
14
1978
11
21
am
2017
5
858
851
5
858
858
5
858
858
5
858
858
5
858
849
6
858
850
6
858
851
6
858
852
6
858
853
6
858
854
6
858
855
6
858
856
6
858
857
6
858
858
6
858
858
6
858
859
6
858
860
6
858
861
6
858
862
6
858
863
6
858
864
6
858
865
6
858
865
6
858
866
6
858
</TEXT>
</DOC>
<DOC>
<DOCNO>859</DOCNO>
<TEXT>
computer
planned
collates
cacm
may
1963
french
n
ca630508
jb
march
14
1978
11
22
am
2017
5
859
859
5
859
859
5
859
859
5
859
849
6
859
850
6
859
851
6
859
852
6
859
853
6
859
854
6
859
855
6
859
856
6
859
857
6
859
858
6
859
859
6
859
860
6
859
861
6
859
862
6
859
863
6
859
864
6
859
865
6
859
866
6
859
</TEXT>
</DOC>
<DOC>
<DOCNO>860</DOCNO>
<TEXT>
a
comparison
between
the
polyphase
and
oscillating
sort
techniques
a
comparison
between
the
oscillating
and
polyphase
sort
techniques
is
developed
for
computer
systems
having
from
four
to
ten
tape
drives
the
basis
for
the
comparison
is
the
total
reading
and
writing
required
for
various
number
of
input
strings
and
tape
drives
for
the
two
techniques
cacm
may
1963
goetz
m
a
toth
g
s
ca630507
jb
march
14
1978
11
25
am
1117
4
860
2017
4
860
2146
4
860
677
4
860
860
4
860
860
4
860
862
4
860
2017
5
860
479
5
860
860
5
860
860
5
860
860
5
860
861
5
860
849
6
860
850
6
860
851
6
860
852
6
860
853
6
860
854
6
860
855
6
860
856
6
860
857
6
860
858
6
860
859
6
860
860
6
860
861
6
860
862
6
860
863
6
860
864
6
860
865
6
860
866
6
860
</TEXT>
</DOC>
<DOC>
<DOCNO>861</DOCNO>
<TEXT>
read
backward
polyphase
sorting
read
backward
polyphase
sorting
provides
more
efficient
use
of
the
tapes
available
to
a
sort
than
most
other
sorting
techniques
backward
polyphase
produces
a
continuous
merging
process
from
n
1
tapes
where
n
is
the
total
number
of
tapes
being
used
in
the
sorting
process
any
of
the
available
presorting
techniques
may
be
used
in
conjunction
with
the
polyphase
merge
sort
provided
that
the
presort
has
the
capability
of
producing
both
ascending
and
descending
strings
and
distributing
the
strings
on
the
various
tapes
as
required
by
the
polyphase
merge
cacm
may
1963
gilstad
r
l
ca630506
jb
march
14
1978
11
28
am
1117
4
861
2017
4
861
2146
4
861
861
4
861
1117
5
861
2017
5
861
2146
5
861
677
5
861
860
5
861
862
5
861
861
5
861
861
5
861
861
5
861
849
6
861
850
6
861
851
6
861
852
6
861
853
6
861
854
6
861
855
6
861
856
6
861
857
6
861
858
6
861
859
6
861
860
6
861
861
6
861
861
6
861
861
6
861
861
6
861
861
6
861
862
6
861
862
6
861
862
6
861
863
6
861
863
6
861
864
6
861
865
6
861
866
6
861
299
6
861
479
6
861
636
6
861
</TEXT>
</DOC>
<DOC>
<DOCNO>862</DOCNO>
<TEXT>
string
distribution
for
the
polyphase
sort
cacm
may
1963
malcolm
jr
w
d
ca630505
jb
march
14
1978
11
29
am
2146
4
862
479
4
862
860
4
862
862
4
862
862
4
862
863
4
862
1117
5
862
299
5
862
2017
5
862
2146
5
862
479
5
862
862
5
862
862
5
862
862
5
862
861
5
862
849
6
862
850
6
862
851
6
862
852
6
862
853
6
862
854
6
862
855
6
862
856
6
862
857
6
862
858
6
862
859
6
862
860
6
862
861
6
862
861
6
862
861
6
862
862
6
862
862
6
862
862
6
862
862
6
862
863
6
862
863
6
862
864
6
862
865
6
862
866
6
862
299
6
862
636
6
862
</TEXT>
</DOC>
<DOC>
<DOCNO>863</DOCNO>
<TEXT>
multiphase
sorting
cacm
may
1963
manker
h
h
ca630504
jb
march
14
1978
11
30
am
2146
4
863
479
4
863
862
4
863
863
4
863
299
5
863
2017
5
863
2146
5
863
863
5
863
863
5
863
863
5
863
849
6
863
850
6
863
851
6
863
852
6
863
853
6
863
854
6
863
855
6
863
856
6
863
857
6
863
858
6
863
859
6
863
860
6
863
861
6
863
861
6
863
862
6
863
862
6
863
863
6
863
863
6
863
864
6
863
865
6
863
866
6
863
299
6
863
</TEXT>
</DOC>
<DOC>
<DOCNO>864</DOCNO>
<TEXT>
an
empirical
study
of
minimal
storage
sorting
cacm
may
1963
hibbard
t
n
ca630503
jb
march
14
1978
11
31
am
1919
4
864
1919
4
864
2191
4
864
2388
4
864
2783
4
864
2784
4
864
3054
4
864
3121
4
864
852
4
864
852
4
864
864
4
864
864
4
864
864
4
864
865
4
864
1175
5
864
232
5
864
1919
5
864
309
5
864
2017
5
864
2041
5
864
2216
5
864
74
5
864
864
5
864
864
5
864
864
5
864
849
6
864
850
6
864
851
6
864
852
6
864
853
6
864
854
6
864
855
6
864
856
6
864
857
6
864
858
6
864
859
6
864
860
6
864
861
6
864
862
6
864
863
6
864
864
6
864
864
6
864
864
6
864
864
6
864
864
6
864
865
6
864
866
6
864
1175
6
864
1919
6
864
1969
6
864
1997
6
864
308
6
864
308
6
864
309
6
864
74
6
864
3187
6
864
</TEXT>
</DOC>
<DOC>
<DOCNO>865</DOCNO>
<TEXT>
internal
and
tape
sorting
using
the
replacement
selection
technique
a
general
technique
for
sequencing
unsorted
records
is
presented
the
technique
is
shown
to
be
applicable
for
the
first
stage
of
a
generalized
sort
program
the
formation
of
initial
strings
as
well
as
for
sorting
records
within
a
memory
storage
an
internal
sort
it
is
shown
that
given
n
records
in
memory
storage
records
are
sequenced
using
1
log2
n
tests
per
record
that
initial
string
lengths
will
average
2n
for
random
input
records
and
that
reading
writing
and
processing
can
be
accomplished
simultaneously
if
the
computer
permits
such
overlap
cacm
may
1963
goetz
m
a
ca630502
jb
march
14
1978
11
36
am
1919
4
865
852
4
865
864
4
865
865
4
865
2017
5
865
74
5
865
851
5
865
865
5
865
865
5
865
865
5
865
849
6
865
850
6
865
851
6
865
852
6
865
853
6
865
854
6
865
855
6
865
856
6
865
857
6
865
858
6
865
858
6
865
859
6
865
860
6
865
861
6
865
862
6
865
863
6
865
864
6
865
865
6
865
865
6
865
866
6
865
</TEXT>
</DOC>
<DOC>
<DOCNO>866</DOCNO>
<TEXT>
sorting
on
computers
cacm
may
1963
gotlieb
c
c
ca630501
jb
march
14
1978
11
37
am
2017
5
866
866
5
866
866
5
866
866
5
866
849
6
866
850
6
866
851
6
866
852
6
866
853
6
866
854
6
866
855
6
866
856
6
866
857
6
866
858
6
866
859
6
866
860
6
866
861
6
866
862
6
866
863
6
866
864
6
866
865
6
866
866
6
866
</TEXT>
</DOC>
<DOC>
<DOCNO>867</DOCNO>
<TEXT>
least
squares
fitting
of
planes
to
surfaces
using
dynamic
programming
dynamic
programming
has
recently
been
used
by
stone
by
bellman
and
by
gluss
to
determine
the
closet
fit
of
broken
line
segments
to
a
curve
in
an
interval
under
the
constraint
that
the
number
of
segments
is
fixed
in
the
present
paper
successive
models
are
developed
to
extend
the
method
to
the
fitting
of
broken
plane
segments
to
surfaces
z
g
x
y
defined
over
certain
types
of
subareas
of
the
x
y
space
the
first
model
considers
a
rectangular
area
with
the
constraint
that
the
plane
segments
are
defined
over
a
grid
in
the
x
y
space
it
is
then
shown
how
this
model
may
be
incorporated
into
an
algorithm
that
provides
successive
approximations
to
optimal
fits
for
any
type
of
closed
area
finally
applications
are
briefly
described
cacm
april
1963
gluss
b
ca630424
jb
march
14
1978
11
43
am
497
4
867
867
4
867
867
4
867
317
5
867
497
5
867
867
5
867
867
5
867
867
5
867
</TEXT>
</DOC>
<DOC>
<DOCNO>868</DOCNO>
<TEXT>
a
suggested
method
of
making
fuller
use
of
strings
in
algol
60
cacm
april
1963
shoffner
m
g
brown
p
j
ca630423
jb
march
14
1978
11
45
am
1084
5
868
868
5
868
868
5
868
868
5
868
868
6
868
603
6
868
644
6
868
669
6
868
791
6
868
797
6
868
</TEXT>
</DOC>
<DOC>
<DOCNO>869</DOCNO>
<TEXT>
term
of
magic
square
algorithm
148
cacm
april
1963
thoro
d
ca630422
jb
march
14
1978
11
46
am
869
5
869
869
5
869
869
5
869
</TEXT>
</DOC>
<DOC>
<DOCNO>870</DOCNO>
<TEXT>
term
of
magic
square
algorithm
148
cacm
april
1963
barnecut
j
n
r
ca630421
jb
march
14
1978
11
47
am
870
5
870
870
5
870
870
5
870
</TEXT>
</DOC>
<DOC>
<DOCNO>871</DOCNO>
<TEXT>
psif
algorithm
147
cacm
april
1963
thacher
jr
h
c
ca630420
jb
march
14
1978
11
48
am
1800
5
871
871
5
871
871
5
871
871
5
871
871
6
871
</TEXT>
</DOC>
<DOC>
<DOCNO>872</DOCNO>
<TEXT>
adaptive
numerical
integration
by
simpson
rule
algorithm
145
cacm
april
1963
mckeeman
w
m
ca630419
jb
march
14
1978
11
49
am
1352
5
872
2074
5
872
2093
5
872
872
5
872
872
5
872
872
5
872
834
6
872
834
6
872
834
6
872
872
6
872
872
6
872
872
6
872
1040
6
872
1092
6
872
1092
6
872
1241
6
872
1273
6
872
1298
6
872
1573
6
872
324
6
872
429
6
872
429
6
872
429
6
872
570
6
872
621
6
872
786
6
872
786
6
872
</TEXT>
</DOC>
<DOC>
<DOCNO>873</DOCNO>
<TEXT>
random
algorithm
133
cacm
april
1963
poore
jr
j
h
ca630418
jb
march
14
1978
11
50
am
873
5
873
873
5
873
873
5
873
</TEXT>
</DOC>
<DOC>
<DOCNO>874</DOCNO>
<TEXT>
chebyshev
curvefit
algorithm
91
cacm
april
1963
hale
r
p
ca630417
jb
march
14
1978
11
56
am
874
5
874
874
5
874
874
5
874
</TEXT>
</DOC>
<DOC>
<DOCNO>875</DOCNO>
<TEXT>
incomplete
elliptic
integrals
algorithm
73
cacm
april
1963
van
de
riet
r
p
ca630416
jb
march
14
1978
12
06
pm
875
5
875
875
5
875
875
5
875
</TEXT>
</DOC>
<DOC>
<DOCNO>876</DOCNO>
<TEXT>
complete
elliptic
integral
algorithm
149
cacm
april
1963
thacher
h
c
ca630415
jb
march
14
1978
12
14
pm
876
5
876
876
5
876
876
5
876
</TEXT>
</DOC>
<DOC>
<DOCNO>877</DOCNO>
<TEXT>
complete
elliptic
integral
of
the
first
kind
algorithm
55
cacm
april
1963
thacher
jr
h
c
ca630414
jb
march
14
1978
12
15
pm
877
5
877
877
5
877
877
5
877
</TEXT>
</DOC>
<DOC>
<DOCNO>878</DOCNO>
<TEXT>
reduction
of
a
matrix
containing
polynomial
elements
algorithm
170
cacm
april
1963
hennion
p
e
ca630413
jb
march
14
1978
12
17
pm
1946
5
878
878
5
878
878
5
878
878
5
878
878
6
878
902
6
878
1093
6
878
1177
6
878
1387
6
878
1393
6
878
360
6
878
731
6
878
</TEXT>
</DOC>
<DOC>
<DOCNO>879</DOCNO>
<TEXT>
newton
interpolation
with
forward
divided
differences
algorithm
169
cacm
april
1963
kahan
w
farkas
i
ca630412
jb
march
14
1978
12
18
pm
1524
5
879
879
5
879
879
5
879
879
5
879
879
6
879
1197
6
879
311
6
879
</TEXT>
</DOC>
<DOC>
<DOCNO>880</DOCNO>
<TEXT>
newton
interpolation
with
backward
divided
differences
cacm
april
1963
kahan
w
farkas
i
ca630411
jb
march
14
1978
12
20
pm
880
5
880
880
5
880
880
5
880
</TEXT>
</DOC>
<DOC>
<DOCNO>881</DOCNO>
<TEXT>
calculation
of
confluent
divided
differences
algorithm
167
cacm
april
1963
kahan
w
farkas
i
ca630410
jb
march
14
1978
12
21
pm
881
5
881
881
5
881
881
5
881
</TEXT>
</DOC>
<DOC>
<DOCNO>882</DOCNO>
<TEXT>
monte
carlo
algorithm
166
cacm
april
1963
rodman
r
d
ca630409
jb
march
14
1978
12
22
pm
882
5
882
882
5
882
882
5
882
</TEXT>
</DOC>
<DOC>
<DOCNO>883</DOCNO>
<TEXT>
complete
elliptic
integrals
algorithm
165
cacm
april
1963
thacher
jr
h
c
ca630408
jb
march
14
1978
12
23
pm
883
5
883
883
5
883
883
5
883
</TEXT>
</DOC>
<DOC>
<DOCNO>884</DOCNO>
<TEXT>
orthogonal
polynomial
least
squares
surface
fit
algorithm
164
cacm
april
1963
clark
r
e
kubik
r
n
phillips
l
p
ca630407
jb
march
14
1978
12
25
pm
884
5
884
884
5
884
884
5
884
</TEXT>
</DOC>
<DOC>
<DOCNO>885</DOCNO>
<TEXT>
modified
hankel
function
algorithm
163
cacm
april
1963
fettis
h
e
ca630406
jb
march
14
1978
12
26
pm
1040
5
885
885
5
885
885
5
885
885
5
885
885
6
885
587
6
885
621
6
885
</TEXT>
</DOC>
<DOC>
<DOCNO>886</DOCNO>
<TEXT>
xy
move
plotting
algorithm
162
cacm
april
1963
stockton
f
g
ca630405
jb
march
14
1978
12
27
pm
886
5
886
886
5
886
886
5
886
</TEXT>
</DOC>
<DOC>
<DOCNO>887</DOCNO>
<TEXT>
combinatorial
of
m
things
taken
one
at
a
time
two
at
a
time
up
to
n
at
a
time
algorithm
161
cacm
april
1963
wright
h
v
wolfson
m
l
ca630404
jb
march
14
1978
12
28
pm
887
5
887
887
5
887
887
5
887
</TEXT>
</DOC>
<DOC>
<DOCNO>888</DOCNO>
<TEXT>
algorithm
160
combinatorial
of
m
things
taken
n
at
a
time
cacm
april
1963
wolfson
m
l
wright
h
v
ca630403
jb
march
14
1978
12
29
pm
2590
5
888
888
5
888
888
5
888
888
5
888
888
6
888
</TEXT>
</DOC>
<DOC>
<DOCNO>889</DOCNO>
<TEXT>
official
actions
and
responses
to
algol
as
a
programming
language
cacm
april
1963
ca630402
jb
march
14
1978
12
30
pm
889
5
889
889
5
889
889
5
889
</TEXT>
</DOC>
<DOC>
<DOCNO>890</DOCNO>
<TEXT>
selected
definitions
a
selection
of
the
definitions
prepared
by
the
acm
standards
committee
subcommittee
on
programming
terminology
is
presented
for
review
by
the
acm
membership
cacm
april
1963
fritz
w
b
ca630401
jb
march
14
1978
12
32
pm
690
5
890
890
5
890
890
5
890
890
5
890
890
6
890
929
6
890
3195
6
890
</TEXT>
</DOC>
<DOC>
<DOCNO>891</DOCNO>
<TEXT>
everyman
information
retrieval
system
the
information
retrieval
problem
whose
solution
is
presented
here
was
posed
by
a
technical
library
with
limited
bubget
and
personnel
the
solution
however
is
quite
general
and
is
applicable
to
many
different
types
of
retrieval
problems
further
the
method
of
solution
makes
it
possible
for
many
groups
who
have
previously
dismissed
an
information
retrieval
program
as
expensive
and
difficult
from
a
programming
stand
point
to
reconsider
their
position
for
the
present
solution
makes
it
possible
to
install
an
information
retrieval
program
in
less
than
three
months
and
with
relatively
little
equipment
cacm
march
1963
whitley
v
w
ca630329
jb
march
14
1978
12
37
pm
891
5
891
891
5
891
891
5
891
</TEXT>
</DOC>
<DOC>
<DOCNO>892</DOCNO>
<TEXT>
recol
a
retrieval
command
language
an
interrogation
scheme
is
described
for
the
retrieval
and
manipulation
of
data
file
records
the
language
of
the
interrogation
scheme
allows
for
selecting
file
records
with
the
are
of
logical
condition
statements
defining
record
classes
associating
file
records
editing
printed
output
and
summarizing
the
results
of
the
above
operations
some
examples
of
a
typical
file
application
and
the
more
significant
features
of
a
particular
machine
implementation
are
given
cacm
march
1963
climenson
w
d
ca630328
jb
march
14
1978
12
42
pm
1309
4
892
1324
4
892
892
4
892
892
4
892
653
5
892
656
5
892
892
5
892
892
5
892
892
5
892
</TEXT>
</DOC>
<DOC>
<DOCNO>893</DOCNO>
<TEXT>
significance
arithmetic
on
a
digital
computer
the
7090
at
nyu
has
been
modified
to
include
a
significance
mode
of
operation
which
is
intended
to
facilitate
the
identification
of
significant
bits
in
the
results
of
floating
point
arithmetic
operations
the
manner
in
which
floating
point
arithmetic
is
handled
in
this
mode
is
discussed
several
numerical
experiments
using
this
mode
are
described
and
comparisons
are
made
with
the
ordinary
normalized
mode
examples
include
power
series
evaluation
linear
equations
solution
determinant
evaluation
and
matrix
inversion
cacm
march
1963
goldstein
m
ca630327
jb
march
14
1978
12
47
pm
3131
5
893
893
5
893
893
5
893
893
5
893
893
6
893
1148
6
893
</TEXT>
</DOC>
<DOC>
<DOCNO>894</DOCNO>
<TEXT>
an
iterative
factorization
technique
for
polynomials
an
iterative
technique
is
displayed
whereby
factors
of
arbitrary
degree
can
be
found
for
polynomials
in
one
variable
convergence
is
shown
to
occur
always
if
a
certain
jacobian
does
not
vanish
and
if
the
initial
approximation
to
a
factor
is
near
enough
to
an
actual
factor
the
process
is
simply
programmed
and
preliminary
results
indicate
it
to
be
well
adapted
to
use
with
digital
computers
for
factors
of
degree
two
the
technique
is
similar
to
that
of
bairstow
the
present
method
being
somewhat
simpler
cacm
march
1963
luther
h
a
ca630326
jb
march
14
1978
12
51
pm
1111
5
894
894
5
894
894
5
894
894
5
894
894
6
894
</TEXT>
</DOC>
<DOC>
<DOCNO>895</DOCNO>
<TEXT>
a
computational
extension
of
the
variate
difference
method
presented
here
is
a
computational
extension
of
the
variate
difference
method
as
developed
by
g
tintner
1
cacm
march
1963
scheinok
p
a
ca630325
jb
march
14
1978
12
57
pm
895
5
895
895
5
895
895
5
895
</TEXT>
</DOC>
<DOC>
<DOCNO>896</DOCNO>
<TEXT>
characteristic
values
and
vectors
of
defective
matrices
cacm
march
1963
thompson
g
t
ca630324
jb
march
14
1978
12
58
pm
896
5
896
896
5
896
896
5
896
</TEXT>
</DOC>
<DOC>
<DOCNO>897</DOCNO>
<TEXT>
note
on
the
proof
of
the
non
existence
of
a
phrase
structure
grammar
for
algol
60
cacm
march
1963
brown
p
j
ca630323
jb
march
14
1978
1
00
pm
897
5
897
897
5
897
897
5
897
</TEXT>
</DOC>
<DOC>
<DOCNO>898</DOCNO>
<TEXT>
random
algorithm
133
cacm
march
1963
laughlin
d
l
ca630322
jb
march
14
1978
1
01
pm
898
5
898
898
5
898
898
5
898
</TEXT>
</DOC>
<DOC>
<DOCNO>899</DOCNO>
<TEXT>
magic
square
algorithm
117
118
cacm
march
1963
bosworth
k
m
ca630321
jb
march
14
1978
1
02
pm
899
5
899
899
5
899
899
5
899
</TEXT>
</DOC>
<DOC>
<DOCNO>900</DOCNO>
<TEXT>
ancestor
algorithm
79
cacm
march
1963
thacher
jr
h
c
ca630320
jb
march
14
1978
1
23
pm
900
5
900
900
5
900
900
5
900
</TEXT>
</DOC>
<DOC>
<DOCNO>901</DOCNO>
<TEXT>
difference
expression
coefficients
algorithm
79
cacm
march
1963
clark
e
s
ca630319
jb
march
14
1978
1
24
pm
901
5
901
901
5
901
901
5
901
</TEXT>
</DOC>
<DOC>
<DOCNO>902</DOCNO>
<TEXT>
determinant
algorithm
159
cacm
march
1963
digby
d
w
ca630318
jb
march
14
1978
1
28
pm
902
5
902
902
5
902
902
5
902
1946
5
902
878
6
902
902
6
902
1093
6
902
1177
6
902
1387
6
902
1393
6
902
360
6
902
731
6
902
</TEXT>
</DOC>
<DOC>
<DOCNO>903</DOCNO>
<TEXT>
exponentiation
of
series
algorithm
134
cacm
march
1963
fettis
h
e
ca630317
jb
march
14
1978
1
29
pm
903
5
903
903
5
903
903
5
903
</TEXT>
</DOC>
<DOC>
<DOCNO>904</DOCNO>
<TEXT>
fourier
series
approximation
algorithm
157
cacm
march
1963
mifsud
c
j
ca630316
jb
march
14
1978
1
31
pm
904
5
904
904
5
904
904
5
904
</TEXT>
</DOC>
<DOC>
<DOCNO>905</DOCNO>
<TEXT>
algebra
of
sets
algorithm
156
cacm
march
1963
mifsud
c
j
ca630315
jb
march
14
1978
1
32
pm
905
5
905
905
5
905
905
5
905
</TEXT>
</DOC>
<DOC>
<DOCNO>906</DOCNO>
<TEXT>
combination
in
any
order
algorithm
155
cacm
march
1963
mifsud
c
j
ca630314
jb
march
14
1978
1
33
pm
906
5
906
906
5
906
906
5
906
</TEXT>
</DOC>
<DOC>
<DOCNO>907</DOCNO>
<TEXT>
combination
in
lexicographical
order
algorithm
154
cacm
march
1963
mifsud
c
j
ca630313
jb
march
14
1978
1
34
pm
907
5
907
907
5
907
907
5
907
3115
5
907
907
6
907
2045
6
907
2417
6
907
2466
6
907
2884
6
907
579
6
907
785
6
907
</TEXT>
</DOC>
<DOC>
<DOCNO>908</DOCNO>
<TEXT>
test
matrix
for
inversion
cacm
march
1963
lasor
w
s
ca630312a
jb
march
14
1978
1
38
pm
908
5
908
908
5
908
908
5
908
</TEXT>
</DOC>
<DOC>
<DOCNO>909</DOCNO>
<TEXT>
arithmetizing
declarations
corrigendum
cacm
march
1963
conway
m
e
speroni
j
ca630312b
jb
march
14
1978
1
40
pm
909
5
909
909
5
909
909
5
909
1963
5
909
909
6
909
475
6
909
750
6
909
</TEXT>
</DOC>
<DOC>
<DOCNO>910</DOCNO>
<TEXT>
selective
instruction
trap
for
the
7090
cacm
march
1963
mayer
r
j
ca630311
jb
march
14
1978
1
41
pm
910
5
910
910
5
910
910
5
910
</TEXT>
</DOC>
<DOC>
<DOCNO>911</DOCNO>
<TEXT>
a
variant
method
of
file
searching
cacm
march
1963
mcilroy
m
d
ca630310
jb
march
14
1978
1
42
pm
1271
4
911
1785
4
911
1785
4
911
2203
4
911
2543
4
911
2552
4
911
2860
4
911
911
4
911
911
4
911
911
5
911
911
5
911
911
5
911
1785
5
911
332
5
911
2203
5
911
2552
5
911
492
5
911
911
6
911
911
6
911
911
6
911
1785
6
911
1785
6
911
1786
6
911
332
6
911
332
6
911
2107
6
911
2109
6
911
2203
6
911
492
6
911
492
6
911
</TEXT>
</DOC>
<DOC>
<DOCNO>912</DOCNO>
<TEXT>
addressing
an
array
yi
in
k
dimensions
by
fortran
for
analysis
of
variance
cacm
march
1963
garber
m
j
ca630309
jb
march
14
1978
1
44
pm
912
5
912
912
5
912
912
5
912
1014
5
912
912
6
912
</TEXT>
</DOC>
<DOC>
<DOCNO>913</DOCNO>
<TEXT>
neliac
cacm
march
1963
halstead
m
h
ca630308
jb
march
14
1978
1
45
pm
913
5
913
913
5
913
913
5
913
</TEXT>
</DOC>
<DOC>
<DOCNO>914</DOCNO>
<TEXT>
jovial
and
its
documentation
cacm
march
1963
shaw
c
j
ca630307
jb
march
14
1978
1
46
pm
914
5
914
914
5
914
914
5
914
1945
5
914
823
6
914
914
6
914
915
6
914
917
6
914
984
6
914
989
6
914
990
6
914
1012
6
914
1084
6
914
1098
6
914
1122
6
914
1138
6
914
1139
6
914
1141
6
914
1200
6
914
1223
6
914
1265
6
914
1336
6
914
1396
6
914
1455
6
914
1477
6
914
1487
6
914
1491
6
914
1496
6
914
483
6
914
584
6
914
669
6
914
680
6
914
763
6
914
</TEXT>
</DOC>
<DOC>
<DOCNO>915</DOCNO>
<TEXT>
documentation
of
ipl
v
cacm
march
1963
newell
a
ca630306
jb
march
14
1978
1
46
pm
915
5
915
915
5
915
915
5
915
1945
5
915
823
6
915
914
6
915
915
6
915
917
6
915
984
6
915
989
6
915
990
6
915
1012
6
915
1084
6
915
1098
6
915
1122
6
915
1138
6
915
1139
6
915
1141
6
915
1200
6
915
1223
6
915
1265
6
915
1336
6
915
1396
6
915
1455
6
915
1477
6
915
1487
6
915
1491
6
915
1496
6
915
483
6
915
584
6
915
669
6
915
680
6
915
763
6
915
</TEXT>
</DOC>
<DOC>
<DOCNO>916</DOCNO>
<TEXT>
fortran
cacm
march
1963
heising
w
p
ca630305
jb
march
14
1978
1
47
pm
916
5
916
916
5
916
916
5
916
</TEXT>
</DOC>
<DOC>
<DOCNO>917</DOCNO>
<TEXT>
comit
cacm
march
1963
yngve
v
h
ca630304
jb
march
14
1978
1
48
pm
917
5
917
917
5
917
917
5
917
1068
5
917
1945
5
917
823
6
917
914
6
917
915
6
917
917
6
917
917
6
917
984
6
917
989
6
917
990
6
917
1012
6
917
1084
6
917
1098
6
917
1122
6
917
1138
6
917
1139
6
917
1141
6
917
1200
6
917
1223
6
917
1265
6
917
1336
6
917
1396
6
917
1455
6
917
1477
6
917
1487
6
917
1491
6
917
1496
6
917
483
6
917
584
6
917
669
6
917
680
6
917
763
6
917
</TEXT>
</DOC>
<DOC>
<DOCNO>918</DOCNO>
<TEXT>
cobol
cacm
march
1963
cunningham
j
f
ca630303
jb
march
27
1978
9
22
pm
918
5
918
918
5
918
918
5
918
</TEXT>
</DOC>
<DOC>
<DOCNO>919</DOCNO>
<TEXT>
documentation
problems
algol
60
cacm
march
1963
naur
p
ca630302
jb
march
14
1978
1
50
pm
249
4
919
254
4
919
272
4
919
1102
4
919
1109
4
919
1140
4
919
1188
4
919
1306
4
919
1464
4
919
1491
4
919
1767
4
919
1781
4
919
1787
4
919
1949
4
919
321
4
919
2059
4
919
2126
4
919
435
4
919
437
4
919
463
4
919
483
4
919
491
4
919
2732
4
919
560
4
919
583
4
919
3073
4
919
627
4
919
631
4
919
632
4
919
642
4
919
644
4
919
653
4
919
680
4
919
761
4
919
762
4
919
763
4
919
123
4
919
140
4
919
919
4
919
989
4
919
196
5
919
919
5
919
919
5
919
919
5
919
1781
5
919
123
6
919
196
6
919
919
6
919
990
6
919
1007
6
919
1046
6
919
1131
6
919
1139
6
919
1140
6
919
1149
6
919
1198
6
919
1215
6
919
1223
6
919
1265
6
919
1303
6
919
1323
6
919
1358
6
919
1366
6
919
1421
6
919
1460
6
919
1462
6
919
1463
6
919
1467
6
919
1468
6
919
1477
6
919
1491
6
919
1496
6
919
1531
6
919
1535
6
919
1565
6
919
1601
6
919
1602
6
919
1613
6
919
1614
6
919
1626
6
919
1641
6
919
1787
6
919
1788
6
919
205
6
919
224
6
919
249
6
919
288
6
919
316
6
919
381
6
919
398
6
919
11
6
919
404
6
919
410
6
919
463
6
919
464
6
919
483
6
919
3184
6
919
3188
6
919
584
6
919
600
6
919
680
6
919
691
6
919
763
6
919
799
6
919
</TEXT>
</DOC>
<DOC>
<DOCNO>920</DOCNO>
<TEXT>
toward
better
documentation
of
programming
languages
cacm
march
1963
yngve
v
h
sammet
j
e
ca630301
jb
march
14
1978
1
51
pm
920
5
920
920
5
920
920
5
920
728
5
920
920
6
920
45
6
920
</TEXT>
</DOC>
<DOC>
<DOCNO>921</DOCNO>
<TEXT>
incomplete
elliptic
integrals
algorithm
73
cacm
february
1963
meyer
n
a
ca630212
jb
march
14
1978
2
03
pm
921
5
921
921
5
921
921
5
921
</TEXT>
</DOC>
<DOC>
<DOCNO>922</DOCNO>
<TEXT>
multint
algorithm
32
cacm
february
1963
thacher
jr
h
c
ca630211jb
march
14
1978
2
10
pm
922
5
922
922
5
922
922
5
922
</TEXT>
</DOC>
<DOC>
<DOCNO>923</DOCNO>
<TEXT>
gomory
algorithm
153
cacm
february
1963
bauer
f
l
ca630210
jb
march
14
1978
2
12
pm
923
5
923
923
5
923
923
5
923
</TEXT>
</DOC>
<DOC>
<DOCNO>924</DOCNO>
<TEXT>
nexcom
algorithm
152
cacm
february
1963
hopley
j
ca630209
jb
march
14
1978
2
12
pm
924
5
924
924
5
924
924
5
924
</TEXT>
</DOC>
<DOC>
<DOCNO>925</DOCNO>
<TEXT>
location
of
a
vector
in
a
lexicographically
ordered
listalgorithm
151
cacm
february
1963
walter
h
f
ca630208
jb
march
14
1978
2
17
pm
925
5
925
925
5
925
925
5
925
</TEXT>
</DOC>
<DOC>
<DOCNO>926</DOCNO>
<TEXT>
syminv2
algorithm
150
cacm
february
1963
rutishauser
h
ca630207
jb
march
14
1978
2
18
pm
926
5
926
926
5
926
926
5
926
</TEXT>
</DOC>
<DOC>
<DOCNO>927</DOCNO>
<TEXT>
linear
programming
applied
to
ultraviolet
absorption
spectroscopy
cacm
february
1963
white
w
c
shapiro
b
pratt
a
w
ca630206
jb
march
14
1978
2
19
pm
927
5
927
927
5
927
927
5
927
</TEXT>
</DOC>
<DOC>
<DOCNO>928</DOCNO>
<TEXT>
character
manipulation
in
fortran
cacm
february
1963
lewis
t
s
ca630205
jb
march
14
1978
2
20
pm
928
5
928
928
5
928
928
5
928
</TEXT>
</DOC>
<DOC>
<DOCNO>929</DOCNO>
<TEXT>
glossary
construction
cacm
february
1963
grems
m
ca630204
jb
march
14
1978
2
21
pm
929
4
929
929
5
929
929
5
929
929
5
929
397
5
929
690
5
929
890
6
929
929
6
929
3195
6
929
</TEXT>
</DOC>
<DOC>
<DOCNO>930</DOCNO>
<TEXT>
decimal
to
binary
conversion
of
short
fields
cacm
february
1963
yarbrough
l
d
ca630203
jb
march
14
1978
2
22
pm
930
5
930
930
5
930
930
5
930
</TEXT>
</DOC>
<DOC>
<DOCNO>931</DOCNO>
<TEXT>
systematic
mistake
analysis
of
digital
computer
programs
cacm
february
1963
miller
j
c
maloney
c
j
ca630202
jb
march
14
1978
2
23
pm
1324
4
931
931
4
931
931
4
931
931
4
931
931
5
931
931
5
931
931
5
931
202
5
931
396
5
931
2616
5
931
634
5
931
795
5
931
931
6
931
931
6
931
1548
6
931
1684
6
931
2517
6
931
404
6
931
</TEXT>
</DOC>
<DOC>
<DOCNO>932</DOCNO>
<TEXT>
matrix
inversion
by
gauss
jordan
inversion
ii
algorithm
120
cacm
january
1963
naur
p
ca630116
jb
march
14
1978
2
27
pm
932
5
932
932
5
932
932
5
932
806
5
932
932
6
932
454
6
932
</TEXT>
</DOC>
<DOC>
<DOCNO>933</DOCNO>
<TEXT>
magic
squares
algorithm
117
118
cacm
january
1963
naur
p
ca630115
jb
march
14
1978
2
31
pm
933
5
933
933
5
933
933
5
933
</TEXT>
</DOC>
<DOC>
<DOCNO>934</DOCNO>
<TEXT>
gauss
method
algorithm
107
cacm
january
1963
naur
p
ca630114
jb
march
14
1978
2
32
pm
934
5
934
934
5
934
934
5
934
</TEXT>
</DOC>
<DOC>
<DOCNO>935</DOCNO>
<TEXT>
calculating
primes
by
means
of
gps
algorithm
cacm
january
1963
naur
p
ca630113
jb
march
14
1978
2
33
pm
935
5
935
935
5
935
935
5
935
</TEXT>
</DOC>
<DOC>
<DOCNO>936</DOCNO>
<TEXT>
a
set
of
test
matrices
algorithm
52
cacm
january
1963
naur
p
ca630112
jb
march
14
1978
2
35
pm
936
5
936
936
5
936
936
5
936
</TEXT>
</DOC>
<DOC>
<DOCNO>937</DOCNO>
<TEXT>
inverse
of
a
finite
segment
of
the
hilbert
matrix
algorithm
50
cacm
january
1963
naur
p
ca630111
jb
march
14
1978
2
36
pm
937
5
937
937
5
937
937
5
937
</TEXT>
</DOC>
<DOC>
<DOCNO>938</DOCNO>
<TEXT>
invert
algorithm
42
cacm
january
1963
naur
p
ca630110
jb
march
14
1978
2
36
pm
938
5
938
938
5
938
938
5
938
</TEXT>
</DOC>
<DOC>
<DOCNO>939</DOCNO>
<TEXT>
gamma
function
algorithm
31
cacm
january
1963
behrenz
p
g
ca630109
jb
march
14
1978
2
37
pm
939
5
939
939
5
939
939
5
939
</TEXT>
</DOC>
<DOC>
<DOCNO>940</DOCNO>
<TEXT>
generating
discrete
random
variables
in
a
computer
this
note
is
concerned
with
details
of
how
to
instruct
a
computer
to
choose
one
from
many
things
with
assigned
probabilities
the
method
uses
a
uniform
variable
to
direct
the
computer
to
a
memory
location
if
this
is
done
by
a
sequence
of
appropriately
chosen
conditional
probabilities
efficient
use
of
memory
space
and
quite
fast
programs
will
result
cacm
january
1963
marsaglia
g
ca630108
jb
march
14
1978
2
40
pm
940
5
940
940
5
940
940
5
940
1073
5
940
1153
5
940
940
6
940
940
6
940
1153
6
940
</TEXT>
</DOC>
<DOC>
<DOCNO>941</DOCNO>
<TEXT>
a
recursive
program
for
the
general
n
dimensional
integral
a
general
program
is
outlined
for
n
dimensional
integration
with
variable
limits
the
program
is
of
a
recursive
nature
and
uses
simpson
rule
combined
with
repeated
bisection
to
attain
the
required
accuracy
it
was
developed
in
the
ferranti
mercury
autocode
scheme
cacm
january
1963
cadwell
j
h
ca630107
jb
march
14
1978
2
43
pm
941
5
941
941
5
941
941
5
941
</TEXT>
</DOC>
<DOC>
<DOCNO>942</DOCNO>
<TEXT>
fortran
subroutines
for
time
series
analysis
the
authors
have
recently
been
concerned
in
a
time
series
study
that
constituted
a
fairly
typical
piece
of
applied
statistical
research
involving
extensive
computations
on
a
moderately
large
quantity
of
data
wehave
found
that
the
many
different
numerical
processes
that
were
required
could
be
built
up
almost
completely
from
a
small
number
of
basic
operations
and
a
set
of
fortran
subroutines
has
been
written
to
perform
these
the
main
purpose
of
this
note
is
to
describe
these
subroutines
but
since
the
question
of
general
statistical
programs
is
topical
1
we
include
some
general
remarks
cacm
january
1963
healy
m
j
r
bogert
b
p
ca630106
jb
march
14
1978
2
55
pm
942
5
942
942
5
942
942
5
942
948
5
942
1118
5
942
826
5
942
826
6
942
942
6
942
942
6
942
942
6
942
</TEXT>
</DOC>
<DOC>
<DOCNO>943</DOCNO>
<TEXT>
terms
frequently
combined
in
problem
description
cacm
january
1963
grems
m
ca630105
jb
march
14
1978
2
56
pm
943
5
943
943
5
943
943
5
943
</TEXT>
</DOC>
<DOC>
<DOCNO>944</DOCNO>
<TEXT>
storage
and
search
properties
of
a
tree
organized
memory
system
a
memory
with
list
properties
1
may
be
used
to
construct
numeric
alphabetic
or
alphanumeric
trees
such
trees
have
information
storage
and
retrieval
properties
applicable
to
problems
involving
large
quantities
of
data
or
to
problems
where
the
quantity
word
length
and
distribution
of
stored
information
is
not
known
a
priori
or
changes
rapidly
during
the
processing
the
purpose
of
this
paper
is
to
examine
the
storage
and
search
properties
of
a
tree
organized
storage
system
assuming
that
a
memory
possessing
certain
list
properties
is
available
of
prime
interest
is
the
application
where
a
symbol
table
dictionary
or
similar
file
is
to
be
stored
and
searched
cacm
january
1963
scidmore
a
k
weinberg
b
l
ca630104
jb
march
14
1978
3
02
pm
2846
4
944
849
4
944
944
4
944
155
5
944
944
5
944
944
5
944
944
5
944
1234
5
944
2451
5
944
849
6
944
944
6
944
944
6
944
1935
6
944
1936
6
944
321
6
944
385
6
944
400
6
944
402
6
944
404
6
944
3184
6
944
729
6
944
</TEXT>
</DOC>
<DOC>
<DOCNO>945</DOCNO>
<TEXT>
arithmetizing
declarations
an
application
to
cobol
cacm
january
1963
conway
m
e
speroni
j
ca630103
jb
march
14
1978
3
03
pm
1046
4
945
1105
4
945
1139
4
945
1140
4
945
1234
4
945
1263
4
945
1265
4
945
1496
4
945
1781
4
945
1824
4
945
2126
4
945
2546
4
945
464
4
945
584
4
945
631
4
945
653
4
945
680
4
945
763
4
945
795
4
945
799
4
945
945
4
945
945
5
945
945
5
945
945
5
945
404
5
945
799
5
945
945
6
945
399
6
945
82
6
945
404
6
945
</TEXT>
</DOC>
<DOC>
<DOCNO>946</DOCNO>
<TEXT>
suggestions
on
algol
60
rome
issues
a
report
by
the
american
standards
association
subcommittee
x3
4
2
cacm
january
1963
utman
r
e
ca630102
jb
march
14
1978
3
05
pm
946
5
946
946
5
946
946
5
946
1949
5
946
196
6
946
946
6
946
</TEXT>
</DOC>
<DOC>
<DOCNO>947</DOCNO>
<TEXT>
supplement
to
the
algol
60
report
cacm
january
1963
woodger
m
ca630101
jb
march
14
1978
3
05
pm
947
5
947
947
5
947
947
5
947
761
5
947
196
6
947
947
6
947
3184
6
947
</TEXT>
</DOC>
<DOC>
<DOCNO>948</DOCNO>
<TEXT>
note
on
the
use
of
procedures
cacm
december
1964
healy
m
j
r
ca641223
jb
march
9
1978
2
32
pm
1118
4
948
826
4
948
948
4
948
942
5
948
948
5
948
948
5
948
948
5
948
</TEXT>
</DOC>
<DOC>
<DOCNO>949</DOCNO>
<TEXT>
integer
and
signed
constants
in
algol
a
few
remarks
are
given
on
the
relations
between
syntax
and
semantics
in
the
programming
languages
the
aim
is
to
point
out
that
if
it
is
true
that
the
grammar
of
a
context
free
language
should
be
conceived
not
only
as
a
strings
generating
device
but
also
as
a
method
for
expressing
a
meaning
then
the
grammar
of
algol
is
open
to
some
criticism
cacm
december
1964
petrone
l
vandoni
c
e
ca641222
jb
march
9
1978
2
35
pm
1086
4
949
1102
4
949
1132
4
949
1142
4
949
1234
4
949
1263
4
949
1265
4
949
1270
4
949
1323
4
949
1358
4
949
1379
4
949
1380
4
949
1453
4
949
1464
4
949
1484
4
949
1491
4
949
1498
4
949
1613
4
949
1614
4
949
1781
4
949
1781
4
949
1781
4
949
1825
4
949
1860
4
949
1945
4
949
1945
4
949
2083
4
949
2178
4
949
2179
4
949
2252
4
949
2325
4
949
2341
4
949
2546
4
949
2645
4
949
2652
4
949
2684
4
949
2842
4
949
2929
4
949
2934
4
949
3069
4
949
669
4
949
679
4
949
691
4
949
761
4
949
762
4
949
949
4
949
949
4
949
949
4
949
989
4
949
949
5
949
949
5
949
949
5
949
483
5
949
584
5
949
3184
5
949
</TEXT>
</DOC>
<DOC>
<DOCNO>950</DOCNO>
<TEXT>
parallel
methods
for
integrating
ordinary
differential
equations
this
paper
is
dedicated
to
the
proposition
that
in
order
to
take
full
advantage
for
real
time
computations
of
highly
parallel
computers
as
can
be
expected
to
be
available
in
the
near
future
much
of
numerical
analysis
will
have
to
be
recast
in
a
more
parallel
form
by
this
is
meant
that
serial
algorithms
ought
to
be
replaced
by
algorithm
which
consist
of
several
subtasks
which
can
be
computed
without
knowledge
of
the
results
of
the
other
subtasks
as
an
example
a
method
is
proposed
for
parallelizing
the
numerical
integration
of
an
ordinary
differential
equation
which
process
by
all
standard
methods
is
entirely
serial
cacm
december
1964
nievergelt
j
ca641221
jb
march
9
1978
3
09
pm
950
5
950
950
5
950
950
5
950
</TEXT>
</DOC>
<DOC>
<DOCNO>951</DOCNO>
<TEXT>
rational
chebyshev
approximations
to
the
bessel
function
integrals
kis
x
the
second
remes
algorithm
is
used
to
approximate
the
integrals
kis
by
rational
functions
the
related
coefficients
for
the
approximations
of
ki1
ki2
ki3
are
given
for
different
precisions
cacm
december
1964
gargantini
i
pomentale
t
ca641220
jb
march
9
1978
3
12
pm
1015
4
951
1346
4
951
1440
4
951
1645
4
951
951
4
951
951
5
951
951
5
951
951
5
951
1346
5
951
532
5
951
951
6
951
532
6
951
</TEXT>
</DOC>
<DOC>
<DOCNO>952</DOCNO>
<TEXT>
another
use
of
fortran
ii
chaining
cacm
december
1964
drath
d
g
ca641219
jb
march
9
1978
3
13
pm
952
5
952
952
5
952
952
5
952
</TEXT>
</DOC>
<DOC>
<DOCNO>953</DOCNO>
<TEXT>
scanning
text
with
a
1401
cacm
december
1964
baker
j
j
ca641218
jb
march
9
1978
3
13
pm
953
5
953
953
5
953
953
5
953
2870
5
953
953
6
953
2377
6
953
2632
6
953
</TEXT>
</DOC>
<DOC>
<DOCNO>954</DOCNO>
<TEXT>
a
note
on
the
calculation
of
probabilities
in
an
f
distribution
cacm
december
1964
smillie
k
w
anstey
t
h
ca641217
jb
march
9
1978
3
14
pm
954
5
954
954
5
954
954
5
954
</TEXT>
</DOC>
<DOC>
<DOCNO>955</DOCNO>
<TEXT>
a
class
of
matrices
to
test
inversion
procedures
cacm
december
1964
cline
r
e
ca641216
jb
march
9
1978
3
16
pm
955
5
955
955
5
955
955
5
955
</TEXT>
</DOC>
<DOC>
<DOCNO>956</DOCNO>
<TEXT>
a
family
of
test
matrices
cacm
december
1964
newbery
a
c
r
ca641215
jb
march
9
1978
3
17
pm
956
5
956
956
5
956
956
5
956
</TEXT>
</DOC>
<DOC>
<DOCNO>957</DOCNO>
<TEXT>
method
for
partial
rewriting
of
magnetic
tape
cacm
december
1964
miller
j
a
ca641214
jb
march
9
1978
3
18
pm
957
5
957
957
5
957
957
5
957
</TEXT>
</DOC>
<DOC>
<DOCNO>958</DOCNO>
<TEXT>
a
case
of
too
much
precision
cacm
december
1964
synge
m
j
ca641213
jb
march
9
1978
3
23
pm
958
5
958
958
5
958
958
5
958
</TEXT>
</DOC>
<DOC>
<DOCNO>959</DOCNO>
<TEXT>
mark
sense
and
port
a
punch
programming
inputs
cacm
december
1964
lubbert
w
f
ca641212
jb
march
9
1978
3
24
pm
959
5
959
959
5
959
959
5
959
</TEXT>
</DOC>
<DOC>
<DOCNO>960</DOCNO>
<TEXT>
curve
fitting
with
format
fortran
cacm
december
1964
garber
m
j
ca641211
jb
march
9
1978
3
25
pm
960
5
960
960
5
960
960
5
960
</TEXT>
</DOC>
<DOC>
<DOCNO>961</DOCNO>
<TEXT>
limited
bit
manipulation
using
fortran
ii
techniques
are
developed
for
manipulating
bits
using
only
fortran
ii
these
techniques
allow
individual
bits
to
be
tested
certain
fields
to
be
shifted
and
numbers
coded
in
bcd
to
be
converted
to
binary
cacm
december
1964
oster
c
a
ca641210
jb
march
9
1978
3
27
pm
961
5
961
961
5
961
961
5
961
</TEXT>
</DOC>
<DOC>
<DOCNO>962</DOCNO>
<TEXT>
double
precision
squares
root
for
the
cdc
3600
in
january
of
1960
the
late
hans
j
maehly
completed
a
summary
of
approximations
to
the
elementary
functions
for
the
cdc
1604
computer
the
approximations
and
techniques
suggested
by
maehly
are
equally
applicable
to
the
second
large
computer
in
the
cdc
line
the
3600
unlike
the
1604
however
the
3600
has
built
in
double
precision
floating
point
arithmetic
the
present
work
largely
inspired
by
the
successes
of
maehly
and
his
associates
concerns
the
extension
of
one
of
maehly
ideas
to
a
double
precision
subroutine
for
the
3600
cacm
december
1964
cody
w
j
ca641209
jb
march
9
1978
3
31
pm
962
5
962
962
5
962
962
5
962
1440
5
962
1932
5
962
2159
5
962
962
6
962
962
6
962
962
6
962
1566
6
962
1932
6
962
532
6
962
</TEXT>
</DOC>
<DOC>
<DOCNO>963</DOCNO>
<TEXT>
relative
effects
of
central
processor
and
input
output
speeds
upon
throughput
on
the
large
computer
presented
in
this
paper
is
a
technique
for
determining
the
relative
effects
of
the
internal
speed
of
the
computer
and
the
speed
of
the
input
output
units
upon
the
overall
speed
of
the
system
equations
are
derived
which
permit
the
determination
of
these
effects
from
hardware
usage
measurements
cacm
december
1964
white
p
ca641208
jb
march
9
1978
3
34
pm
963
5
963
963
5
963
963
5
963
1653
5
963
963
6
963
1069
6
963
1417
6
963
</TEXT>
</DOC>
<DOC>
<DOCNO>964</DOCNO>
<TEXT>
mechanization
of
tedious
algebra
the
e
coefficients
of
theoretical
chemistry
a
table
of
formulas
for
certain
integrals
involving
legendre
functions
has
been
constructed
mechanically
by
a
program
which
performed
algebraic
operations
the
formulas
are
all
rational
algebraic
expressions
in
a
single
variable
and
were
constructed
by
a
recurrence
procedure
they
are
of
interest
in
molecular
quantum
chemistry
trivial
coding
techniques
were
used
to
write
the
relevant
programs
in
fortran
the
results
were
photo
composed
on
a
photon
s
560
system
that
was
controlled
by
tapes
which
were
punched
directly
from
the
computer
output
so
avoiding
manual
keyboarding
transcription
errors
and
keyboarded
correction
cacm
december
1964
wactlar
h
d
barnett
m
p
ca641207
jb
march
9
1978
3
38
pm
1028
4
964
1121
4
964
1216
4
964
1392
4
964
1396
4
964
1396
4
964
659
4
964
964
4
964
964
4
964
964
4
964
964
5
964
964
5
964
964
5
964
1334
5
964
1396
5
964
284
5
964
1444
5
964
561
5
964
759
5
964
964
6
964
964
6
964
964
6
964
1028
6
964
1029
6
964
1083
6
964
1132
6
964
1214
6
964
1278
6
964
1334
6
964
1365
6
964
1386
6
964
1387
6
964
1388
6
964
1392
6
964
1393
6
964
1394
6
964
1395
6
964
1396
6
964
1397
6
964
1496
6
964
284
6
964
407
6
964
3199
6
964
3200
6
964
3201
6
964
3202
6
964
3203
6
964
3204
6
964
561
6
964
730
6
964
</TEXT>
</DOC>
<DOC>
<DOCNO>965</DOCNO>
<TEXT>
greatest
common
divisor
algorithm
237
a1
cacm
december
1964
bray
t
a
ca641206
jb
march
9
1978
3
40
pm
965
5
965
965
5
965
965
5
965
</TEXT>
</DOC>
<DOC>
<DOCNO>966</DOCNO>
<TEXT>
evaluation
of
determinant
algorithm
224
f3
cacm
december
1964
hasselblad
v
rulifson
j
ca641205
jb
march
9
1978
3
41
pm
966
5
966
966
5
966
966
5
966
</TEXT>
</DOC>
<DOC>
<DOCNO>967</DOCNO>
<TEXT>
complementary
error
function
algorithm
181
s15
cacm
december
1964
clausen
i
hansson
l
ca641204
jb
march
9
1978
3
42
pm
967
5
967
967
5
967
967
5
967
1583
5
967
831
6
967
967
6
967
1126
6
967
707
6
967
</TEXT>
</DOC>
<DOC>
<DOCNO>968</DOCNO>
<TEXT>
radical
inverse
quasi
random
point
sequence
algorithm
247
g5
cacm
december
1964
halton
j
h
smith
g
b
ca641203
jb
march
9
19783
43
pm
968
5
968
968
5
968
968
5
968
</TEXT>
</DOC>
<DOC>
<DOCNO>969</DOCNO>
<TEXT>
graycode
algorithm
246
z
cacm
december
1964
boothroyd
j
ca641202
jb
march
9
1978
3
44
pm
969
5
969
969
5
969
969
5
969
2834
5
969
969
6
969
2045
6
969
2417
6
969
2466
6
969
</TEXT>
</DOC>
<DOC>
<DOCNO>970</DOCNO>
<TEXT>
treesort
3
algorithm
m1
cacm
december
1964
floyd
r
w
ca641201
jb
march
9
1978
3
45
pm
970
5
970
970
5
970
970
5
970
2042
5
970
2222
5
970
2356
5
970
2679
5
970
2844
5
970
2972
5
970
970
6
970
970
6
970
970
6
970
970
6
970
970
6
970
970
6
970
1059
6
970
1175
6
970
1190
6
970
1228
6
970
1228
6
970
1491
6
970
1800
6
970
1818
6
970
1834
6
970
1969
6
970
1997
6
970
308
6
970
2042
6
970
2042
6
970
2204
6
970
2227
6
970
2597
6
970
2732
6
970
2738
6
970
2742
6
970
2767
6
970
3187
6
970
507
6
970
716
6
970
783
6
970
</TEXT>
</DOC>
<DOC>
<DOCNO>971</DOCNO>
<TEXT>
time
sharing
in
a
traffic
control
program
the
toronto
traffic
signal
control
system
consists
of
a
variety
of
logically
distinct
computer
programs
all
competing
for
machine
time
to
satisfy
these
demands
a
time
sharing
program
has
been
written
whose
purpose
is
to
execute
in
the
order
of
a
predefined
priority
the
various
subprograms
within
the
real
time
system
in
this
paper
the
more
interesting
aspects
of
the
time
sharing
program
are
outlined
cacm
november
1964
green
l
e
s
ca641112
jb
march
9
1978
3
49
pm
971
5
971
971
5
971
971
5
971
</TEXT>
</DOC>
<DOC>
<DOCNO>972</DOCNO>
<TEXT>
an
executive
system
implemented
as
a
finite
state
automaton
the
473l
command
and
control
system
used
by
the
air
force
permits
many
operators
to
access
large
data
files
through
the
use
of
a
computer
the
man
machine
interface
is
satisfied
by
several
communication
consoles
from
which
operators
may
enter
queries
and
view
replies
a
data
link
permits
remote
stations
to
send
messages
status
reports
and
inventories
directly
to
the
computer
the
information
received
over
the
on
line
data
link
is
used
to
update
the
data
files
which
are
stored
on
disk
the
473l
programming
system
is
divided
into
an
executive
control
program
and
five
components
with
different
processing
priorities
these
priorities
permit
the
system
to
be
most
sensitive
to
the
console
inputs
and
permit
the
operators
at
all
the
consoles
to
time
share
the
central
processor
the
executive
control
program
provides
for
the
orderly
transitions
of
control
among
the
programming
system
components
the
major
emphasis
of
the
paper
is
on
the
technique
of
using
the
definition
of
a
finite
state
automaton
for
organizing
the
executive
control
program
cacm
november
1964
heistand
r
e
ca641111
jb
march
9
1978
3
56
pm
1471
4
972
1774
4
972
2911
4
972
560
4
972
972
4
972
972
4
972
972
4
972
972
5
972
972
5
972
972
5
972
271
5
972
273
5
972
276
5
972
</TEXT>
</DOC>
<DOC>
<DOCNO>973</DOCNO>
<TEXT>
estimation
of
heart
parameters
using
skin
potential
measurements
a
fundamental
problem
of
vector
cardiography
is
the
estimation
of
the
state
of
the
heart
on
the
basis
of
skin
potential
measurements
a
mathematical
model
relating
ventricular
dipoles
to
surface
potentials
is
sketched
then
it
is
shown
that
the
inverse
problem
that
of
determining
electrical
heart
parameters
on
the
basis
of
skin
potential
measurements
may
be
viewed
as
a
nonlinear
multipoint
boundary
value
problem
a
feasible
solution
employing
quasilinearization
and
high
speed
digital
computers
is
given
cacm
november
1964
bellman
r
collier
c
kagiwada
h
kalaba
r
selvester
r
ca641110
jb
march
9
1978
4
00
pm
973
5
973
973
5
973
973
5
973
1278
5
973
973
6
973
1028
6
973
1029
6
973
</TEXT>
</DOC>
<DOC>
<DOCNO>974</DOCNO>
<TEXT>
a
technique
for
reading
gapless
tapes
makes
electrocardiograph
analysis
feasible
on
the
ibm
7090
to
study
arrhythmias
and
higher
frequency
components
of
the
electrocardiogram
long
series
of
patient
heart
cycles
must
be
examined
before
valid
comparison
of
different
heart
beats
can
be
made
a
technique
is
presented
for
the
automatic
analysis
of
long
series
heart
cycles
via
a
digital
computer
cacm
november
1964
maher
a
s
ca641109
jb
march
9
1978
4
03
pm
974
5
974
974
5
974
974
5
974
</TEXT>
</DOC>
<DOC>
<DOCNO>975</DOCNO>
<TEXT>
the
new
program
of
work
for
the
international
standard
vocabulary
in
computers
and
information
processing
cacm
november
1964
traub
j
f
ca641108
jb
march
9
1978
4
05
pm
975
5
975
975
5
975
975
5
975
1251
5
975
975
6
975
</TEXT>
</DOC>
<DOC>
<DOCNO>976</DOCNO>
<TEXT>
fresnel
integrals
algorithm
213
s20
cacm
november
1964
gray
m
ca641107
jb
march
9
1978
4
06
pm
976
5
976
976
5
976
976
5
976
</TEXT>
</DOC>
<DOC>
<DOCNO>977</DOCNO>
<TEXT>
conversions
between
calendar
date
and
julian
day
number
algorithm
199
z
cacm
november
1964
oppenheim
d
k
ca641106
jb
march
9
1978
4
08
pm
977
5
977
977
5
977
977
5
977
</TEXT>
</DOC>
<DOC>
<DOCNO>978</DOCNO>
<TEXT>
fresnel
integrals
algorithm
244
s20
cacm
november
1964
lotsch
h
ca641105
jb
march
9
1978
4
09
pm
978
5
978
978
5
978
978
5
978
</TEXT>
</DOC>
<DOC>
<DOCNO>979</DOCNO>
<TEXT>
logarithm
of
a
complex
number
algorithm
243
b3
cacm
november
1964
collens
d
s
ca641104
jb
march
9
1978
4
10
pm
979
5
979
979
5
979
979
5
979
</TEXT>
</DOC>
<DOC>
<DOCNO>980</DOCNO>
<TEXT>
multiple
precision
arithmetic
and
the
exact
calculation
of
the
3
j
6
j
and
9
j
symbols
described
in
this
paper
is
a
system
of
general
purpose
multiple
precision
fixed
point
routines
and
their
use
in
subroutines
which
calculate
exactly
the
quantum
mechanical
3
j
6
j
and
9
j
symbols
of
large
arguments
cacm
november
1964
maer
r
m
redlich
m
g
ca641103
jb
march
9
1978
4
13
pm
980
5
980
980
5
980
980
5
980
</TEXT>
</DOC>
<DOC>
<DOCNO>981</DOCNO>
<TEXT>
rounding
problems
in
commercial
data
processing
a
common
requirement
in
commercial
data
processing
is
that
the
sum
of
a
set
of
numbers
rounded
in
a
generally
understood
manner
be
equal
to
the
sum
of
the
numbers
rounded
individually
four
rounding
procedures
are
described
to
accomplish
this
the
particular
procedure
that
is
appropriate
depends
upon
whether
the
numbers
being
accumulated
can
vary
in
sign
whether
their
sum
can
vary
in
sign
and
whether
the
last
number
being
summed
can
be
recognized
as
such
prior
to
its
rounding
cacm
november
1964
kelley
t
b
ca641102
jb
march
9
1978
4
25
pm
981
5
981
981
5
981
981
5
981
</TEXT>
</DOC>
<DOC>
<DOCNO>982</DOCNO>
<TEXT>
an
inductive
approach
to
language
translation
the
possibility
of
natural
language
translation
by
means
of
fixed
operations
on
example
translations
is
considered
the
conception
of
sentence
translation
which
motivates
the
work
is
informally
presented
and
the
measurement
of
physical
similarity
in
pairs
of
strings
is
discussed
a
notion
which
plays
a
central
role
in
the
proposed
type
of
translator
experimental
evidence
is
presented
in
support
of
the
premise
upon
which
this
conception
is
based
cacm
november
1964
faulk
r
d
ca641101
jb
march
9
1978
4
28
pm
982
5
982
982
5
982
982
5
982
1592
5
982
982
6
982
1112
6
982
619
6
982
</TEXT>
</DOC>
<DOC>
<DOCNO>983</DOCNO>
<TEXT>
take
up
reels
for
one
inch
perforated
tape
for
information
interchange
proposed
american
standard
cacm
october
1964
ca641019
jb
march
9
1978
4
30
pm
983
5
983
983
5
983
983
5
983
</TEXT>
</DOC>
<DOC>
<DOCNO>984</DOCNO>
<TEXT>
report
on
input
output
procedures
for
algol
60
ifip
cacm
october
1964
ca641018
jb
march
9
1978
4
32
pm
984
5
984
984
5
984
984
5
984
1705
5
984
1945
5
984
2034
5
984
823
6
984
914
6
984
915
6
984
917
6
984
984
6
984
984
6
984
984
6
984
986
6
984
989
6
984
990
6
984
1012
6
984
1020
6
984
1084
6
984
1098
6
984
1122
6
984
1138
6
984
1139
6
984
1141
6
984
1200
6
984
1223
6
984
1231
6
984
1265
6
984
1321
6
984
1336
6
984
1396
6
984
1455
6
984
1477
6
984
1487
6
984
1491
6
984
1496
6
984
1565
6
984
1852
6
984
1926
6
984
1947
6
984
483
6
984
584
6
984
669
6
984
680
6
984
763
6
984
</TEXT>
</DOC>
<DOC>
<DOCNO>985</DOCNO>
<TEXT>
report
on
subset
algol
60
ifip
cacm
october
1964
ca641017
jb
march
9
1978
4
33
pm
985
5
985
985
5
985
985
5
985
</TEXT>
</DOC>
<DOC>
<DOCNO>986</DOCNO>
<TEXT>
proposed
amendment
to
proposed
american
standard
on
specification
for
general
purpose
paper
cards
for
information
processing
cacm
october
1964
ca641016
jb
march
9
1978
4
35
pm
986
5
986
986
5
986
986
5
986
1705
5
986
984
6
986
986
6
986
1020
6
986
1321
6
986
</TEXT>
</DOC>
<DOC>
<DOCNO>987</DOCNO>
<TEXT>
fortran
vs
basic
fortran
a
programming
language
for
information
processing
on
automatic
data
processing
systems
cacm
october
1964
ca641015
jb
march
9
1978
4
36
pm
987
5
987
987
5
987
987
5
987
1613
5
987
1646
5
987
1900
5
987
1955
5
987
2025
5
987
2154
5
987
2365
5
987
2506
5
987
3060
5
987
830
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
987
6
987
988
6
987
988
6
987
1072
6
987
1086
6
987
1134
6
987
1179
6
987
1453
6
987
1647
6
987
1754
6
987
1900
6
987
1900
6
987
1924
6
987
2154
6
987
2362
6
987
3184
6
987
680
6
987
</TEXT>
</DOC>
<DOC>
<DOCNO>988</DOCNO>
<TEXT>
history
and
summary
of
fortran
standardization
development
for
the
asa
cacm
october
1964
heising
w
p
ca641014
jb
march
9
1978
4
37
pm
988
5
988
988
5
988
988
5
988
1845
5
988
1900
5
988
2083
5
988
2154
5
988
2270
5
988
2693
5
988
987
6
988
987
6
988
988
6
988
988
6
988
988
6
988
988
6
988
988
6
988
988
6
988
1900
6
988
2270
6
988
2696
6
988
3184
6
988
</TEXT>
</DOC>
<DOC>
<DOCNO>989</DOCNO>
<TEXT>
a
method
of
syntax
specification
cacm
october
1964
iverson
k
e
ca641013
jb
march
9
1978
4
39
pm
249
4
989
254
4
989
272
4
989
1086
4
989
1102
4
989
1109
4
989
1132
4
989
1140
4
989
1188
4
989
1234
4
989
1263
4
989
1265
4
989
1270
4
989
1306
4
989
1323
4
989
1358
4
989
1379
4
989
1380
4
989
1453
4
989
1464
4
989
1464
4
989
1484
4
989
1491
4
989
1491
4
989
1498
4
989
1613
4
989
1614
4
989
1767
4
989
1781
4
989
1781
4
989
1781
4
989
1787
4
989
1825
4
989
1860
4
989
1949
4
989
321
4
989
2059
4
989
2083
4
989
2126
4
989
2178
4
989
2179
4
989
2252
4
989
2325
4
989
2341
4
989
2546
4
989
435
4
989
437
4
989
463
4
989
483
4
989
491
4
989
2645
4
989
2652
4
989
2684
4
989
2732
4
989
2842
4
989
2929
4
989
2934
4
989
560
4
989
583
4
989
3069
4
989
3073
4
989
627
4
989
631
4
989
632
4
989
642
4
989
644
4
989
653
4
989
669
4
989
679
4
989
680
4
989
691
4
989
729
4
989
761
4
989
761
4
989
762
4
989
763
4
989
123
4
989
140
4
989
919
4
989
949
4
989
989
4
989
989
4
989
989
4
989
196
5
989
989
5
989
989
5
989
989
5
989
1263
5
989
288
5
989
1453
5
989
1945
5
989
3184
5
989
823
6
989
914
6
989
915
6
989
917
6
989
984
6
989
989
6
989
989
6
989
989
6
989
990
6
989
1012
6
989
1084
6
989
1098
6
989
1122
6
989
1138
6
989
1139
6
989
1141
6
989
1200
6
989
1223
6
989
1265
6
989
1336
6
989
1396
6
989
1455
6
989
1477
6
989
1487
6
989
1491
6
989
1496
6
989
404
6
989
483
6
989
3184
6
989
3184
6
989
584
6
989
669
6
989
680
6
989
763
6
989
</TEXT>
</DOC>
<DOC>
<DOCNO>990</DOCNO>
<TEXT>
constraint
type
statements
in
programming
languages
a
proposal
is
made
for
including
in
a
programming
language
statements
which
imply
relations
between
variables
but
which
are
not
explicit
assignment
statements
the
compiler
sets
up
a
newtonian
iteration
making
use
for
the
purpose
of
a
routine
for
formal
differentiation
cacm
october
1964
wilkes
m
v
ca641012
jb
march
9
1978
4
42
pm
990
5
990
990
5
990
990
5
990
1781
5
990
1945
5
990
2341
5
990
823
6
990
123
6
990
196
6
990
914
6
990
915
6
990
917
6
990
919
6
990
984
6
990
989
6
990
990
6
990
990
6
990
990
6
990
1007
6
990
1012
6
990
1046
6
990
1084
6
990
1098
6
990
1122
6
990
1131
6
990
1138
6
990
1139
6
990
1139
6
990
1140
6
990
1141
6
990
1149
6
990
1198
6
990
1200
6
990
1215
6
990
1223
6
990
1223
6
990
1265
6
990
1265
6
990
1303
6
990
1323
6
990
1336
6
990
1358
6
990
1366
6
990
1396
6
990
1421
6
990
1455
6
990
1460
6
990
1462
6
990
1463
6
990
1467
6
990
1468
6
990
1468
6
990
1466
6
990
1477
6
990
1477
6
990
1487
6
990
1491
6
990
1491
6
990
1496
6
990
1496
6
990
1531
6
990
1535
6
990
1565
6
990
1601
6
990
1602
6
990
1613
6
990
1614
6
990
1626
6
990
1641
6
990
1787
6
990
1788
6
990
205
6
990
224
6
990
249
6
990
288
6
990
316
6
990
381
6
990
398
6
990
11
6
990
404
6
990
410
6
990
463
6
990
464
6
990
483
6
990
483
6
990
3184
6
990
3184
6
990
3188
6
990
584
6
990
584
6
990
600
6
990
669
6
990
680
6
990
680
6
990
691
6
990
763
6
990
763
6
990
799
6
990
</TEXT>
</DOC>
<DOC>
<DOCNO>991</DOCNO>
<TEXT>
gamma
function
with
controller
accuracy
algorithm
225
s14
cacm
october
1964
bray
t
a
ca641011
jb
march
9
1978
4
44
pm
991
5
991
991
5
991
991
5
991
</TEXT>
</DOC>
<DOC>
<DOCNO>992</DOCNO>
<TEXT>
gamma
function
algorithm
221
s14
cacm
october
1964
mccombs
v
k
ca641010
jb
march
9
1978
4
45
pm
992
5
992
992
5
992
992
5
992
</TEXT>
</DOC>
<DOC>
<DOCNO>993</DOCNO>
<TEXT>
kutta
merson
algorithm
218
d2
cacm
october
1964
priebe
k
b
ca641009
jb
march
9
1978
4
46
pm
993
5
993
993
5
993
993
5
993
</TEXT>
</DOC>
<DOC>
<DOCNO>994</DOCNO>
<TEXT>
stringsort
algorithm
207
m1
cacm
october
1964
blair
c
r
ca641008
jb
march
9
1978
4
47
pm
994
5
994
994
5
994
994
5
994
</TEXT>
</DOC>
<DOC>
<DOCNO>995</DOCNO>
<TEXT>
steep1
algorithm
203
e4
cacm
october
1964
wallack
p
ca641007
jb
march
9
1978
4
48
pm
995
5
995
995
5
995
995
5
995
</TEXT>
</DOC>
<DOC>
<DOCNO>996</DOCNO>
<TEXT>
permutations
of
a
set
with
repetitions
algorithm
242
g6
cacm
october
1964
sag
t
w
ca641006
jb
march
9
1978
4
49
pm
996
5
996
996
5
996
996
5
996
2044
5
996
996
6
996
1558
6
996
2230
6
996
521
6
996
</TEXT>
</DOC>
<DOC>
<DOCNO>997</DOCNO>
<TEXT>
patent
protection
of
computer
programs
cacm
october
1964
jacobs
m
c
ca641005
jb
march
9
1978
4
50
pm
997
5
997
997
5
997
997
5
997
1711
5
997
997
6
997
1001
6
997
</TEXT>
</DOC>
<DOC>
<DOCNO>998</DOCNO>
<TEXT>
computer
programs
are
patentable
cacm
october
1964
hamlin
k
b
ca641004
jb
march
9
1978
4
53
pm
998
5
998
998
5
998
998
5
998
</TEXT>
</DOC>
<DOC>
<DOCNO>999</DOCNO>
<TEXT>
joint
inventorship
of
computers
cacm
october
1964
hauptman
g
a
ca641003
jb
march
9
19784
54
pm
999
5
999
999
5
999
999
5
999
</TEXT>
</DOC>
<DOC>
<DOCNO>1000</DOCNO>
<TEXT>
computer
patent
disclosures
cacm
october
1964
kates
j
p
ca641002
jb
march
9
1978
4
55
pm
1000
5
1000
1000
5
1000
1000
5
1000
</TEXT>
</DOC>
<DOC>
<DOCNO>1001</DOCNO>
<TEXT>
copyright
aspects
of
computer
usage
this
paper
is
concerned
with
the
question
of
what
constitutes
infringement
of
a
copyright
on
a
book
or
other
nondramatic
literary
work
when
the
work
is
fed
into
a
computer
and
is
indexed
analyzed
partially
reprinted
or
otherwise
utilized
by
the
computer
to
produce
eye
readable
output
the
question
of
copyrightability
of
programs
and
infringement
of
copyrights
on
programs
is
also
discussed
the
paper
is
directed
primarily
to
a
discussion
of
the
present
law
some
aspects
of
the
proposed
new
copyright
law
are
also
included
general
recommendations
are
made
with
respect
to
the
proposed
revision
of
the
copyright
law
cacm
october
1964
lawlor
r
c
ca641001
jb
march
9
1978
4
59
pm
1001
5
1001
1001
5
1001
1001
5
1001
1711
5
1001
997
6
1001
1001
6
1001
</TEXT>
</DOC>
<DOC>
<DOCNO>1002</DOCNO>
<TEXT>
a
rapid
method
for
digital
filtering
since
much
of
the
computer
time
spent
in
time
series
analysis
is
used
for
multiplications
a
minimum
multiplication
method
was
devised
for
digital
filtering
with
the
expectation
that
it
would
be
useful
in
the
on
line
real
time
analysis
of
biological
data
the
filters
are
constructed
from
a
succession
of
readily
analyzable
components
in
a
manner
that
facilitates
cascading
the
repertoire
of
frequency
response
curves
includes
relatively
good
low
pass
and
band
pass
designs
programs
are
available
for
implementing
both
the
synthesis
of
these
filters
and
their
application
on
computers
whose
assemblers
allow
the
definition
of
recursive
macros
cacm
september
1964
whittlesey
j
r
b
ca640909
jb
march
9
1978
5
03
pm
1002
5
1002
1002
5
1002
1002
5
1002
</TEXT>
</DOC>
<DOC>
<DOCNO>1003</DOCNO>
<TEXT>
a
computer
analysis
method
for
thermal
diffusion
in
biochemical
systems
in
the
thermal
detection
of
rapid
biochemical
reactions
it
is
necessary
to
correct
the
temperature
data
for
transient
heat
conduction
losses
in
a
cylindrical
calorimeter
to
handle
the
complexities
arising
from
varying
thermal
relaxation
times
of
concentric
insulating
layers
a
computer
program
was
developed
which
gives
the
temperature
distribution
of
the
system
as
a
function
of
radius
and
time
this
distribution
is
corrected
at
each
step
by
a
subroutine
which
calculates
the
instantaneous
chemical
state
of
there
action
as
well
as
the
heat
produced
by
this
reaction
the
program
is
based
on
a
direct
statement
of
fourier
law
of
heat
conduction
and
the
chemical
rate
equation
to
provide
a
bookkeeping
law
to
follow
the
reactants
and
the
flow
of
heat
packets
in
such
a
way
that
the
computer
continually
stores
the
heat
distribution
a
computer
analysis
method
is
here
regarded
as
one
in
which
the
physical
laws
of
a
process
are
used
explicitly
in
the
program
usually
this
results
in
by
passing
much
of
the
mathematical
procedures
conventionally
used
the
program
was
tested
against
some
known
exact
solutions
of
the
heat
equation
and
gave
identical
results
and
compared
well
with
experimental
data
of
a
known
biochemical
reaction
the
construction
of
computer
programs
based
on
the
direct
statement
of
the
physical
laws
is
a
principle
of
general
applicability
which
has
been
applied
to
several
other
physical
phenomena
cacm
september
1964
davids
n
berger
r
l
ca640908
jb
march
9
1978
5
13
pm
1003
5
1003
1003
5
1003
1003
5
1003
</TEXT>
</DOC>
<DOC>
<DOCNO>1004</DOCNO>
<TEXT>
arctangent
algorithm
b1
cacm
september
1964
mills
k
w
ca640907
jb
march
9
1978
6
08
pm
1004
5
1004
1004
5
1004
1004
5
1004
</TEXT>
</DOC>
<DOC>
<DOCNO>1005</DOCNO>
<TEXT>
coordinates
on
an
ellipsoid
algorithm
240
z
cacm
september
1964
dorrer
e
ca640906
jb
march
9
1978
6
09
pm
1005
5
1005
1005
5
1005
1005
5
1005
</TEXT>
</DOC>
<DOC>
<DOCNO>1006</DOCNO>
<TEXT>
a
storage
allocation
and
reference
structure
a
method
is
proposed
and
discussed
which
allows
a
subscripted
variable
capability
in
the
fortran
sense
to
be
added
to
autocoder
type
assembly
systems
cacm
september
1964
fitzwater
d
r
ca640905
jb
march
9
1978
6
11
pm
1006
5
1006
1006
5
1006
1006
5
1006
1788
5
1006
1006
6
1006
1007
6
1006
205
6
1006
3189
6
1006
</TEXT>
</DOC>
<DOC>
<DOCNO>1007</DOCNO>
<TEXT>
extension
of
existing
compilers
by
sophisticated
use
of
macros
a
description
is
presented
of
an
application
in
which
macros
and
string
concatenation
were
employed
to
add
a
new
facility
to
belfap
cacm
september
1964
benett
r
k
neumann
h
d
ca640904
jb
march
9
1978
6
13
pm
1007
5
1007
1007
5
1007
1007
5
1007
1781
5
1007
1788
5
1007
123
6
1007
196
6
1007
919
6
1007
990
6
1007
1006
6
1007
1007
6
1007
1007
6
1007
1046
6
1007
1131
6
1007
1139
6
1007
1140
6
1007
1149
6
1007
1198
6
1007
1215
6
1007
1223
6
1007
1265
6
1007
1303
6
1007
1323
6
1007
1358
6
1007
1366
6
1007
1421
6
1007
1460
6
1007
1462
6
1007
1463
6
1007
1467
6
1007
1468
6
1007
1477
6
1007
1491
6
1007
1496
6
1007
1531
6
1007
1535
6
1007
1565
6
1007
1601
6
1007
1602
6
1007
1613
6
1007
1614
6
1007
1626
6
1007
1641
6
1007
1787
6
1007
1788
6
1007
205
6
1007
205
6
1007
224
6
1007
249
6
1007
288
6
1007
316
6
1007
381
6
1007
398
6
1007
11
6
1007
404
6
1007
410
6
1007
463
6
1007
464
6
1007
483
6
1007
3184
6
1007
3188
6
1007
3189
6
1007
584
6
1007
600
6
1007
680
6
1007
691
6
1007
763
6
1007
799
6
1007
</TEXT>
</DOC>
<DOC>
<DOCNO>1008</DOCNO>
<TEXT>
scheduling
meetings
with
a
computer
computer
scheduling
of
papers
as
it
was
developed
for
the
1960
meeting
of
the
federation
of
american
societies
for
experimental
biology
faseb
is
described
the
faseb
meeting
is
the
largest
scientific
meeting
held
in
the
united
states
each
year
the
technique
developed
for
faseb
can
be
applied
to
schedule
any
meeting
with
parallel
sessions
cacm
september
1964
schultz
c
k
brooks
a
schwartz
p
ca640903
jb
march
9
1978
6
16
pm
1008
5
1008
1008
5
1008
1008
5
1008
2052
5
1008
1008
6
1008
1013
6
1008
1504
6
1008
1540
6
1008
</TEXT>
</DOC>
<DOC>
<DOCNO>1009</DOCNO>
<TEXT>
solution
of
combinatorial
problems
using
generating
functions
on
a
variable
field
computer
the
utility
of
generating
functions
in
solving
combinatorial
problems
is
discussed
particular
implementation
results
are
presented
and
evaluated
cacm
september
1964
weinberg
g
m
ca640902
jb
march
9
1978
6
17
pm
1009
5
1009
1009
5
1009
1009
5
1009
</TEXT>
</DOC>
<DOC>
<DOCNO>1010</DOCNO>
<TEXT>
a
multiuser
computation
facility
for
education
and
research
present
day
computing
facilities
are
limited
in
their
value
for
scientific
research
by
inability
to
interact
strongly
with
users
the
full
power
of
a
research
computing
instrument
should
be
available
at
many
terminals
that
give
each
user
the
ability
to
generate
correct
and
operate
any
procedure
he
wishes
either
simple
or
complex
implementation
is
described
for
a
small
scale
multiuser
computer
system
that
permits
several
users
to
work
independently
with
the
machine
and
to
obtain
satisfactory
response
using
typewriter
communication
cacm
september
1964
dennis
j
b
ca640901
jb
march
9
1978
6
22
pm
1010
5
1010
1010
5
1010
1010
5
1010
</TEXT>
</DOC>
<DOC>
<DOCNO>1011</DOCNO>
<TEXT>
logarithm
of
a
complex
number
algorithm
48
b3
cacm
august
1964
collens
d
s
ca640819
jb
march
23
1978
7
54
pm
1011
5
1011
1011
5
1011
1011
5
1011
</TEXT>
</DOC>
<DOC>
<DOCNO>1012</DOCNO>
<TEXT>
formal
parsing
systems
automatic
syntactic
analysis
has
recently
become
important
for
both
natural
language
data
processing
and
syntax
directed
compilers
a
formal
parsing
system
g
v
u
t
r
consists
of
two
finite
disjoint
vocabularies
v
and
t
a
many
many
map
u
from
v
onto
t
and
a
recursive
set
r
of
strings
in
t
called
syntactic
sentence
classes
every
program
for
automatic
syntactic
analysis
determines
a
formal
parsing
system
a
directed
production
analyzer
i
t
x
p
is
a
nondeterministic
pushdown
store
machine
with
internal
vocabulary
i
input
vocabulary
t
and
all
productions
of
p
in
the
form
z
a
ay1
ym
where
z
yi
are
elements
of
the
set
i
and
a
is
an
element
of
the
set
t
every
context
free
language
can
be
analyzed
by
a
directed
production
analyzer
the
kuno
oettinger
multiple
path
syntactic
analyzer
for
english
is
a
concrete
example
of
a
directed
production
analyzer
and
of
a
working
parsing
algorithm
the
connection
between
structures
assigned
by
the
analyzer
and
those
of
a
conventional
phrase
structure
grammar
is
examined
in
this
paper
cacm
august
1964
greibach
s
a
ca640818
jb
march
9
1978
6
30
pm
1012
5
1012
1012
5
1012
1012
5
1012
1225
5
1012
1350
5
1012
1945
5
1012
823
6
1012
914
6
1012
915
6
1012
917
6
1012
984
6
1012
989
6
1012
990
6
1012
1012
6
1012
1012
6
1012
1012
6
1012
1084
6
1012
1098
6
1012
1122
6
1012
1138
6
1012
1139
6
1012
1141
6
1012
1200
6
1012
1223
6
1012
1225
6
1012
1265
6
1012
1265
6
1012
1336
6
1012
1396
6
1012
1399
6
1012
1455
6
1012
1477
6
1012
1487
6
1012
1491
6
1012
1496
6
1012
483
6
1012
584
6
1012
669
6
1012
680
6
1012
680
6
1012
680
6
1012
763
6
1012
</TEXT>
</DOC>
<DOC>
<DOCNO>1013</DOCNO>
<TEXT>
final
examination
scheduling
a
method
for
scheduling
final
examinations
to
yield
a
minimal
number
of
student
conflicts
is
described
the
minimization
is
achieved
by
repetitively
evaluating
a
nonlinear
set
of
equations
imbeded
in
the
process
is
a
random
or
monte
carlo
selection
of
assignments
as
in
such
heuristic
techniques
the
solution
may
not
be
optimum
and
many
solutions
may
be
found
which
yield
locally
minimal
results
computer
programs
are
described
and
empirical
results
given
cacm
august
1964
broder
s
ca640817
jb
march
9
1978
6
33
pm
1013
5
1013
1013
5
1013
1013
5
1013
1609
5
1013
2052
5
1013
1008
6
1013
1013
6
1013
1013
6
1013
1504
6
1013
1540
6
1013
</TEXT>
</DOC>
<DOC>
<DOCNO>1014</DOCNO>
<TEXT>
machine
controls
for
analysis
of
variance
a
major
problem
in
using
the
analysis
of
variance
as
the
number
of
factors
increases
is
the
exponential
rise
in
the
number
of
interactions
even
though
the
experimenter
may
not
be
interested
in
these
interactions
it
is
impossible
to
ignore
them
in
most
experimental
designs
because
of
the
problem
of
getting
error
terms
it
is
natural
therefore
to
look
to
the
computer
to
handle
the
bulk
of
work
involved
in
computing
the
interactions
a
program
device
to
get
the
computer
to
do
this
is
described
cacm
august
1964
weldon
r
j
ca640816
jb
march
9
1978
6
37
pm
1014
4
1014
912
5
1014
1014
5
1014
1014
5
1014
1014
5
1014
</TEXT>
</DOC>
<DOC>
<DOCNO>1015</DOCNO>
<TEXT>
near
minimax
polynomial
approximations
and
partitioning
of
intervals
a
method
of
near
minimax
polynomial
approximation
is
described
as
a
by
product
this
method
provides
a
formula
for
an
estimate
of
the
maximum
error
associated
with
a
given
degree
of
approximation
using
this
formula
a
partitioning
algorithm
is
obtained
for
dividing
a
basic
interval
into
subintervals
for
which
approximations
of
equal
degree
give
equal
maximum
error
cacm
august
1964
fraser
w
hart
j
f
ca640815
jb
march
9
1978
6
41
pm
1015
4
1015
1346
4
1015
1440
4
1015
1645
4
1015
951
4
1015
1015
5
1015
1015
5
1015
1015
5
1015
532
5
1015
</TEXT>
</DOC>
<DOC>
<DOCNO>1016</DOCNO>
<TEXT>
interchangcable
perforated
tape
variable
block
formats
for
positioning
and
straight
cut
rs
273
and
contouring
and
contouring
positioning
rs
274
numerically
controlled
machine
tools
proposed
american
standards
cacm
august
1964
ca640814
jb
march
9
1978
6
43
pm
1016
5
1016
1016
5
1016
1016
5
1016
</TEXT>
</DOC>
<DOC>
<DOCNO>1017</DOCNO>
<TEXT>
comments
on
bit
sequencing
of
the
ascii
in
serial
by
bit
data
transmission
cacm
august
1964
bemer
r
w
booth
j
ca640813
jb
march
9
1978
6
45
pm
1017
5
1017
1017
5
1017
1017
5
1017
</TEXT>
</DOC>
<DOC>
<DOCNO>1018</DOCNO>
<TEXT>
gauss
algorithm
209
s15
cacm
august
1964
pike
m
c
ca640812
jb
march
9
1978
6
54
pm
1018
5
1018
1018
5
1018
1018
5
1018
</TEXT>
</DOC>
<DOC>
<DOCNO>1019</DOCNO>
<TEXT>
xy
move
plotting
algorithm
162
j6
cacm
august
1964
cavin
d
k
ca640811
jb
march
9
1978
6
55
pm
1019
5
1019
1019
5
1019
1019
5
1019
</TEXT>
</DOC>
<DOC>
<DOCNO>1020</DOCNO>
<TEXT>
free
field
read
algorithm
239
i5
cacm
august
1964
mckeeman
w
m
ca640810
jb
march
9
1978
6
56
pm
1020
5
1020
1020
5
1020
1020
5
1020
1705
5
1020
984
6
1020
986
6
1020
1020
6
1020
1321
6
1020
</TEXT>
</DOC>
<DOC>
<DOCNO>1021</DOCNO>
<TEXT>
conjugate
gradient
method
algorithm
238
f4
cacm
august
1964
reeves
c
m
ca640809
jb
march
9
1978
6
59
pm
1021
5
1021
1021
5
1021
1021
5
1021
</TEXT>
</DOC>
<DOC>
<DOCNO>1022</DOCNO>
<TEXT>
greatest
common
divisor
algorithm
237
a1
cacm
august
1964
peck
j
e
l
ca640808
jb
march
9
1978
7
17
pm
1022
5
1022
1022
5
1022
1022
5
1022
2031
5
1022
1022
6
1022
450
6
1022
</TEXT>
</DOC>
<DOC>
<DOCNO>1023</DOCNO>
<TEXT>
bessel
functions
of
the
first
kind
algorithm
236
s17
cacm
august
1964
gautschi
w
ca640807
jb
march
9
1978
7
19
pm
1023
4
1023
1222
4
1023
1023
5
1023
1023
5
1023
1023
5
1023
1130
5
1023
1909
5
1023
2119
5
1023
134
6
1023
1023
6
1023
1023
6
1023
1284
6
1023
1316
6
1023
2129
6
1023
</TEXT>
</DOC>
<DOC>
<DOCNO>1024</DOCNO>
<TEXT>
a
note
on
the
formation
of
free
list
cacm
august
1964
waite
w
m
ca640806
jb
march
9
1978
7
20
pm
1024
4
1024
1024
4
1024
1051
4
1024
1051
4
1024
1098
4
1024
1102
4
1024
1132
4
1024
1214
4
1024
1380
4
1024
1388
4
1024
1390
4
1024
1393
4
1024
1485
4
1024
1486
4
1024
1487
4
1024
1549
4
1024
1549
4
1024
1570
4
1024
1706
4
1024
1826
4
1024
1878
4
1024
1878
4
1024
1946
4
1024
1957
4
1024
378
4
1024
2060
4
1024
2155
4
1024
2168
4
1024
2168
4
1024
2719
4
1024
2723
4
1024
2723
4
1024
2838
4
1024
2842
4
1024
2855
4
1024
2857
4
1024
2879
4
1024
3077
4
1024
3080
4
1024
3106
4
1024
3112
4
1024
627
4
1024
106
4
1024
1024
5
1024
1024
5
1024
1024
5
1024
210
5
1024
731
5
1024
</TEXT>
</DOC>
<DOC>
<DOCNO>1025</DOCNO>
<TEXT>
a
method
of
syntax
checking
algol
60
a
syntax
checker
was
designed
based
on
the
syntax
of
algol
as
described
in
the
algol
60
report
communications
of
the
acm
may
1960
since
the
definition
of
the
elements
of
the
language
is
recursive
it
seemed
most
desirable
to
design
the
syntax
checker
as
a
set
of
mutually
recursive
processors
tied
together
by
subroutines
which
perform
certain
bookkeeping
functions
because
of
the
recursive
nature
of
the
language
and
of
the
syntax
checker
the
problem
of
recovery
after
an
error
required
much
attention
a
method
was
devised
which
permits
most
programs
to
be
checked
completely
despite
errors
cacm
august
1964
lietzke
m
p
ca640805
jb
march
9
1978
7
24
pm
1025
5
1025
1025
5
1025
1025
5
1025
1215
5
1025
1682
5
1025
1025
6
1025
1025
6
1025
1785
6
1025
224
6
1025
763
6
1025
</TEXT>
</DOC>
<DOC>
<DOCNO>1026</DOCNO>
<TEXT>
divide
and
correct
methods
for
multiple
precision
division
a
division
problem
is
defined
and
notation
to
relate
it
to
the
problem
of
multiple
precision
operation
in
a
digital
computer
is
introduced
a
basic
divide
and
correct
method
for
multiple
precision
division
is
formulated
and
its
known
properties
briefly
reviewed
of
particular
interest
is
the
fact
that
the
method
produces
at
each
step
a
set
of
precisely
three
estimates
for
the
desired
result
one
of
which
is
exact
cacm
august
1964
stein
m
l
ca640804
jb
march
9
1978
7
27
pm
1026
4
1026
1258
4
1026
1292
4
1026
1497
4
1026
107
5
1026
1026
5
1026
1026
5
1026
1026
5
1026
1258
5
1026
1292
5
1026
1497
5
1026
1975
5
1026
2605
5
1026
107
6
1026
107
6
1026
107
6
1026
1026
6
1026
1026
6
1026
1026
6
1026
1026
6
1026
1026
6
1026
1292
6
1026
1292
6
1026
1497
6
1026
1593
6
1026
2286
6
1026
</TEXT>
</DOC>
<DOC>
<DOCNO>1027</DOCNO>
<TEXT>
an
alternate
checksum
method
cacm
august
1964
newhall
n
s
ca640803
jb
march
9
1978
7
28
pm
1027
5
1027
1027
5
1027
1027
5
1027
</TEXT>
</DOC>
<DOC>
<DOCNO>1028</DOCNO>
<TEXT>
investigation
of
a
new
analytical
method
for
numerical
derivative
evaluation
a
recently
proposed
analytical
approach
to
numerical
derivative
evaluation
is
discussed
the
technique
is
shown
to
be
both
accurate
and
easy
to
apply
though
certain
indicated
modifications
are
required
its
use
should
greatly
facilitate
the
writing
and
debugging
of
programs
requiring
derivatives
of
highly
complex
functions
cacm
august
1964
wilkins
r
d
ca640802
jb
march
9
1978
7
31
pm
1028
4
1028
1028
4
1028
1216
4
1028
1216
4
1028
1278
4
1028
1347
4
1028
1392
4
1028
1396
4
1028
1396
4
1028
1536
4
1028
964
4
1028
1028
5
1028
1028
5
1028
1028
5
1028
1029
5
1028
1216
5
1028
1278
5
1028
1347
5
1028
1396
5
1028
561
5
1028
964
6
1028
973
6
1028
1028
6
1028
1028
6
1028
1028
6
1028
1028
6
1028
1029
6
1028
1029
6
1028
1029
6
1028
1029
6
1028
1083
6
1028
1132
6
1028
1214
6
1028
1278
6
1028
1278
6
1028
1334
6
1028
1365
6
1028
1386
6
1028
1387
6
1028
1388
6
1028
1392
6
1028
1393
6
1028
1394
6
1028
1395
6
1028
1396
6
1028
1397
6
1028
1496
6
1028
284
6
1028
407
6
1028
3199
6
1028
3200
6
1028
3201
6
1028
3202
6
1028
3203
6
1028
3204
6
1028
561
6
1028
561
6
1028
730
6
1028
</TEXT>
</DOC>
<DOC>
<DOCNO>1029</DOCNO>
<TEXT>
a
simple
automatic
derivative
evaluation
program
a
procedure
for
automatic
evaluation
of
total
partial
derivatives
of
arbitrary
algebraic
functions
is
presented
the
technique
permits
computation
of
numerical
values
of
derivatives
without
developing
analytical
expressions
for
the
derivatives
the
key
to
the
method
is
the
decomposition
of
the
given
function
by
introduction
of
intermediate
variables
into
a
series
of
elementary
functional
steps
a
library
of
elementary
function
subroutines
is
provided
for
the
automatic
evaluation
and
differentiation
of
these
new
variables
the
final
step
in
this
process
produces
the
desired
function
derivative
the
main
feature
of
this
approach
is
its
simplicity
it
can
be
used
as
a
quick
reaction
tool
where
the
derivation
of
analytical
derivatives
is
laborious
and
also
as
a
debugging
tool
for
programs
which
contain
derivatives
cacm
august
1964
wengert
r
e
ca640801
jb
march
9
1978
7
38
pm
1028
5
1029
1029
5
1029
1029
5
1029
1029
5
1029
1216
5
1029
1278
5
1029
1347
5
1029
1396
5
1029
1536
5
1029
964
6
1029
973
6
1029
1028
6
1029
1028
6
1029
1028
6
1029
1028
6
1029
1029
6
1029
1029
6
1029
1029
6
1029
1029
6
1029
1029
6
1029
1029
6
1029
1083
6
1029
1132
6
1029
1214
6
1029
1278
6
1029
1278
6
1029
1334
6
1029
1365
6
1029
1386
6
1029
1387
6
1029
1388
6
1029
1392
6
1029
1393
6
1029
1394
6
1029
1395
6
1029
1396
6
1029
1397
6
1029
1496
6
1029
284
6
1029
407
6
1029
3199
6
1029
3200
6
1029
3201
6
1029
3202
6
1029
3203
6
1029
3204
6
1029
561
6
1029
561
6
1029
561
6
1029
730
6
1029
</TEXT>
</DOC>
<DOC>
<DOCNO>1030</DOCNO>
<TEXT>
techniques
for
the
simulation
of
computer
logic
the
simulation
of
a
digital
computer
is
an
integral
part
of
most
computer
design
automation
systems
the
evaluation
of
the
boolean
functions
which
characterize
the
computer
being
simulated
constitutes
one
major
portion
of
a
simulation
system
four
general
procedural
classes
for
evaluating
these
functions
are
defined
toward
greatly
increased
efficiency
of
a
simulation
system
methods
are
presented
for
simultaneously
evaluating
many
functions
for
one
set
of
values
of
the
variables
and
for
evaluating
simultaneously
one
function
for
many
sets
of
values
for
the
variables
cacm
july
1964
breuer
m
a
ca640717
jb
march
9
1978
7
42
pm
1030
4
1030
1886
4
1030
1939
4
1030
1030
5
1030
1030
5
1030
1030
5
1030
1261
5
1030
1939
5
1030
678
5
1030
1030
6
1030
1030
6
1030
678
6
1030
</TEXT>
</DOC>
<DOC>
<DOCNO>1031</DOCNO>
<TEXT>
a
note
on
starting
the
newton
raphson
method
determination
of
a
suitable
initial
estimate
for
a
root
of
an
equation
f
x
0
by
means
of
computing
the
roots
of
a
sequence
of
related
equations
is
described
cacm
july
1964
beyer
w
a
ca640716
jb
march
9
1978
7
44
pm
1031
5
1031
1031
5
1031
1031
5
1031
</TEXT>
</DOC>
<DOC>
<DOCNO>1032</DOCNO>
<TEXT>
theoretical
considerations
in
information
retrieval
systems
information
storage
and
retrieval
systems
are
composed
of
three
major
components
a
identification
of
information
and
tagging
it
for
effective
retrieval
b
searching
strategy
how
to
enter
the
file
to
circumvent
the
scanning
of
nonrelevant
material
and
c
file
organization
to
make
access
to
information
efficient
for
identification
of
information
the
paper
suggests
that
a
metalanguage
recently
discussed
in
a
paper
by
goffman
verhoeff
and
belzer
associated
with
an
object
language
be
used
for
searching
strategy
a
linear
model
for
an
evaluation
function
of
relevancy
is
developed
which
rewards
the
system
for
retrieving
relevant
documents
and
not
retrieving
the
nonrelevant
and
penalizes
the
system
for
the
escaped
relevant
documents
and
false
drops
the
inadequacies
of
a
linear
model
are
indicated
two
approaches
to
file
organization
are
discussed
one
is
self
organization
of
the
file
based
on
its
history
and
past
performance
and
the
second
is
a
self
generating
subset
of
the
file
with
a
high
probability
of
being
relevant
cacm
july
1964
belzer
j
goffman
w
ca640715
jb
march
9
1978
7
55
pm
1032
5
1032
1032
5
1032
1032
5
1032
</TEXT>
</DOC>
<DOC>
<DOCNO>1033</DOCNO>
<TEXT>
experimental
personalized
array
translator
system
a
system
designed
for
intimate
man
machine
interaction
in
a
general
purpose
problem
solving
environment
is
experimentally
operational
the
system
utilizers
an
array
oriented
symbolic
source
language
containing
powerful
statement
types
these
include
numeric
boolean
relational
and
selection
operators
on
operands
which
can
be
entire
arrays
the
system
also
permits
simple
specification
of
test
and
argument
arrays
in
single
statements
the
completely
symbolic
operating
system
includes
display
and
entry
of
program
and
data
sequence
control
is
aided
by
an
interrupt
switch
which
allows
the
user
to
interact
with
the
program
during
execution
in
addition
to
normal
stored
program
sequencing
the
system
provides
trace
options
and
the
ability
to
enter
any
statement
for
immediate
execution
present
implementation
of
the
system
is
with
an
interpretive
translator
on
an
ibm
1620
computer
cacm
july
1964
hellerman
h
ca640714
jb
march
9
1978
8
02
pm
1033
5
1033
1033
5
1033
1033
5
1033
</TEXT>
</DOC>
<DOC>
<DOCNO>1034</DOCNO>
<TEXT>
autosate
an
automated
data
system
analysis
technique
is
described
the
technique
is
designed
to
alleviate
some
of
the
principal
problems
that
beset
current
analysis
large
data
workloads
long
span
of
time
between
project
inception
and
system
operational
date
the
lack
of
explicit
directions
for
conducting
data
system
analysis
and
using
the
results
and
the
lack
of
a
technique
to
control
data
system
changes
throughout
its
lifetime
the
analysis
is
geared
to
determining
workload
relationships
and
storage
characteristics
of
documents
in
the
information
network
automatically
cacm
july
1964
gatto
o
t
ca640713
jb
march
9
19788
07
pm
1034
5
1034
1034
5
1034
1034
5
1034
</TEXT>
</DOC>
<DOC>
<DOCNO>1035</DOCNO>
<TEXT>
characteristics
of
the
fortran
cep
language
the
fortran
cep
languages
differs
from
fortran
ii
mainly
because
1
it
extends
the
variety
of
the
modes
for
real
quantities
2
it
allows
suitable
mixtures
in
an
input
output
list
or
in
an
expression
of
quantities
that
occur
under
different
modes
3
it
makes
it
possible
to
address
a
greater
number
of
input
output
equipment
and
4
it
removes
the
restrictions
on
the
complexity
of
the
list
of
quantities
to
be
transmitted
between
the
magnetic
core
memory
and
the
drum
or
the
magnetic
tape
units
cacm
july
1964
mancino
o
g
ca640712
jb
march
9
1978
8
11
pm
1035
5
1035
1035
5
1035
1035
5
1035
1305
5
1035
1035
6
1035
</TEXT>
</DOC>
<DOC>
<DOCNO>1036</DOCNO>
<TEXT>
remark
on
further
generalization
of
algol
cacm
july
1963
garwick
j
v
ca640710
jb
march
9
1978
8
12
pm
1036
5
1036
1036
5
1036
1036
5
1036
</TEXT>
</DOC>
<DOC>
<DOCNO>1037</DOCNO>
<TEXT>
reduction
of
a
matrix
containing
polynomial
elements
algorithm
170
f3
cacm
july
1964
priebe
k
b
ca640710
jb
march
9
1978
8
13
pm
1037
4
1037
1234
4
1037
1358
4
1037
1491
4
1037
1037
5
1037
1037
5
1037
1037
5
1037
729
5
1037
</TEXT>
</DOC>
<DOC>
<DOCNO>1038</DOCNO>
<TEXT>
crout
with
equilibration
and
iteration
algorithm
135
f4
cacm
july
1964
mckeeman
w
m
ca640709
jb
march
9
1978
8
15
pm
1038
5
1038
1038
5
1038
1038
5
1038
</TEXT>
</DOC>
<DOC>
<DOCNO>1039</DOCNO>
<TEXT>
summation
of
fourier
series
algorithm
128
c6
cacm
july
1964
thacher
jr
h
c
ca640708
jb
march
9
1978
8
16
pm
1039
5
1039
1039
5
1039
1039
5
1039
</TEXT>
</DOC>
<DOC>
<DOCNO>1040</DOCNO>
<TEXT>
romberg
integration
algorithm
60
d1
cacm
july
1964
thacher
jr
h
c
ca640707
jb
march
9
1978
8
17
pm
1040
4
1040
1040
4
1040
1040
4
1040
1352
4
1040
2040
4
1040
1040
5
1040
1040
5
1040
1040
5
1040
1352
5
1040
2415
5
1040
587
5
1040
621
5
1040
885
5
1040
834
6
1040
872
6
1040
1040
6
1040
1040
6
1040
1092
6
1040
1241
6
1040
1273
6
1040
1982
6
1040
324
6
1040
2074
6
1040
429
6
1040
570
6
1040
621
6
1040
786
6
1040
</TEXT>
</DOC>
<DOC>
<DOCNO>1041</DOCNO>
<TEXT>
random
permutation
algorithm
235
g6
cacm
july
1964
durstenfeld
r
ca640706
jb
march
9
1978
8
18
pm
1041
5
1041
1041
5
1041
1041
5
1041
</TEXT>
</DOC>
<DOC>
<DOCNO>1042</DOCNO>
<TEXT>
poisson
charlier
polynomials
algorithm
234
s23
cacm
july
1964
simoes
pereira
j
m
s
ca640705
jb
march
9
1978
8
19
pm
1042
5
1042
1042
5
1042
1042
5
1042
</TEXT>
</DOC>
<DOC>
<DOCNO>1043</DOCNO>
<TEXT>
talk
a
high
level
source
language
debugging
technique
with
real
time
data
extraction
talk
meaning
take
a
look
is
a
debugging
technique
which
aids
substantially
in
debugging
complex
real
time
programming
systems
by
interrupting
the
users
program
at
desired
points
to
extract
previously
specified
data
the
extracted
data
is
later
edited
listing
the
associated
data
with
its
high
level
source
language
identification
cacm
july
1964
versteeg
r
l
ca640704
jb
march
9
1978
8
24
pm
1043
5
1043
1043
5
1043
1043
5
1043
</TEXT>
</DOC>
<DOC>
<DOCNO>1044</DOCNO>
<TEXT>
an
automatic
loader
for
subroutine
nests
a
method
for
automatic
loading
of
library
subroutines
which
can
be
adapted
to
operate
in
conjunction
with
any
conventional
two
pass
assembler
is
described
the
method
is
specifically
designed
to
cope
with
a
nested
library
structure
cacm
july
1964
kanner
h
ca640703
jb
march
9
1978
8
27
pm
1044
5
1044
1044
5
1044
1044
5
1044
1332
5
1044
1044
6
1044
</TEXT>
</DOC>
<DOC>
<DOCNO>1045</DOCNO>
<TEXT>
programming
analysis
of
variance
by
sequences
of
operators
and
isomorphic
mappings
a
special
operator
calculus
developed
by
hartley
in
1956
together
with
a
new
mapping
scheme
has
been
found
to
be
efficient
in
programming
analysis
of
variance
for
multifactor
experiments
the
operator
calculus
and
the
mapping
scheme
are
described
in
detail
cacm
july
1964
peng
k
c
ca640702
jb
march
9
1978
8
30
pm
1045
5
1045
1045
5
1045
1045
5
1045
1404
5
1045
1045
6
1045
</TEXT>
</DOC>
<DOC>
<DOCNO>1046</DOCNO>
<TEXT>
a
compiler
building
system
developed
by
brooker
and
morris
in
a
number
of
articles
published
during
the
past
two
years
r
a
brooker
and
d
morris
joined
by
j
rohl
in
their
most
recent
paper
have
presented
a
very
interesting
programming
system
that
they
have
developed
for
the
ferranti
atlas
computer
the
present
paper
describes
some
of
the
major
features
of
their
system
it
expands
on
some
points
that
the
original
authors
cover
briefly
and
treats
only
very
lightly
some
topics
to
which
they
devote
considerable
space
the
purpose
of
this
paper
is
purely
expository
except
in
some
very
small
details
and
in
some
comments
it
does
not
intentionally
depart
from
or
add
to
the
material
published
in
the
listed
references
cacm
july
1964
rosen
s
ca640701
jb
march
9
1978
8
47
pm
1046
4
1046
1105
4
1046
1139
4
1046
1140
4
1046
1234
4
1046
1263
4
1046
1265
4
1046
1496
4
1046
1781
4
1046
1824
4
1046
2126
4
1046
2546
4
1046
464
4
1046
584
4
1046
631
4
1046
653
4
1046
680
4
1046
763
4
1046
795
4
1046
799
4
1046
945
4
1046
1046
5
1046
1046
5
1046
1046
5
1046
1781
5
1046
404
5
1046
123
6
1046
196
6
1046
919
6
1046
990
6
1046
1007
6
1046
1046
6
1046
1131
6
1046
1139
6
1046
1140
6
1046
1149
6
1046
1198
6
1046
1215
6
1046
1223
6
1046
1265
6
1046
1303
6
1046
1323
6
1046
1358
6
1046
1366
6
1046
1421
6
1046
1460
6
1046
1462
6
1046
1463
6
1046
1467
6
1046
1468
6
1046
1477
6
1046
1491
6
1046
1496
6
1046
1531
6
1046
1535
6
1046
1565
6
1046
1601
6
1046
1602
6
1046
1613
6
1046
1614
6
1046
1626
6
1046
1641
6
1046
1787
6
1046
1788
6
1046
205
6
1046
224
6
1046
249
6
1046
288
6
1046
316
6
1046
381
6
1046
398
6
1046
11
6
1046
404
6
1046
410
6
1046
463
6
1046
464
6
1046
483
6
1046
3184
6
1046
3188
6
1046
584
6
1046
600
6
1046
680
6
1046
691
6
1046
763
6
1046
799
6
1046
</TEXT>
</DOC>
<DOC>
<DOCNO>1047</DOCNO>
<TEXT>
generation
of
test
matrices
by
similarity
transformations
a
method
for
obtaining
test
matrices
with
a
prescribed
distribution
of
characteristic
roots
is
given
the
process
consists
of
using
particularly
simple
similarity
transformations
to
generate
full
matrices
from
canonical
forms
the
matrices
generated
also
have
known
characteristic
vectors
inverses
and
determinants
cacm
june
1964
ortega
j
m
ca640620
jb
march
9
1978
8
50
pm
1047
4
1047
1047
5
1047
1047
5
1047
1047
5
1047
1707
5
1047
496
5
1047
1047
6
1047
511
6
1047
</TEXT>
</DOC>
<DOC>
<DOCNO>1048</DOCNO>
<TEXT>
approximate
solution
of
axially
symmetric
problems
a
variety
of
physical
problems
in
such
diverse
fields
as
electrostatic
field
theory
heat
and
ideal
fluid
flow
and
stress
concentration
theory
reduce
under
the
assumption
of
axial
symmetry
to
the
study
of
an
elliptic
partial
differential
equation
dirichlet
type
problems
associated
with
this
equation
are
studied
on
regions
whose
boundaries
include
a
nondegenerate
portion
of
the
x
axis
and
exceedingly
accurate
numerical
methods
are
given
for
approximating
solutions
cacm
june
1964
greenspan
d
ca640619
jb
march
9
1978
8
55
pm
1048
5
1048
1048
5
1048
1048
5
1048
</TEXT>
</DOC>
<DOC>
<DOCNO>1049</DOCNO>
<TEXT>
numerical
solution
of
nonlinear
two
point
boundary
problems
by
finite
difference
methods
solution
of
nonlinear
two
point
boundary
value
problems
is
often
an
extremely
difficult
task
quite
apart
from
questions
of
reality
and
uniqueness
there
is
no
established
numerical
technique
for
this
problem
at
present
shooting
techniques
are
the
easiest
method
of
attacking
these
problems
when
these
fail
the
more
difficult
method
of
finite
differences
can
often
be
used
to
obtain
a
solution
this
paper
gives
examples
and
discusses
the
finite
difference
method
for
non
linear
two
point
boundary
value
problems
cacm
june
1964
holt
j
f
ca640618
jb
march
9
1978
9
07
pm
1049
4
1049
1049
5
1049
1049
5
1049
1049
5
1049
416
5
1049
</TEXT>
</DOC>
<DOC>
<DOCNO>1050</DOCNO>
<TEXT>
a
parts
breakdown
technique
using
list
structures
list
structured
parts
breakdown
is
proposed
and
discussed
implementation
facts
are
presented
on
operating
program
using
these
techniques
cacm
june
1964
brian
w
j
ca640617
jb
march
9
1978
9
09
pm
1050
4
1050
1050
4
1050
1050
4
1050
1050
4
1050
1050
4
1050
1102
4
1050
1226
4
1050
1393
4
1050
1549
4
1050
1549
4
1050
1935
4
1050
1936
4
1050
378
4
1050
2017
4
1050
2023
4
1050
2032
4
1050
2257
4
1050
2360
4
1050
2451
4
1050
2452
4
1050
441
4
1050
2723
4
1050
2882
4
1050
3008
4
1050
3112
4
1050
627
4
1050
731
4
1050
731
4
1050
758
4
1050
793
4
1050
798
4
1050
106
5
1050
1050
5
1050
1050
5
1050
1050
5
1050
209
5
1050
367
5
1050
627
5
1050
849
5
1050
</TEXT>
</DOC>
<DOC>
<DOCNO>1051</DOCNO>
<TEXT>
multiword
list
items
the
list
concept
as
originally
proposed
by
newell
simon
and
shaw
specified
single
computer
words
as
elements
of
a
list
this
report
describes
the
use
of
two
or
more
consecutive
words
as
one
element
such
use
results
in
a
considerable
saving
in
both
the
space
required
to
hold
a
given
amount
of
data
and
in
the
execution
time
required
to
perform
a
given
process
on
the
data
following
a
brief
description
of
standard
list
structures
with
single
word
items
the
multiword
items
are
introduced
then
variable
length
items
are
described
along
with
the
corresponding
space
utilization
problems
finally
several
examples
are
given
to
illustrate
the
use
of
multiword
lists
this
paper
attempts
to
draw
together
various
recent
papers
which
have
applied
some
of
these
concepts
in
different
ways
and
indicate
how
they
relate
to
the
more
general
problems
cacm
june
1964
comfort
w
t
ca640616
jb
march
9
1978
9
15
pm
1024
4
1051
1024
4
1051
1051
4
1051
1051
4
1051
1051
4
1051
1051
4
1051
1051
4
1051
1051
4
1051
1062
4
1051
1098
4
1051
1102
4
1051
1102
4
1051
1132
4
1051
1214
4
1051
1380
4
1051
1388
4
1051
1390
4
1051
1393
4
1051
1485
4
1051
1486
4
1051
1487
4
1051
1549
4
1051
1549
4
1051
1549
4
1051
1552
4
1051
1570
4
1051
1665
4
1051
1706
4
1051
1826
4
1051
1860
4
1051
1878
4
1051
1878
4
1051
1946
4
1051
1957
4
1051
378
4
1051
2060
4
1051
2155
4
1051
2155
4
1051
2168
4
1051
2168
4
1051
2719
4
1051
2723
4
1051
2723
4
1051
2838
4
1051
2842
4
1051
2855
4
1051
2857
4
1051
2879
4
1051
3077
4
1051
3080
4
1051
3106
4
1051
3112
4
1051
627
4
1051
106
4
1051
1051
5
1051
1051
5
1051
1051
5
1051
1211
5
1051
210
5
1051
1549
5
1051
1906
5
1051
378
5
1051
2902
5
1051
406
5
1051
731
5
1051
793
5
1051
794
5
1051
106
6
1051
1051
6
1051
1051
6
1051
1051
6
1051
1051
6
1051
1062
6
1051
1062
6
1051
1184
6
1051
1211
6
1051
1552
6
1051
210
6
1051
1879
6
1051
2435
6
1051
2596
6
1051
2734
6
1051
2747
6
1051
2768
6
1051
406
6
1051
627
6
1051
731
6
1051
753
6
1051
</TEXT>
</DOC>
<DOC>
<DOCNO>1052</DOCNO>
<TEXT>
reducing
truncation
errors
by
programming
in
accumulating
a
sum
such
as
in
a
numerical
integration
with
a
large
number
of
intervals
the
sum
itself
becomes
much
larger
than
the
individual
addends
this
may
produce
a
less
accurate
sum
as
the
number
of
intervals
is
increased
separate
variables
can
be
established
as
accumulators
to
hold
partial
sums
within
various
distinct
intervals
thus
the
extensive
successive
truncations
are
eliminated
cacm
june
1964
wolfe
j
m
ca640615
jb
march
9
1978
9
22
pm
1052
5
1052
1052
5
1052
1052
5
1052
1328
5
1052
1333
5
1052
2144
5
1052
1052
6
1052
1052
6
1052
1052
6
1052
</TEXT>
</DOC>
<DOC>
<DOCNO>1053</DOCNO>
<TEXT>
design
and
implementation
of
a
general
purpose
input
routine
a
general
purpose
input
routine
is
discussed
and
advocated
for
fortran
the
philosophy
of
such
programs
is
examined
and
exemplified
cacm
june
1964
hassitt
a
ca640614
jb
march
9
1978
9
27
pm
1053
4
1053
1053
4
1053
1053
4
1053
1053
4
1053
720
4
1053
1053
5
1053
1053
5
1053
1053
5
1053
1649
5
1053
435
5
1053
474
5
1053
718
5
1053
720
5
1053
1053
6
1053
</TEXT>
</DOC>
<DOC>
<DOCNO>1054</DOCNO>
<TEXT>
gauss
seidel
algorithm
220
cacm
june
1964
batson
a
p
ca640613
jb
march
9
1978
9
28
pm
1054
5
1054
1054
5
1054
1054
5
1054
</TEXT>
</DOC>
<DOC>
<DOCNO>1055</DOCNO>
<TEXT>
q
bessel
functions
in
t
algorithm
214
cacm
june
1964
simoes
pereira
j
m
s
ca640612
jb
march
9
1978
9
29
pm
1055
5
1055
1055
5
1055
1055
5
1055
</TEXT>
</DOC>
<DOC>
<DOCNO>1056</DOCNO>
<TEXT>
shellsort
algorithm
201
cacm
june
1964
batty
m
a
ca640611
jb
march
9
1978
9
30
pm
1056
5
1056
1056
5
1056
1056
5
1056
</TEXT>
</DOC>
<DOC>
<DOCNO>1057</DOCNO>
<TEXT>
critical
path
scheduling
algorithm
40
cacm
june
1964
hoffman
i
a
ca640610
jb
march
9
1978
9
32
pm
1057
5
1057
1057
5
1057
1057
5
1057
</TEXT>
</DOC>
<DOC>
<DOCNO>1058</DOCNO>
<TEXT>
simpson
rule
for
multiple
integration
algorithm
233
cacm
june
1964
olynyk
f
ca640609
jb
march
9
1978
9
33
pm
1058
5
1058
1058
5
1058
1058
5
1058
</TEXT>
</DOC>
<DOC>
<DOCNO>1059</DOCNO>
<TEXT>
heapsort
algorithm
232
cacm
june
1964
williams
j
w
j
ca640608
jb
march
9
1978
9
34
pm
1059
5
1059
1059
5
1059
1059
5
1059
2757
5
1059
2844
5
1059
970
6
1059
1059
6
1059
1059
6
1059
2630
6
1059
2742
6
1059
2767
6
1059
</TEXT>
</DOC>
<DOC>
<DOCNO>1060</DOCNO>
<TEXT>
matrix
inversion
algorithm
231
cacm
june
1964
boothroyd
j
ca640607
jb
march
9
1978
9
35
pm
1060
5
1060
1060
5
1060
1060
5
1060
</TEXT>
</DOC>
<DOC>
<DOCNO>1061</DOCNO>
<TEXT>
matrix
permutation
algorithm
230
cacm
june
1964
boothroyd
j
ca640606
jb
march
9
1978
9
36
pm
1061
5
1061
1061
5
1061
1061
5
1061
</TEXT>
</DOC>
<DOC>
<DOCNO>1062</DOCNO>
<TEXT>
symbol
manipulation
in
fortran
sasp
i
subroutines
a
set
of
subroutines
for
use
in
fortran
are
described
whose
purpose
is
to
synthesize
output
strings
from
i
input
strings
which
have
been
analyzed
by
the
shadow
general
syntactic
analysis
subroutine
reported
earlier
and
or
ii
packed
bcd
strings
formed
in
any
way
function
type
subroutines
are
included
for
intermediate
manipulations
which
are
performed
on
the
strings
which
are
stored
in
an
abbreviated
internal
representation
the
automatic
way
in
which
an
internal
representation
for
each
newly
created
substring
is
stored
sequentially
in
a
block
of
common
storage
and
the
manner
in
which
a
storage
block
is
dynamically
allocated
for
that
purpose
are
discussed
cacm
june
1964
bailey
m
j
barnett
m
p
burleson
p
b
ca640605
jb
march
9
1978
9
43
pm
1051
4
1062
1062
4
1062
1062
4
1062
1121
4
1062
1139
4
1062
1265
4
1062
1781
4
1062
720
4
1062
759
4
1062
1062
5
1062
1062
5
1062
1062
5
1062
1211
5
1062
2902
5
1062
464
5
1062
794
5
1062
1051
6
1062
1051
6
1062
1062
6
1062
1062
6
1062
1184
6
1062
1211
6
1062
1552
6
1062
1879
6
1062
2435
6
1062
2596
6
1062
2734
6
1062
2747
6
1062
2768
6
1062
</TEXT>
</DOC>
<DOC>
<DOCNO>1063</DOCNO>
<TEXT>
one
inch
perforated
paper
tape
for
information
interchange
proposed
american
standard
cacm
june
1964
ca640604
jb
march
9
1978
9
44
pm
1063
5
1063
1063
5
1063
1063
5
1063
</TEXT>
</DOC>
<DOC>
<DOCNO>1064</DOCNO>
<TEXT>
perforated
tape
code
for
information
interchange
proposed
american
standard
cacm
june
1964
ca640603
jb
march
9
1978
9
46
pm
1064
5
1064
1064
5
1064
1064
5
1064
</TEXT>
</DOC>
<DOC>
<DOCNO>1065</DOCNO>
<TEXT>
bit
sequencing
of
the
american
standard
code
for
information
interchange
ascii
in
serial
by
bit
data
transmission
proposed
american
standard
cacm
june
1964
ca640602
jb
march
9
1978
9
47
pm
1065
5
1065
1065
5
1065
1065
5
1065
</TEXT>
</DOC>
<DOC>
<DOCNO>1066</DOCNO>
<TEXT>
growing
applications
of
linear
programming
use
of
linear
programming
models
has
grown
so
extensively
in
recent
years
that
the
whole
concept
for
organizing
a
computer
code
has
undergone
a
radical
change
it
no
longer
is
adequate
merely
to
reduce
a
mathematical
algorithm
i
e
the
simplex
method
to
a
computer
code
an
advanced
code
must
cope
with
such
a
variety
of
situations
that
the
respective
computer
subprograms
must
be
organized
into
an
integrated
system
emphasis
in
this
paper
is
devoted
to
the
underlying
principles
upon
which
future
linear
programming
systems
must
be
based
these
viewpoints
are
influenced
by
the
new
demands
that
applications
within
the
petroleum
industry
are
placing
on
such
systems
some
of
the
components
of
such
a
system
are
translation
of
problem
statement
in
terms
of
basic
data
to
linear
programming
matrix
coefficients
data
transmission
for
direct
computer
entry
data
file
at
the
computer
center
data
processing
and
editing
prior
to
solving
the
simplex
algorithm
an
efficient
and
reliable
code
for
solving
the
above
mentioned
algorithm
and
flexible
means
for
summarizing
the
results
cacm
june
1964
aronofsky
j
s
ca640601
jb
march
9
1978
9
55
pm
1066
5
1066
1066
5
1066
1066
5
1066
</TEXT>
</DOC>
<DOC>
<DOCNO>1067</DOCNO>
<TEXT>
picture
generation
with
a
standard
line
printer
a
method
is
described
for
producing
gray
toned
pictures
on
a
line
printer
by
utilizing
the
different
degrees
of
blackness
of
standard
print
characters
gray
scales
with
17
32
and
64
levels
have
been
devised
scanned
images
of
blood
cells
are
used
to
display
the
technique
cacm
may
1964
perry
b
mendelsohn
m
l
ca640522
jb
march
9
1978
11
31
pm
1067
5
1067
1067
5
1067
1067
5
1067
</TEXT>
</DOC>
<DOC>
<DOCNO>1068</DOCNO>
<TEXT>
a
fortran
ii
load
time
saver
cacm
may
1964
ackermann
a
f
ca640521
jb
march
9
1978
11
33
pm
1068
4
1068
1945
4
1068
917
5
1068
1068
5
1068
1068
5
1068
1068
5
1068
</TEXT>
</DOC>
<DOC>
<DOCNO>1069</DOCNO>
<TEXT>
a
method
for
comparing
the
internal
operating
speeds
of
computers
cacm
may
1964
raichelson
e
collins
g
ca640520
jb
march
9
1978
11
35
pm
1069
5
1069
1069
5
1069
1069
5
1069
1653
5
1069
2989
5
1069
963
6
1069
1069
6
1069
1069
6
1069
1417
6
1069
2138
6
1069
</TEXT>
</DOC>
<DOC>
<DOCNO>1070</DOCNO>
<TEXT>
expand
a
system
for
input
card
replication
cacm
may
1964
warrington
j
a
norris
j
h
ca640519
jb
march
9
1978
11
37
pm
1070
5
1070
1070
5
1070
1070
5
1070
</TEXT>
</DOC>
<DOC>
<DOCNO>1071</DOCNO>
<TEXT>
computer
usage
accounting
for
generalized
time
sharing
systems
the
current
development
of
general
time
sharing
systems
requires
a
revision
of
accounting
procedures
for
computer
usage
since
time
sharing
system
users
operate
concurrently
it
is
necessary
to
be
more
precise
as
to
the
amount
of
computer
time
and
storage
space
that
a
user
actually
utilizes
the
various
cost
factors
which
should
be
considered
for
computer
usage
accounting
in
generalized
time
sharing
systems
are
discussed
cacm
may
1964
rosenberg
a
m
ca640518
jb
march
9
1978
11
40
pm
1071
4
1071
1071
5
1071
1071
5
1071
1071
5
1071
3196
5
1071
</TEXT>
</DOC>
<DOC>
<DOCNO>1072</DOCNO>
<TEXT>
an
improved
equivalence
algorithm
an
algorithm
for
assigning
storage
on
the
basis
of
equivalence
dimension
and
common
declarations
is
presented
the
algorithm
is
based
on
a
tree
structure
and
has
reduced
computation
time
by
40
percent
over
a
previously
published
algorithm
by
identifying
all
equivalence
classes
with
one
scan
of
the
equivalence
declarations
the
method
is
applicable
in
any
problem
in
which
it
is
necessary
to
identify
equivalence
classes
given
the
element
pairs
defining
the
equivalence
relation
cacm
may
1964
galler
b
a
fisher
m
j
ca640517
jb
march
9
1978
11
48
pm
1072
4
1072
1781
4
1072
1072
5
1072
1072
5
1072
1072
5
1072
1646
5
1072
316
5
1072
830
6
1072
987
6
1072
1072
6
1072
1179
6
1072
1647
6
1072
680
6
1072
</TEXT>
</DOC>
<DOC>
<DOCNO>1073</DOCNO>
<TEXT>
a
fast
procedure
for
generating
exponential
random
variables
a
very
fast
method
for
generating
exponential
random
variables
in
a
digital
computer
is
outlined
cacm
may
1964
maclaren
m
d
marsaglia
g
bray
t
a
ca640516
jb
march
9
1978
11
50
pm
1073
4
1073
1073
4
1073
1153
4
1073
2137
4
1073
2276
4
1073
940
5
1073
1073
5
1073
1073
5
1073
1073
5
1073
1153
5
1073
2276
5
1073
1073
6
1073
1153
6
1073
</TEXT>
</DOC>
<DOC>
<DOCNO>1074</DOCNO>
<TEXT>
shanks
algorithm
215
cacm
may
1964
schumaker
l
ca640515
jb
march
9
1978
11
51
pm
1074
5
1074
1074
5
1074
1074
5
1074
</TEXT>
</DOC>
<DOC>
<DOCNO>1075</DOCNO>
<TEXT>
shuttlesort
algorithm
175
cacm
may
1964
juelich
o
c
ca640514
jb
march
9
1978
11
52
pm
1075
5
1075
1075
5
1075
1075
5
1075
</TEXT>
</DOC>
<DOC>
<DOCNO>1076</DOCNO>
<TEXT>
multiple
integration
algorithm
146
cacm
may
1964
wirth
n
ca640513
jb
march
9
1978
11
53
pm
1076
5
1076
1076
5
1076
1076
5
1076
</TEXT>
</DOC>
<DOC>
<DOCNO>1077</DOCNO>
<TEXT>
chebyshev
curve
fit
algorithm
91
cacm
may
1964
naur
p
ca640512
jb
march
9
1978
11
53
pm
1077
5
1077
1077
5
1077
1077
5
1077
</TEXT>
</DOC>
<DOC>
<DOCNO>1078</DOCNO>
<TEXT>
elementary
functions
by
continued
fractions
algorithm
229
cacm
may
1964
morelock
j
c
ca640511
jb
march
9
1978
11
55
pm
1078
5
1078
1078
5
1078
1078
5
1078
</TEXT>
</DOC>
<DOC>
<DOCNO>1079</DOCNO>
<TEXT>
q
bessel
functions
algorithm
228
cacm
may
1964
simoes
pereira
j
m
s
ca640510
jb
march
9
1978
11
56
pm
1079
5
1079
1079
5
1079
1079
5
1079
</TEXT>
</DOC>
<DOC>
<DOCNO>1080</DOCNO>
<TEXT>
chebyshev
polynomial
coefficients
algorithm
227
cacm
may
1964
cyvin
s
j
ca640509
jb
march
9
1978
11
57
pm
1080
5
1080
1080
5
1080
1080
5
1080
</TEXT>
</DOC>
<DOC>
<DOCNO>1081</DOCNO>
<TEXT>
normal
distribution
function
algorithm
226
cacm
may
1964
cyvin
s
j
ca640508
jb
march
9
1978
11
58
pm
1081
5
1081
1081
5
1081
1081
5
1081
1157
5
1081
836
6
1081
1081
6
1081
485
6
1081
714
6
1081
</TEXT>
</DOC>
<DOC>
<DOCNO>1082</DOCNO>
<TEXT>
gamma
function
with
controlled
accuracy
algorithm
225
cacm
may
1964
cyvin
s
j
cyvin
b
n
ca640507
jb
march
9
1978
11
59
pm
1082
5
1082
1082
5
1082
1082
5
1082
</TEXT>
</DOC>
<DOC>
<DOCNO>1083</DOCNO>
<TEXT>
an
experiment
in
a
user
oriented
computer
system
a
version
of
a
software
hardware
system
for
the
purpose
of
facilitating
the
programming
and
analysis
of
well
formulated
problems
is
described
a
modified
flexowriter
is
used
to
generate
computer
acceptable
input
when
equations
or
computable
requests
are
typed
in
much
the
same
manner
as
they
would
appear
in
conventional
mathematical
texts
the
typing
and
language
rules
are
quite
flexible
and
unrestrictive
while
the
compiler
part
is
efficient
the
system
as
a
whole
has
much
broader
aspects
as
a
tool
for
the
study
of
problem
solving
and
self
teaching
systems
cacm
may
1964
klerer
m
may
j
ca640506
jb
march
10
1978
12
03
am
1083
4
1083
1083
4
1083
1083
4
1083
1083
4
1083
1396
4
1083
1396
4
1083
679
4
1083
1083
5
1083
1083
5
1083
1083
5
1083
1396
5
1083
1624
5
1083
407
5
1083
3192
5
1083
3193
5
1083
730
5
1083
964
6
1083
1028
6
1083
1029
6
1083
1083
6
1083
1083
6
1083
1132
6
1083
1214
6
1083
1278
6
1083
1334
6
1083
1365
6
1083
1386
6
1083
1387
6
1083
1388
6
1083
1392
6
1083
1393
6
1083
1394
6
1083
1395
6
1083
1396
6
1083
1397
6
1083
1496
6
1083
284
6
1083
407
6
1083
3199
6
1083
3200
6
1083
3201
6
1083
3202
6
1083
3203
6
1083
3204
6
1083
561
6
1083
730
6
1083
</TEXT>
</DOC>
<DOC>
<DOCNO>1084</DOCNO>
<TEXT>
on
declaring
arbitrarily
coded
alphabets
the
inability
of
existing
programming
languages
to
handle
character
strings
from
more
than
one
or
two
alphabets
is
mentioned
and
a
scheme
for
declaring
additional
alphabets
is
proposed
the
scheme
provides
for
many
to
one
encodings
right
or
left
justification
collating
sequences
different
from
numeric
sequence
variations
in
character
size
number
of
bits
from
alphabet
to
alphabet
and
arbitrary
source
language
character
representation
cacm
may
1964
shaw
c
j
ca640505
jb
march
10
1978
12
13
am
1084
4
1084
1084
4
1084
1084
4
1084
1084
4
1084
1084
4
1084
1084
4
1084
1379
4
1084
1625
4
1084
1945
4
1084
1084
5
1084
1084
5
1084
1084
5
1084
1945
5
1084
603
5
1084
644
5
1084
669
5
1084
791
5
1084
797
5
1084
868
5
1084
823
6
1084
914
6
1084
915
6
1084
917
6
1084
984
6
1084
989
6
1084
990
6
1084
1012
6
1084
1084
6
1084
1098
6
1084
1122
6
1084
1138
6
1084
1139
6
1084
1141
6
1084
1200
6
1084
1223
6
1084
1265
6
1084
1336
6
1084
1396
6
1084
1455
6
1084
1477
6
1084
1487
6
1084
1491
6
1084
1496
6
1084
483
6
1084
584
6
1084
669
6
1084
680
6
1084
763
6
1084
</TEXT>
</DOC>
<DOC>
<DOCNO>1085</DOCNO>
<TEXT>
specification
for
general
purpose
paper
cards
for
information
processing
proposed
american
standard
cacm
may
1964
ca640504
jb
march
10
1978
12
14
am
1085
5
1085
1085
5
1085
1085
5
1085
</TEXT>
</DOC>
<DOC>
<DOCNO>1086</DOCNO>
<TEXT>
a
proposal
for
input
output
conventions
in
algol
60
a
report
of
the
subcommittee
on
algol
of
the
acm
programming
language
committee
cacm
may
1964
ca640501
jb
march
10
1978
12
18
am
1086
4
1086
1086
4
1086
1132
4
1086
1234
4
1086
1263
4
1086
1265
4
1086
1270
4
1086
1323
4
1086
1358
4
1086
1379
4
1086
1380
4
1086
1453
4
1086
1464
4
1086
1484
4
1086
1491
4
1086
1496
4
1086
1498
4
1086
1613
4
1086
1614
4
1086
1781
4
1086
1825
4
1086
1860
4
1086
2083
4
1086
2178
4
1086
2179
4
1086
2252
4
1086
2325
4
1086
2341
4
1086
2546
4
1086
2645
4
1086
2652
4
1086
2684
4
1086
2842
4
1086
2929
4
1086
2934
4
1086
3069
4
1086
669
4
1086
679
4
1086
691
4
1086
761
4
1086
949
4
1086
989
4
1086
1086
5
1086
1086
5
1086
1086
5
1086
1137
5
1086
1613
5
1086
3184
5
1086
987
6
1086
1086
6
1086
1134
6
1086
1453
6
1086
3184
6
1086
</TEXT>
</DOC>
<DOC>
<DOCNO>1087</DOCNO>
<TEXT>
problems
in
automatic
abstracting
a
variety
of
problems
concerning
the
design
and
operation
of
an
automatic
abstracting
system
are
discussed
the
purpose
is
to
a
general
view
of
several
major
problem
areas
no
attempt
is
made
to
discuss
details
or
to
indicate
preferences
among
alternative
solutions
cacm
april
1964
edmundson
h
p
ca640422
jb
march
10
1978
12
21
am
1087
4
1087
634
4
1087
1087
5
1087
1087
5
1087
1087
5
1087
329
5
1087
</TEXT>
</DOC>
<DOC>
<DOCNO>1088</DOCNO>
<TEXT>
menu
planning
by
computer
a
computer
code
has
been
developed
which
plans
menus
by
finding
minimum
cost
combinations
of
menu
items
such
that
the
daily
dietary
gastronomic
and
production
requirements
can
be
satisfied
for
a
sequence
of
days
a
fast
special
integer
programming
algorithm
is
described
which
approximates
the
theoretical
solution
to
the
problem
if
necessary
any
menu
can
be
changed
on
line
and
then
post
optimized
up
to
30
percent
saving
on
food
cost
is
possible
a
fortran
program
for
the
ibm
1410
is
available
on
request
a
considerable
amount
of
data
processing
must
precede
the
implementation
of
the
system
cacm
april
1964
balistfy
j
l
ca640421
jb
march
10
1978
12
26
am
1088
5
1088
1088
5
1088
1088
5
1088
1658
5
1088
1088
6
1088
</TEXT>
</DOC>
<DOC>
<DOCNO>1089</DOCNO>
<TEXT>
designing
a
computer
center
cacm
april
1964
denison
a
popov
g
ca640420
jb
march
10
1978
12
29
am
1089
5
1089
1089
5
1089
1089
5
1089
</TEXT>
</DOC>
<DOC>
<DOCNO>1090</DOCNO>
<TEXT>
incomplete
beta
function
ratios
algorithm
222
cacm
april
1964
gautschi
w
ca640418
jb
march
10
1978
12
32
am
1090
5
1090
1090
5
1090
1090
5
1090
</TEXT>
</DOC>
<DOC>
<DOCNO>1091</DOCNO>
<TEXT>
hypergeometric
and
confluent
hypergeometric
algorithm
191
192
cacm
april
1964
thacher
jr
h
c
ca640417
jb
march
10
1978
12
33
am
1091
5
1091
1091
5
1091
1091
5
1091
</TEXT>
</DOC>
<DOC>
<DOCNO>1092</DOCNO>
<TEXT>
nonrecursive
adaptive
integration
algorithm
182
cacm
april
1964
butler
h
s
ca640416
jb
march
10
1978
12
34
am
1092
5
1092
1092
5
1092
1092
5
1092
1352
5
1092
2093
5
1092
834
6
1092
834
6
1092
872
6
1092
872
6
1092
1040
6
1092
1092
6
1092
1092
6
1092
1241
6
1092
1273
6
1092
1298
6
1092
1573
6
1092
324
6
1092
429
6
1092
429
6
1092
570
6
1092
621
6
1092
786
6
1092
</TEXT>
</DOC>
<DOC>
<DOCNO>1093</DOCNO>
<TEXT>
evaluation
of
determinant
algorithm
224
cacm
april
1964
rotenberg
l
j
ca640415
jb
march
10
1978
1
12
am
1093
5
1093
1093
5
1093
1093
5
1093
1946
5
1093
878
6
1093
902
6
1093
1093
6
1093
1177
6
1093
1387
6
1093
1393
6
1093
360
6
1093
731
6
1093
</TEXT>
</DOC>
<DOC>
<DOCNO>1094</DOCNO>
<TEXT>
prime
twins
algorithm
223
cacm
april
1964
shimrat
m
ca640414
jb
march
10
1978
1
13
am
1094
5
1094
1094
5
1094
1094
5
1094
</TEXT>
</DOC>
<DOC>
<DOCNO>1095</DOCNO>
<TEXT>
decimal
tables
of
binary
coded
tables
cacm
april
1964
griebrok
m
ca640413
jb
march
10
1978
1
14
am
1095
5
1095
1095
5
1095
1095
5
1095
</TEXT>
</DOC>
<DOC>
<DOCNO>1096</DOCNO>
<TEXT>
on
avoiding
matrix
reversals
between
7090
fortran
ii
and
7090
fortran
iv
cacm
april
1964
stevens
d
benson
b
ca640412
jb
march
10
1978
1
28
am
1096
5
1096
1096
5
1096
1096
5
1096
</TEXT>
</DOC>
<DOC>
<DOCNO>1097</DOCNO>
<TEXT>
an
algorithm
for
converting
integers
from
base
a
to
base
b
a
little
known
simple
algorithm
for
integer
conversion
between
number
systems
is
presented
and
proved
cacm
april
1964
gladwin
h
t
ca640411
jb
march
10
1978
1
30
am
1097
5
1097
1097
5
1097
1097
5
1097
</TEXT>
</DOC>
<DOC>
<DOCNO>1098</DOCNO>
<TEXT>
a
comparison
of
list
processing
computer
languages
including
a
detailed
comparison
of
comit
ipl
v
lisp
1
5
and
slip
a
detailed
comparison
is
presented
of
comit
ipl
v
lisp
1
5
and
slip
four
well
known
computer
programming
languages
which
among
them
exhibit
all
the
principal
characteristics
of
existing
list
processing
languages
important
common
features
of
list
processing
languages
are
reviewed
forms
of
data
structures
which
are
manipulated
necessity
for
dynamic
allocation
of
storage
use
of
pushdown
stores
and
use
of
recursive
operations
principal
differences
between
the
four
languages
under
consideration
are
detailed
representations
of
data
both
by
the
programmer
and
within
the
machine
methods
for
storage
allocation
programming
formalisms
and
special
processes
available
including
arithmetic
facilities
and
usability
in
terms
of
availability
documentation
learning
aids
and
debugging
facilities
a
rough
comparison
shows
that
all
the
languages
discussed
have
approximately
the
same
speed
finally
the
authors
give
some
heuristics
to
aid
in
the
selection
of
one
of
these
languages
for
use
in
particular
problem
applications
concluding
that
no
one
of
the
languages
considered
is
distinctly
superior
in
all
possible
list
processing
applications
cacm
april
1964
bobrow
d
g
raphael
b
ca640410
jb
march
10
1978
1
37
am
1024
4
1098
1051
4
1098
1098
4
1098
1214
4
1098
1380
4
1098
1388
4
1098
1393
4
1098
1485
4
1098
1487
4
1098
1549
4
1098
1570
4
1098
1878
4
1098
1946
4
1098
1957
4
1098
2168
4
1098
2723
4
1098
2857
4
1098
3112
4
1098
1098
5
1098
1098
5
1098
1098
5
1098
1570
5
1098
1945
5
1098
2314
5
1098
731
5
1098
823
6
1098
914
6
1098
915
6
1098
917
6
1098
984
6
1098
989
6
1098
990
6
1098
1012
6
1098
1084
6
1098
1098
6
1098
1098
6
1098
1098
6
1098
1122
6
1098
1138
6
1098
1139
6
1098
1141
6
1098
1200
6
1098
1223
6
1098
1265
6
1098
1336
6
1098
1396
6
1098
1455
6
1098
1477
6
1098
1487
6
1098
1491
6
1098
1496
6
1098
1626
6
1098
2082
6
1098
2148
6
1098
483
6
1098
584
6
1098
669
6
1098
680
6
1098
731
6
1098
763
6
1098
</TEXT>
</DOC>
<DOC>
<DOCNO>1099</DOCNO>
<TEXT>
professional
computer
work
for
the
blind
developments
in
computer
technology
have
opened
new
professional
opportunities
for
the
intelligent
blind
since
there
are
few
if
any
occupations
in
which
the
blind
can
participate
without
serious
disadvantage
the
opportunities
offered
them
to
gain
entrance
into
various
occupations
through
computer
use
including
that
of
programmer
is
important
for
future
rehabilitation
planning
also
of
immediate
interest
is
the
fact
that
the
blind
may
be
especially
suited
for
programming
work
because
of
intense
training
in
and
constant
experience
with
locating
objects
in
the
unseen
environment
and
also
because
of
superbly
trained
memory
the
blind
brings
to
the
work
of
programming
skills
which
the
sighted
has
had
little
need
to
acquire
these
qualifications
should
result
in
fewer
debugging
problems
and
make
the
blind
a
valuable
addition
to
any
systems
group
before
the
blind
could
become
a
serious
professional
a
number
of
aids
and
techniques
had
to
be
developed
that
can
mediate
between
machines
and
programmer
this
paper
describes
the
techniques
and
aids
which
were
designed
by
the
staff
of
the
medical
computing
center
of
the
university
of
cincinnati
college
of
medicine
cacm
april
1964
sterling
t
d
lichstein
m
scarpino
f
stuebing
d
ca640409
jb
march
10
1978
1
46
am
1099
5
1099
1099
5
1099
1099
5
1099
1264
5
1099
1740
5
1099
1099
6
1099
1099
6
1099
</TEXT>
</DOC>
<DOC>
<DOCNO>1100</DOCNO>
<TEXT>
status
of
computer
sciences
curricula
in
colleges
and
universities
cacm
april
1964
atchison
w
f
hamblen
j
w
ca640408
jb
march
10
1978
1
47
am
1100
5
1100
1100
5
1100
1100
5
1100
1107
5
1100
1205
5
1100
1100
6
1100
1100
6
1100
1104
6
1100
1107
6
1100
68
6
1100
</TEXT>
</DOC>
<DOC>
<DOCNO>1101</DOCNO>
<TEXT>
the
place
of
logical
design
and
switching
theory
in
the
computer
curriculum
cacm
april
1964
muller
d
e
ca640407
jb
march
10
1978
1
49
am
1101
5
1101
1101
5
1101
1101
5
1101
</TEXT>
</DOC>
<DOC>
<DOCNO>1102</DOCNO>
<TEXT>
mechanical
languages
a
course
specification
cacm
april
1964
gorn
s
ca640406
jb
march
10
1978
1
49
am
249
4
1102
254
4
1102
272
4
1102
1024
4
1102
1050
4
1102
1051
4
1102
1051
4
1102
1102
4
1102
1102
4
1102
1102
4
1102
1102
4
1102
1102
4
1102
1109
4
1102
1132
4
1102
1140
4
1102
1142
4
1102
1188
4
1102
1306
4
1102
1390
4
1102
1464
4
1102
1486
4
1102
1491
4
1102
1549
4
1102
1549
4
1102
1706
4
1102
1767
4
1102
1781
4
1102
1781
4
1102
1787
4
1102
1826
4
1102
1878
4
1102
1945
4
1102
1949
4
1102
321
4
1102
378
4
1102
378
4
1102
2059
4
1102
2060
4
1102
2126
4
1102
2155
4
1102
2168
4
1102
435
4
1102
437
4
1102
463
4
1102
483
4
1102
491
4
1102
2719
4
1102
2723
4
1102
2732
4
1102
2838
4
1102
2842
4
1102
2855
4
1102
2879
4
1102
560
4
1102
583
4
1102
3008
4
1102
3073
4
1102
3077
4
1102
3080
4
1102
3106
4
1102
627
4
1102
627
4
1102
631
4
1102
632
4
1102
642
4
1102
644
4
1102
653
4
1102
680
4
1102
731
4
1102
761
4
1102
762
4
1102
762
4
1102
763
4
1102
798
4
1102
106
4
1102
123
4
1102
140
4
1102
919
4
1102
949
4
1102
989
4
1102
196
5
1102
1102
5
1102
1102
5
1102
1102
5
1102
209
5
1102
210
5
1102
406
5
1102
483
5
1102
</TEXT>
</DOC>
<DOC>
<DOCNO>1103</DOCNO>
<TEXT>
logic
for
the
computer
sciences
cacm
april
1964
korfhage
r
r
ca640405
jb
march
10
1978
1
50
am
1103
5
1103
1103
5
1103
1103
5
1103
</TEXT>
</DOC>
<DOC>
<DOCNO>1104</DOCNO>
<TEXT>
an
undergraduate
curriculum
in
numerical
analysis
cacm
april
1964
forsythe
g
e
ca640404
jb
march
10
1978
1
51
am
1104
5
1104
1104
5
1104
1104
5
1104
1205
5
1104
1100
6
1104
1104
6
1104
1107
6
1104
68
6
1104
</TEXT>
</DOC>
<DOC>
<DOCNO>1105</DOCNO>
<TEXT>
on
introducing
digital
computing
cacm
april
1964
arden
b
w
ca640403
jb
march
10
1978
1
53
am
1046
4
1105
1105
4
1105
1139
4
1105
1140
4
1105
1234
4
1105
1263
4
1105
1265
4
1105
1496
4
1105
1781
4
1105
1824
4
1105
2126
4
1105
2546
4
1105
464
4
1105
584
4
1105
631
4
1105
653
4
1105
680
4
1105
763
4
1105
795
4
1105
799
4
1105
945
4
1105
1105
5
1105
1105
5
1105
1105
5
1105
404
5
1105
</TEXT>
</DOC>
<DOC>
<DOCNO>1106</DOCNO>
<TEXT>
programming
of
digital
computers
cacm
april
1964
perlis
a
j
ca640402
jb
march
10
1978
1
54
am
1106
5
1106
1106
5
1106
1106
5
1106
</TEXT>
</DOC>
<DOC>
<DOCNO>1107</DOCNO>
<TEXT>
computers
and
education
cacm
april
1964
keenan
t
a
ca640401
jb
march
10
1978
1
54
am
1107
4
1107
1205
4
1107
1100
5
1107
1107
5
1107
1107
5
1107
1107
5
1107
1205
5
1107
1100
6
1107
1104
6
1107
1107
6
1107
68
6
1107
</TEXT>
</DOC>
<DOC>
<DOCNO>1108</DOCNO>
<TEXT>
digital
data
processor
for
tracking
the
partially
illuminated
moon
a
study
of
lunar
tracking
techniques
and
fabrication
of
a
breadboard
to
assess
the
feasibility
of
the
best
technique
selected
was
conducted
to
define
a
tracking
system
for
observation
of
the
sight
line
to
the
center
of
a
partially
illuminated
moon
the
data
processing
portion
of
the
system
is
presented
in
detail
and
then
described
in
general
are
the
operation
of
the
tracker
head
assembly
for
data
readout
the
operation
of
the
entire
system
and
the
effect
data
processing
considerations
have
on
the
design
of
the
tracker
system
the
system
basically
consists
of
an
optical
sensor
digital
computer
and
tracker
drive
mechanism
the
three
system
units
connected
in
cascade
comprise
the
control
loop
for
this
application
an
optical
telescope
with
a
radial
mechanical
scanning
mechanism
was
used
that
read
out
lunar
sight
line
measurement
information
this
information
is
sequentially
read
into
a
special
purpose
digital
computer
that
extracts
the
measurements
and
computes
the
error
signals
that
drive
the
tracker
to
the
appropriate
attitude
cacm
march
1964
wilcox
h
j
ca640324
jb
march
10
1978
2
02
am
1108
5
1108
1108
5
1108
1108
5
1108
</TEXT>
</DOC>
<DOC>
<DOCNO>1109</DOCNO>
<TEXT>
conversion
of
a
power
to
a
series
of
chebyshev
polynomials
even
slowly
convergent
power
series
can
be
rearranged
as
series
in
chebyshev
polynomials
if
appropriate
sequence
transformations
are
used
in
evaluating
the
coefficients
the
method
is
illustrated
by
computing
the
coefficients
for
the
expansion
of
the
logarithm
and
dilogarithm
cacm
march
1964
thacher
jr
h
c
ca640323
jb
march
10
1978
2
05
am
249
4
1109
254
4
1109
272
4
1109
1102
4
1109
1109
4
1109
1140
4
1109
1188
4
1109
1306
4
1109
1464
4
1109
1491
4
1109
1767
4
1109
1781
4
1109
1787
4
1109
1949
4
1109
321
4
1109
2059
4
1109
2126
4
1109
435
4
1109
437
4
1109
463
4
1109
483
4
1109
491
4
1109
2732
4
1109
560
4
1109
583
4
1109
3073
4
1109
627
4
1109
631
4
1109
632
4
1109
642
4
1109
644
4
1109
653
4
1109
680
4
1109
761
4
1109
762
4
1109
763
4
1109
123
4
1109
140
4
1109
919
4
1109
989
4
1109
196
5
1109
1109
5
1109
1109
5
1109
1109
5
1109
</TEXT>
</DOC>
<DOC>
<DOCNO>1110</DOCNO>
<TEXT>
a
fourier
series
method
for
the
numerical
solution
of
a
class
of
parabolic
partial
differential
equations
a
fourier
series
method
is
described
which
when
applied
to
a
certain
class
of
parabolic
partial
differential
equations
reduces
the
problem
to
a
system
of
ordinary
differential
equations
an
application
is
given
for
which
the
method
shows
a
considerable
advantage
over
conventional
finite
difference
methods
cacm
march
1964
forrington
c
v
d
ca640322
jb
march
10
1978
2
08
am
1110
5
1110
1110
5
1110
1110
5
1110
</TEXT>
</DOC>
<DOC>
<DOCNO>1111</DOCNO>
<TEXT>
a
class
of
iterative
techniques
for
the
factorization
of
polynomials
a
method
of
iteration
is
developed
in
terms
of
a
function
of
somewhat
arbitrary
character
sufficient
conditions
are
given
for
convergence
of
the
process
yielding
factors
of
arbitrary
degree
for
polynomials
in
one
variable
both
lin
method
and
newton
method
occur
as
special
cases
cacm
march
1964
luther
h
a
ca640321
jb
march
10
1978
2
10
am
1111
4
1111
1111
5
1111
1111
5
1111
1111
5
1111
894
5
1111
</TEXT>
</DOC>
<DOC>
<DOCNO>1112</DOCNO>
<TEXT>
a
technique
for
computer
detection
and
correction
of
spelling
errors
the
method
described
assumes
that
a
word
which
cannot
be
found
in
a
dictionary
has
at
most
one
error
which
might
be
a
wrong
missing
or
extra
letter
or
a
single
transposition
the
unidentified
input
word
is
compared
to
the
dictionary
again
testing
each
time
to
see
if
the
words
match
assuming
one
of
these
errors
occurred
during
a
test
run
on
garbled
text
correct
identifications
were
made
for
over
95
percent
of
these
error
types
cacm
march
1964
damerau
f
j
ca640320
jb
march
10
1978
2
21
am
1112
4
1112
1592
4
1112
2111
4
1112
2339
4
1112
440
4
1112
1112
5
1112
1112
5
1112
1112
5
1112
1592
5
1112
2111
5
1112
2339
5
1112
619
5
1112
830
6
1112
982
6
1112
1112
6
1112
1112
6
1112
1112
6
1112
1592
6
1112
1592
6
1112
440
6
1112
619
6
1112
619
6
1112
619
6
1112
</TEXT>
</DOC>
<DOC>
<DOCNO>1113</DOCNO>
<TEXT>
computer
made
perspective
movies
as
a
scientific
and
communication
tool
it
is
easy
to
program
the
basic
transformation
required
for
a
perspective
drawing
this
fact
plus
the
advent
of
high
speed
microfilm
printers
such
as
the
general
dynamics
electronics
s
c
4020
makes
possible
perspective
movies
as
the
direct
output
from
a
computer
the
programming
of
such
a
movie
is
briefly
described
for
studying
the
angular
motions
of
a
satellite
containing
an
attitude
control
system
in
the
movie
a
domino
shaped
box
represents
the
satellite
and
a
sphere
with
circles
of
latitude
and
longitude
represents
the
earth
the
cost
was
approximately
three
to
eight
minutes
of
ibm
7090
time
per
one
minute
of
movie
cacm
march
1964
zajac
e
e
ca640319
jb
march
10
1978
2
26
am
1113
5
1113
1113
5
1113
1113
5
1113
</TEXT>
</DOC>
<DOC>
<DOCNO>1114</DOCNO>
<TEXT>
generating
a
canonical
prefix
encoding
computer
programs
for
generating
a
minimum
redundancy
exhaustive
prefix
encoding
are
described
one
program
generates
a
huffman
frequency
tree
another
determines
the
structure
functions
of
an
encoding
and
a
third
program
assigns
codes
cacm
march
1964
schwartz
e
s
kallick
b
ca640318
jb
march
10
1978
2
28
am
1114
5
1114
1114
5
1114
1114
5
1114
2346
5
1114
2459
5
1114
1114
6
1114
1114
6
1114
</TEXT>
</DOC>
<DOC>
<DOCNO>1115</DOCNO>
<TEXT>
randomized
binary
searching
with
tree
structure
a
more
efficient
method
of
using
tree
structures
is
proposed
which
utilizers
both
plus
and
minus
branches
in
the
search
path
very
significant
gains
result
when
the
search
key
includes
alphabetic
characters
cacm
march
1964
clampett
jr
h
a
ca640317
jb
march
10
1978
2
30
am
1115
5
1115
1115
5
1115
1115
5
1115
1935
5
1115
849
6
1115
1115
6
1115
</TEXT>
</DOC>
<DOC>
<DOCNO>1116</DOCNO>
<TEXT>
tests
on
a
computer
method
for
constructing
school
timetables
a
previously
proposed
computer
method
for
constructing
timetables
based
on
an
iteration
involving
boolean
matrices
is
described
in
limited
tests
the
method
has
successfully
produced
timetables
on
every
trial
references
are
given
which
relate
the
timetable
problem
to
theorems
on
matrices
of
zeros
and
ones
and
to
theorems
on
bipartite
graphs
some
problems
of
applying
the
method
to
constructing
timetables
in
real
situations
are
noted
cacm
march
1964
csima
j
gotlieb
c
c
ca640316
jb
march
10
1978
2
34
am
1116
5
1116
1116
5
1116
1116
5
1116
1367
5
1116
2772
5
1116
2787
5
1116
1116
6
1116
1116
6
1116
1116
6
1116
1429
6
1116
1429
6
1116
</TEXT>
</DOC>
<DOC>
<DOCNO>1117</DOCNO>
<TEXT>
polyphase
sorting
with
overlapped
rewind
a
variation
of
the
polyphase
merge
technique
of
sorting
is
described
which
permits
one
tape
at
a
time
to
be
rewound
while
the
merge
is
continued
on
the
remaining
tapes
the
result
is
the
overlapping
of
a
major
portion
of
the
rewind
time
the
technique
should
be
considered
whenever
a
sort
is
written
to
operate
on
five
or
more
tapes
that
cannot
be
read
backwards
the
savings
of
the
overlap
method
appear
to
increase
as
the
number
of
available
tapes
is
increased
cacm
march
1964
mcalester
r
l
ca640315
jb
march
10
1978
2
38
am
1117
4
1117
1117
4
1117
1117
4
1117
2017
4
1117
2017
4
1117
2146
4
1117
2146
4
1117
677
4
1117
860
4
1117
861
4
1117
1117
5
1117
1117
5
1117
1117
5
1117
636
5
1117
862
5
1117
861
5
1117
</TEXT>
</DOC>
<DOC>
<DOCNO>1118</DOCNO>
<TEXT>
fortran
subroutines
for
time
series
data
reduction
cacm
march
1964
macgowan
r
a
ca640314
jb
march
10
1978
2
39
am
1118
4
1118
1118
4
1118
826
4
1118
948
4
1118
942
5
1118
1118
5
1118
1118
5
1118
1118
5
1118
826
5
1118
</TEXT>
</DOC>
<DOC>
<DOCNO>1119</DOCNO>
<TEXT>
an
open
letter
to
x3
4
3
fortran
standards
american
association
cacm
march
1964
ca640313
jb
march
10
1978
2
40
am
1119
5
1119
1119
5
1119
1119
5
1119
</TEXT>
</DOC>
<DOC>
<DOCNO>1120</DOCNO>
<TEXT>
alcor
group
representations
of
algol
symbols
comm
acm
6
1963
597
599
corrigenda
cacm
march
1964
ca640312
jb
march
10
1978
2
42
am
1120
5
1120
1120
5
1120
1120
5
1120
</TEXT>
</DOC>
<DOC>
<DOCNO>1121</DOCNO>
<TEXT>
comments
on
a
continued
operation
notation
this
note
is
intended
to
clarify
and
correct
several
points
in
a
recent
paper
describing
some
notations
for
symbol
manipulation
by
m
barnett
comm
acm
6
august
1963
cacm
march
1964
barnett
m
p
gerard
j
m
sambles
a
w
ca640310
jb
march
10
1978
2
45
am
1062
4
1121
1121
4
1121
1121
4
1121
1139
4
1121
1265
4
1121
1781
4
1121
659
4
1121
720
4
1121
759
4
1121
964
4
1121
1121
5
1121
1121
5
1121
1121
5
1121
464
5
1121
759
5
1121
</TEXT>
</DOC>
<DOC>
<DOCNO>1122</DOCNO>
<TEXT>
a
note
on
some
compiling
algorithms
two
compiling
generators
for
arithmetic
expressions
are
discussed
one
presently
in
use
in
an
experimental
compiler
and
an
improvement
suggested
by
k
speierman
of
burroughs
cacm
march
1964
anderson
j
p
ca640309
jb
march
10
1978
3
33
am
1122
5
1122
1122
5
1122
1122
5
1122
1551
5
1122
1945
5
1122
823
6
1122
914
6
1122
915
6
1122
917
6
1122
984
6
1122
989
6
1122
990
6
1122
1012
6
1122
1084
6
1122
1098
6
1122
1122
6
1122
1122
6
1122
1138
6
1122
1139
6
1122
1141
6
1122
1200
6
1122
1223
6
1122
1265
6
1122
1336
6
1122
1396
6
1122
1455
6
1122
1477
6
1122
1487
6
1122
1491
6
1122
1496
6
1122
483
6
1122
584
6
1122
669
6
1122
680
6
1122
763
6
1122
</TEXT>
</DOC>
<DOC>
<DOCNO>1123</DOCNO>
<TEXT>
gauss
algorithm
209
cacm
march
1964
gladfelter
g
w
ca640308
jb
march
10
1978
3
34
am
1123
5
1123
1123
5
1123
1123
5
1123
</TEXT>
</DOC>
<DOC>
<DOCNO>1124</DOCNO>
<TEXT>
matrix
division
algorithm
197
cacm
march
1964
wells
m
ca640307
jb
march
10
1978
3
35
am
1124
5
1124
1124
5
1124
1124
5
1124
</TEXT>
</DOC>
<DOC>
<DOCNO>1125</DOCNO>
<TEXT>
syminv2
algorithm
150
cacm
march
1964
naur
p
ca640306
jb
march
10
1978
3
36
am
1125
5
1125
1125
5
1125
1125
5
1125
</TEXT>
</DOC>
<DOC>
<DOCNO>1126</DOCNO>
<TEXT>
erf
algorithm
123
cacm
march
1964
barton
s
p
wagner
j
f
ca640305
jb
march
10
1978
3
37
am
1126
5
1126
1126
5
1126
1126
5
1126
1583
5
1126
831
6
1126
967
6
1126
1126
6
1126
707
6
1126
</TEXT>
</DOC>
<DOC>
<DOCNO>1127</DOCNO>
<TEXT>
tridiagonal
matrix
algorithm
122
cacm
march
1964
naur
p
ca640304
jb
march
10
1978
3
39
am
1127
5
1127
1127
5
1127
1127
5
1127
</TEXT>
</DOC>
<DOC>
<DOCNO>1128</DOCNO>
<TEXT>
evaluation
of
determinant
algorithm
41
cacm
march
1964
rotenberg
l
j
ca640303
jb
march
10
1978
3
40
am
1128
5
1128
1128
5
1128
1128
5
1128
1319
5
1128
152
6
1128
1128
6
1128
</TEXT>
</DOC>
<DOC>
<DOCNO>1129</DOCNO>
<TEXT>
incomplete
beta
function
ratios
algorithm
222
cacm
march
1964
gautschi
w
ca640302
jb
march
10
1978
3
41
am
1129
5
1129
1129
5
1129
1129
5
1129
</TEXT>
</DOC>
<DOC>
<DOCNO>1130</DOCNO>
<TEXT>
gamma
function
althm
221
cacm
march
1964
gautschi
w
ca640301
jb
march
10
1978
3
42
am
1023
5
1130
1130
5
1130
1130
5
1130
1130
5
1130
1222
5
1130
1130
6
1130
1130
6
1130
245
6
1130
310
6
1130
</TEXT>
</DOC>
<DOC>
<DOCNO>1131</DOCNO>
<TEXT>
on
context
and
ambiguity
in
parsing
cacm
february
1964
ross
d
t
ca640212
jb
march
10
1978
3
43
am
1131
5
1131
1131
5
1131
1131
5
1131
1781
5
1131
123
6
1131
196
6
1131
919
6
1131
990
6
1131
1007
6
1131
1046
6
1131
1131
6
1131
1139
6
1131
1140
6
1131
1149
6
1131
1198
6
1131
1215
6
1131
1223
6
1131
1265
6
1131
1303
6
1131
1323
6
1131
1358
6
1131
1366
6
1131
1421
6
1131
1460
6
1131
1462
6
1131
1463
6
1131
1467
6
1131
1468
6
1131
1477
6
1131
1491
6
1131
1496
6
1131
1531
6
1131
1535
6
1131
1565
6
1131
1601
6
1131
1602
6
1131
1613
6
1131
1614
6
1131
1626
6
1131
1641
6
1131
1787
6
1131
1788
6
1131
205
6
1131
224
6
1131
249
6
1131
288
6
1131
316
6
1131
381
6
1131
398
6
1131
11
6
1131
404
6
1131
410
6
1131
463
6
1131
464
6
1131
483
6
1131
3184
6
1131
3188
6
1131
584
6
1131
600
6
1131
680
6
1131
691
6
1131
763
6
1131
799
6
1131
</TEXT>
</DOC>
<DOC>
<DOCNO>1132</DOCNO>
<TEXT>
an
extension
to
algol
for
manipulating
formulae
cacm
february
1964
perlis
a
j
iturriaga
r
ca640211
jb
march
10
1978
3
45
am
1024
4
1132
1051
4
1132
1086
4
1132
1102
4
1132
1132
4
1132
1132
4
1132
1234
4
1132
1263
4
1132
1265
4
1132
1270
4
1132
1323
4
1132
1358
4
1132
1379
4
1132
1380
4
1132
1390
4
1132
1453
4
1132
1464
4
1132
1484
4
1132
1486
4
1132
1491
4
1132
1498
4
1132
1549
4
1132
1613
4
1132
1614
4
1132
1706
4
1132
1781
4
1132
1825
4
1132
1826
4
1132
1860
4
1132
1878
4
1132
378
4
1132
2060
4
1132
2083
4
1132
2155
4
1132
2168
4
1132
2178
4
1132
2179
4
1132
2252
4
1132
2325
4
1132
2341
4
1132
2546
4
1132
2645
4
1132
2652
4
1132
2684
4
1132
2719
4
1132
2723
4
1132
2838
4
1132
2842
4
1132
2842
4
1132
2855
4
1132
2879
4
1132
2929
4
1132
2934
4
1132
3069
4
1132
3077
4
1132
3080
4
1132
3106
4
1132
627
4
1132
669
4
1132
679
4
1132
691
4
1132
761
4
1132
106
4
1132
949
4
1132
989
4
1132
1132
5
1132
1132
5
1132
1132
5
1132
1214
5
1132
210
5
1132
1396
5
1132
3184
5
1132
964
6
1132
1028
6
1132
1029
6
1132
1083
6
1132
1132
6
1132
1132
6
1132
1214
6
1132
1278
6
1132
1334
6
1132
1365
6
1132
1386
6
1132
1387
6
1132
1388
6
1132
1392
6
1132
1393
6
1132
1394
6
1132
1395
6
1132
1396
6
1132
1397
6
1132
1496
6
1132
284
6
1132
407
6
1132
3199
6
1132
3200
6
1132
3201
6
1132
3202
6
1132
3203
6
1132
3204
6
1132
561
6
1132
730
6
1132
731
6
1132
</TEXT>
</DOC>
<DOC>
<DOCNO>1133</DOCNO>
<TEXT>
a
programming
package
for
some
general
modes
of
arithmetic
cacm
february
1964
brooker
r
a
ca640210
jb
march
10
1978
3
46
am
1133
5
1133
1133
5
1133
1133
5
1133
</TEXT>
</DOC>
<DOC>
<DOCNO>1134</DOCNO>
<TEXT>
some
effects
of
the
6600
computer
on
language
structures
the
problem
of
compiling
efficient
6600
codes
prompted
the
development
of
an
intermediate
language
reflecting
the
structure
of
the
machine
that
is
more
easily
manipulated
in
improving
object
program
efficiency
the
subject
of
this
paper
is
the
intermediate
language
and
methods
of
manipulating
it
compilations
of
a
series
of
arithmetic
statements
are
discussed
it
is
assumed
that
all
functions
and
exponentials
have
been
removed
from
these
statements
and
replaced
by
simple
variables
for
purposes
of
simplicity
the
treatment
of
subscripts
is
ignored
a
simplified
6600
structure
is
presented
to
illustrate
the
compiling
method
several
assumptions
are
made
for
purposes
of
simplification
although
there
are
cases
in
which
the
assumptions
are
violated
in
the
actual
machine
cacm
february
1964
allard
r
w
wolf
k
a
zemlin
r
a
ca640209
jb
march
10
1978
3
54
am
1134
4
1134
1134
4
1134
1134
4
1134
1141
4
1134
1179
4
1134
1861
4
1134
364
4
1134
405
4
1134
438
4
1134
561
4
1134
44
4
1134
83
4
1134
1134
5
1134
1134
5
1134
1134
5
1134
1613
5
1134
1947
5
1134
408
5
1134
17
5
1134
77
5
1134
987
6
1134
1086
6
1134
1134
6
1134
1134
6
1134
1223
6
1134
1248
6
1134
1453
6
1134
399
6
1134
3184
6
1134
</TEXT>
</DOC>
<DOC>
<DOCNO>1135</DOCNO>
<TEXT>
a
general
business
oriented
language
based
on
decision
expressions
the
structure
of
a
digital
compute
programming
language
which
covers
a
wide
class
of
business
and
file
processing
applications
is
presented
such
a
structure
based
on
identifying
and
incorporating
into
a
compiler
the
aspects
common
to
all
processes
of
such
class
permits
writing
extremely
compact
programs
even
for
comparatively
complex
applications
in
terms
of
tables
of
control
expressions
which
express
only
information
characteristic
of
the
particular
application
furthermore
local
changes
of
a
process
e
g
changes
affecting
only
one
of
the
output
files
involved
can
be
effected
by
local
modifications
in
the
program
e
g
modification
of
only
one
entry
of
the
tables
this
structure
also
allows
for
inexpensive
preparation
of
loading
speed
compilers
which
translate
the
source
programs
into
efficient
machine
codes
the
approach
adopted
here
departs
from
conventional
mechanical
language
design
philosophies
it
stresses
the
structural
analysis
of
the
class
of
processes
to
be
represented
in
the
languages
as
opposed
to
emphasizing
formal
i
e
contents
independent
syntactical
definitions
it
relies
exclusively
on
nonprocedural
representation
of
process
as
sets
tables
of
relations
between
data
and
results
there
are
no
control
statements
such
as
go
to
etc
instead
of
using
procedure
descriptions
which
are
one
to
one
translations
of
flowcharts
here
an
invariant
pattern
of
procedure
is
identified
as
characteristic
of
the
class
of
all
batch
file
processes
this
new
philosophy
has
the
potential
to
overcome
well
known
deficiencies
of
other
business
oriented
languages
and
fully
meets
the
requirements
set
by
codasyl
for
such
languages
including
machine
independence
cacm
february
1964
lombardi
l
a
ca640208
jb
march
10
1978
4
08
am
1135
4
1135
1136
4
1135
493
4
1135
2710
4
1135
2765
4
1135
2888
4
1135
2906
4
1135
729
4
1135
1135
5
1135
1135
5
1135
1135
5
1135
1959
5
1135
616
5
1135
1135
6
1135
</TEXT>
</DOC>
<DOC>
<DOCNO>1136</DOCNO>
<TEXT>
beginnings
of
a
theory
of
information
handling
cacm
february
1964
steel
jr
t
b
ca640207
jb
march
10
1978
4
10
am
1135
4
1136
1136
4
1136
1136
4
1136
1136
4
1136
493
4
1136
2710
4
1136
2765
4
1136
2888
4
1136
2906
4
1136
729
4
1136
1136
5
1136
1136
5
1136
1136
5
1136
493
5
1136
616
5
1136
657
5
1136
</TEXT>
</DOC>
<DOC>
<DOCNO>1137</DOCNO>
<TEXT>
a
format
language
cacm
february
1964
perlis
a
j
ca640206
jb
march
10
1978
4
15
am
1086
5
1137
1137
5
1137
1137
5
1137
1137
5
1137
1496
5
1137
1137
6
1137
1137
6
1137
1141
6
1137
404
6
1137
3184
6
1137
</TEXT>
</DOC>
<DOC>
<DOCNO>1138</DOCNO>
<TEXT>
formalism
in
programming
languages
cacm
february
1964
iverson
k
e
ca640205
jb
march
10
1978
4
24
am
1138
5
1138
1138
5
1138
1138
5
1138
1945
5
1138
823
6
1138
914
6
1138
915
6
1138
917
6
1138
984
6
1138
989
6
1138
990
6
1138
1012
6
1138
1084
6
1138
1098
6
1138
1122
6
1138
1138
6
1138
1139
6
1138
1141
6
1138
1200
6
1138
1223
6
1138
1265
6
1138
1336
6
1138
1396
6
1138
1455
6
1138
1477
6
1138
1487
6
1138
1491
6
1138
1496
6
1138
483
6
1138
584
6
1138
669
6
1138
680
6
1138
763
6
1138
</TEXT>
</DOC>
<DOC>
<DOCNO>1139</DOCNO>
<TEXT>
fortran
iv
as
a
syntax
language
cacm
february
1964
leavenworth
b
m
ca640204
jb
march
10
1978
4
53
am
267
4
1139
1046
4
1139
1062
4
1139
1105
4
1139
1121
4
1139
1139
4
1139
1139
4
1139
1139
4
1139
1139
4
1139
1139
4
1139
1139
4
1139
1140
4
1139
1141
4
1139
1215
4
1139
1223
4
1139
1234
4
1139
1263
4
1139
1265
4
1139
1265
4
1139
1265
4
1139
1496
4
1139
1647
4
1139
1665
4
1139
1781
4
1139
1781
4
1139
1781
4
1139
1787
4
1139
1792
4
1139
1824
4
1139
1947
4
1139
364
4
1139
2126
4
1139
405
4
1139
2546
4
1139
438
4
1139
464
4
1139
556
4
1139
584
4
1139
3185
4
1139
631
4
1139
653
4
1139
680
4
1139
720
4
1139
759
4
1139
763
4
1139
763
4
1139
763
4
1139
795
4
1139
799
4
1139
799
4
1139
945
4
1139
1139
5
1139
1139
5
1139
1139
5
1139
224
5
1139
1612
5
1139
1781
5
1139
1945
5
1139
399
5
1139
404
5
1139
438
5
1139
464
5
1139
631
5
1139
823
6
1139
123
6
1139
196
6
1139
914
6
1139
915
6
1139
917
6
1139
919
6
1139
984
6
1139
989
6
1139
990
6
1139
990
6
1139
1007
6
1139
1012
6
1139
1046
6
1139
1084
6
1139
1098
6
1139
1122
6
1139
1131
6
1139
1138
6
1139
1139
6
1139
1139
6
1139
1139
6
1139
1140
6
1139
1141
6
1139
1149
6
1139
1198
6
1139
1200
6
1139
1215
6
1139
1223
6
1139
1223
6
1139
1265
6
1139
1265
6
1139
1303
6
1139
1323
6
1139
1336
6
1139
1358
6
1139
1366
6
1139
1396
6
1139
1421
6
1139
1455
6
1139
1460
6
1139
1462
6
1139
1463
6
1139
1467
6
1139
1468
6
1139
1477
6
1139
1477
6
1139
1487
6
1139
1491
6
1139
1491
6
1139
1496
6
1139
1496
6
1139
1531
6
1139
1535
6
1139
1565
6
1139
1601
6
1139
1602
6
1139
1613
6
1139
1614
6
1139
1626
6
1139
1641
6
1139
1787
6
1139
1788
6
1139
205
6
1139
224
6
1139
249
6
1139
288
6
1139
316
6
1139
381
6
1139
398
6
1139
11
6
1139
404
6
1139
410
6
1139
463
6
1139
464
6
1139
483
6
1139
483
6
1139
3184
6
1139
3188
6
1139
584
6
1139
584
6
1139
600
6
1139
669
6
1139
680
6
1139
680
6
1139
691
6
1139
763
6
1139
763
6
1139
799
6
1139
</TEXT>
</DOC>
<DOC>
<DOCNO>1140</DOCNO>
<TEXT>
structural
connections
in
formal
language
cacm
february
1964
irons
e
t
ca640203
jb
march
10
1978
4
55
am
249
4
1140
254
4
1140
272
4
1140
1046
4
1140
1102
4
1140
1105
4
1140
1109
4
1140
1139
4
1140
1140
4
1140
1140
4
1140
1188
4
1140
1234
4
1140
1263
4
1140
1265
4
1140
1306
4
1140
1464
4
1140
1491
4
1140
1496
4
1140
1767
4
1140
1781
4
1140
1781
4
1140
1787
4
1140
1824
4
1140
1949
4
1140
321
4
1140
2059
4
1140
2126
4
1140
2126
4
1140
2546
4
1140
435
4
1140
437
4
1140
463
4
1140
464
4
1140
483
4
1140
491
4
1140
2732
4
1140
560
4
1140
583
4
1140
584
4
1140
3073
4
1140
627
4
1140
631
4
1140
631
4
1140
632
4
1140
642
4
1140
644
4
1140
653
4
1140
653
4
1140
680
4
1140
680
4
1140
761
4
1140
762
4
1140
763
4
1140
763
4
1140
795
4
1140
799
4
1140
123
4
1140
140
4
1140
919
4
1140
945
4
1140
989
4
1140
196
5
1140
1140
5
1140
1140
5
1140
1140
5
1140
1491
5
1140
1781
5
1140
2061
5
1140
404
5
1140
123
6
1140
196
6
1140
196
6
1140
919
6
1140
990
6
1140
1007
6
1140
1046
6
1140
1131
6
1140
1139
6
1140
1140
6
1140
1140
6
1140
1140
6
1140
1141
6
1140
1149
6
1140
1198
6
1140
1215
6
1140
1223
6
1140
1265
6
1140
1303
6
1140
1303
6
1140
1323
6
1140
1358
6
1140
1366
6
1140
1421
6
1140
1460
6
1140
1462
6
1140
1463
6
1140
1467
6
1140
1468
6
1140
1477
6
1140
1477
6
1140
1491
6
1140
1491
6
1140
1496
6
1140
1531
6
1140
1535
6
1140
1565
6
1140
1601
6
1140
1602
6
1140
1613
6
1140
1614
6
1140
1626
6
1140
1641
6
1140
1787
6
1140
1788
6
1140
205
6
1140
1825
6
1140
224
6
1140
249
6
1140
288
6
1140
316
6
1140
381
6
1140
398
6
1140
11
6
1140
404
6
1140
410
6
1140
463
6
1140
464
6
1140
483
6
1140
3184
6
1140
3184
6
1140
3188
6
1140
584
6
1140
600
6
1140
680
6
1140
691
6
1140
729
6
1140
763
6
1140
773
6
1140
799
6
1140
</TEXT>
</DOC>
<DOC>
<DOCNO>1141</DOCNO>
<TEXT>
bounded
context
syntactic
analysis
cacm
february
1964
floyd
r
w
ca640202
jb
march
10
1978
4
56
am
267
4
1141
1134
4
1141
1139
4
1141
1141
4
1141
1141
4
1141
1215
4
1141
1223
4
1141
1647
4
1141
1781
4
1141
1787
4
1141
1792
4
1141
364
4
1141
364
4
1141
405
4
1141
405
4
1141
438
4
1141
438
4
1141
561
4
1141
44
4
1141
763
4
1141
1141
5
1141
1141
5
1141
1141
5
1141
224
5
1141
1496
5
1141
1683
5
1141
1768
5
1141
1787
5
1141
1945
5
1141
2061
5
1141
77
5
1141
823
6
1141
196
6
1141
914
6
1141
915
6
1141
917
6
1141
984
6
1141
989
6
1141
990
6
1141
1012
6
1141
1084
6
1141
1098
6
1141
1122
6
1141
1137
6
1141
1138
6
1141
1139
6
1141
1140
6
1141
1141
6
1141
1141
6
1141
1141
6
1141
1141
6
1141
1141
6
1141
1141
6
1141
1200
6
1141
1215
6
1141
1223
6
1141
1265
6
1141
1265
6
1141
1336
6
1141
1396
6
1141
1455
6
1141
1477
6
1141
1477
6
1141
1487
6
1141
1491
6
1141
1491
6
1141
1491
6
1141
1491
6
1141
1496
6
1141
1496
6
1141
1781
6
1141
1781
6
1141
1825
6
1141
224
6
1141
404
6
1141
483
6
1141
584
6
1141
669
6
1141
680
6
1141
763
6
1141
763
6
1141
773
6
1141
799
6
1141
</TEXT>
</DOC>
<DOC>
<DOCNO>1142</DOCNO>
<TEXT>
an
extension
of
algol
like
languages
cacm
february
1964
rose
g
f
ca640201
jb
march
10
1978
4
57
am
1102
4
1142
1142
4
1142
1781
4
1142
1945
4
1142
762
4
1142
949
4
1142
1142
5
1142
1142
5
1142
1142
5
1142
483
5
1142
</TEXT>
</DOC>
<DOC>
<DOCNO>1143</DOCNO>
<TEXT>
analysis
of
decay
type
data
a
comparative
study
has
been
made
of
a
variety
of
numerical
techniques
for
fitting
experimental
data
of
the
decay
type
by
forms
involving
the
sums
of
exponentials
statistical
errors
of
the
fitted
parameters
are
also
calculated
these
methods
have
been
applied
to
artificially
generated
sets
of
data
as
well
as
to
the
results
of
experiments
with
radioactive
tracers
on
both
human
and
animal
subjects
results
show
that
the
values
of
the
fitted
parameters
are
very
sensitive
to
variations
in
the
fitting
procedure
therefore
great
care
very
sensitive
to
variations
in
the
fitting
procedure
therefore
great
care
must
be
exercised
in
identifying
such
values
with
physical
constants
although
the
values
of
functions
derived
from
these
fitted
parameters
which
can
definitely
be
associated
with
physical
entities
are
generally
more
stable
under
variations
in
the
fitting
techniques
error
bounds
can
be
so
large
that
no
great
confidence
can
be
placed
even
in
them
it
would
therefore
appear
best
to
select
a
uniform
technique
both
for
running
the
experiments
and
for
analyzing
the
data
and
then
to
consider
as
significant
only
relative
results
between
one
subject
and
the
next
cacm
january
1964
worsley
b
h
ca640112
jb
march
10
1978
5
11
am
1143
5
1143
1143
5
1143
1143
5
1143
</TEXT>
</DOC>
<DOC>
<DOCNO>1144</DOCNO>
<TEXT>
digital
computer
determination
of
alpha
source
activity
a
technique
is
described
for
determining
the
activity
and
homogeneity
of
an
alpha
source
it
is
believed
that
the
technique
using
a
digital
computer
has
many
uses
and
applications
in
the
field
of
nuclear
physics
the
technique
involves
computer
manipulation
of
the
digital
image
of
the
nuclear
source
experimental
details
are
given
cacm
january
1964
robbins
d
taylor
w
e
ca640111
jb
march
10
1978
5
14
am
1144
5
1144
1144
5
1144
1144
5
1144
</TEXT>
</DOC>
<DOC>
<DOCNO>1145</DOCNO>
<TEXT>
git
a
heuristic
program
for
testing
pairs
of
directed
line
graphs
for
isomorphism
given
a
pair
of
directed
line
graphs
the
problem
of
ascertaining
whether
or
not
they
are
isomorphic
is
one
for
which
no
efficient
algorithmic
solution
is
known
since
a
straightforward
enumerative
algorithm
might
require
40
years
of
running
time
on
a
very
high
speed
computer
in
order
to
compare
two
15
node
graphs
a
more
sophisticated
approach
seems
called
for
the
situation
is
similar
to
that
prevailing
in
areas
such
as
game
playing
and
theorem
proving
where
practical
algorithms
are
unknown
for
the
interesting
cases
but
where
various
practical
though
only
partially
successful
techniques
are
available
git
graph
isomorphism
tester
incorporates
a
variety
of
processes
that
attempt
to
narrow
down
the
search
for
an
isomorphism
or
to
demonstrate
that
none
exists
no
one
scheme
is
relied
upon
exclusively
for
a
solution
and
the
program
is
designed
to
avoid
excessive
computation
along
fruitless
lines
git
has
been
written
in
the
comit
language
and
successfully
tested
on
the
ibm
7090
cacm
january
1964
unger
s
h
ca640110
jb
march
10
1978
5
24
am
1145
4
1145
1145
5
1145
1145
5
1145
1145
5
1145
1504
5
1145
3040
5
1145
655
5
1145
1145
6
1145
1145
6
1145
</TEXT>
</DOC>
<DOC>
<DOCNO>1146</DOCNO>
<TEXT>
an
efficient
composite
formula
for
multidimensional
quadrature
a
2s
1
point
second
degree
quadrature
formula
for
integration
over
an
s
dimensional
hyper
rectangle
is
presented
all
but
one
of
the
points
lie
on
the
surface
with
weights
of
opposite
sign
attached
to
points
on
opposite
faces
when
a
large
volume
is
subdivided
into
congruent
rectangular
subdivisions
only
one
point
is
required
in
each
interior
subdivision
to
achieve
second
degree
accuracy
cacm
january
1964
thacher
jr
h
c
ca640109
jb
march
10
1978
5
28
am
1146
4
1146
1146
5
1146
1146
5
1146
1146
5
1146
386
5
1146
</TEXT>
</DOC>
<DOC>
<DOCNO>1147</DOCNO>
<TEXT>
on
the
numerical
solution
of
boundary
value
problems
for
linear
ordinary
differential
equations
a
numerical
method
is
presented
for
the
solution
of
boundary
value
problems
involving
linear
ordinary
differential
equations
the
method
described
is
noniterative
and
makes
use
of
any
one
step
numerical
integration
scheme
to
reduce
the
problem
from
one
of
boundary
values
to
one
of
initial
values
comments
are
made
concerning
some
numerical
results
of
applying
the
method
to
a
specific
problem
in
addition
an
extension
of
the
algorithm
described
to
more
general
problems
is
discussed
cacm
january
1964
day
j
t
collins
ii
g
w
ca640108
jb
march
10
1978
5
32
am
1147
5
1147
1147
5
1147
1147
5
1147
1274
5
1147
1147
6
1147
</TEXT>
</DOC>
<DOC>
<DOCNO>1148</DOCNO>
<TEXT>
an
example
in
significant
digit
arithmetic
different
methods
of
handling
the
summing
process
for
the
geometric
series
are
shown
to
give
results
indicating
widely
differing
significances
when
carried
out
in
a
machine
incorporating
significant
digit
arithmetic
cacm
january
1964
miller
r
h
ca640107
jb
march
10
1978
5
34
am
1148
4
1148
1148
5
1148
1148
5
1148
1148
5
1148
85
5
1148
3131
5
1148
893
6
1148
1148
6
1148
</TEXT>
</DOC>
<DOC>
<DOCNO>1149</DOCNO>
<TEXT>
gargoyle
a
language
for
compiler
writing
cacm
january
1964
garwick
j
v
ca640106
jb
march
10
1978
5
35
am
1149
5
1149
1149
5
1149
1149
5
1149
1781
5
1149
123
6
1149
196
6
1149
919
6
1149
990
6
1149
1007
6
1149
1046
6
1149
1131
6
1149
1139
6
1149
1140
6
1149
1149
6
1149
1198
6
1149
1215
6
1149
1223
6
1149
1265
6
1149
1303
6
1149
1323
6
1149
1358
6
1149
1366
6
1149
1421
6
1149
1460
6
1149
1462
6
1149
1463
6
1149
1467
6
1149
1468
6
1149
1477
6
1149
1491
6
1149
1496
6
1149
1531
6
1149
1535
6
1149
1565
6
1149
1601
6
1149
1602
6
1149
1613
6
1149
1614
6
1149
1626
6
1149
1641
6
1149
1787
6
1149
1788
6
1149
205
6
1149
224
6
1149
249
6
1149
288
6
1149
316
6
1149
381
6
1149
398
6
1149
11
6
1149
404
6
1149
410
6
1149
463
6
1149
464
6
1149
483
6
1149
3184
6
1149
3188
6
1149
584
6
1149
600
6
1149
680
6
1149
691
6
1149
763
6
1149
799
6
1149
</TEXT>
</DOC>
<DOC>
<DOCNO>1150</DOCNO>
<TEXT>
a
fortran
post
mortem
procedure
cacm
january
1964
kahan
w
leppik
j
j
ca640104
jb
march
10
1978
5
37
am
1150
5
1150
1150
5
1150
1150
5
1150
</TEXT>
</DOC>
<DOC>
<DOCNO>1151</DOCNO>
<TEXT>
a
note
on
multiplying
boolean
matrices
ii
cacm
january
1964
comstock
d
r
ca640103
jb
march
10
1978
5
38
am
1151
4
1151
1265
4
1151
2769
4
1151
1151
5
1151
1151
5
1151
1151
5
1151
635
5
1151
</TEXT>
</DOC>
<DOC>
<DOCNO>1152</DOCNO>
<TEXT>
floating
point
arithmetic
with
84
bit
numbers
a
classic
and
straightforward
technique
is
presented
which
is
not
limited
to
the
size
or
type
of
number
representation
used
or
multiple
precision
arithmetic
cacm
january
1964
gregory
r
t
raney
j
l
ca640102
jb
march
10
1978
5
41
am
1152
5
1152
1152
5
1152
1152
5
1152
1294
5
1152
1152
6
1152
</TEXT>
</DOC>
<DOC>
<DOCNO>1153</DOCNO>
<TEXT>
a
fast
procedure
for
generating
normal
random
variables
a
technique
for
generating
normally
distributed
random
numbers
is
described
it
is
faster
than
those
currently
in
general
use
and
is
readily
applicable
to
both
binary
and
decimal
computers
cacm
january
1964
marsaglia
g
maclaren
m
d
bray
t
a
ca640101
jb
march
10
1978
5
43
am
1073
4
1153
1153
4
1153
940
5
1153
1073
5
1153
1153
5
1153
1153
5
1153
1153
5
1153
2137
5
1153
2276
5
1153
940
6
1153
1073
6
1153
1153
6
1153
1153
6
1153
1153
6
1153
</TEXT>
</DOC>
<DOC>
<DOCNO>1154</DOCNO>
<TEXT>
multi
tape
and
infinite
state
automata
a
survey
a
survey
of
machines
which
are
more
powerful
than
finite
automata
and
less
powerful
than
general
turing
machines
is
presented
it
is
felt
that
the
machines
in
this
category
are
as
closely
related
to
digital
computers
as
either
the
finite
automata
or
the
unrestricted
turing
machines
intermediate
machines
can
be
created
by
adjoining
on
infinite
state
memory
to
a
finite
state
machine
and
then
performing
any
or
all
of
the
following
1
restrict
the
manner
in
which
the
unbounded
portion
of
the
memory
can
be
accessed
2
bound
the
number
of
steps
allowed
for
a
computation
by
some
increasing
recursive
function
of
the
length
of
the
input
3
restrict
the
total
amount
of
memory
available
in
the
same
manner
examples
from
all
three
classes
and
their
properties
are
discussed
cacm
december
1965
fischer
p
c
ca651215
jb
march
6
1978
3
24
pm
1154
5
1154
1154
5
1154
1154
5
1154
</TEXT>
</DOC>
<DOC>
<DOCNO>1155</DOCNO>
<TEXT>
experiments
with
a
deductive
question
answering
program
as
an
investigation
in
artificial
intelligence
computer
experiments
on
deductive
question
answering
were
run
with
a
lisp
program
called
deducom
an
acronym
for
deductive
communicator
when
given
68
facts
deducom
answered
10
questions
answerable
from
the
facts
a
fact
tells
deducom
either
some
specific
information
or
a
method
of
answering
a
general
kind
of
question
some
conclusions
drawn
in
the
article
are
1
deducom
can
answer
a
wide
variety
of
questions
2
a
human
can
increase
the
deductive
power
of
deducom
by
telling
it
more
facts
3
deducom
can
write
very
simple
programs
it
is
hoped
that
this
ability
is
the
forerunner
of
an
ability
to
self
program
which
is
a
way
to
learn
4
deducom
search
procedure
at
present
has
two
bad
defects
some
questions
answerable
from
the
given
facts
cannot
be
answered
and
some
other
answerable
questions
can
be
answered
only
if
the
relevant
facts
are
given
in
the
right
order
6
at
present
deducom
method
of
making
logical
deductions
in
predicate
calculus
has
two
bad
defects
some
facts
have
to
be
changed
to
logically
equivalent
ones
before
being
given
to
deducom
and
some
redundant
facts
have
to
be
given
to
deducom
cacm
december
1965
slagle
j
r
ca651214
jb
march
6
1978
3
34
pm
1155
4
1155
1456
4
1155
1468
4
1155
1515
4
1155
1699
4
1155
1856
4
1155
2127
4
1155
1155
5
1155
1155
5
1155
1155
5
1155
1324
5
1155
1515
5
1155
2096
5
1155
2127
5
1155
2210
5
1155
1155
6
1155
1155
6
1155
1155
6
1155
1155
6
1155
1324
6
1155
1324
6
1155
1487
6
1155
1527
6
1155
1781
6
1155
1856
6
1155
</TEXT>
</DOC>
<DOC>
<DOCNO>1156</DOCNO>
<TEXT>
hankel
function
algorithm
124
s17
cacm
december
1965
reilly
g
a
ca651213
jb
march
6
1978
3
35
pm
1156
5
1156
1156
5
1156
1156
5
1156
</TEXT>
</DOC>
<DOC>
<DOCNO>1157</DOCNO>
<TEXT>
procedure
for
the
normal
distribution
functions
algorithm
272
s15
cacm
december
1965
maclaren
m
d
ca651212
jb
march
6
1978
3
37
pm
1157
4
1157
1157
4
1157
1157
4
1157
1157
4
1157
1779
4
1157
1920
4
1157
1944
4
1157
1987
4
1157
2548
4
1157
1081
5
1157
1157
5
1157
1157
5
1157
1157
5
1157
485
5
1157
714
5
1157
836
5
1157
</TEXT>
</DOC>
<DOC>
<DOCNO>1158</DOCNO>
<TEXT>
program
structures
for
parallel
processing
constructs
for
organizing
and
explicating
parallel
program
segments
are
discussed
as
extensions
to
algol
60
the
constructs
serve
as
meta
commands
and
are
motivated
by
equipment
having
multiprocessing
capability
cacm
december
1965
anderson
j
p
ca651211
jb
march
6
1978
3
39
pm
1158
4
1158
1158
5
1158
1158
5
1158
1158
5
1158
1262
5
1158
</TEXT>
</DOC>
<DOC>
<DOCNO>1159</DOCNO>
<TEXT>
machine
independence
its
technology
and
economics
a
survey
is
offered
of
techniques
for
transferring
programs
and
especially
compilers
from
one
computer
to
another
of
the
methods
examined
the
bootstrap
technique
is
singled
out
for
detailed
discussion
with
emphasis
on
its
economics
the
considerations
that
determine
the
applicability
of
bootstrapping
in
any
specific
case
are
discussed
and
an
attempt
is
made
to
assign
appropriate
qualitative
weights
to
them
finally
reasons
are
given
for
believing
that
the
machine
independence
problem
is
being
substantially
diminished
by
current
trends
in
computer
design
and
that
it
is
this
process
of
convergence
in
hardware
design
rather
than
any
foreseeable
software
developments
that
will
lead
to
its
satisfactory
resolution
cacm
december
1965
halpern
m
i
ca651210
jb
march
6
1978
3
44
pm
1159
4
1159
1988
4
1159
381
4
1159
1159
5
1159
1159
5
1159
1159
5
1159
14
5
1159
</TEXT>
</DOC>
<DOC>
<DOCNO>1160</DOCNO>
<TEXT>
cat
a
7090
3600
computer
aided
translation
a
semi
automatic
translation
system
has
been
implemented
which
converts
7090
fap
language
programs
into
3600
assembly
language
the
input
to
the
system
is
a
fap
program
deck
which
has
been
specially
prepared
for
translation
by
the
user
the
output
consists
of
the
translated
compass
language
program
together
with
a
comprehensive
diagnostic
listing
which
the
user
must
analyze
in
order
to
verify
any
questionable
areas
of
the
translation
the
translation
processor
consists
of
three
distinct
phases
an
assembly
of
the
fap
program
a
comprehensive
analysis
of
the
assembled
code
with
particular
regard
to
the
actions
of
instructions
upon
other
instructions
and
upon
data
and
finally
the
output
pass
which
generates
the
compass
program
in
the
form
of
macro
instructions
cacm
december
1965
wilson
d
m
moss
d
j
ca651209
jb
march
6
1978
3
50
pm
1160
4
1160
2034
4
1160
1160
5
1160
1160
5
1160
1160
5
1160
1231
5
1160
</TEXT>
</DOC>
<DOC>
<DOCNO>1161</DOCNO>
<TEXT>
1401
compatibility
feature
on
the
ibm
system
360
model
30
the
second
generation
of
stored
program
computers
of
which
ibm
1400
series
was
a
part
brought
edp
into
the
mass
market
for
the
first
time
on
a
large
scale
as
this
era
unfolded
rapid
changes
in
technology
led
to
rapid
obsolescence
of
data
processing
equipment
program
written
for
a
particular
system
required
tedious
conversion
as
incompatible
new
machines
came
into
use
the
ibm
system
360
has
been
designed
with
the
conversion
problem
specifically
in
mind
one
of
the
conversion
aids
available
on
the
model
30
is
the
1401
compatibility
feature
this
feature
in
conjunction
with
other
aids
permits
a
smooth
and
inexpensive
transition
to
optimum
use
of
the
new
system
cacm
december
1965
mccormack
m
a
schansman
t
t
womack
k
k
ca651208
jb
march
6
1978
3
55
pm
1161
5
1161
1161
5
1161
1161
5
1161
</TEXT>
</DOC>
<DOC>
<DOCNO>1162</DOCNO>
<TEXT>
an
assembly
language
for
reprogramming
complete
reprogramming
of
compiler
language
programs
is
seldom
necessary
it
is
assembly
language
programs
which
present
the
greatest
difficulty
assembly
languages
generally
provide
a
one
for
one
translation
from
a
symbolic
to
a
numeric
version
of
a
program
that
is
from
assembly
language
to
machine
language
the
meta
language
presented
here
can
be
used
to
specify
the
mapping
of
any
language
which
conforms
to
a
canonical
list
form
into
an
arbitrary
stream
of
bits
this
bit
stream
may
be
treated
as
a
machine
language
program
a
character
stream
or
whatever
else
the
user
might
desire
thus
this
meta
language
can
be
used
to
map
from
one
assembly
language
into
another
or
from
the
assembly
language
for
one
machine
into
the
machine
language
of
another
cacm
december
1965
graham
m
l
ingerman
p
z
ca651207
jb
march
6
1978
4
01
pm
1162
5
1162
1162
5
1162
1162
5
1162
1565
5
1162
1162
6
1162
1358
6
1162
1455
6
1162
205
6
1162
</TEXT>
</DOC>
<DOC>
<DOCNO>1163</DOCNO>
<TEXT>
philco
ibm
translation
at
problem
oriented
symbolic
and
binary
levels
a
translation
system
has
been
developed
to
eliminate
most
of
the
effort
formerly
required
to
reprogram
philco
2000
series
codes
for
ibm
7094
operation
experience
with
this
system
is
limited
but
highly
successful
encouraging
application
of
the
techniques
to
other
source
and
object
languages
cacm
december
1965
olsen
t
m
ca651206
jb
march
6
1978
4
05
pm
1163
5
1163
1163
5
1163
1163
5
1163
</TEXT>
</DOC>
<DOC>
<DOCNO>1164</DOCNO>
<TEXT>
emulation
of
large
systems
the
conversion
problem
and
a
new
technique
called
emulation
are
discussed
the
technique
of
emulation
is
developed
and
includes
sections
on
both
the
central
processing
unit
cpu
and
the
input
output
unit
i
o
this
general
treatment
is
followed
by
three
sections
that
describe
in
greater
detail
the
implementation
of
compatibility
features
using
the
emulation
techniques
for
the
ibm
7074
7080
and
7090
systems
on
ibm
system
360
cacm
december
1965
tucker
s
g
ca651205
jb
march
6
1978
4
09
pm
1164
5
1164
1164
5
1164
1164
5
1164
</TEXT>
</DOC>
<DOC>
<DOCNO>1165</DOCNO>
<TEXT>
the
spectra
70
45
emulator
for
the
rca
301
the
rca
301
emulator
system
is
supplied
with
the
spectra
70
45
as
a
reprogramming
aid
it
allows
an
rca
301
object
program
to
be
run
on
the
spectra
70
45
without
necessitating
changes
in
the
rca
301
object
code
execution
rates
are
considerably
better
than
traditional
simulation
the
emulator
provides
an
increase
in
throughput
capacity
for
the
301
user
on
the
spectra
70
45
the
emulator
makes
use
of
both
hardware
micro
program
routines
and
software
routines
to
accomplish
its
function
cacm
december
1965
benjamin
r
i
ca651204
jb
march
6
1978
4
15
pm
1165
5
1165
1165
5
1165
1165
5
1165
</TEXT>
</DOC>
<DOC>
<DOCNO>1166</DOCNO>
<TEXT>
a
use
of
macros
in
translation
of
symbolic
assembly
language
of
one
computer
to
another
a
set
of
macro
operations
has
been
prepared
to
assist
in
translating
ibm
7090
symbolic
assembly
language
programs
to
ibm
7040
machine
language
programs
this
set
inserted
at
the
beginning
of
the
7090
symbolic
deck
treats
incompatible
instruction
mnemonics
as
macro
instructions
to
produce
equivalent
7040
instruction
sets
incompatible
instructions
are
categorized
into
basic
operational
classes
which
can
be
expressed
by
a
single
basic
skeleton
several
levels
of
macro
calls
are
required
to
supply
arguments
to
the
basic
skeleton
for
each
particular
instruction
modification
at
execution
time
of
the
address
or
tag
of
an
incompatible
instruction
requires
incorporation
of
an
address
tag
equivalent
i
o
is
handled
by
generating
calls
to
i
o
simulation
subroutines
cacm
december
1965
dellert
jr
g
t
ca651203
jb
march
6
1978
4
20
pm
1166
5
1166
1166
5
1166
1166
5
1166
</TEXT>
</DOC>
<DOC>
<DOCNO>1167</DOCNO>
<TEXT>
on
the
translation
of
machine
language
programs
automatic
translation
of
machine
language
programs
is
becoming
a
highly
desirable
goal
with
the
advent
of
new
large
scale
computers
the
pitfalls
that
make
it
difficult
to
achieve
completely
automatic
translations
are
analyzed
and
it
is
shown
that
these
are
primarily
of
a
semantic
nature
a
semi
automatic
procedure
for
resolving
semantic
problems
is
suggested
cacm
december
1965
gaines
r
s
ca651202
jb
march
6
1978
4
23
pm
1167
5
1167
1167
5
1167
1167
5
1167
</TEXT>
</DOC>
<DOC>
<DOCNO>1168</DOCNO>
<TEXT>
across
machine
lines
in
cobol
the
production
of
a
large
file
maintenance
and
retrieval
program
system
written
in
cobol
is
described
the
cobol
language
was
used
specifically
to
enable
the
system
to
operate
on
three
ibm
computers
cacm
december
1965
fredericks
d
s
warburtin
c
r
ca651201
jb
march
6
1978
4
26
pm
1168
5
1168
1168
5
1168
1168
5
1168
</TEXT>
</DOC>
<DOC>
<DOCNO>1169</DOCNO>
<TEXT>
an
algorithm
for
minimizing
backboard
wiring
functions
a
partially
exhaustive
algorithm
is
presented
for
solving
the
following
problem
arising
from
automatic
layout
of
a
computer
given
an
ordered
set
e1
e2
en
of
n
computer
components
for
each
permutation
of
the
elements
e1
e2
en
there
is
attached
a
value
of
an
integer
function
f
the
algorithm
finds
a
local
minimum
of
f
by
evaluating
the
set
delta
f
of
the
increments
corresponding
to
a
certain
set
of
exchanges
of
two
elementshen
the
exchange
corresponding
to
the
least
negative
increment
of
delta
f
is
performed
the
process
is
iterated
and
stopped
when
the
set
of
the
increments
is
a
positive
or
empty
set
which
it
is
proved
corresponds
to
a
minimum
the
procedure
is
similar
to
the
downhill
method
for
finding
the
minimum
of
a
real
function
f
p
and
can
be
applied
to
other
placement
problems
experimental
results
are
presented
with
backboards
formed
by
many
elements
and
different
initial
placements
cacm
november
1965
pomentale
t
ca651112
jb
march
6
1978
4
35
pm
1169
5
1169
1169
5
1169
1169
5
1169
</TEXT>
</DOC>
<DOC>
<DOCNO>1170</DOCNO>
<TEXT>
analyzing
english
syntax
with
a
pattern
learning
parser
a
dependency
analysis
system
based
on
pattern
recognition
and
learning
logic
was
developed
to
infer
word
classes
and
rules
of
syntactic
combination
from
experience
with
text
which
had
been
analyzed
the
characteristics
used
to
form
word
classes
are
the
depth
in
the
dependency
tree
of
each
word
the
direction
of
its
governor
and
the
same
features
for
each
of
its
immediate
neighbors
syntactic
rules
of
combination
show
the
relation
of
a
word
to
its
governor
in
the
depth
pattern
of
the
sentence
the
system
was
tested
on
400
elementary
basic
english
sentences
including
300
used
earlier
by
knowlton
in
a
different
learning
parser
of
all
400
sentences
after
experience
with
300
sentences
it
was
able
to
generalize
with
77
percent
accuracy
to
the
next
100
in
accumulative
learning
trials
after
the
first
200
sentences
it
averaged
a
probability
of
9
for
accurately
parsing
each
new
sentence
it
encountered
it
was
concluded
that
the
system
is
adequate
for
learning
to
parse
the
bulk
of
basic
english
but
that
further
development
is
required
before
conclusions
about
its
application
to
ordinary
english
can
be
stored
the
system
is
operational
and
available
on
the
arpa
sdc
time
shared
computing
system
cacm
november
1965
mcconlogue
k
simmons
r
f
ca651111
jb
march
6
1978
4
45
pm
1170
5
1170
1170
5
1170
1170
5
1170
</TEXT>
</DOC>
<DOC>
<DOCNO>1171</DOCNO>
<TEXT>
a
comparison
of
the
primal
simplex
and
primal
dual
algorithms
for
linear
programming
a
statistical
comparison
of
the
primal
dual
and
the
more
commonly
used
primal
simplex
algorithm
for
solving
linear
programming
problems
has
been
made
under
the
assumption
of
starting
with
a
full
artificial
basis
under
these
conditions
the
primal
dual
method
shows
a
statistically
significant
superiority
on
randomly
generated
problems
it
has
also
been
found
via
a
regression
analysis
that
the
relevant
parameters
in
determining
the
difference
in
the
number
of
iterations
between
the
algorithms
is
not
only
the
number
of
constraints
and
the
number
of
variables
but
also
the
ratio
of
the
latter
to
the
former
cacm
november
1965
mueller
r
k
cooper
l
ca651110
jb
march
6
1978
4
50
pm
1171
5
1171
1171
5
1171
1171
5
1171
</TEXT>
</DOC>
<DOC>
<DOCNO>1172</DOCNO>
<TEXT>
conversion
of
limited
entry
decision
tables
to
computer
programs
decision
tables
are
useful
for
describing
a
set
of
complex
decision
rules
based
on
given
sets
of
conditions
algorithms
that
can
efficiently
convert
the
tables
into
computer
programs
will
extend
the
usefulness
of
decision
tables
to
computer
users
two
such
algorithms
based
on
work
done
by
m
s
montalbano
are
described
and
extended
here
to
handle
dashes
and
else
decision
rules
the
first
algorithm
minimizes
the
computer
storage
space
required
for
the
resultant
program
the
second
minimizes
computer
running
time
during
the
conversion
process
both
pinpoint
any
contradictions
or
redundancies
among
the
rules
in
a
table
cacm
november
1965
pollack
s
l
ca651109
jb
march
6
1978
4
56
pm
1172
5
1172
1172
5
1172
1172
5
1172
1354
5
1172
2053
5
1172
2220
5
1172
2273
5
1172
2453
5
1172
2598
5
1172
2726
5
1172
2856
5
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1172
6
1172
1237
6
1172
1237
6
1172
1237
6
1172
1237
6
1172
1327
6
1172
1327
6
1172
1327
6
1172
1327
6
1172
1327
6
1172
1327
6
1172
1354
6
1172
1354
6
1172
1354
6
1172
1354
6
1172
1354
6
1172
1354
6
1172
1488
6
1172
1489
6
1172
1489
6
1172
1548
6
1172
1548
6
1172
1548
6
1172
1684
6
1172
250
6
1172
2053
6
1172
2053
6
1172
2053
6
1172
2220
6
1172
2220
6
1172
2220
6
1172
2220
6
1172
2220
6
1172
2221
6
1172
2263
6
1172
2263
6
1172
2453
6
1172
2453
6
1172
2598
6
1172
2691
6
1172
753
6
1172
</TEXT>
</DOC>
<DOC>
<DOCNO>1173</DOCNO>
<TEXT>
the
performance
of
a
system
for
automatic
segmentation
of
programs
within
an
algol
compiler
gier
algol
the
gier
algol
compiler
makes
use
of
an
automatic
system
for
handling
the
transfers
of
program
segments
from
the
drum
store
to
the
core
store
at
program
execution
time
the
logic
of
this
system
is
described
the
performance
of
the
system
is
discussed
primarily
on
the
basis
of
execution
times
related
to
two
specific
programs
this
discussion
concludes
with
an
assessment
of
the
potential
gains
of
various
ways
of
improving
the
system
cacm
november
1965
naur
p
ca651108
jb
march
6
1978
5
00
pm
1173
4
1173
1188
4
1173
1173
5
1173
1173
5
1173
1173
5
1173
1774
5
1173
2343
5
1173
642
5
1173
800
6
1173
1173
6
1173
1173
6
1173
1774
6
1173
1845
6
1173
271
6
1173
</TEXT>
</DOC>
<DOC>
<DOCNO>1174</DOCNO>
<TEXT>
inverse
permutation
algorithm
250
g6
cacm
november
1965
medlock
c
w
ca651107
jb
march
6
1978
5
01
pm
1174
5
1174
1174
5
1174
1174
5
1174
</TEXT>
</DOC>
<DOC>
<DOCNO>1175</DOCNO>
<TEXT>
quickersort
algorithm
271
m1
cacm
november
1965
scowen
r
s
ca651106
jb
march
6
1978
5
02
pm
1175
4
1175
1175
4
1175
1919
4
1175
1919
4
1175
1969
4
1175
1997
4
1175
2017
4
1175
2041
4
1175
2191
4
1175
2216
4
1175
2388
4
1175
2679
4
1175
3054
4
1175
3121
4
1175
1175
5
1175
1175
5
1175
1175
5
1175
1919
5
1175
1969
5
1175
308
5
1175
2118
5
1175
2348
5
1175
2679
5
1175
3054
5
1175
864
5
1175
864
6
1175
970
6
1175
1175
6
1175
1175
6
1175
1175
6
1175
1175
6
1175
1175
6
1175
1175
6
1175
1190
6
1175
1228
6
1175
1880
6
1175
1919
6
1175
1969
6
1175
1969
6
1175
1980
6
1175
1997
6
1175
1997
6
1175
307
6
1175
308
6
1175
308
6
1175
308
6
1175
308
6
1175
309
6
1175
309
6
1175
2017
6
1175
2042
6
1175
2679
6
1175
74
6
1175
3187
6
1175
3187
6
1175
507
6
1175
716
6
1175
776
6
1175
783
6
1175
</TEXT>
</DOC>
<DOC>
<DOCNO>1176</DOCNO>
<TEXT>
finding
eigenvectors
by
gaussian
elimination
algorithm
270
f2
cacm
november
1965
newhouse
a
ca651105
jb
march
6
1978
5
03
pm
1176
5
1176
1176
5
1176
1176
5
1176
</TEXT>
</DOC>
<DOC>
<DOCNO>1177</DOCNO>
<TEXT>
determinant
evaluation
algorithm
269
f3
cacm
november
1965
pfann
j
ca651104
jb
march
6
1978
5
05
pm
1177
4
1177
806
4
1177
1177
5
1177
1177
5
1177
1177
5
1177
1931
5
1177
1946
5
1177
454
5
1177
878
6
1177
902
6
1177
1093
6
1177
1177
6
1177
1177
6
1177
1387
6
1177
1393
6
1177
311
6
1177
360
6
1177
731
6
1177
</TEXT>
</DOC>
<DOC>
<DOCNO>1178</DOCNO>
<TEXT>
algol
60
reference
language
editor
algorithm
268
r2
cacm
november
1965
mckeeman
w
m
ca651103
jb
march
6
1978
5
06
pm
1178
5
1178
1178
5
1178
1178
5
1178
</TEXT>
</DOC>
<DOC>
<DOCNO>1179</DOCNO>
<TEXT>
pufft
the
purdue
university
fast
fortran
translator
a
core
resident
compile
and
go
system
designed
for
the
ibm
7090
7094
computer
is
described
in
little
more
than
half
of
the
32k
word
core
memory
pufft
provides
a
monitor
for
job
sequencing
a
translator
for
the
full
fortran
iv
language
the
fortran
subroutine
library
an
input
output
system
for
use
at
compile
time
and
at
execute
time
and
a
rather
elaborate
diagnostic
message
writing
routine
batches
of
small
and
medium
sized
fortran
iv
source
language
programs
are
processed
at
very
high
speeds
language
compatibility
has
been
maintained
so
that
programs
may
be
debugged
in
the
pufft
system
and
then
recompiled
and
run
in
the
ibjob
ibftc
system
supplied
by
the
manufacturer
cacm
november
1965
rosen
s
spurgeon
a
donnelly
j
k
ca651102
jb
march
6
1978
6
17
pm
1134
4
1179
1179
4
1179
1179
4
1179
1288
4
1179
1544
4
1179
1646
4
1179
1861
4
1179
2111
4
1179
2534
4
1179
2556
4
1179
2650
4
1179
1179
5
1179
1179
5
1179
1179
5
1179
1646
5
1179
1647
5
1179
408
5
1179
830
5
1179
830
6
1179
987
6
1179
1072
6
1179
1179
6
1179
1179
6
1179
1647
6
1179
224
6
1179
680
6
1179
</TEXT>
</DOC>
<DOC>
<DOCNO>1180</DOCNO>
<TEXT>
axle
an
axiomatic
language
for
string
transformations
axle
is
a
language
designed
for
data
manipulation
data
arranged
in
a
linear
form
in
a
workspace
is
transformed
according
to
a
table
of
axioms
called
imperatives
a
transformation
consists
of
a
matching
procedure
which
decides
where
an
imperative
is
applicable
and
a
replacement
procedure
that
modifies
that
part
of
the
workspace
imperatives
are
applied
in
accordance
with
definitions
of
symbolic
terms
presented
systematically
in
an
assertion
table
the
process
of
definition
includes
the
special
case
of
recursive
assertions
several
complete
programs
of
imperatives
are
given
to
show
a
few
applications
of
the
language
cacm
november
1965
cohen
i
wegstein
j
h
ca651101
jb
march
6
1978
6
22
pm
1180
5
1180
1180
5
1180
1180
5
1180
1395
5
1180
1706
5
1180
1180
6
1180
1180
6
1180
1395
6
1180
210
6
1180
</TEXT>
</DOC>
<DOC>
<DOCNO>1181</DOCNO>
<TEXT>
a
simple
data
transmission
system
using
the
office
telephone
a
method
has
evolved
for
transmitting
data
of
a
type
originating
in
many
laboratory
situation
direct
to
a
central
computer
the
method
requires
almost
no
specialized
equipment
and
uses
any
ordinary
telephone
on
a
callup
basis
present
applications
include
cardiac
output
calculations
radio
activity
tracer
studies
and
neurophysiology
time
sequence
studies
of
nerve
impulses
cacm
october
1965
neilsen
i
r
ca651014
jb
march
6
1978
6
25
pm
1181
4
1181
1181
5
1181
1181
5
1181
1181
5
1181
698
5
1181
</TEXT>
</DOC>
<DOC>
<DOCNO>1182</DOCNO>
<TEXT>
contextual
correlates
of
synonymy
experimental
corroboration
was
obtained
for
the
hypothesis
that
the
proportion
of
words
common
to
the
contexts
of
word
a
and
to
the
contexts
of
word
b
is
a
function
of
the
degree
to
which
a
and
b
are
similar
in
meaning
the
shapes
of
the
functions
however
indicate
that
similarity
of
context
is
reliable
as
criterion
only
for
detecting
pairs
of
words
that
are
very
similar
in
meaning
cacm
october
1965
rubenstein
h
goodenough
j
b
ca651013
jb
march
6
1978
6
29
pm
1182
5
1182
1182
5
1182
1182
5
1182
</TEXT>
</DOC>
<DOC>
<DOCNO>1183</DOCNO>
<TEXT>
a
note
on
the
use
of
a
digital
computer
for
doing
tedious
algebra
and
programming
a
special
purpose
compiler
was
written
with
fortran
ii
language
and
made
possible
the
writing
of
very
long
programs
by
the
computer
the
procedure
is
based
on
a
straight
forward
use
of
format
statements
for
generating
machine
written
programs
cacm
october
1965
veronis
g
ca651012
jb
march
6
1978
6
31
pm
1183
5
1183
1183
5
1183
1183
5
1183
</TEXT>
</DOC>
<DOC>
<DOCNO>1184</DOCNO>
<TEXT>
a
fast
storage
allocator
a
fast
storage
bookkeeping
method
is
described
which
is
particularly
appropriate
for
list
structure
operations
and
other
situations
involving
many
sizes
of
blocks
that
are
fixed
in
size
and
location
this
scheme
used
in
the
llllll
or
l6
bell
telephone
laboratories
low
level
list
language
makes
available
blocks
of
computer
registers
in
several
different
sizes
the
smaller
blocks
are
obtained
by
successively
splitting
larger
ones
in
half
and
the
larger
blocks
are
reconstituted
if
and
when
their
parts
are
simultaneously
free
cacm
october
1965
knowlton
k
ca651011
jb
march
6
1978
6
35
pm
1184
5
1184
1184
5
1184
1184
5
1184
1389
5
1184
1552
5
1184
2162
5
1184
2435
5
1184
2596
5
1184
2768
5
1184
2845
5
1184
2902
5
1184
2955
5
1184
1051
6
1184
1062
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1184
6
1184
1211
6
1184
1389
6
1184
1421
6
1184
1552
6
1184
1879
6
1184
1879
6
1184
378
6
1184
2435
6
1184
2435
6
1184
2435
6
1184
2435
6
1184
2435
6
1184
2596
6
1184
2596
6
1184
2598
6
1184
2734
6
1184
2736
6
1184
2747
6
1184
2747
6
1184
2747
6
1184
2768
6
1184
2768
6
1184
2773
6
1184
</TEXT>
</DOC>
<DOC>
<DOCNO>1185</DOCNO>
<TEXT>
a
program
to
solve
the
pentomino
problem
by
the
recursive
use
of
macros
a
coding
technique
is
described
in
which
certain
macro
instructions
are
given
lists
as
arguments
and
are
thereby
used
recursively
the
discussion
covers
primarily
an
example
in
which
the
technique
is
used
to
solve
the
pentomino
problem
the
problem
of
fitting
12
pentominos
without
overlapping
into
a
plane
area
formed
of
60
elemental
squares
cacm
october
1965
fletcher
j
g
ca651010
jb
march
6
1978
6
37
pm
1185
5
1185
1185
5
1185
1185
5
1185
1531
5
1185
2707
5
1185
2753
5
1185
1185
6
1185
1185
6
1185
1185
6
1185
1455
6
1185
</TEXT>
</DOC>
<DOC>
<DOCNO>1186</DOCNO>
<TEXT>
recursive
solution
of
a
class
of
combinatorial
problems
an
example
combinatorial
problems
requiring
the
selection
of
n
elements
from
a
set
of
m
elements
may
be
solved
by
a
recursion
process
analogous
to
that
for
computing
binomial
coefficients
several
specific
problems
are
analyzed
the
general
technique
is
exposed
and
an
algol
program
is
developed
for
one
of
the
problems
cacm
october
1965
lynch
w
c
ca651009
jb
march
6
1978
6
40
pm
1186
5
1186
1186
5
1186
1186
5
1186
</TEXT>
</DOC>
<DOC>
<DOCNO>1187</DOCNO>
<TEXT>
note
on
an
ascii
octal
code
table
standards
cacm
october
1965
crosby
w
s
ca651008
jb
march
6
1978
6
42
pm
1187
5
1187
1187
5
1187
1187
5
1187
</TEXT>
</DOC>
<DOC>
<DOCNO>1188</DOCNO>
<TEXT>
an
algol
like
computer
design
language
the
idea
of
constructing
a
computer
design
language
by
making
use
of
an
algol
like
programming
language
is
presented
a
computer
designer
can
benefit
from
using
a
design
language
at
a
higher
level
just
as
a
computer
user
can
benefit
from
a
higher
level
programming
language
the
purposes
and
requirements
of
the
design
language
are
enumerated
to
achieve
most
of
the
purposes
a
translator
is
required
to
translate
a
design
of
computer
logic
into
a
set
of
boolean
equations
the
design
language
is
presented
in
terms
of
vocabulary
statements
sequences
and
microprogram
included
are
examples
of
identifiers
expressions
with
both
unary
and
binary
operators
declaration
statements
transfer
statements
terminal
statements
exchange
statements
if
statements
do
statements
go
to
statements
several
sequences
and
a
microprogram
cacm
october
1965
chu
y
ca651007
jb
march
6
1978
6
48
pm
249
4
1188
254
4
1188
272
4
1188
1102
4
1188
1109
4
1188
1140
4
1188
1173
4
1188
1188
4
1188
1188
4
1188
1306
4
1188
1464
4
1188
1491
4
1188
1767
4
1188
1781
4
1188
1787
4
1188
1949
4
1188
321
4
1188
2059
4
1188
2126
4
1188
435
4
1188
437
4
1188
463
4
1188
483
4
1188
491
4
1188
2732
4
1188
560
4
1188
583
4
1188
3073
4
1188
627
4
1188
631
4
1188
632
4
1188
642
4
1188
644
4
1188
653
4
1188
680
4
1188
761
4
1188
762
4
1188
763
4
1188
123
4
1188
140
4
1188
919
4
1188
989
4
1188
196
5
1188
1188
5
1188
1188
5
1188
1188
5
1188
642
5
1188
</TEXT>
</DOC>
<DOC>
<DOCNO>1189</DOCNO>
<TEXT>
random
normal
deviate
algorithm
267
g5
cacm
october
1965
pike
m
c
ca651006
jb
march
6
1978
6
49
pm
1189
5
1189
1189
5
1189
1189
5
1189
1716
5
1189
1189
6
1189
</TEXT>
</DOC>
<DOC>
<DOCNO>1190</DOCNO>
<TEXT>
pseudo
random
numbers
algorithm
266
g5
cacm
october
1965
pike
m
c
hill
i
d
ca651005
jb
march
6
1978
6
51
pm
1190
4
1190
1190
5
1190
1190
5
1190
1190
5
1190
1663
5
1190
2195
5
1190
2679
5
1190
456
5
1190
970
6
1190
1175
6
1190
1190
6
1190
1190
6
1190
1190
6
1190
1228
6
1190
1648
6
1190
1969
6
1190
1997
6
1190
308
6
1190
2042
6
1190
3187
6
1190
507
6
1190
716
6
1190
783
6
1190
</TEXT>
</DOC>
<DOC>
<DOCNO>1191</DOCNO>
<TEXT>
find
precedence
functions
algorithm
265
l2
cacm
october
1965
wirth
n
ca651004
jb
march
6
1978
6
52
pm
1191
5
1191
1191
5
1191
1191
5
1191
1836
5
1191
2340
5
1191
1191
6
1191
1191
6
1191
1477
6
1191
1491
6
1191
1491
6
1191
1683
6
1191
1781
6
1191
1836
6
1191
577
6
1191
</TEXT>
</DOC>
<DOC>
<DOCNO>1192</DOCNO>
<TEXT>
interpolation
in
a
table
algorithm
264
e1
cacm
october
1965
stafford
j
ca651003
jb
march
6
1978
6
52
pm
1192
5
1192
1192
5
1192
1192
5
1192
</TEXT>
</DOC>
<DOC>
<DOCNO>1193</DOCNO>
<TEXT>
gomory
1
algorithm
263
h
cacm
october
1965
langmaack
h
ca651002
jb
march
6
1978
6
54
pm
1193
5
1193
1193
5
1193
1193
5
1193
</TEXT>
</DOC>
<DOC>
<DOCNO>1194</DOCNO>
<TEXT>
establishment
of
the
acm
repository
and
principles
of
the
ir
system
applied
to
its
operation
the
history
of
the
establishment
of
the
acm
repository
at
the
moore
school
university
of
pennsylvania
is
reviewed
briefly
two
principles
are
presented
as
paramount
in
the
provision
of
information
services
1
easy
accessibility
to
the
information
files
by
users
unfamiliar
with
file
organization
and
2
value
of
service
exceeding
user
costs
these
principles
serve
as
guides
in
mechanizing
the
acm
repository
the
main
features
of
the
information
system
are
direct
user
access
via
on
line
teletypewriter
console
direct
user
access
to
all
details
of
the
system
organization
unrestricted
and
expandable
search
vocabulary
user
access
through
many
facets
of
document
indexing
and
stochastic
search
through
linked
index
terms
and
other
file
relationships
the
first
contribution
to
the
acm
repository
consisted
of
315
documents
relating
primarily
to
early
research
on
compilers
these
documents
have
been
cataloged
and
indexed
and
the
catalog
is
scheduled
to
appear
in
computing
reviews
the
indexing
system
is
described
in
detail
the
main
catalog
is
used
to
describe
the
documents
and
inverted
lists
are
provided
by
the
repository
system
for
retrieval
by
concept
coordination
cacm
october
1965
rubinoff
m
white
jr
j
f
ca651001
jb
march
6
1978
7
03
pm
1194
5
1194
1194
5
1194
1194
5
1194
1681
5
1194
1699
5
1194
1194
6
1194
1194
6
1194
1324
6
1194
1681
6
1194
</TEXT>
</DOC>
<DOC>
<DOCNO>1195</DOCNO>
<TEXT>
uplifts
university
of
pittsburgh
linear
file
tandem
system
a
series
of
computer
programs
has
been
developed
and
is
now
operational
for
processing
the
national
aeronautics
and
space
administration
linear
file
system
on
an
ibm
1401
7090
combined
data
processing
system
the
program
are
note
worthy
in
that
they
create
fixed
length
logical
records
and
fixed
length
blocks
from
variable
length
source
data
and
format
the
output
for
optimization
of
processing
on
the
ibm
7090
system
the
programs
are
completely
self
checking
and
test
for
both
validity
and
accuracy
of
the
input
materials
as
provided
by
the
national
aeronautics
and
space
administration
cacm
september
1965
canter
j
d
donaghey
c
e
ca650911
jb
march
6
1978
7
10
pm
1195
5
1195
1195
5
1195
1195
5
1195
</TEXT>
</DOC>
<DOC>
<DOCNO>1196</DOCNO>
<TEXT>
applications
of
differential
equations
in
general
problem
solving
a
large
class
of
problems
leading
to
digital
computer
processing
can
be
formulated
in
terms
of
the
numerical
solution
of
systems
of
ordinary
differential
equations
powerful
methods
are
in
existence
for
the
solution
of
such
systems
a
good
general
purpose
routine
for
the
solution
of
such
systems
furnishes
a
powerful
tool
for
processing
many
problems
this
is
true
from
the
point
of
view
of
ease
of
programming
ease
of
debugging
and
minimization
of
computer
time
a
number
of
examples
are
discussed
in
detail
cacm
september
1965
klopfenstein
r
w
ca650910
jb
march
6
1978
7
16
pm
1196
5
1196
1196
5
1196
1196
5
1196
</TEXT>
</DOC>
<DOC>
<DOCNO>1197</DOCNO>
<TEXT>
finding
zeros
of
a
polynomial
by
the
q
d
algorithm
a
method
which
finds
simultaneously
all
the
zeros
of
a
polynomial
developed
by
h
rutishauser
has
been
tested
on
a
number
of
polynomials
with
real
coefficients
this
slowly
converging
method
the
quotient
difference
q
d
algorithm
provides
starting
values
for
a
newton
or
a
bairstow
algorithm
for
more
rapid
convergence
necessary
and
sufficient
conditions
for
the
existence
of
the
q
d
scheme
are
not
completely
known
however
failure
may
occur
when
zeros
have
equal
or
nearly
equal
magnitudes
success
was
achieved
in
most
of
the
cases
tried
with
the
failures
usually
traceable
to
the
equal
magnitude
difficulty
in
some
cases
computer
roundoff
may
result
in
errors
which
spoil
the
scheme
even
if
the
q
d
algorithm
does
not
give
all
the
zeros
it
will
usually
find
a
majority
of
them
cacm
september
1965
henrich
p
watkins
b
o
ca650908
jb
march
6
1978
7
21
pm
1197
5
1197
1197
5
1197
1197
5
1197
1524
5
1197
879
6
1197
1197
6
1197
311
6
1197
</TEXT>
</DOC>
<DOC>
<DOCNO>1198</DOCNO>
<TEXT>
solution
of
a
problem
in
concurrent
programming
control
a
number
of
mainly
independent
sequential
cyclic
processes
with
restricted
means
of
communication
with
each
other
can
be
made
in
such
a
way
that
at
any
moment
one
and
only
one
of
them
is
engaged
in
the
critical
section
of
its
cycle
cacm
september
1965
dijkstra
e
w
ca650908
jb
march
6
1978
7
24
pm
1198
5
1198
1198
5
1198
1198
5
1198
1781
5
1198
2150
5
1198
2228
5
1198
2256
5
1198
2317
5
1198
2342
5
1198
2376
5
1198
2618
5
1198
3184
5
1198
123
6
1198
196
6
1198
919
6
1198
990
6
1198
1007
6
1198
1046
6
1198
1131
6
1198
1139
6
1198
1140
6
1198
1149
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1198
6
1198
1215
6
1198
1223
6
1198
1265
6
1198
1303
6
1198
1323
6
1198
1338
6
1198
1338
6
1198
1338
6
1198
1338
6
1198
1338
6
1198
1358
6
1198
1366
6
1198
1421
6
1198
1460
6
1198
1462
6
1198
1463
6
1198
1467
6
1198
1468
6
1198
1477
6
1198
1491
6
1198
1496
6
1198
1531
6
1198
1535
6
1198
1565
6
1198
1572
6
1198
1601
6
1198
1602
6
1198
1613
6
1198
1614
6
1198
1626
6
1198
1641
6
1198
1693
6
1198
1749
6
1198
1749
6
1198
1749
6
1198
1749
6
1198
1749
6
1198
1749
6
1198
1753
6
1198
1781
6
1198
1787
6
1198
1788
6
1198
205
6
1198
224
6
1198
249
6
1198
1877
6
1198
288
6
1198
1960
6
1198
316
6
1198
381
6
1198
398
6
1198
11
6
1198
2126
6
1198
2148
6
1198
2256
6
1198
404
6
1198
410
6
1198
463
6
1198
464
6
1198
483
6
1198
3184
6
1198
3188
6
1198
557
6
1198
584
6
1198
600
6
1198
680
6
1198
691
6
1198
763
6
1198
799
6
1198
</TEXT>
</DOC>
<DOC>
<DOCNO>1199</DOCNO>
<TEXT>
a
computer
center
simulation
project
today
computation
centers
are
based
on
rapidly
changing
technologies
of
hardware
and
software
systems
it
is
difficult
therefore
to
base
decisions
on
experience
in
most
instances
the
benefits
of
comparable
experience
for
a
given
problem
situation
are
not
available
in
this
paper
a
mathematical
model
of
the
lockheed
central
computer
center
is
formulated
that
describes
the
operation
of
a
computation
center
in
terms
of
information
nets
decision
processes
and
control
functions
experiments
performed
with
this
model
the
results
of
the
experiments
and
the
application
of
the
results
are
discussed
cacm
september
1965
hutchinson
g
k
ca650907jb
march
6
1978
7
29
pm
1199
5
1199
1199
5
1199
1199
5
1199
</TEXT>
</DOC>
<DOC>
<DOCNO>1200</DOCNO>
<TEXT>
on
reversible
subroutines
and
computers
that
run
backwards
a
computer
design
is
describe
which
permits
subroutines
to
be
executed
backward
as
well
as
forward
either
with
their
instructions
unchanged
or
replaced
with
conjugate
instructions
it
is
shown
that
using
this
concept
a
number
of
new
subroutine
types
can
be
developed
with
rather
unusual
properties
since
these
properties
are
analogous
to
certain
matrix
operations
a
parallel
nomenclature
is
suggested
for
their
classification
cacm
september
1965
reily
e
d
federighi
f
d
ca650906
jb
march
6
19787
33
pm
1200
5
1200
1200
5
1200
1200
5
1200
1945
5
1200
823
6
1200
914
6
1200
915
6
1200
917
6
1200
984
6
1200
989
6
1200
990
6
1200
1012
6
1200
1084
6
1200
1098
6
1200
1122
6
1200
1138
6
1200
1139
6
1200
1141
6
1200
1200
6
1200
1223
6
1200
1265
6
1200
1336
6
1200
1396
6
1200
1455
6
1200
1477
6
1200
1487
6
1200
1491
6
1200
1496
6
1200
483
6
1200
584
6
1200
669
6
1200
680
6
1200
763
6
1200
</TEXT>
</DOC>
<DOC>
<DOCNO>1201</DOCNO>
<TEXT>
generation
of
permutations
in
lexico
graphical
order
algorithm
202
g6
cacm
september
1965
elliott
r
w
ca650905
jb
march
6
1978
7
35
pm
1201
5
1201
1201
5
1201
1201
5
1201
</TEXT>
</DOC>
<DOC>
<DOCNO>1202</DOCNO>
<TEXT>
normal
random
algorithm
200
g5
cacm
september
1965
pike
m
c
ca650904
jb
march
6
1978
7
36
pm
1202
5
1202
1202
5
1202
1202
5
1202
</TEXT>
</DOC>
<DOC>
<DOCNO>1203</DOCNO>
<TEXT>
normdey
algorithm
121
g5
cacm
september
1965
pike
m
c
ca650903
jb
march
6
19787
37
pm
1203
5
1203
1203
5
1203
1203
5
1203
</TEXT>
</DOC>
<DOC>
<DOCNO>1204</DOCNO>
<TEXT>
character
structure
and
character
parity
sense
for
serial
by
bit
data
communication
in
the
american
standard
code
for
information
interchange
proposed
american
standard
cacm
september
1965
ca650902
jb
march
6
1978
7
41
pm
1204
5
1204
1204
5
1204
1204
5
1204
</TEXT>
</DOC>
<DOC>
<DOCNO>1205</DOCNO>
<TEXT>
an
undergraduate
program
in
computer
science
preliminary
recommendations
cacm
september
1965
a
report
from
the
acm
curriculum
committee
on
computer
science
ca650901
jb
march
6
1978
7
43
pm
1107
4
1205
1205
4
1205
1205
4
1205
1205
4
1205
1205
4
1205
1100
5
1205
1104
5
1205
1107
5
1205
1205
5
1205
1205
5
1205
1205
5
1205
1413
5
1205
1654
5
1205
1771
5
1205
2478
5
1205
68
5
1205
1205
6
1205
1205
6
1205
1205
6
1205
1205
6
1205
1270
6
1205
1654
6
1205
1771
6
1205
2329
6
1205
</TEXT>
</DOC>
<DOC>
<DOCNO>1206</DOCNO>
<TEXT>
the
self
judgment
method
of
curve
fitting
a
computer
oriented
method
for
processing
and
communicating
numerical
data
is
described
the
instrument
reliability
factors
irf
which
exactly
define
the
limits
of
reliability
of
each
measured
item
of
information
are
used
to
compute
the
maximum
permitted
error
mpe
associated
with
each
values
of
each
ordinate
the
self
judgment
principle
sjp
is
used
to
discard
wrong
information
and
to
compute
mean
values
of
the
parameters
and
their
mpe
in
terms
of
the
irf
data
compatibility
tests
with
any
number
of
different
equations
can
be
made
quickly
otherwise
intractable
problems
are
easily
solved
and
the
design
of
many
experiments
is
greatly
simplified
the
computational
and
mathematical
techniques
used
to
reduce
bias
in
the
sjp
are
discussed
inadequacies
in
the
statistical
and
graphical
methods
of
curve
fitting
are
noted
cacm
august
1965
demaine
p
a
d
ca650818
jb
march
6
1978
7
50
pm
1206
5
1206
1206
5
1206
1206
5
1206
</TEXT>
</DOC>
<DOC>
<DOCNO>1207</DOCNO>
<TEXT>
remarks
on
simulation
of
boolean
functions
cacm
august
1965
dodd
g
g
ca650817
jb
march
6
1978
7
52
pm
1207
4
1207
1208
4
1207
3053
4
1207
1207
5
1207
1207
5
1207
1207
5
1207
1329
5
1207
</TEXT>
</DOC>
<DOC>
<DOCNO>1208</DOCNO>
<TEXT>
simulation
of
computer
logic
by
fortran
arithmetic
cacm
august
1965
weingarten
f
w
ca650816
jb
march
6
1978
7
53
pm
1207
4
1208
1208
4
1208
3053
4
1208
1208
5
1208
1208
5
1208
1208
5
1208
1329
5
1208
1409
5
1208
1208
6
1208
</TEXT>
</DOC>
<DOC>
<DOCNO>1209</DOCNO>
<TEXT>
negative
and
zero
subscripts
in
fortran
ii
programming
for
the
ibm
1620
cacm
august
1965
garber
m
s
ca650815
jb
march
6
1978
7
56
pm
1209
5
1209
1209
5
1209
1209
5
1209
</TEXT>
</DOC>
<DOC>
<DOCNO>1210</DOCNO>
<TEXT>
file
handling
within
fortran
this
note
describes
some
fortran
subroutines
to
facilitate
handling
of
tape
files
they
allow
symbolic
naming
of
information
files
without
violating
the
casual
scientific
programmer
idea
of
simplicity
some
comments
on
two
years
use
of
these
subroutines
are
given
cacm
august
1965
harrison
m
c
ca650814
jb
march
6
1978
7
59
pm
1210
5
1210
1210
5
1210
1210
5
1210
</TEXT>
</DOC>
<DOC>
<DOCNO>1211</DOCNO>
<TEXT>
a
note
on
storage
of
strings
a
method
for
storing
strings
is
described
which
uses
blocks
of
indefinite
size
and
is
therefore
completely
dynamic
its
relation
to
similar
schemes
is
discussed
cacm
august
1965
berztiss
a
t
ca650813
jb
march
6
1978
8
02
pm
1211
4
1211
1211
4
1211
1549
4
1211
1906
4
1211
2902
4
1211
2902
4
1211
1051
5
1211
1062
5
1211
1211
5
1211
1211
5
1211
1211
5
1211
2902
5
1211
1051
6
1211
1062
6
1211
1184
6
1211
1211
6
1211
1552
6
1211
1879
6
1211
2435
6
1211
2596
6
1211
2734
6
1211
2747
6
1211
2768
6
1211
</TEXT>
</DOC>
<DOC>
<DOCNO>1212</DOCNO>
<TEXT>
non
linear
extrapolation
and
two
point
boundary
value
problems
it
is
suggested
that
the
convergence
properties
of
the
usual
picard
successive
approximation
scheme
may
be
improved
through
use
of
non
linrar
extrapolation
techniques
a
numerical
example
is
provided
cacm
august
1965
bellman
r
kagiada
h
kalba
r
ca650812
jb
march
6
1978
8
05
pm
1212
5
1212
1212
5
1212
1212
5
1212
</TEXT>
</DOC>
<DOC>
<DOCNO>1213</DOCNO>
<TEXT>
dynamic
format
specifications
the
use
and
implementation
of
two
new
fortran
format
conversions
are
discussed
these
format
types
give
the
fortran
programmer
control
of
input
output
specifications
at
execution
time
cacm
august
1965
ranelletti
j
e
ca650811
jb
march
6
1978
8
07
pm
1213
5
1213
1213
5
1213
1213
5
1213
</TEXT>
</DOC>
<DOC>
<DOCNO>1214</DOCNO>
<TEXT>
some
experiments
in
algebraic
manipulation
by
computer
a
set
of
subroutines
to
allow
algebraic
manipulations
on
the
ibm
7094
computer
has
been
written
a
list
processor
slip
a
series
of
four
problems
of
increasing
difficulty
were
solved
using
these
routines
cacm
august
1965
lapidus
a
goldstein
m
ca650810
jb
march
6
1978
8
10
pm
1024
4
1214
1051
4
1214
1098
4
1214
1214
4
1214
1214
4
1214
1380
4
1214
1388
4
1214
1393
4
1214
1396
4
1214
1485
4
1214
1487
4
1214
1549
4
1214
1570
4
1214
1878
4
1214
1946
4
1214
1957
4
1214
2168
4
1214
2723
4
1214
2857
4
1214
3112
4
1214
1132
5
1214
1214
5
1214
1214
5
1214
1214
5
1214
1396
5
1214
731
5
1214
964
6
1214
1028
6
1214
1029
6
1214
1083
6
1214
1132
6
1214
1214
6
1214
1278
6
1214
1334
6
1214
1365
6
1214
1386
6
1214
1387
6
1214
1388
6
1214
1392
6
1214
1393
6
1214
1394
6
1214
1395
6
1214
1396
6
1214
1397
6
1214
1496
6
1214
284
6
1214
407
6
1214
3199
6
1214
3200
6
1214
3201
6
1214
3202
6
1214
3203
6
1214
3204
6
1214
561
6
1214
730
6
1214
</TEXT>
</DOC>
<DOC>
<DOCNO>1215</DOCNO>
<TEXT>
some
techniques
used
in
the
alcor
illinois
7090
an
algol
compiler
has
been
written
by
the
alcor
group
for
the
ibm
7090
some
little
known
but
significant
techniques
in
compiler
writing
together
with
organizational
details
of
this
compiler
are
described
timing
estimates
and
an
indication
of
compiler
requirements
are
also
given
cacm
august
1965
gries
d
paul
m
wiehle
h
r
ca650809
jb
march
6
1978
8
13
pm
267
4
1215
1139
4
1215
1141
4
1215
1215
4
1215
1215
4
1215
1215
4
1215
1223
4
1215
1647
4
1215
1682
4
1215
1781
4
1215
1781
4
1215
1787
4
1215
1787
4
1215
1792
4
1215
1945
4
1215
364
4
1215
405
4
1215
438
4
1215
2603
4
1215
763
4
1215
1025
5
1215
1215
5
1215
1215
5
1215
1215
5
1215
224
5
1215
1498
5
1215
1781
5
1215
1787
5
1215
763
5
1215
123
6
1215
196
6
1215
196
6
1215
919
6
1215
990
6
1215
1007
6
1215
1046
6
1215
1131
6
1215
1139
6
1215
1140
6
1215
1141
6
1215
1149
6
1215
1198
6
1215
1215
6
1215
1215
6
1215
1215
6
1215
1223
6
1215
1265
6
1215
1303
6
1215
1323
6
1215
1358
6
1215
1366
6
1215
1421
6
1215
1460
6
1215
1462
6
1215
1463
6
1215
1467
6
1215
1468
6
1215
1477
6
1215
1491
6
1215
1491
6
1215
1496
6
1215
1496
6
1215
1531
6
1215
1535
6
1215
1565
6
1215
1601
6
1215
1602
6
1215
1613
6
1215
1614
6
1215
1626
6
1215
1641
6
1215
1781
6
1215
1787
6
1215
1788
6
1215
205
6
1215
224
6
1215
224
6
1215
249
6
1215
288
6
1215
316
6
1215
381
6
1215
398
6
1215
11
6
1215
404
6
1215
410
6
1215
463
6
1215
464
6
1215
483
6
1215
3184
6
1215
3184
6
1215
3188
6
1215
584
6
1215
600
6
1215
680
6
1215
691
6
1215
763
6
1215
763
6
1215
799
6
1215
799
6
1215
</TEXT>
</DOC>
<DOC>
<DOCNO>1216</DOCNO>
<TEXT>
symbolic
derivatives
without
list
processing
subroutines
or
recursion
a
routine
has
been
developed
which
computes
and
prints
out
the
symbolic
derivative
of
an
absolutely
continuous
elementary
function
of
one
or
several
variables
no
use
is
made
of
list
processing
languages
the
chain
rule
is
applied
and
the
result
is
edited
to
produce
results
as
elegant
and
efficient
as
those
obtained
by
hand
computation
a
subset
may
be
imbeded
in
a
formula
translator
to
introduce
a
differentiation
operator
into
an
algebraic
programming
language
cacm
august
1965
smith
p
j
ca650808
jb
march
6
1978
8
18
pm
1028
4
1216
1028
4
1216
1216
4
1216
1216
4
1216
1216
4
1216
1278
4
1216
1278
4
1216
1347
4
1216
1347
4
1216
1392
4
1216
1396
4
1216
1396
4
1216
1396
4
1216
1536
4
1216
964
4
1216
1028
5
1216
1029
5
1216
1216
5
1216
1216
5
1216
1216
5
1216
561
5
1216
</TEXT>
</DOC>
<DOC>
<DOCNO>1217</DOCNO>
<TEXT>
map
of
partitions
into
integers
algorithm
264
a1
cacm
august
1965
mckay
j
k
s
ca650807
jb
march
6
1978
8
19
pm
1217
5
1217
1217
5
1217
1217
5
1217
</TEXT>
</DOC>
<DOC>
<DOCNO>1218</DOCNO>
<TEXT>
partition
generator
algorithm
263
a1
cacm
august
1965
mckay
j
k
s
ca650806
jb
march
6
1978
8
20
pm
1218
5
1218
1218
5
1218
1218
5
1218
2103
5
1218
1218
6
1218
</TEXT>
</DOC>
<DOC>
<DOCNO>1219</DOCNO>
<TEXT>
number
of
restricted
partitions
of
n
algorithm
262
a1
cacm
august
1965
mckay
j
k
s
ca650805
jb
march
6
1978
8
26
pm
1219
5
1219
1219
5
1219
1219
5
1219
2104
5
1219
2489
5
1219
1219
6
1219
1219
6
1219
2104
6
1219
</TEXT>
</DOC>
<DOC>
<DOCNO>1220</DOCNO>
<TEXT>
9
j
symbols
algorithm
261
z
cacm
august
1965
gunn
j
h
ca650804
jb
march
6
1978
8
27
pm
1220
5
1220
1220
5
1220
1220
5
1220
</TEXT>
</DOC>
<DOC>
<DOCNO>1221</DOCNO>
<TEXT>
6
j
symbols
algorithm
260
z
cacm
august
1965
gunn
j
h
ca650803
jb
march
6
1978
8
28
pm
1221
5
1221
1221
5
1221
1221
5
1221
</TEXT>
</DOC>
<DOC>
<DOCNO>1222</DOCNO>
<TEXT>
legendre
functions
for
arguments
larger
than
one
algorithm
259
s16
cacm
august
1965
gautschi
w
ca650802
jb
march
6
1978
8
30
pm
1023
4
1222
1222
4
1222
1222
4
1222
1222
4
1222
1130
5
1222
1222
5
1222
1222
5
1222
1222
5
1222
245
5
1222
310
5
1222
</TEXT>
</DOC>
<DOC>
<DOCNO>1223</DOCNO>
<TEXT>
high
speed
compilation
of
efficient
object
code
a
three
pass
compiler
with
the
following
properties
is
briefly
described
the
last
two
passes
scan
an
intermediate
language
produced
by
the
preceding
pass
in
essentially
the
reverse
of
the
order
in
which
it
was
generated
so
that
the
first
pass
is
the
only
one
which
hasto
read
the
bulky
problem
oriented
input
the
double
scan
one
in
either
direction
performed
by
the
first
two
passes
allows
the
compiler
to
remove
locally
constant
expressions
and
recursively
calculable
expressions
from
loops
and
to
do
the
important
part
of
common
subexpression
recognition
optimization
such
as
the
effective
use
of
index
registers
although
as
important
is
not
discussed
since
the
object
code
which
would
be
most
efficient
is
highly
machine
dependent
the
discussion
is
in
terms
of
a
fortran
like
language
although
the
technique
is
applicable
to
most
algebraic
languages
cacm
august
1965
gear
c
w
ca650801
jb
march
6
1978
8
45
pm
267
4
1223
1139
4
1223
1141
4
1223
1215
4
1223
1223
4
1223
1223
4
1223
1388
4
1223
1647
4
1223
1781
4
1223
1787
4
1223
1792
4
1223
364
4
1223
405
4
1223
436
4
1223
438
4
1223
763
4
1223
1223
5
1223
1223
5
1223
1223
5
1223
224
5
1223
1781
5
1223
1807
5
1223
1945
5
1223
1947
5
1223
405
5
1223
823
6
1223
123
6
1223
196
6
1223
914
6
1223
915
6
1223
917
6
1223
919
6
1223
984
6
1223
989
6
1223
990
6
1223
990
6
1223
1007
6
1223
1012
6
1223
1046
6
1223
1084
6
1223
1098
6
1223
1122
6
1223
1131
6
1223
1134
6
1223
1138
6
1223
1139
6
1223
1139
6
1223
1140
6
1223
1141
6
1223
1149
6
1223
1198
6
1223
1200
6
1223
1215
6
1223
1223
6
1223
1223
6
1223
1223
6
1223
1223
6
1223
1248
6
1223
1248
6
1223
1265
6
1223
1265
6
1223
1303
6
1223
1323
6
1223
1336
6
1223
1358
6
1223
1366
6
1223
1396
6
1223
1421
6
1223
1455
6
1223
1460
6
1223
1462
6
1223
1463
6
1223
1467
6
1223
1468
6
1223
1477
6
1223
1477
6
1223
1487
6
1223
1491
6
1223
1491
6
1223
1496
6
1223
1496
6
1223
1531
6
1223
1535
6
1223
1551
6
1223
1565
6
1223
1601
6
1223
1602
6
1223
1613
6
1223
1614
6
1223
1626
6
1223
1641
6
1223
1787
6
1223
1788
6
1223
205
6
1223
224
6
1223
249
6
1223
288
6
1223
1947
6
1223
316
6
1223
381
6
1223
398
6
1223
399
6
1223
11
6
1223
404
6
1223
410
6
1223
463
6
1223
464
6
1223
483
6
1223
483
6
1223
3184
6
1223
3188
6
1223
584
6
1223
584
6
1223
600
6
1223
669
6
1223
680
6
1223
680
6
1223
691
6
1223
763
6
1223
763
6
1223
799
6
1223
</TEXT>
</DOC>
<DOC>
<DOCNO>1224</DOCNO>
<TEXT>
determining
a
computing
center
environment
an
investigation
is
described
in
which
several
generally
unavailable
parameters
descriptive
of
a
computing
center
environment
are
obtained
the
actual
data
collection
and
reduction
is
described
and
the
results
of
one
month
of
this
collection
are
tabulated
and
summarized
cacm
july
1965
rosin
r
f
ca650711
jb
march
6
1978
8
48
pm
1224
5
1224
1224
5
1224
1224
5
1224
1533
5
1224
1604
5
1224
1224
6
1224
1224
6
1224
1410
6
1224
1604
6
1224
</TEXT>
</DOC>
<DOC>
<DOCNO>1225</DOCNO>
<TEXT>
the
predictive
analyzer
and
a
path
elimination
technique
some
of
the
characteristic
features
of
a
predictive
analyzer
a
system
of
syntactic
analysis
now
operational
at
harvard
on
and
ibm
7094
are
delineated
the
advantages
and
disadvantages
of
the
system
are
discussed
in
comparison
to
those
of
an
immediate
constituent
analyzer
developed
at
the
rand
corporation
with
robinson
english
grammar
in
addition
a
new
technique
is
described
for
repetitive
path
elimination
for
a
predictive
analyzer
which
can
now
claim
efficiency
both
in
processing
time
and
core
storage
requirement
cacm
july
1965
kuno
s
ca650710
jb
march
6
1978
8
52
pm
1225
4
1225
1225
4
1225
1350
4
1225
1350
4
1225
1646
4
1225
1781
4
1225
1945
4
1225
1945
4
1225
2650
4
1225
2698
4
1225
2708
4
1225
3093
4
1225
1012
5
1225
1225
5
1225
1225
5
1225
1225
5
1225
1350
5
1225
1659
5
1225
1856
5
1225
2050
5
1225
680
5
1225
1012
6
1225
1225
6
1225
1225
6
1225
1225
6
1225
1225
6
1225
1265
6
1225
1265
6
1225
1324
6
1225
1350
6
1225
1399
6
1225
1553
6
1225
1671
6
1225
1697
6
1225
680
6
1225
</TEXT>
</DOC>
<DOC>
<DOCNO>1226</DOCNO>
<TEXT>
the
organization
of
structured
files
a
data
file
is
an
integral
part
of
a
data
processing
system
in
many
systems
the
selection
of
an
organization
for
the
data
within
the
file
can
be
critical
to
the
system
operating
efficiency
this
paper
provides
the
systems
designer
with
an
information
source
which
describes
ten
techniques
that
may
be
employed
for
organizing
structured
data
the
characteristics
of
the
organizations
described
are
application
independent
thus
providing
the
designer
with
a
reference
which
allows
him
to
limit
the
number
of
file
organizations
he
must
consider
for
his
system
cacm
july
1965
dzubak
b
j
warburton
c
r
ca650709
jb
march
6
1978
8
57
pm
1050
4
1226
1226
4
1226
441
4
1226
758
4
1226
1226
5
1226
1226
5
1226
1226
5
1226
367
5
1226
</TEXT>
</DOC>
<DOC>
<DOCNO>1227</DOCNO>
<TEXT>
transport
algorithm
258
h
cacm
july
1965
bayer
g
ca650708
jb
march
6
1978
8
58
pm
1227
5
1227
1227
5
1227
1227
5
1227
</TEXT>
</DOC>
<DOC>
<DOCNO>1228</DOCNO>
<TEXT>
treesort
3
algorithm
245
m1
cacm
july
1965
abrams
p
s
ca650707
jb
march
6
1978
8
59
pm
1228
5
1228
1228
5
1228
1228
5
1228
2042
5
1228
2679
5
1228
970
6
1228
970
6
1228
1175
6
1228
1190
6
1228
1228
6
1228
1228
6
1228
1969
6
1228
1997
6
1228
308
6
1228
2042
6
1228
3187
6
1228
507
6
1228
716
6
1228
783
6
1228
</TEXT>
</DOC>
<DOC>
<DOCNO>1229</DOCNO>
<TEXT>
random
permutation
algorithm
235
g6
cacm
july
1965
pike
m
c
ca650706
jb
march
6
1978
9
00
pm
1229
5
1229
1229
5
1229
1229
5
1229
</TEXT>
</DOC>
<DOC>
<DOCNO>1230</DOCNO>
<TEXT>
method
for
hyphenating
at
the
end
of
a
printed
line
a
description
of
a
method
of
hyphenation
is
presented
as
a
result
of
application
of
several
general
rules
the
character
sets
considered
by
the
routine
and
the
method
are
briefly
outlined
cacm
july
1965
rich
r
p
stone
a
g
ca650705
jb
march
6
1978
9
03
pm
1230
5
1230
1230
5
1230
1230
5
1230
</TEXT>
</DOC>
<DOC>
<DOCNO>1231</DOCNO>
<TEXT>
peephole
optimization
redundant
instructions
may
be
discarded
during
the
final
stage
of
compilation
by
using
a
simple
optimizing
technique
called
peephole
optimization
the
method
is
described
and
examplesare
given
cacm
july
1965
mckeeman
w
m
ca650704
jb
march
6
1978
9
05
pm
1160
5
1231
1231
5
1231
1231
5
1231
1231
5
1231
2034
5
1231
984
6
1231
1231
6
1231
1231
6
1231
1565
6
1231
1852
6
1231
1926
6
1231
1947
6
1231
</TEXT>
</DOC>
<DOC>
<DOCNO>1232</DOCNO>
<TEXT>
representation
of
the
standard
ecma
7
bit
code
in
punched
cards
ecma
standard
cacm
july
1965
ca650703
jb
march
6
1978
9
06
pm
1232
5
1232
1232
5
1232
1232
5
1232
</TEXT>
</DOC>
<DOC>
<DOCNO>1233</DOCNO>
<TEXT>
conventions
for
the
use
of
symbols
in
the
preparation
of
flowcharts
for
information
processing
systems
a
standard
working
paper
this
paper
is
intended
as
an
outline
of
the
various
conventions
which
are
being
considered
for
the
use
of
flowcharts
for
information
processing
systems
the
conventions
are
applied
to
the
use
of
the
symbols
appearing
in
the
proposed
american
standard
flowchart
symbols
and
not
with
the
symbols
per
se
cacm
july
1965
ca650702
jb
march
6
1978
9
10
pm
1233
5
1233
1233
5
1233
1233
5
1233
</TEXT>
</DOC>
<DOC>
<DOCNO>1234</DOCNO>
<TEXT>
the
structure
of
yet
another
algol
compiler
a
high
speed
top
down
method
of
syntax
analysis
which
completely
eliminates
back
up
of
the
source
string
has
been
implemented
in
a
convenient
macro
language
a
technique
of
simulation
at
compile
time
of
the
use
of
a
conventional
run
time
stack
enables
the
generation
of
code
for
expressions
which
minimizes
stores
fetches
and
stack
pointer
motion
at
run
time
while
properly
trating
recursion
and
side
effects
of
procedures
block
structure
and
recursion
are
handled
without
need
for
interpretive
methods
at
run
times
the
context
problem
in
the
transmission
to
recursive
procedures
of
parameters
called
by
name
is
solved
in
a
manner
which
permits
the
handling
of
the
common
cases
of
simple
expressions
and
array
identifiers
with
particular
efficiency
cacm
july
1965
kanner
h
kosinski
p
robinson
c
l
ca650701
jb
march
6
1978
9
29
pm
254
4
1234
1037
4
1234
1046
4
1234
1086
4
1234
1105
4
1234
1132
4
1234
1139
4
1234
1140
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1234
4
1234
1263
4
1234
1263
4
1234
1265
4
1234
1265
4
1234
1270
4
1234
1323
4
1234
1358
4
1234
1358
4
1234
1379
4
1234
1380
4
1234
1453
4
1234
1464
4
1234
1484
4
1234
1491
4
1234
1491
4
1234
1496
4
1234
1498
4
1234
1613
4
1234
1614
4
1234
1781
4
1234
1781
4
1234
1824
4
1234
1825
4
1234
1860
4
1234
321
4
1234
321
4
1234
2083
4
1234
2126
4
1234
2178
4
1234
2179
4
1234
2252
4
1234
2325
4
1234
2341
4
1234
2451
4
1234
2546
4
1234
2546
4
1234
464
4
1234
2645
4
1234
2652
4
1234
2684
4
1234
2842
4
1234
2929
4
1234
2934
4
1234
584
4
1234
3069
4
1234
631
4
1234
653
4
1234
669
4
1234
679
4
1234
680
4
1234
691
4
1234
761
4
1234
763
4
1234
795
4
1234
799
4
1234
945
4
1234
949
4
1234
989
4
1234
944
5
1234
1234
5
1234
1234
5
1234
1234
5
1234
321
5
1234
385
5
1234
400
5
1234
402
5
1234
404
5
1234
3184
5
1234
729
5
1234
</TEXT>
</DOC>
<DOC>
<DOCNO>1235</DOCNO>
<TEXT>
a
stochastic
approach
to
the
grammatical
coding
of
english
a
computer
program
is
described
which
will
assign
each
word
in
an
english
text
to
its
form
class
or
part
of
speech
the
program
operates
at
relatively
high
speed
in
only
a
limited
storage
space
about
half
of
the
word
events
in
a
corpus
are
identified
through
the
use
of
a
small
dictionary
of
function
words
and
frequently
occurring
lexical
words
some
suffix
tests
and
logical
decision
rules
are
employed
to
code
additional
words
finally
the
remaining
words
are
assigned
to
one
class
or
another
on
the
basis
of
the
most
probable
form
classes
to
occur
within
the
already
identified
contexts
the
conditional
probabilities
used
as
a
basis
for
this
coding
were
empirically
derived
from
a
separate
hand
coded
corpusn
preliminary
trials
the
accuracy
of
the
coder
was
91
to
93
with
obvious
ways
of
improving
the
algorithm
being
suggested
by
an
analysis
of
the
results
cacm
june
1965
stolz
w
s
tannenbaum
h
carstensen
f
v
ca650620
jb
march
6
1978
9
35
pm
1235
5
1235
1235
5
1235
1235
5
1235
</TEXT>
</DOC>
<DOC>
<DOCNO>1236</DOCNO>
<TEXT>
the
smart
automatic
document
retrieval
system
an
illustration
a
fully
automatic
document
retrieval
system
operating
on
the
ibm
7094
is
described
the
system
is
characterized
by
the
fact
that
several
hundred
different
methods
are
available
to
analyze
documents
and
search
requests
this
feature
is
used
in
the
retrieval
process
by
leaving
the
exact
sequence
of
operations
initially
unspecified
and
adapting
the
search
strategy
to
the
needs
of
individual
users
the
system
is
used
not
only
to
simulate
an
actual
operating
environment
but
also
to
test
the
effectiveness
of
the
various
available
processing
methods
results
obtained
so
far
seem
to
indicate
that
some
combination
of
analysis
procedures
can
in
general
be
relied
upon
to
retrieve
the
wanted
information
a
typical
search
request
is
used
as
an
example
in
the
present
report
to
illustrate
systems
operations
and
evaluation
procedures
cacm
june
1965
salton
g
lesk
m
e
ca650619
jb
march
6
1978
9
41
pm
1236
5
1236
1236
5
1236
1236
5
1236
1457
5
1236
1236
6
1236
</TEXT>
</DOC>
<DOC>
<DOCNO>1237</DOCNO>
<TEXT>
conversion
of
decision
tables
to
computer
programs
several
translation
procedures
for
the
conversion
of
decision
tables
to
programs
are
presented
and
then
evaluated
in
terms
of
storage
requirements
execution
time
and
compile
time
the
procedures
are
valuable
as
hand
coding
guides
or
as
algorithms
for
a
compiler
both
limited
entry
and
extended
entry
tables
are
analyzed
in
addition
to
table
analysis
the
nature
of
table
oriented
programming
languages
and
features
is
discussed
it
is
presumed
that
the
reader
is
familiar
with
the
nature
of
decision
tables
and
conventional
definitions
cacm
june
1965
press
l
i
ca650618
jb
march
6
1978
9
45
pm
250
4
1237
1237
4
1237
1237
4
1237
1237
4
1237
1549
4
1237
1564
4
1237
2220
4
1237
2453
4
1237
753
4
1237
1237
5
1237
1237
5
1237
1237
5
1237
1354
5
1237
250
5
1237
1488
5
1237
1994
5
1237
320
5
1237
2053
5
1237
2220
5
1237
2273
5
1237
753
5
1237
1172
6
1237
1172
6
1237
1172
6
1237
1172
6
1237
1237
6
1237
1237
6
1237
1237
6
1237
1237
6
1237
1237
6
1237
1237
6
1237
1327
6
1237
1327
6
1237
1327
6
1237
1327
6
1237
1327
6
1237
1354
6
1237
1354
6
1237
1354
6
1237
1489
6
1237
1548
6
1237
1684
6
1237
250
6
1237
2053
6
1237
2220
6
1237
</TEXT>
</DOC>
<DOC>
<DOCNO>1238</DOCNO>
<TEXT>
a
technique
for
integrated
reports
from
a
multi
run
system
the
requirements
of
a
requisition
accounting
system
for
the
san
francisco
overseas
supply
agency
osa
included
exception
reporting
to
osa
itself
the
simultaneous
satisfaction
of
the
reporting
requirement
and
the
accounting
requirements
posed
definite
problems
in
system
design
particularly
the
handling
of
the
reporting
function
a
practical
and
satisfactory
solution
was
developed
by
expanding
the
basic
system
with
two
tailored
service
runs
for
report
production
these
two
runs
permitted
a
final
system
that
was
easier
to
debug
easy
to
maintain
efficient
in
production
and
responsive
to
the
changing
requirements
of
osa
cacm
june
1965
budea
n
kamena
j
g
kamena
r
m
ca650617
jb
march
6
1978
9
49
pm
1238
5
1238
1238
5
1238
1238
5
1238
</TEXT>
</DOC>
<DOC>
<DOCNO>1239</DOCNO>
<TEXT>
graycode
algorithm
246
z
cacm
june
1965
allen
w
d
ca650616
jb
march
6
1978
9
50
pm
1239
5
1239
1239
5
1239
1239
5
1239
</TEXT>
</DOC>
<DOC>
<DOCNO>1240</DOCNO>
<TEXT>
transport
algorithm
258
h
cacm
june
1965
bayer
g
ca650615
jb
march
6
1978
9
51
pm
1240
5
1240
1240
5
1240
1240
5
1240
</TEXT>
</DOC>
<DOC>
<DOCNO>1241</DOCNO>
<TEXT>
havie
integrator
algorithm
257
d1
cacm
june
1965
kubik
r
n
ca650614
jb
march
6
1978
10
09
pm
1241
5
1241
1241
5
1241
1241
5
1241
1352
5
1241
1356
5
1241
1883
5
1241
2040
5
1241
834
6
1241
872
6
1241
1040
6
1241
1092
6
1241
1241
6
1241
1241
6
1241
1241
6
1241
1241
6
1241
1273
6
1241
1273
6
1241
1352
6
1241
1356
6
1241
324
6
1241
324
6
1241
429
6
1241
570
6
1241
621
6
1241
621
6
1241
786
6
1241
</TEXT>
</DOC>
<DOC>
<DOCNO>1242</DOCNO>
<TEXT>
modified
graeffe
method
algorithm
256
c2
cacm
june
1965
grau
a
a
ca650613
jb
march
6
1978
10
10
pm
1242
5
1242
1242
5
1242
1242
5
1242
1667
5
1242
178
6
1242
1242
6
1242
327
6
1242
</TEXT>
</DOC>
<DOC>
<DOCNO>1243</DOCNO>
<TEXT>
testing
the
understanding
of
the
difference
between
call
by
name
and
call
by
value
in
algol
60
cacm
june
1965
weil
r
l
ca650612
jb
march
6
1978
10
11
pm
1243
5
1243
1243
5
1243
1243
5
1243
</TEXT>
</DOC>
<DOC>
<DOCNO>1244</DOCNO>
<TEXT>
bit
manipulation
in
fortran
language
cacm
june
1965
tobey
g
d
ca650611
jb
march
6
1978
10
12
pm
1244
5
1244
1244
5
1244
1244
5
1244
</TEXT>
</DOC>
<DOC>
<DOCNO>1245</DOCNO>
<TEXT>
a
fortran
n
ary
counter
cacm
june
1965
kent
w
ca650610
jb
march
6
1978
10
13
pm
1245
5
1245
1245
5
1245
1245
5
1245
</TEXT>
</DOC>
<DOC>
<DOCNO>1246</DOCNO>
<TEXT>
deeply
nested
iterations
cacm
june
1965
korphage
r
r
ca650609
jb
march
6
1978
10
15
pm
1246
5
1246
1246
5
1246
1246
5
1246
</TEXT>
</DOC>
<DOC>
<DOCNO>1247</DOCNO>
<TEXT>
an
operating
environment
for
dynamic
recursive
computer
programming
systems
presented
in
this
paper
is
a
brief
nontechnical
introduction
to
oedipus
a
computer
programming
system
which
can
serve
as
an
operating
environment
for
dynamic
and
or
recursive
programs
and
programming
systems
the
available
services
include
dynamic
allocation
of
storage
for
contiguous
blocks
of
arbitrary
size
input
and
output
for
a
hierarchy
of
data
types
a
public
pushdown
list
for
automatic
recursive
programming
a
rudimentary
compiler
for
subroutine
communication
and
bookkeeping
and
debugging
aids
cacm
june
1965
brown
w
s
ca650608
jb
march
6
1978
10
18
pm
1247
4
1247
1945
4
1247
1247
5
1247
1247
5
1247
1247
5
1247
1336
5
1247
1397
5
1247
2704
5
1247
1247
6
1247
1247
6
1247
1552
6
1247
1749
6
1247
2356
6
1247
2379
6
1247
2673
6
1247
</TEXT>
</DOC>
<DOC>
<DOCNO>1248</DOCNO>
<TEXT>
on
the
automatic
simplification
of
computer
programs
presented
in
this
paper
is
the
problem
of
writing
a
program
which
would
examine
any
other
program
and
perform
such
simplifications
on
it
as
can
be
detected
from
the
argument
program
form
alone
without
having
any
knowledge
of
what
it
is
supposed
to
do
cacm
june
1965
nievergelt
j
ca650607
jb
march
6
1978
10
24
pm
1248
5
1248
1248
5
1248
1248
5
1248
1625
5
1248
1807
5
1248
1947
5
1248
1134
6
1248
1223
6
1248
1223
6
1248
1248
6
1248
1248
6
1248
1248
6
1248
1551
6
1248
1947
6
1248
399
6
1248
669
6
1248
</TEXT>
</DOC>
<DOC>
<DOCNO>1249</DOCNO>
<TEXT>
recorded
magnetic
tape
for
information
interchange
200
cpi
nrzi
on
the
revised
proposed
american
standard
cacm
june
1965
ca650606
jb
march
6
1978
10
26
pm
1249
5
1249
1249
5
1249
1249
5
1249
</TEXT>
</DOC>
<DOC>
<DOCNO>1250</DOCNO>
<TEXT>
graphic
symbols
for
problem
definition
and
analysis
a
standards
working
paper
cacm
june
1965
ca650605
jb
march
7
1978
12
35
pm
1250
5
1250
1250
5
1250
1250
5
1250
</TEXT>
</DOC>
<DOC>
<DOCNO>1251</DOCNO>
<TEXT>
american
standard
and
ifip
icc
vocabularies
compared
the
proposed
american
standard
vocabulary
of
information
processing
and
the
ifip
icc
vocabulary
of
terms
used
in
information
processing
are
analyzed
and
compared
cacm
june
1965
traub
j
f
ca650604
jb
march
7
1978
12
38
pm
1251
4
1251
975
5
1251
1251
5
1251
1251
5
1251
1251
5
1251
</TEXT>
</DOC>
<DOC>
<DOCNO>1252</DOCNO>
<TEXT>
symbolic
notations
for
statistical
tables
and
an
approach
towards
automatic
system
design
the
preparation
of
statistical
tables
is
an
important
function
of
the
data
processing
systems
of
some
organizations
and
a
symbolic
notation
for
the
description
of
tables
has
been
shown
to
be
a
useful
aid
to
documentation
such
a
notation
also
provides
the
first
step
towards
making
automatic
a
tedious
and
time
consuming
part
of
system
design
and
programming
in
many
computer
applications
one
notation
is
described
and
suggestions
are
made
for
the
implementation
of
the
larger
goal
cacm
june
1965
smith
b
w
ca650603
jb
march
7
1978
12
41
pm
1252
5
1252
1252
5
1252
1252
5
1252
</TEXT>
</DOC>
<DOC>
<DOCNO>1253</DOCNO>
<TEXT>
quikscript
a
simscript
like
language
for
the
g
20
quikscript
is
a
simulation
language
based
on
simscript
and
programmed
entirely
in
an
algebraic
language
20
gate
the
quikscript
language
its
internal
implementation
and
major
differences
between
quikscript
and
simscript
are
presented
this
paper
is
not
a
programming
guide
to
the
language
but
rather
an
attempt
to
present
its
flavor
a
brief
description
of
simscript
is
included
as
is
a
sufficient
description
of
20
gate
to
render
this
material
understandable
to
the
reader
familiar
with
algebraic
languages
cacm
june
1965
tonge
f
m
keller
p
newell
a
ca650602
jb
march
7
1978
12
45
pm
1253
5
1253
1253
5
1253
1253
5
1253
</TEXT>
</DOC>
<DOC>
<DOCNO>1254</DOCNO>
<TEXT>
the
iteration
element
a
recent
addition
to
the
mad
language
has
made
the
iteration
structure
of
the
mad
through
statement
corresponding
to
the
algol
for
statement
and
the
fortran
do
statement
available
within
expressions
cacm
june
1965
galler
b
a
fischer
m
j
ca650601
jb
march
7
1978
12
49
pm
1254
5
1254
1254
5
1254
1254
5
1254
</TEXT>
</DOC>
<DOC>
<DOCNO>1255</DOCNO>
<TEXT>
a
method
of
data
list
processing
with
application
to
eeg
analysis
a
set
of
subroutines
is
discussed
which
is
designed
to
aid
in
the
programming
of
computations
on
indexed
lists
of
numbers
using
machine
language
or
a
symbolic
assembly
system
the
most
commonly
performed
list
operations
are
outlined
and
logically
arranged
into
five
groups
as
an
example
the
computation
of
power
spectral
density
from
the
autocovariance
function
is
discussed
for
a
class
of
eeg
signals
cacm
may
1965
philpott
c
m
lago
g
v
ca650516
jb
march
7
1978
12
52
pm
1255
5
1255
1255
5
1255
1255
5
1255
</TEXT>
</DOC>
<DOC>
<DOCNO>1256</DOCNO>
<TEXT>
dynamic
variable
formatting
cacm
may
1965
king
d
r
ca650515
jb
march
7
1978
12
53
pm
1256
5
1256
1256
5
1256
1256
5
1256
</TEXT>
</DOC>
<DOC>
<DOCNO>1257</DOCNO>
<TEXT>
debug
an
extension
to
current
on
line
debugging
techniques
a
method
of
on
linr
assembly
language
debugging
which
greatly
simplifies
several
of
the
bookkeeping
tasks
characteristically
associated
with
that
process
has
been
developed
and
implemented
in
a
program
for
the
univac
m
460
computer
at
air
force
cambridge
research
laboratories
with
this
program
an
online
user
may
insert
or
delete
in
symbolic
assembly
language
any
number
of
lines
at
any
point
of
his
previously
assembled
program
in
core
with
the
remainder
of
the
program
being
relocated
appropriately
cacm
may
1965
evans
t
g
darley
d
l
ca650514
jb
march
7
1978
12
58
pm
1257
5
1257
1257
5
1257
1257
5
1257
1738
5
1257
1257
6
1257
</TEXT>
</DOC>
<DOC>
<DOCNO>1258</DOCNO>
<TEXT>
an
extended
arithmetic
package
in
many
fields
for
example
algebraic
number
theory
arithmetic
must
be
carried
out
to
a
degree
of
precision
which
exceeds
the
normal
hardware
capacity
of
most
machines
in
such
cases
an
extended
arithmetic
package
provides
a
comprehensive
and
easy
to
use
way
of
performing
such
arithmetic
such
a
package
was
coded
for
the
ibm
7090
in
discussing
the
general
problems
associated
with
the
design
of
an
extended
arithmetic
package
specific
reference
is
made
to
this
program
cacm
may
1965
blum
b
i
ca650513
jb
march
7
1978
1
01
pm
1026
4
1258
1258
4
1258
1258
4
1258
1292
4
1258
1292
4
1258
1497
4
1258
1497
4
1258
1975
4
1258
2605
4
1258
107
5
1258
1026
5
1258
1258
5
1258
1258
5
1258
1258
5
1258
</TEXT>
</DOC>
<DOC>
<DOCNO>1259</DOCNO>
<TEXT>
applications
of
binary
numbers
in
computer
routines
a
binary
number
can
be
thought
of
as
an
alternate
form
of
expression
for
either
a
set
of
letters
or
a
decimal
number
there
are
then
three
equivalent
expressions
easily
translatable
to
one
another
each
having
different
characteristics
four
examples
are
given
in
which
the
form
of
an
expression
is
changed
to
an
equivalent
expression
to
save
space
or
gain
power
cacm
may
1965
weldon
r
j
baker
r
l
ca650512
jb
march
7
1978
1
05
pm
1259
5
1259
1259
5
1259
1259
5
1259
</TEXT>
</DOC>
<DOC>
<DOCNO>1260</DOCNO>
<TEXT>
least
squares
analysis
of
resonance
spectra
on
small
computers
the
problem
of
analyzing
data
from
a
mossbauer
effect
experiment
is
discussed
by
using
the
cut
step
procedure
for
convergence
and
by
imposing
physical
constraints
on
the
functional
form
of
the
calculation
it
is
possible
to
make
the
analysis
on
a
small
computer
the
analysis
has
been
carried
out
on
an
ibm
1410
computer
with
a
40
000
bcd
core
memory
cacm
may
1965
marshall
s
w
nelson
j
a
wilenzick
r
m
ca650511
jb
march
7
1978
1
10
pm
1260
5
1260
1260
5
1260
1260
5
1260
</TEXT>
</DOC>
<DOC>
<DOCNO>1261</DOCNO>
<TEXT>
modeling
and
simulation
of
digital
networks
the
simulation
of
digital
networks
on
a
digital
computer
provides
the
engineer
with
an
effective
means
of
analyzing
time
quantized
logical
behavior
the
digital
network
is
modeled
as
a
set
of
time
dependent
or
time
independent
boolean
transformations
each
transformation
describing
the
input
output
relationship
of
a
model
element
comprising
the
network
mode
the
simplicity
of
utilizing
the
fortran
iv
programming
system
as
a
digital
network
simulator
is
discussed
an
illustrated
this
simplicity
is
derived
from
a
common
modeling
technique
applicable
to
combinational
and
sequential
digital
networks
and
a
systematic
programming
approach
cacm
may
1965
larsen
r
p
mano
m
m
ca650510
jb
march
7
1978
1
15
pm
1261
4
1261
1939
4
1261
1030
5
1261
1261
5
1261
1261
5
1261
1261
5
1261
</TEXT>
</DOC>
<DOC>
<DOCNO>1262</DOCNO>
<TEXT>
procedure
oriented
language
statements
to
facilitate
parallel
processing
two
statements
are
suggested
which
allow
a
programmer
writing
in
a
procedure
oriented
language
to
indicate
sections
of
program
which
are
to
be
executed
in
parallel
the
statements
are
do
together
and
hold
these
serve
partly
as
brackets
in
establishing
a
range
of
parallel
operation
and
partly
to
define
each
parallel
path
within
this
range
do
togethers
may
be
nested
the
statements
should
be
particularly
effective
for
use
with
computing
devices
capable
of
attaining
some
degree
of
compute
compute
overlap
cacm
may
1965
opler
a
ca650509
jb
march
7
1978
2
17
pm
1158
5
1262
1262
5
1262
1262
5
1262
1262
5
1262
1262
6
1262
</TEXT>
</DOC>
<DOC>
<DOCNO>1263</DOCNO>
<TEXT>
metalanguage
and
syntax
specification
two
metalanguages
are
described
one
sufficient
for
the
table
specification
of
the
algol
syntax
the
other
with
additional
metaoperators
adequate
and
used
for
the
formal
table
description
of
basic
fortran
cacm
may
1965
burkhardt
w
h
ca650508
jb
march
7
1978
2
19
pm
1046
4
1263
1086
4
1263
1105
4
1263
1132
4
1263
1139
4
1263
1140
4
1263
1234
4
1263
1234
4
1263
1263
4
1263
1263
4
1263
1263
4
1263
1265
4
1263
1265
4
1263
1270
4
1263
1323
4
1263
1358
4
1263
1379
4
1263
1380
4
1263
1453
4
1263
1453
4
1263
1464
4
1263
1484
4
1263
1491
4
1263
1496
4
1263
1498
4
1263
1613
4
1263
1614
4
1263
1781
4
1263
1781
4
1263
1824
4
1263
1825
4
1263
1860
4
1263
1945
4
1263
2083
4
1263
2126
4
1263
2178
4
1263
2179
4
1263
2252
4
1263
2325
4
1263
2341
4
1263
2546
4
1263
2546
4
1263
464
4
1263
2645
4
1263
2652
4
1263
2684
4
1263
2842
4
1263
2929
4
1263
2934
4
1263
584
4
1263
3069
4
1263
631
4
1263
653
4
1263
669
4
1263
679
4
1263
680
4
1263
691
4
1263
761
4
1263
763
4
1263
795
4
1263
799
4
1263
945
4
1263
949
4
1263
989
4
1263
989
5
1263
1263
5
1263
1263
5
1263
1263
5
1263
1379
5
1263
404
5
1263
3184
5
1263
1263
6
1263
1477
6
1263
3184
6
1263
669
6
1263
761
6
1263
</TEXT>
</DOC>
<DOC>
<DOCNO>1264</DOCNO>
<TEXT>
blnsys
a
1401
operating
system
with
braille
capabilities
blnsys
is
an
operating
system
designed
for
a
4k
1401
with
common
optional
features
and
two
attached
tape
drives
printed
output
of
this
system
or
of
executing
programs
may
be
in
either
english
or
braille
even
though
this
system
was
written
for
a
small
machine
with
minimal
peripheral
equipment
jobs
may
be
batched
so
that
card
handling
and
lost
processing
time
is
at
a
minimum
this
system
will
perform
any
or
all
of
the
following
users
specified
functions
assemble
sps
source
decks
post
list
produce
condensed
or
uncondensed
object
decks
execute
user
program
list
card
input
to
a
program
list
punched
output
provide
a
storage
dump
execute
a
program
submitted
for
execution
as
an
uncondensed
object
deck
under
debugging
trace
control
card
to
braille
conversion
brailled
listings
of
7040
ibsys
batch
output
and
update
or
duplicate
the
system
tape
itself
input
ouput
subroutines
are
also
included
in
the
system
cacm
may
1965
landwehr
j
b
mclaughlin
c
mueller
h
lichstein
m
pollack
s
v
ca650507
jb
march
7
1978
2
30
pm
1264
4
1264
1740
4
1264
1099
5
1264
1264
5
1264
1264
5
1264
1264
5
1264
</TEXT>
</DOC>
<DOC>
<DOCNO>1265</DOCNO>
<TEXT>
on
the
relative
efficiencies
of
context
free
grammar
recognizers
a
number
of
diverse
recognition
procedures
that
have
been
proposed
for
parsing
sentences
with
respect
to
a
context
free
grammar
are
described
in
this
paper
by
means
of
a
common
device
each
procedure
is
defined
by
giving
an
algorithm
for
obtaining
a
nondeterministic
turing
machine
recognizer
that
is
equivalent
to
a
given
context
free
grammar
the
formalization
of
the
turing
machine
has
been
chosen
to
make
possible
particularly
simple
description
of
the
parsing
procedures
considered
an
attempt
has
been
made
to
compare
recognition
efficiencies
for
the
procedures
defined
for
a
few
simple
grammars
and
sentences
a
formal
comparison
has
been
made
empirical
comparison
of
the
recognition
of
more
realistic
programming
languages
such
as
lisp
and
algol
has
been
made
by
means
of
a
program
which
simulates
the
turing
machine
on
the
univac
m
460
computer
several
algorithms
for
producing
grammars
equivalent
to
a
given
context
free
grammar
have
been
considered
and
the
increase
in
recognition
efficiency
they
afford
has
been
empirically
investigated
cacm
may
1965
griffiths
t
v
petrick
s
r
ca650506
jb
march
7
1978
2
38
pm
1046
4
1265
1062
4
1265
1086
4
1265
1105
4
1265
1121
4
1265
1132
4
1265
1139
4
1265
1139
4
1265
1139
4
1265
1140
4
1265
1151
4
1265
1234
4
1265
1234
4
1265
1263
4
1265
1263
4
1265
1265
4
1265
1265
4
1265
1265
4
1265
1265
4
1265
1265
4
1265
1270
4
1265
1323
4
1265
1358
4
1265
1379
4
1265
1380
4
1265
1453
4
1265
1464
4
1265
1484
4
1265
1491
4
1265
1496
4
1265
1498
4
1265
1613
4
1265
1614
4
1265
1665
4
1265
1781
4
1265
1781
4
1265
1781
4
1265
1824
4
1265
1825
4
1265
1860
4
1265
2083
4
1265
2126
4
1265
2178
4
1265
2179
4
1265
2252
4
1265
2325
4
1265
2341
4
1265
2546
4
1265
2546
4
1265
464
4
1265
2645
4
1265
2652
4
1265
2684
4
1265
2769
4
1265
2842
4
1265
2929
4
1265
2934
4
1265
584
4
1265
3069
4
1265
631
4
1265
653
4
1265
669
4
1265
679
4
1265
680
4
1265
691
4
1265
720
4
1265
759
4
1265
761
4
1265
763
4
1265
763
4
1265
795
4
1265
799
4
1265
945
4
1265
949
4
1265
989
4
1265
1265
5
1265
1265
5
1265
1265
5
1265
1350
5
1265
1399
5
1265
1659
5
1265
1768
5
1265
1781
5
1265
1945
5
1265
2110
5
1265
404
5
1265
464
5
1265
3094
5
1265
3184
5
1265
631
5
1265
635
5
1265
823
6
1265
123
6
1265
196
6
1265
914
6
1265
915
6
1265
917
6
1265
919
6
1265
984
6
1265
989
6
1265
990
6
1265
990
6
1265
1007
6
1265
1012
6
1265
1012
6
1265
1046
6
1265
1084
6
1265
1098
6
1265
1122
6
1265
1131
6
1265
1138
6
1265
1139
6
1265
1139
6
1265
1140
6
1265
1141
6
1265
1141
6
1265
1149
6
1265
1198
6
1265
1200
6
1265
1215
6
1265
1223
6
1265
1223
6
1265
1225
6
1265
1225
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1265
6
1265
1303
6
1265
1323
6
1265
1336
6
1265
1350
6
1265
1358
6
1265
1366
6
1265
1396
6
1265
1399
6
1265
1421
6
1265
1455
6
1265
1460
6
1265
1462
6
1265
1463
6
1265
1467
6
1265
1468
6
1265
1477
6
1265
1477
6
1265
1487
6
1265
1491
6
1265
1491
6
1265
1496
6
1265
1496
6
1265
1531
6
1265
1535
6
1265
1565
6
1265
1601
6
1265
1602
6
1265
1613
6
1265
1614
6
1265
1626
6
1265
1641
6
1265
1671
6
1265
1697
6
1265
1781
6
1265
1781
6
1265
1787
6
1265
1788
6
1265
205
6
1265
224
6
1265
249
6
1265
288
6
1265
316
6
1265
381
6
1265
398
6
1265
11
6
1265
2179
6
1265
2645
6
1265
404
6
1265
410
6
1265
463
6
1265
464
6
1265
483
6
1265
483
6
1265
3184
6
1265
3188
6
1265
584
6
1265
584
6
1265
600
6
1265
669
6
1265
680
6
1265
680
6
1265
680
6
1265
691
6
1265
763
6
1265
763
6
1265
799
6
1265
</TEXT>
</DOC>
<DOC>
<DOCNO>1266</DOCNO>
<TEXT>
considerations
relating
to
purpose
of
fortran
standardization
appendixes
to
asa
fortran
standard
cacm
may
1965
ca650505
jb
march
7
1978
2
40
pm
1266
5
1266
1266
5
1266
1266
5
1266
</TEXT>
</DOC>
<DOC>
<DOCNO>1267</DOCNO>
<TEXT>
performance
of
systems
used
for
data
transmission
transfer
rate
of
information
bits
an
asa
tutorial
standard
information
thruput
as
a
characteristic
of
systems
performance
is
discussed
this
discussion
includes
the
pertinent
aspects
of
information
transfer
of
determination
of
transfer
rate
of
information
bits
trib
of
residual
errors
and
of
standard
measurement
conditions
the
paper
also
presents
an
orderly
arrangement
of
characteristics
and
parameters
that
affect
information
thruput
and
some
examples
on
procedures
for
determining
a
thruput
rate
in
terms
of
trib
it
concludes
that
a
performance
characteristic
involving
information
rate
can
best
be
expressed
as
the
trib
in
conjunction
with
the
residual
error
rate
cacm
may
1965
ca650504
jb
march
7
1978
3
10
pm
1267
5
1267
1267
5
1267
1267
5
1267
</TEXT>
</DOC>
<DOC>
<DOCNO>1268</DOCNO>
<TEXT>
logarithm
of
a
complex
number
algorithm
243
b3
cacm
may
1965
boothroyd
j
ca650502
jb
march
7
1978
3
11
pm
1268
5
1268
1268
5
1268
1268
5
1268
1858
5
1268
1268
6
1268
1857
6
1268
</TEXT>
</DOC>
<DOC>
<DOCNO>1269</DOCNO>
<TEXT>
computation
of
fourier
coefficients
algorithm
c6
cacm
may
1965
teijelo
l
ca650502
jb
march
7
1978
3
12
pm
1269
5
1269
1269
5
1269
1269
5
1269
</TEXT>
</DOC>
<DOC>
<DOCNO>1270</DOCNO>
<TEXT>
on
algol
education
automatic
grading
programs
two
algol
grader
programs
are
presented
for
the
computer
evaluation
of
student
algol
programs
one
is
for
a
beginner
program
it
furnishes
random
data
and
checks
answers
the
other
provides
a
searching
test
of
the
reliability
and
efficiency
of
an
integration
procedure
there
is
a
statement
of
the
essential
properties
of
a
computer
system
in
order
that
grader
programs
can
be
effectively
used
cacm
may
1965
forsythe
g
e
wirth
n
ca650501
jb
march
7
1978
3
16
pm
1086
4
1270
1132
4
1270
1234
4
1270
1263
4
1270
1265
4
1270
1270
4
1270
1270
4
1270
1323
4
1270
1358
4
1270
1379
4
1270
1380
4
1270
1453
4
1270
1464
4
1270
1484
4
1270
1491
4
1270
1498
4
1270
1613
4
1270
1614
4
1270
1781
4
1270
1825
4
1270
1860
4
1270
1902
4
1270
2083
4
1270
2178
4
1270
2179
4
1270
2252
4
1270
2325
4
1270
2341
4
1270
2546
4
1270
2645
4
1270
2652
4
1270
2684
4
1270
2842
4
1270
2929
4
1270
2934
4
1270
3069
4
1270
669
4
1270
679
4
1270
691
4
1270
761
4
1270
949
4
1270
989
4
1270
145
5
1270
1270
5
1270
1270
5
1270
1270
5
1270
1413
5
1270
1902
5
1270
3184
5
1270
145
6
1270
1205
6
1270
1270
6
1270
1270
6
1270
</TEXT>
</DOC>
<DOC>
<DOCNO>1271</DOCNO>
<TEXT>
secondary
key
retrieval
using
an
ibm
7090
1301
system
the
secondary
key
retrieval
method
involves
the
preparation
of
secondary
storage
lists
from
primary
data
records
search
requests
are
satisfied
by
logical
operations
on
appropriate
lists
producing
a
complete
set
of
addresses
of
primary
records
relevant
to
the
request
experimental
results
are
presented
and
a
comparative
analysis
is
given
cacm
april
1965
davis
d
r
lin
a
d
ca650420
jb
march
7
1978
3
18
pm
1271
4
1271
1785
4
1271
2543
4
1271
2552
4
1271
911
4
1271
1271
5
1271
1271
5
1271
1271
5
1271
1976
5
1271
332
5
1271
1271
6
1271
</TEXT>
</DOC>
<DOC>
<DOCNO>1272</DOCNO>
<TEXT>
expanding
the
editing
function
in
language
data
processing
in
automatic
abstracting
citation
indexing
mechanical
translation
and
other
such
procedures
editing
is
required
whenever
the
automatic
method
leaves
something
to
be
desired
this
paper
discusses
the
economy
of
editing
as
a
function
of
the
amount
of
condensation
of
text
in
language
processing
operations
and
then
contends
that
editing
can
be
regarded
as
an
opportunity
rather
than
as
an
unwelcome
necessity
heavy
editing
which
goes
beyond
mere
correction
and
improvement
of
computer
output
is
exemplified
by
the
use
of
a
concordance
in
preparing
a
survey
article
or
lecture
other
opportunities
for
heavy
editing
are
described
chief
among
them
being
interpretation
and
expansion
of
computer
output
in
such
processes
as
factor
analysis
applications
are
described
such
processes
as
factor
analysis
applications
are
described
such
as
the
quick
unbiased
evaluation
of
a
large
volume
of
incoming
mail
or
telegrams
yielding
summary
reports
not
possible
for
either
humans
or
computers
to
produce
alone
cacm
april
1965
doule
l
b
ca650419
jb
march
7
1978
3
26
pm
1272
5
1272
1272
5
1272
1272
5
1272
</TEXT>
</DOC>
<DOC>
<DOCNO>1273</DOCNO>
<TEXT>
remark
on
romberg
quadrature
a
modified
form
of
romberg
quadrature
is
described
which
is
less
sensitive
to
the
accumulation
of
rounding
errors
than
the
customary
one
cacm
april
1965
krasun
a
m
prager
w
ca650418
jb
march
7
1978
3
27
pm
1273
5
1273
1273
5
1273
1273
5
1273
1352
5
1273
1982
5
1273
2040
5
1273
1
6
1273
834
6
1273
872
6
1273
1040
6
1273
1092
6
1273
1241
6
1273
1241
6
1273
1273
6
1273
1273
6
1273
1273
6
1273
1352
6
1273
1356
6
1273
1883
6
1273
324
6
1273
324
6
1273
324
6
1273
429
6
1273
570
6
1273
621
6
1273
621
6
1273
786
6
1273
</TEXT>
</DOC>
<DOC>
<DOCNO>1274</DOCNO>
<TEXT>
on
the
numerical
solution
of
an
n
point
boundary
value
problem
for
linear
ordinary
differential
equations
a
method
for
the
numerical
solution
of
then
point
boundary
value
problem
for
homogeneous
linear
ordinary
differential
equations
is
developed
the
method
requires
two
runge
kutta
integrations
over
the
interval
under
consideration
and
the
solution
of
a
linear
system
of
equations
with
n
1
unknowns
cacm
april
1965
day
j
t
ca650417
jb
march
7
1978
3
30
pm
1274
4
1274
1147
5
1274
1274
5
1274
1274
5
1274
1274
5
1274
</TEXT>
</DOC>
<DOC>
<DOCNO>1275</DOCNO>
<TEXT>
code
structures
for
protection
and
manipulation
of
variable
length
items
corrigendum
cacm
april
1965
ramamoorthy
c
v
ca650416
jb
march
7
1978
3
31
pm
1275
5
1275
1275
5
1275
1275
5
1275
</TEXT>
</DOC>
<DOC>
<DOCNO>1276</DOCNO>
<TEXT>
still
another
use
for
fortran
ii
chaining
cacm
april
1965
ca650415
jb
march
7
1978
3
32
pm
1276
5
1276
1276
5
1276
1276
5
1276
</TEXT>
</DOC>
<DOC>
<DOCNO>1277</DOCNO>
<TEXT>
the
use
of
cobol
subroutines
in
fortran
main
programs
cacm
april
1965
tajiri
k
ca650414
jb
march
7
1978
3
34
pm
1277
5
1277
1277
5
1277
1277
5
1277
</TEXT>
</DOC>
<DOC>
<DOCNO>1278</DOCNO>
<TEXT>
wengert
numerical
method
for
partial
derivatives
orbit
determination
and
quasilinearization
in
a
recent
article
in
the
communications
of
the
acm
r
wengert
suggested
a
technique
for
machine
evaluation
of
the
partial
derivatives
of
a
function
given
in
analytical
form
in
solving
non
linear
boundary
value
problems
using
quasilinearization
many
partial
derivatives
must
be
formed
analytically
and
then
evaluated
numerically
wengert
method
appears
very
attractive
from
the
programming
viewpoint
equations
which
might
not
otherwise
be
undertaken
cacm
april
1965
bellman
r
e
kagiwada
h
kalaba
r
e
ca650413
jb
march
7
1978
3
39
pm
1028
4
1278
1216
4
1278
1216
4
1278
1278
4
1278
1278
4
1278
1278
4
1278
1347
4
1278
1347
4
1278
1396
4
1278
1396
4
1278
1536
4
1278
973
5
1278
1028
5
1278
1029
5
1278
1278
5
1278
1278
5
1278
1278
5
1278
1347
5
1278
1396
5
1278
964
6
1278
1028
6
1278
1028
6
1278
1029
6
1278
1029
6
1278
1083
6
1278
1132
6
1278
1214
6
1278
1278
6
1278
1278
6
1278
1334
6
1278
1365
6
1278
1386
6
1278
1387
6
1278
1388
6
1278
1392
6
1278
1393
6
1278
1394
6
1278
1395
6
1278
1396
6
1278
1397
6
1278
1496
6
1278
284
6
1278
407
6
1278
3199
6
1278
3200
6
1278
3201
6
1278
3202
6
1278
3203
6
1278
3204
6
1278
561
6
1278
730
6
1278
</TEXT>
</DOC>
<DOC>
<DOCNO>1279</DOCNO>
<TEXT>
use
of
a
conditional
base
number
system
for
encoding
sequences
of
correlated
characters
a
procedure
is
described
for
the
relatively
efficient
encoding
of
sequences
of
characters
which
have
predecessor
successor
selection
rules
the
procedure
is
shown
to
assign
a
unique
integer
to
each
sequence
and
to
generate
a
reasonably
compact
set
of
values
cacm
april
1965
brown
r
m
ca650412
jb
march
7
1978
3
42
pm
1279
5
1279
1279
5
1279
1279
5
1279
</TEXT>
</DOC>
<DOC>
<DOCNO>1280</DOCNO>
<TEXT>
numerical
integration
of
a
differential
difference
equation
with
a
decreasing
time
lag
systems
in
which
variable
time
lags
are
present
are
of
common
occurrence
in
biology
variable
flow
rates
are
a
common
cause
of
these
variable
lags
at
present
no
extensive
body
of
knowledge
exists
concerning
the
effects
which
these
variable
lags
can
cause
shown
here
is
a
method
of
reducing
some
differential
difference
equations
to
ordinary
differential
equations
which
can
then
be
studied
numerically
with
ease
subsequent
study
will
deal
with
situations
in
which
multiple
lags
and
lags
dependent
on
the
solution
itself
are
present
cacm
april
1965
bellman
r
e
buell
j
d
kalaba
r
e
ca650411
jb
march
7
1978
3
46
pm
1280
5
1280
1280
5
1280
1280
5
1280
1364
5
1280
1280
6
1280
</TEXT>
</DOC>
<DOC>
<DOCNO>1281</DOCNO>
<TEXT>
data
input
by
question
and
answer
a
data
input
scheme
for
a
time
sharing
computer
is
described
in
this
paper
instead
of
using
format
statements
to
determine
the
input
the
computer
asks
the
user
for
the
required
values
one
at
a
time
the
computer
converses
with
the
user
during
the
input
process
checks
for
errors
provides
standard
data
and
allows
editing
of
values
input
cacm
april
1965
pyle
i
c
ca650410
jb
march
7
1978
3
48
pm
1281
5
1281
1281
5
1281
1281
5
1281
</TEXT>
</DOC>
<DOC>
<DOCNO>1282</DOCNO>
<TEXT>
the
use
of
fortran
in
subroutines
with
cobol
main
programs
by
using
the
proper
cobol
coding
techniques
and
accounting
for
differences
in
storage
allocation
and
library
routines
between
the
two
languages
it
is
possible
to
write
fortran
iv
subroutines
that
may
be
called
from
cobol
main
programs
such
a
technique
enables
the
programmer
to
take
advantage
of
the
most
useful
properties
of
each
language
while
minimizing
their
respective
disadvantages
cacm
april
1965
shavell
z
a
ca650409
jb
march
7
1978
3
52
pm
1282
5
1282
1282
5
1282
1282
5
1282
</TEXT>
</DOC>
<DOC>
<DOCNO>1283</DOCNO>
<TEXT>
matrix
inversion
algorithm
231
f1
cacm
april
1965
ferring
m
ca650408
jb
march
7
1978
3
53
pm
1283
5
1283
1283
5
1283
1283
5
1283
</TEXT>
</DOC>
<DOC>
<DOCNO>1284</DOCNO>
<TEXT>
bessel
function
for
a
set
of
integer
orders
cacm
april
1965
stafford
j
ca650407
jb
march
7
1978
3
54
pm
1284
5
1284
1284
5
1284
1284
5
1284
1909
5
1284
134
6
1284
1023
6
1284
1284
6
1284
1316
6
1284
</TEXT>
</DOC>
<DOC>
<DOCNO>1285</DOCNO>
<TEXT>
eigenvalues
and
eigenvectors
of
a
real
symmetric
matrix
by
the
qr
method
algorithm
254
f2
cacm
april
1965
businger
p
a
ca650406
jb
march
7
1978
3
55
pm
1285
5
1285
1285
5
1285
1285
5
1285
</TEXT>
</DOC>
<DOC>
<DOCNO>1286</DOCNO>
<TEXT>
eigenvalues
of
a
real
symmetric
matrix
by
the
qr
method
algorithm
253
f2
cacm
april
1965
businger
p
a
ca650405
jb
march
7
1978
3
56
pm
1286
5
1286
1286
5
1286
1286
5
1286
</TEXT>
</DOC>
<DOC>
<DOCNO>1287</DOCNO>
<TEXT>
vector
coupling
or
clebsch
gordan
coefficients
algorithm
252
z
cacm
april
1965
gunn
j
h
ca650404
jb
march
7
1978
3
58
pm
1287
5
1287
1287
5
1287
1287
5
1287
</TEXT>
</DOC>
<DOC>
<DOCNO>1288</DOCNO>
<TEXT>
clp
the
cornell
list
processor
presented
in
this
paper
are
the
highlights
of
clp
a
teaching
language
which
has
been
employed
at
cornell
university
and
was
constructed
to
serve
as
a
means
of
introducing
simulation
and
other
list
processing
concepts
the
various
advantages
of
clp
are
discussed
and
examples
are
given
cacm
april
1965
conway
r
w
delfausse
j
j
maxwell
w
l
walker
w
e
ca650403
jb
march
7
1978
4
02
pm
1179
4
1288
1288
4
1288
1544
4
1288
1646
4
1288
2111
4
1288
2534
4
1288
2556
4
1288
2650
4
1288
1288
5
1288
1288
5
1288
1288
5
1288
830
5
1288
</TEXT>
</DOC>
<DOC>
<DOCNO>1289</DOCNO>
<TEXT>
proposed
revised
american
standard
code
for
information
interchange
cacm
april
1965
ca650402
jb
march
7
1978
4
03
pm
1289
5
1289
1289
5
1289
1289
5
1289
</TEXT>
</DOC>
<DOC>
<DOCNO>1290</DOCNO>
<TEXT>
transparent
mode
control
procedures
for
data
communication
using
the
american
standard
code
for
information
interchange
a
tutorial
this
paper
gives
the
considerations
of
task
group
x3
3
4
in
the
area
of
transparent
mode
data
communication
control
philosophy
the
appearance
of
this
paper
was
forecast
underthe
name
of
second
level
control
in
the
earlier
tutorial
paper
control
procedures
for
data
communications
task
group
document
x3
3
4
44
dated
may
1964
the
present
paper
elaborates
upon
solutions
to
the
problems
of
transparency
to
the
basic
ascii
communication
control
characters
as
outlined
in
the
previous
paper
mentioned
above
moreover
it
goes
on
to
cover
the
additional
control
problems
of
handling
material
such
as
off
line
encrypted
data
or
non
ascii
codes
by
means
of
systems
providing
complete
character
transparency
it
does
not
cover
concepts
of
transparency
in
which
the
normal
character
structure
or
modulation
rate
of
a
system
may
be
abandoned
in
conjunction
with
the
earlier
tutorial
paper
this
paper
is
expected
to
lead
to
a
proposal
for
stand
ardizationof
data
communication
control
procedures
using
the
american
stand
ard
code
for
information
interchange
cacm
april
1965
ca650401
jb
march
7
1978
4
10
pm
1290
5
1290
1290
5
1290
1290
5
1290
</TEXT>
</DOC>
<DOC>
<DOCNO>1291</DOCNO>
<TEXT>
tabular
input
of
data
cacm
march
1965
george
r
ca650316
jb
march
7
1978
4
11
pm
1291
5
1291
1291
5
1291
1291
5
1291
</TEXT>
</DOC>
<DOC>
<DOCNO>1292</DOCNO>
<TEXT>
on
a
divide
and
correct
method
for
variable
precision
division
described
in
this
paper
is
a
divide
and
correct
method
for
variable
precision
division
in
digital
computers
unlike
the
earlier
methods
of
stein
and
pope
the
present
method
uses
a
suitably
rounded
form
of
the
normalized
divisor
for
getting
an
estimate
of
the
quotient
characters
this
results
in
a
correction
of
at
most
plus
or
minus
one
to
the
estimate
to
obtain
the
exact
quotient
character
it
is
believed
that
this
method
will
be
widely
applicable
for
division
operations
in
variable
word
length
character
oriented
machines
cacm
march
1965
krishnamurthy
e
v
ca650315jb
march
7
1978
4
16
pm
1026
4
1292
1258
4
1292
1258
4
1292
1292
4
1292
1292
4
1292
1497
4
1292
1497
4
1292
1975
4
1292
2605
4
1292
107
5
1292
1026
5
1292
1292
5
1292
1292
5
1292
1292
5
1292
1497
5
1292
1593
5
1292
1975
5
1292
107
6
1292
1026
6
1292
1026
6
1292
1292
6
1292
1292
6
1292
1292
6
1292
1497
6
1292
1593
6
1292
91
6
1292
</TEXT>
</DOC>
<DOC>
<DOCNO>1293</DOCNO>
<TEXT>
method
is
randomness
certain
nonrandom
properties
of
a
commonly
used
random
number
generator
are
described
and
analyzed
cacm
march
1965
greenberger
m
ca650314
jb
march
7
1978
4
18
pm
1293
5
1293
1293
5
1293
1293
5
1293
1674
5
1293
1691
5
1293
1293
6
1293
1293
6
1293
1420
6
1293
1631
6
1293
</TEXT>
</DOC>
<DOC>
<DOCNO>1294</DOCNO>
<TEXT>
note
on
triple
precision
floating
point
arithmetic
with
132
bit
numbers
in
a
recent
paper
gregory
and
raney
described
a
technique
for
double
precision
floating
point
arithmetic
a
similar
technique
can
be
developed
for
triple
precision
floating
point
arithmetic
and
it
is
the
purpose
of
this
note
to
describe
this
technique
only
the
multiplication
and
the
division
algorithms
are
described
since
the
addition
subtraction
algorithm
can
be
obtained
by
a
trivial
modification
of
the
algorithm
in
gregory
and
raney
paper
cacm
march
1965
ikebe
y
ca650313
jb
march
7
1978
5
54
pm
1294
4
1294
1152
5
1294
1294
5
1294
1294
5
1294
1294
5
1294
</TEXT>
</DOC>
<DOC>
<DOCNO>1295</DOCNO>
<TEXT>
pert
time
calculations
without
topological
ordering
a
simplified
technique
is
presented
for
pert
time
calculations
without
topological
ordering
each
event
is
assigned
a
unique
memory
location
an
activity
is
represented
by
a
link
a
link
is
defined
as
a
memory
location
containing
the
address
of
another
memory
location
the
time
information
for
an
activity
is
carried
with
its
link
for
a
typical
net
the
majority
of
activities
can
be
described
by
one
36
bit
cell
each
the
remainder
use
two
36
bit
cells
each
the
links
are
unidirectional
forward
during
the
t
e
calculation
expected
completion
time
for
an
activity
backward
during
the
t
l
calculation
time
latest
allowable
for
completion
of
an
activity
the
calculations
progress
through
the
net
topologically
even
though
the
net
is
not
represented
topologically
in
core
cacm
march
1965
lass
s
e
ca650312
jb
march
7
1978
6
00
pm
1295
5
1295
1295
5
1295
1295
5
1295
1611
5
1295
1295
6
1295
340
6
1295
</TEXT>
</DOC>
<DOC>
<DOCNO>1296</DOCNO>
<TEXT>
ative
algorithm
205
e4
cacm
march
1965
wasscher
e
j
ca650311
jb
march
7
1978
6
01
pm
1296
5
1296
1296
5
1296
1296
5
1296
</TEXT>
</DOC>
<DOC>
<DOCNO>1297</DOCNO>
<TEXT>
steep1
algorithm
203
e4
cacm
march
1965
varah
j
m
ca650310
jb
march
7
1978
6
02
pm
1297
5
1297
1297
5
1297
1297
5
1297
</TEXT>
</DOC>
<DOC>
<DOCNO>1298</DOCNO>
<TEXT>
adaptive
numerical
integration
by
simpson
rule
algorithm
145
d1
cacm
march
1965
pike
m
c
ca650309
jb
march
7
1978
6
03
pm
1298
5
1298
1298
5
1298
1298
5
1298
2093
5
1298
834
6
1298
872
6
1298
1092
6
1298
1298
6
1298
1573
6
1298
429
6
1298
</TEXT>
</DOC>
<DOC>
<DOCNO>1299</DOCNO>
<TEXT>
solutions
of
the
diophantine
equation
algorithm
139
a1
cacm
march
1965
bowlden
h
j
ca650308
jb
march
7
1978
6
04
pm
1299
5
1299
1299
5
1299
1299
5
1299
</TEXT>
</DOC>
<DOC>
<DOCNO>1300</DOCNO>
<TEXT>
function
minimization
algorithm
251
e4
cacm
march
1965
wells
m
ca650307
jb
march
7
1978
6
05
pm
1300
5
1300
1300
5
1300
1300
5
1300
</TEXT>
</DOC>
<DOC>
<DOCNO>1301</DOCNO>
<TEXT>
on
algol
i
o
conventions
cacm
march
1965
zaremba
w
a
ca650306
jb
march
7
1978
6
06
pm
1301
5
1301
1301
5
1301
1301
5
1301
</TEXT>
</DOC>
<DOC>
<DOCNO>1302</DOCNO>
<TEXT>
parallel
signaling
speeds
for
data
transmission
proposed
american
stand
ard
cacm
march
1965
ca650305
jb
march
7
1978
6
08
pm
1302
5
1302
1302
5
1302
1302
5
1302
</TEXT>
</DOC>
<DOC>
<DOCNO>1303</DOCNO>
<TEXT>
a
correspondence
between
algol
60
and
church
lambda
notation
part
ii
cacm
march
1965
landin
p
j
ca650304
jb
march
7
1978
6
09
pm
1303
5
1303
1303
5
1303
1303
5
1303
1469
5
1303
1486
5
1303
1491
5
1303
1781
5
1303
2178
5
1303
2326
5
1303
2470
5
1303
2684
5
1303
3044
5
1303
123
6
1303
196
6
1303
196
6
1303
919
6
1303
990
6
1303
1007
6
1303
1046
6
1303
1131
6
1303
1139
6
1303
1140
6
1303
1140
6
1303
1149
6
1303
1198
6
1303
1215
6
1303
1223
6
1303
1265
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1303
6
1303
1323
6
1303
1323
6
1303
1323
6
1303
1323
6
1303
1358
6
1303
1366
6
1303
1421
6
1303
1460
6
1303
1462
6
1303
1463
6
1303
1467
6
1303
1468
6
1303
1469
6
1303
1477
6
1303
1491
6
1303
1496
6
1303
1531
6
1303
1535
6
1303
1565
6
1303
1601
6
1303
1602
6
1303
1613
6
1303
1614
6
1303
1626
6
1303
1641
6
1303
1787
6
1303
1788
6
1303
205
6
1303
210
6
1303
1834
6
1303
1834
6
1303
224
6
1303
249
6
1303
288
6
1303
316
6
1303
381
6
1303
398
6
1303
2059
6
1303
11
6
1303
2127
6
1303
2192
6
1303
2264
6
1303
404
6
1303
410
6
1303
463
6
1303
464
6
1303
483
6
1303
3184
6
1303
3184
6
1303
3184
6
1303
3184
6
1303
3186
6
1303
3188
6
1303
584
6
1303
600
6
1303
680
6
1303
691
6
1303
729
6
1303
763
6
1303
799
6
1303
</TEXT>
</DOC>
<DOC>
<DOCNO>1304</DOCNO>
<TEXT>
a
rapid
turnaround
multi
programming
system
in
this
paper
basic
features
system
characteristics
and
the
control
algorithm
for
a
multi
programming
system
with
rapid
turnaround
time
are
described
cacm
march
1965
irons
e
t
ca650303
jb
march
7
1978
6
19
pm
1304
5
1304
1304
5
1304
1304
5
1304
1550
5
1304
1304
6
1304
1472
6
1304
</TEXT>
</DOC>
<DOC>
<DOCNO>1305</DOCNO>
<TEXT>
the
internal
structure
of
the
fortran
cep
translator
the
fortran
cep
translator
converts
a
source
program
written
in
the
fortran
cep
language
into
an
object
program
written
in
the
language
of
the
cep
computer
in
this
paper
after
an
outline
of
the
cep
computer
the
internal
structure
of
the
translator
is
described
emphasis
is
on
the
compilation
of
expressions
of
input
output
lists
and
of
subscripted
variables
cacm
march
1965
mancino
o
g
cecchi
m
m
ca650302
jb
march
7
1978
6
23
pm
1305
4
1305
1035
5
1305
1305
5
1305
1305
5
1305
1305
5
1305
</TEXT>
</DOC>
<DOC>
<DOCNO>1306</DOCNO>
<TEXT>
a
class
of
unambiguous
computer
languages
discussed
in
this
paper
is
the
concept
of
a
fully
nested
computer
language
which
may
be
one
means
of
designing
computer
languages
which
would
be
completely
free
of
ambiguities
several
suggestions
are
also
given
here
for
the
redefinition
of
algol
as
a
fully
nested
language
cacm
march
1965
johnston
j
b
ca650301
jb
march
7
1978
6
26
pm
249
4
1306
254
4
1306
272
4
1306
1102
4
1306
1109
4
1306
1140
4
1306
1188
4
1306
1306
4
1306
1306
4
1306
1464
4
1306
1491
4
1306
1767
4
1306
1781
4
1306
1781
4
1306
1787
4
1306
1949
4
1306
321
4
1306
2059
4
1306
2126
4
1306
435
4
1306
437
4
1306
463
4
1306
483
4
1306
491
4
1306
2732
4
1306
560
4
1306
583
4
1306
3073
4
1306
627
4
1306
631
4
1306
632
4
1306
642
4
1306
644
4
1306
653
4
1306
680
4
1306
761
4
1306
762
4
1306
763
4
1306
123
4
1306
140
4
1306
919
4
1306
989
4
1306
196
5
1306
1306
5
1306
1306
5
1306
1306
5
1306
463
5
1306
</TEXT>
</DOC>
<DOC>
<DOCNO>1307</DOCNO>
<TEXT>
a
lightpen
controlled
program
for
on
line
data
analysis
this
paper
describes
a
technique
designed
to
ease
the
use
of
a
data
processing
system
by
a
person
in
particular
a
scientist
who
is
intimately
and
primarily
concerned
with
interpreting
the
significance
of
data
handled
by
the
system
since
such
a
person
is
often
unable
to
spend
the
time
necessary
to
master
a
programming
language
it
is
essential
that
he
be
aided
in
composing
commands
to
the
computer
in
the
system
described
the
user
is
not
required
to
learn
or
remember
the
vocabulary
of
the
language
because
the
vocabulary
is
displayed
before
him
on
menus
by
means
of
a
computer
drive
scope
he
selects
the
various
vocabulary
elements
required
by
pointing
with
the
light
pen
by
use
of
a
small
unordered
set
of
rewriting
rules
applied
as
a
result
of
light
pen
selections
the
user
generates
only
syntactically
correct
commands
to
the
system
he
does
not
have
to
learn
or
remember
the
grammar
the
program
restricts
the
user
severely
in
the
particular
language
he
can
use
but
the
method
for
communicating
with
the
program
makes
these
restrictions
seem
quite
natural
and
unconstraining
the
program
has
been
used
successfully
for
over
ten
months
cacm
february
1965
goodenough
j
b
ca650217
jb
march
7
1978
10
40
pm
1307
5
1307
1307
5
1307
1307
5
1307
1978
5
1307
1307
6
1307
1589
6
1307
1813
6
1307
</TEXT>
</DOC>
<DOC>
<DOCNO>1308</DOCNO>
<TEXT>
a
mathematical
model
for
mechanical
part
description
the
flexibility
of
a
mathematical
model
takes
advantage
of
the
common
information
requirements
of
computer
aided
engineering
drawing
numerical
control
tape
generation
and
physical
characteristic
computation
by
judicious
control
of
man
machine
communication
requirements
improved
results
over
conventional
engineering
design
processes
are
possible
an
english
like
input
language
tailored
for
use
by
draftsmen
and
designers
will
describe
the
part
and
specify
the
output
desired
one
approach
to
the
mathematical
model
consists
of
a
group
of
surface
defining
quadric
equations
which
are
created
by
a
system
of
modular
subprogram
other
subprograms
will
convert
the
mathematical
model
into
instructions
for
driving
automatic
drafting
machines
and
numerical
controlled
machine
tools
physical
part
characteristics
such
as
center
of
gravity
can
be
computed
by
subprograms
and
used
in
dynamic
analysis
work
the
proposed
overall
system
is
presented
and
experiments
and
demonstrations
are
discussed
cacm
february
1965
luh
j
y
s
krolak
r
j
ca650216
jb
march
7
1978
10
46
pm
1308
5
1308
1308
5
1308
1308
5
1308
</TEXT>
</DOC>
<DOC>
<DOCNO>1309</DOCNO>
<TEXT>
a
computer
user
oriented
system
a
computer
language
system
has
been
developed
which
makes
possible
fast
preparation
of
management
reports
regardless
of
computational
complexity
or
format
variety
costs
are
sufficiently
low
so
that
individually
tailored
reports
can
be
prepared
for
every
manager
the
system
requires
initial
preparation
of
large
data
banks
containing
data
in
elementary
form
use
of
two
special
languages
extract
and
matran
permits
selective
extraction
of
any
data
subset
efficient
processing
through
any
computational
sequence
and
flexible
presentation
of
results
in
either
tabular
or
graphical
form
matrix
algebra
is
used
as
a
fundamental
vehicle
for
accomplishing
both
manipulation
and
computation
cacm
february
1965
montillon
g
d
ca650215
jb
march
7
1978
10
51
pm
1309
4
1309
892
4
1309
1309
5
1309
1309
5
1309
1309
5
1309
656
5
1309
</TEXT>
</DOC>
<DOC>
<DOCNO>1310</DOCNO>
<TEXT>
a
rapid
braille
transliteration
technique
for
certain
ibm
machines
cacm
february
1965
weiler
w
j
klema
v
c
ca650214
jb
march
7
1978
10
55
pm
1310
5
1310
1310
5
1310
1310
5
1310
</TEXT>
</DOC>
<DOC>
<DOCNO>1311</DOCNO>
<TEXT>
efficient
autocorrelation
cacm
february
1965
schmid
l
p
ca650213
jb
march
7
1978
10
56
pm
1311
5
1311
1311
5
1311
1311
5
1311
</TEXT>
</DOC>
<DOC>
<DOCNO>1312</DOCNO>
<TEXT>
recursion
and
iteration
cacm
february
1965
rice
h
g
ca650212
jb
march
7
1978
10
57
pm
1312
5
1312
1312
5
1312
1312
5
1312
3121
5
1312
1312
6
1312
308
6
1312
309
6
1312
2456
6
1312
2709
6
1312
</TEXT>
</DOC>
<DOC>
<DOCNO>1313</DOCNO>
<TEXT>
construction
of
nonlinear
programming
test
problems
cacm
february
1965
rosen
j
b
suzuki
s
ca650211
jb
march
7
1978
10
58
pm
1313
5
1313
1313
5
1313
1313
5
1313
3099
5
1313
3138
5
1313
1313
6
1313
1313
6
1313
2031
6
1313
</TEXT>
</DOC>
<DOC>
<DOCNO>1314</DOCNO>
<TEXT>
the
organization
of
symbol
tables
an
efficient
symbol
table
organization
is
an
important
feature
in
the
design
of
any
compiler
during
the
construction
of
the
virginia
algol
60
compiler
for
the
burroughs
b205
the
primary
consideration
in
the
symbol
table
design
was
that
the
recognition
of
identifiers
and
reserved
words
should
be
as
rapid
as
possible
the
general
features
of
the
technique
are
described
cacm
february
1965
batson
a
ca650210
jb
march
7
1978
11
01
pm
1314
5
1314
1314
5
1314
1314
5
1314
2033
5
1314
1314
6
1314
1785
6
1314
1786
6
1314
</TEXT>
</DOC>
<DOC>
<DOCNO>1315</DOCNO>
<TEXT>
automation
of
the
radioisotope
accountability
system
the
radioisotope
service
of
the
veterans
administration
hospital
omaha
nebraska
used
a
manual
system
of
radioisotope
accountability
for
three
years
the
procedure
which
was
satisfactory
but
time
consuming
was
converted
from
manual
to
a
fully
automated
computer
system
in
january
1963
the
program
for
purchased
radioisotopes
is
written
in
format
fortran
for
the
ibm
1620
computer
a
second
program
for
maintaining
accountability
for
reactor
created
radioisotopes
is
written
in
the
forcom
programming
language
a
minimum
amount
of
bookkeeping
is
required
by
the
reactor
operating
staff
the
united
states
atomic
energy
commission
regulations
specify
that
records
be
kept
this
system
provides
detailed
records
for
each
container
of
radioactive
material
purchased
and
or
created
in
the
triga
reactor
indicating
the
amounts
received
used
and
or
transferred
to
the
health
physicist
for
disposal
consolidated
records
contain
total
amounts
received
used
and
or
disposed
of
for
any
specified
period
of
time
purchased
radioisotopes
are
reported
in
millicuries
reactor
created
radioisotopes
in
microcuries
cacm
february
1965
lahners
e
l
ca650209
jb
march
7
1978
11
10
pm
1315
5
1315
1315
5
1315
1315
5
1315
</TEXT>
</DOC>
<DOC>
<DOCNO>1316</DOCNO>
<TEXT>
bessel
functions
of
the
first
kind
algorithm
236
s17
cacm
february
1965
gautschi
w
ca650208
jb
march
7
1978
11
11
pm
1316
5
1316
1316
5
1316
1316
5
1316
1909
5
1316
134
6
1316
1023
6
1316
1284
6
1316
1316
6
1316
</TEXT>
</DOC>
<DOC>
<DOCNO>1317</DOCNO>
<TEXT>
poisson
charlier
polynomials
algorithm
234
s23
cacm
february
1965
samet
p
ca650207
jb
march
7
1978
11
12
pm
1317
5
1317
1317
5
1317
1317
5
1317
</TEXT>
</DOC>
<DOC>
<DOCNO>1318</DOCNO>
<TEXT>
arccossin
algorithm
206
b1
cacm
february
1965
bowlden
h
j
ca650206
jb
march
7
1978
11
14
pm
1318
5
1318
1318
5
1318
1318
5
1318
</TEXT>
</DOC>
<DOC>
<DOCNO>1319</DOCNO>
<TEXT>
crout
with
equilibration
and
iteration
algorithm
135
f4
cacm
february
1965
meissner
l
p
ca650205
jb
march
7
1978
11
15
pm
1319
4
1319
1319
4
1319
454
4
1319
140
4
1319
152
5
1319
1128
5
1319
1319
5
1319
1319
5
1319
1319
5
1319
</TEXT>
</DOC>
<DOC>
<DOCNO>1320</DOCNO>
<TEXT>
inverse
permutation
algorithm
250
g6
cacm
february
1965
boonstra
b
h
ca650204
jb
march
7
1978
11
16
pm
1320
5
1320
1320
5
1320
1320
5
1320
</TEXT>
</DOC>
<DOC>
<DOCNO>1321</DOCNO>
<TEXT>
outreal
n
algorithm
i5
cacm
february
1965
wirth
n
e
ca650203
jb
march
7
1978
11
17
pm
1321
5
1321
1321
5
1321
1321
5
1321
1705
5
1321
984
6
1321
986
6
1321
1020
6
1321
1321
6
1321
</TEXT>
</DOC>
<DOC>
<DOCNO>1322</DOCNO>
<TEXT>
netflow
algorithm
248
h
cacm
february
1965
briggs
w
a
ca650202
jb
march
7
1978
11
18
pm
1322
5
1322
1322
5
1322
1322
5
1322
1690
5
1322
1322
6
1322
</TEXT>
</DOC>
<DOC>
<DOCNO>1323</DOCNO>
<TEXT>
a
correspondence
between
algol
60
and
church
lambda
notation
part
i
this
paper
describes
how
some
of
the
semantics
of
algol
60
can
be
formalized
by
establishing
a
correspondence
between
expressions
of
algol
60
and
expressions
in
a
modified
form
of
church
l
notation
first
a
model
for
computer
languages
and
compute
behavior
is
described
based
on
the
notions
of
functional
application
and
functional
abstraction
but
also
having
analogues
for
imperative
language
features
then
this
model
is
used
as
an
abstract
object
language
into
which
algol
60
is
mapped
many
of
algol
60
features
emerge
as
particular
arrangements
of
a
small
number
of
structural
rules
suggesting
new
classifications
and
generalizations
the
correspondence
is
first
described
informally
mainly
by
illustrations
the
second
part
of
the
paper
gives
a
formal
description
i
e
an
abstract
compiler
into
the
abstract
objct
language
this
is
itself
presented
in
a
purely
functional
notation
that
is
one
using
only
application
and
abstraction
cacm
february
1965
landin
p
j
ca650201
jb
march
7
1978
11
26
pm
1086
4
1323
1132
4
1323
1234
4
1323
1263
4
1323
1265
4
1323
1270
4
1323
1323
4
1323
1323
4
1323
1323
4
1323
1358
4
1323
1358
4
1323
1379
4
1323
1380
4
1323
1380
4
1323
1453
4
1323
1464
4
1323
1484
4
1323
1491
4
1323
1498
4
1323
1613
4
1323
1614
4
1323
1665
4
1323
1781
4
1323
1781
4
1323
1787
4
1323
1825
4
1323
1860
4
1323
1989
4
1323
2083
4
1323
2112
4
1323
2178
4
1323
2179
4
1323
2252
4
1323
2325
4
1323
2341
4
1323
2534
4
1323
2541
4
1323
2546
4
1323
2645
4
1323
2652
4
1323
2684
4
1323
2698
4
1323
2733
4
1323
2820
4
1323
2842
4
1323
2929
4
1323
2934
4
1323
3069
4
1323
3073
4
1323
3155
4
1323
669
4
1323
679
4
1323
691
4
1323
761
4
1323
949
4
1323
989
4
1323
1323
5
1323
1323
5
1323
1323
5
1323
267
5
1323
1781
5
1323
2178
5
1323
2326
5
1323
2684
5
1323
3184
5
1323
799
5
1323
123
6
1323
196
6
1323
919
6
1323
990
6
1323
1007
6
1323
1046
6
1323
1131
6
1323
1139
6
1323
1140
6
1323
1149
6
1323
1198
6
1323
1215
6
1323
1223
6
1323
1265
6
1323
1303
6
1323
1303
6
1323
1303
6
1323
1303
6
1323
1323
6
1323
1323
6
1323
1323
6
1323
1323
6
1323
1358
6
1323
1366
6
1323
1421
6
1323
1460
6
1323
1462
6
1323
1463
6
1323
1467
6
1323
1468
6
1323
1477
6
1323
1491
6
1323
1496
6
1323
1531
6
1323
1535
6
1323
1565
6
1323
1601
6
1323
1602
6
1323
1613
6
1323
1614
6
1323
1626
6
1323
1641
6
1323
1787
6
1323
1788
6
1323
205
6
1323
1834
6
1323
224
6
1323
249
6
1323
288
6
1323
316
6
1323
381
6
1323
398
6
1323
2059
6
1323
11
6
1323
2127
6
1323
2192
6
1323
404
6
1323
410
6
1323
463
6
1323
464
6
1323
483
6
1323
3184
6
1323
3184
6
1323
3184
6
1323
3186
6
1323
3188
6
1323
584
6
1323
600
6
1323
680
6
1323
691
6
1323
763
6
1323
799
6
1323
</TEXT>
</DOC>
<DOC>
<DOCNO>1324</DOCNO>
<TEXT>
answering
english
questions
by
computer
a
survey
fifteen
experimental
english
language
question
answering
systems
which
are
programmed
and
operating
are
described
and
reviewed
the
systems
range
from
a
conversation
machine
to
programs
which
make
sentences
about
pictures
and
systems
which
translate
from
english
into
logical
calculi
systems
are
classified
as
list
structured
data
based
graphic
data
based
text
based
and
inferential
principles
and
methods
of
operations
are
detailed
and
discussed
it
is
concluded
that
the
data
base
question
answer
has
passed
from
initial
research
into
the
early
developmental
phase
the
most
difficult
and
important
research
questions
for
the
advancement
of
general
purpose
language
processors
are
seen
to
be
concerned
with
measuring
dealing
with
ambiguities
translating
into
formal
languages
and
searching
large
tree
structures
cacm
january
1965
simmons
r
f
ca650113
jb
march
8
1978
2
21
pm
1324
4
1324
1324
4
1324
1324
4
1324
892
4
1324
931
4
1324
1155
5
1324
1324
5
1324
1324
5
1324
1324
5
1324
1456
5
1324
1468
5
1324
1515
5
1324
1699
5
1324
1856
5
1324
2127
5
1324
634
5
1324
652
5
1324
653
5
1324
1155
6
1324
1155
6
1324
1194
6
1324
1225
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1324
6
1324
1487
6
1324
1527
6
1324
1553
6
1324
1681
6
1324
1781
6
1324
1856
6
1324
</TEXT>
</DOC>
<DOC>
<DOCNO>1325</DOCNO>
<TEXT>
remote
on
line
real
time
computer
diagnosis
of
the
clinical
electrocardiogram
presented
in
this
paper
is
a
brief
report
on
the
hardware
software
system
configuration
and
function
of
a
system
for
the
remote
online
real
time
digital
computer
diagnosis
of
clinical
electrocardiograms
it
seems
likely
that
efforts
of
this
sort
will
lead
to
a
satisfactory
solution
to
the
problem
of
the
automatic
diagnosis
of
electrocardiograms
current
attempts
by
the
authors
to
extend
the
diagnostic
capabilities
of
the
present
system
are
particularly
concerned
with
increasing
the
fidelity
of
the
adaptive
matched
filters
the
development
of
three
dimensional
pattern
analysis
the
analysis
of
parallel
electrocardiographer
computer
diagnostic
interaction
and
a
study
of
the
possibility
of
introducing
major
tree
like
branching
decisions
early
in
the
diagnostic
process
cacm
january
1965
whipple
g
h
dickson
j
f
horibe
h
stark
l
ca650112
jb
march
8
1978
2
27
pm
1325
4
1325
1325
5
1325
1325
5
1325
1325
5
1325
462
5
1325
</TEXT>
</DOC>
<DOC>
<DOCNO>1326</DOCNO>
<TEXT>
boundary
networks
a
feasible
computer
procedure
is
described
for
determining
the
total
or
partial
inclusion
of
arbitrarily
given
points
and
lines
with
respect
to
a
set
of
general
polygonal
domains
which
partition
a
plane
bounded
region
a
scheme
for
the
computer
representation
of
the
boundaries
of
the
domains
and
an
algorithm
based
on
this
scheme
for
evaluating
the
inclusion
relations
are
specified
in
detail
the
method
employs
several
levels
of
selection
criteria
for
the
purpose
of
reducing
the
number
of
accesses
to
auxiliary
storage
devices
and
the
amount
of
boundary
data
for
which
processing
is
required
cacm
january
1965
loomis
r
g
ca650111
jb
march
8
1978
2
31
pm
1326
5
1326
1326
5
1326
1326
5
1326
1630
5
1326
2547
5
1326
2987
5
1326
3165
5
1326
1326
6
1326
1326
6
1326
1326
6
1326
1326
6
1326
1630
6
1326
1925
6
1326
2125
6
1326
2547
6
1326
2633
6
1326
2987
6
1326
421
6
1326
524
6
1326
</TEXT>
</DOC>
<DOC>
<DOCNO>1327</DOCNO>
<TEXT>
use
of
decision
tables
in
computer
programming
a
decision
table
is
a
tabular
form
for
displaying
decision
logic
decision
tables
have
many
inherent
advantages
the
technique
to
be
illustrated
puts
these
advantages
to
use
in
that
it
enables
one
to
program
directly
from
a
decision
table
the
technique
is
based
on
the
creation
of
a
binary
image
of
a
limited
entry
decision
table
in
computer
memory
a
binary
image
of
a
given
set
of
input
conditions
can
also
be
created
this
data
image
is
used
to
scan
the
decision
table
image
to
arrive
at
the
proper
course
of
action
there
are
several
advantages
gained
from
the
programming
point
view
1
amount
of
computer
memory
used
is
drastically
reduced
2
programming
is
simplified
and
3
documentation
is
brief
and
clear
cacm
january
1965
kirk
h
w
ca650110
jb
march
8
1978
2
36
pm
1327
5
1327
1327
5
1327
1327
5
1327
1354
5
1327
1488
5
1327
2053
5
1327
2220
5
1327
2273
5
1327
2726
5
1327
2856
5
1327
1172
6
1327
1172
6
1327
1172
6
1327
1172
6
1327
1172
6
1327
1172
6
1327
1237
6
1327
1237
6
1327
1237
6
1327
1237
6
1327
1237
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1327
6
1327
1354
6
1327
1354
6
1327
1354
6
1327
1354
6
1327
1354
6
1327
1488
6
1327
1489
6
1327
1489
6
1327
1548
6
1327
1548
6
1327
1684
6
1327
250
6
1327
2053
6
1327
2053
6
1327
2220
6
1327
2220
6
1327
2220
6
1327
2221
6
1327
2263
6
1327
2453
6
1327
2598
6
1327
</TEXT>
</DOC>
<DOC>
<DOCNO>1328</DOCNO>
<TEXT>
further
remarks
on
reducing
truncation
errors
cacm
january
1965
kahan
w
ca650109
jb
march
8
1978
2
37
pm
1328
4
1328
1333
4
1328
2144
4
1328
1052
5
1328
1328
5
1328
1328
5
1328
1328
5
1328
2282
5
1328
2860
5
1328
3083
5
1328
1328
6
1328
1328
6
1328
1328
6
1328
1973
6
1328
2049
6
1328
2107
6
1328
2203
6
1328
2543
6
1328
2552
6
1328
492
6
1328
</TEXT>
</DOC>
<DOC>
<DOCNO>1329</DOCNO>
<TEXT>
simulation
of
boolean
functions
in
a
decimal
computer
cacm
january
1965
mano
m
m
ca650108
jb
march
8
1978
2
38
pm
1207
5
1329
1208
5
1329
1329
5
1329
1329
5
1329
1329
5
1329
3053
5
1329
1329
6
1329
1329
6
1329
1329
6
1329
1785
6
1329
1973
6
1329
1992
6
1329
2107
6
1329
2109
6
1329
2412
6
1329
2543
6
1329
2673
6
1329
2707
6
1329
2770
6
1329
</TEXT>
</DOC>
<DOC>
<DOCNO>1330</DOCNO>
<TEXT>
automated
plotting
flow
charts
on
a
small
computer
cacm
january
1965
anderson
h
e
ca650107
jb
march
8
1978
2
39
pm
1330
4
1330
1330
4
1330
1348
4
1330
2315
4
1330
1330
5
1330
1330
5
1330
1330
5
1330
528
5
1330
728
5
1330
</TEXT>
</DOC>
<DOC>
<DOCNO>1331</DOCNO>
<TEXT>
code
structures
for
protection
and
manipulation
of
variable
length
items
when
items
are
made
up
of
a
variable
number
of
characters
each
containing
the
same
number
of
bits
certain
control
information
partition
symbols
is
inserted
to
mark
their
separations
since
errors
in
identification
of
these
control
characters
can
lead
to
serious
trouble
methods
of
protecting
these
symbols
are
indicated
a
6
bit
code
assignment
of
alphanumeric
characters
for
fixed
word
length
computers
is
given
and
its
suitability
for
error
detection
and
variable
length
item
manipulation
is
shown
also
indicated
is
its
flexibility
during
certain
arithmetic
operations
cacm
january
1965
ramamoorthy
c
v
ca650106
jb
march
8
1978
2
48
pm
1331
5
1331
1331
5
1331
1331
5
1331
</TEXT>
</DOC>
<DOC>
<DOCNO>1332</DOCNO>
<TEXT>
subroutine
assembly
a
description
is
given
of
an
assembly
system
which
requires
only
one
pass
and
does
not
maintain
a
table
of
information
about
the
subroutine
library
cacm
january
1965
samet
p
a
ca650105
jb
march
8
1978
2
51
pm
1332
4
1332
1044
5
1332
1332
5
1332
1332
5
1332
1332
5
1332
</TEXT>
</DOC>
<DOC>
<DOCNO>1333</DOCNO>
<TEXT>
reducing
truncation
errors
using
cascading
accumulators
when
accumulating
a
large
number
of
quantities
as
in
numerical
integration
the
sum
itself
may
become
much
larger
than
the
individual
addends
this
results
in
truncation
error
much
of
this
error
can
be
eliminated
using
cascading
accumulators
as
noted
in
a
recent
article
by
wolfe
a
simpler
and
slightly
more
flexible
algorithm
is
presented
which
deals
also
with
the
case
of
negative
addends
cacm
january
1965
ross
d
r
ca650104
jb
march
8
1978
2
54
pm
1328
4
1333
1333
4
1333
2144
4
1333
1052
5
1333
1333
5
1333
1333
5
1333
1333
5
1333
</TEXT>
</DOC>
<DOC>
<DOCNO>1334</DOCNO>
<TEXT>
mechanization
of
tedious
algebra
the
newcomb
operators
of
planetary
theory
a
computer
program
has
been
written
to
generate
tables
of
formulas
for
the
newcomb
operators
of
planetary
theory
the
newcomb
operators
are
expressed
as
polynomials
in
two
variables
one
of
which
stands
for
a
simple
differential
operator
and
the
other
for
an
arbitrary
integer
the
polynomials
are
generated
by
a
recurrence
scheme
the
program
is
coded
in
fortran
using
simple
array
manipulation
techniques
to
perform
the
algebraic
operations
formulas
for
over
100
newcomb
operators
have
been
produced
by
the
program
and
typeset
photographically
on
an
s
560
photon
system
cacm
january
1965
gerard
j
m
izsak
i
g
barnett
m
p
ca650103
jb
march
8
1978
2
59
pm
1334
4
1334
1396
4
1334
1444
4
1334
964
5
1334
1334
5
1334
1334
5
1334
1334
5
1334
1396
5
1334
964
6
1334
1028
6
1334
1029
6
1334
1083
6
1334
1132
6
1334
1214
6
1334
1278
6
1334
1334
6
1334
1365
6
1334
1386
6
1334
1387
6
1334
1388
6
1334
1392
6
1334
1393
6
1334
1394
6
1334
1395
6
1334
1396
6
1334
1397
6
1334
1496
6
1334
284
6
1334
407
6
1334
3199
6
1334
3200
6
1334
3201
6
1334
3202
6
1334
3203
6
1334
3204
6
1334
561
6
1334
730
6
1334
</TEXT>
</DOC>
<DOC>
<DOCNO>1335</DOCNO>
<TEXT>
character
set
for
optical
character
recognition
proposed
american
stand
ard
cacm
january
1965
ca650102
jb
march
8
1978
3
00
pm
1335
5
1335
1335
5
1335
1335
5
1335
</TEXT>
</DOC>
<DOC>
<DOCNO>1336</DOCNO>
<TEXT>
npl
highlights
of
a
new
programming
language
cacm
january
1965
radin
g
rogoway
h
p
ca650101
jb
march
8
1978
3
01
pm
1247
5
1336
1336
5
1336
1336
5
1336
1336
5
1336
1945
5
1336
823
6
1336
914
6
1336
915
6
1336
917
6
1336
984
6
1336
989
6
1336
990
6
1336
1012
6
1336
1084
6
1336
1098
6
1336
1122
6
1336
1138
6
1336
1139
6
1336
1141
6
1336
1200
6
1336
1223
6
1336
1265
6
1336
1336
6
1336
1336
6
1336
1396
6
1336
1455
6
1336
1477
6
1336
1487
6
1336
1491
6
1336
1496
6
1336
483
6
1336
584
6
1336
669
6
1336
680
6
1336
763
6
1336
</TEXT>
</DOC>
<DOC>
<DOCNO>1337</DOCNO>
<TEXT>
euler
a
generalization
of
algol
and
its
formal
definition
cacm
december
1966
wirth
n
weber
h
ca661212
jb
march
30
1978
9
11
am
1337
5
1337
1337
5
1337
1337
5
1337
2423
5
1337
1337
6
1337
2015
6
1337
</TEXT>
</DOC>
<DOC>
<DOCNO>1338</DOCNO>
<TEXT>
additional
comments
on
a
problem
in
concurrent
progamming
control
cacm
december
1966
knuth
d
e
ca661211
jb
march
30
1978
9
12
am
1338
5
1338
1338
5
1338
1338
5
1338
2150
5
1338
2228
5
1338
2256
5
1338
2342
5
1338
2618
5
1338
1198
6
1338
1198
6
1338
1198
6
1338
1198
6
1338
1198
6
1338
1338
6
1338
1338
6
1338
1338
6
1338
1338
6
1338
1338
6
1338
1749
6
1338
1749
6
1338
1749
6
1338
1877
6
1338
2256
6
1338
</TEXT>
</DOC>
<DOC>
<DOCNO>1339</DOCNO>
<TEXT>
a
contribution
to
the
development
of
algol
cacm
december
1966
wirth
n
hoare
c
a
r
ca661210
jb
march
30
1978
9
13
am
1339
5
1339
1339
5
1339
1339
5
1339
</TEXT>
</DOC>
<DOC>
<DOCNO>1340</DOCNO>
<TEXT>
multiplexing
of
slow
peripherals
the
philosophy
of
a
monitor
which
allows
slow
output
devices
to
be
multiplexed
is
presented
cacm
december
1966
abraham
c
lance
g
n
pearcey
t
ca661209
jb
march
2
1978
2
25
pm
1340
5
1340
1340
5
1340
1340
5
1340
</TEXT>
</DOC>
<DOC>
<DOCNO>1341</DOCNO>
<TEXT>
levels
of
computer
systems
in
building
current
computer
systems
we
tend
to
break
them
down
into
levels
of
control
command
and
communication
in
using
the
system
we
break
our
problems
down
correspondingly
the
continued
use
of
such
a
structure
raises
questions
about
its
effects
on
the
usefulness
of
future
systems
particularly
with
regard
to
such
trends
as
time
sharing
parallel
programming
and
eventually
systems
which
learn
in
this
essay
some
of
these
questions
are
posed
and
the
general
attitude
we
must
take
in
pursuing
the
problem
further
is
discussed
cacm
december
1966
bryant
p
ca661208
jb
march
2
1978
2
29
pm
1341
5
1341
1341
5
1341
1341
5
1341
</TEXT>
</DOC>
<DOC>
<DOCNO>1342</DOCNO>
<TEXT>
transportation
problem
algorithms
293
h
cacm
december
1966
bayer
g
ca661207a
jb
march
2
1978
2
30
pm
1342
5
1342
1342
5
1342
1342
5
1342
</TEXT>
</DOC>
<DOC>
<DOCNO>1343</DOCNO>
<TEXT>
havie
integrator
algorithm
257
d1
cacm
december
1966
farkas
i
ca661207b
jb
march
23
1978
4
16
pm
1343
5
1343
1343
5
1343
1343
5
1343
</TEXT>
</DOC>
<DOC>
<DOCNO>1344</DOCNO>
<TEXT>
statistical
computations
based
upon
algebraically
specified
models
based
upon
a
machine
readable
statistical
model
and
related
symbolic
specifications
an
efficient
method
of
performing
calculations
for
statistical
models
of
a
balanced
complete
nature
is
presented
fixes
mixed
and
random
analysis
of
variance
models
are
considered
a
procedure
for
obtaining
variance
components
and
calculated
f
statistics
for
the
model
terms
is
included
cacm
december
1966
schlater
j
e
hemerle
w
j
ca661206
jb
march
2
1978
2
33
pm
1344
5
1344
1344
5
1344
1344
5
1344
</TEXT>
</DOC>
<DOC>
<DOCNO>1345</DOCNO>
<TEXT>
tensor
calculations
on
the
computer
a
formac
program
has
been
written
which
is
capable
of
calculating
various
quantities
of
interest
in
tensor
calculus
using
this
code
christoffel
symbols
have
been
calculated
for
12
basic
orthogonal
coordinate
systems
cacm
december
1966
waltons
j
j
ca661205
jb
march
2
1978
2
35
pm
1345
5
1345
1345
5
1345
1345
5
1345
1543
5
1345
1664
5
1345
1345
6
1345
1345
6
1345
1543
6
1345
1616
6
1345
1616
6
1345
</TEXT>
</DOC>
<DOC>
<DOCNO>1346</DOCNO>
<TEXT>
on
the
application
of
the
process
of
equalization
of
maxima
to
obtain
rational
approximation
to
certain
modified
bessel
functions
the
second
remes
algorithm
as
originally
established
for
polynomials
may
converge
or
not
when
the
approximating
functions
are
rational
however
the
few
results
known
in
this
domain
show
how
efficient
the
algorithm
can
be
to
obtain
approximations
with
a
small
error
much
more
than
in
the
polynomial
case
in
which
the
best
approximation
can
be
very
nearly
approached
directly
by
a
series
development
the
aim
of
this
paper
is
to
investigate
the
limitations
of
the
applicability
of
certain
extensions
of
the
algorithm
to
the
case
where
the
approximations
are
rational
as
well
as
to
present
some
numerical
results
cacm
december
1966
gargantini
l
ca661204
jb
march
2
1978
2
39
pm
1015
4
1346
1346
4
1346
1346
4
1346
1440
4
1346
1645
4
1346
951
4
1346
951
5
1346
1346
5
1346
1346
5
1346
1346
5
1346
532
5
1346
</TEXT>
</DOC>
<DOC>
<DOCNO>1347</DOCNO>
<TEXT>
general
time
varying
systems
error
sensitivities
program
the
evaluation
by
the
propagation
of
variance
technique
of
the
sensitivity
of
time
varying
systems
to
initial
condition
and
parameter
errors
involves
the
determination
of
several
system
dependent
partial
derivative
matrices
this
requirement
has
led
to
separate
programs
for
each
system
under
investigation
a
new
program
through
utilization
of
the
wengert
differentiation
technique
automatically
determines
the
required
matrices
from
specific
system
equations
supplied
in
subroutine
form
at
execution
time
eliminating
the
need
for
individualized
programs
and
presaging
the
further
development
of
extremely
general
computer
programs
cacm
december
1966
wilkins
r
d
ca661203
jb
march
2
1978
2
44
pm
1028
4
1347
1216
4
1347
1216
4
1347
1278
4
1347
1278
4
1347
1347
4
1347
1347
4
1347
1347
4
1347
1396
4
1347
1396
4
1347
1396
4
1347
1536
4
1347
1028
5
1347
1029
5
1347
1278
5
1347
1347
5
1347
1347
5
1347
1347
5
1347
</TEXT>
</DOC>
<DOC>
<DOCNO>1348</DOCNO>
<TEXT>
flowtrace
a
computer
program
for
flowcharting
programs
the
flowtrace
system
produces
flowcharts
of
programs
written
in
almost
any
programming
language
one
most
describe
the
syntax
of
the
control
statements
in
his
language
for
this
purpose
a
metalanguage
is
available
the
resultant
object
deck
is
used
to
flowchart
any
programs
in
the
language
described
several
examples
of
fap
and
snobol
flowcharts
are
given
however
it
is
not
necessary
to
confine
one
scope
to
existing
languages
one
may
define
his
own
language
in
any
well
structured
manner
this
feature
is
particularly
useful
when
it
is
desirable
to
chart
only
comments
within
a
program
such
an
approach
permits
the
documentation
of
descriptive
remarks
and
avoids
the
inclusion
of
coding
details
cacm
december
1966
sherman
p
m
ca661202
jb
march
2
1978
2
49
pm
1330
4
1348
1348
4
1348
2315
4
1348
1348
5
1348
1348
5
1348
1348
5
1348
2315
5
1348
728
5
1348
1348
6
1348
1834
6
1348
1987
6
1348
728
6
1348
</TEXT>
</DOC>
<DOC>
<DOCNO>1349</DOCNO>
<TEXT>
computing
capabilities
at
western
european
universities
this
report
on
the
author
trip
to
universities
in
western
europe
in
the
summer
of
1966
gives
brief
descriptions
of
computing
activities
at
each
institution
visited
present
equipment
capabilities
vary
from
moderate
to
large
scale
however
many
institutions
plan
to
acquire
complex
time
shared
systems
in
the
near
future
in
the
author
opinion
the
state
of
the
art
lags
behind
that
on
this
continent
this
lag
is
attributed
to
four
principal
factors
a
the
handicapping
organization
of
academic
procedures
b
the
university
government
financial
relationship
c
the
subordinated
organization
of
the
computing
facility
d
the
paucity
of
professional
interchange
of
knowledge
the
effects
of
these
constraints
are
explicated
cacm
december
1966
finerman
a
ca661201
jb
march
2
1978
2
55
pm
1349
4
1349
1349
4
1349
1349
4
1349
1349
4
1349
689
4
1349
1349
5
1349
1349
5
1349
1349
5
1349
236
5
1349
1862
5
1349
323
5
1349
415
5
1349
83
5
1349
1349
6
1349
</TEXT>
</DOC>
<DOC>
<DOCNO>1350</DOCNO>
<TEXT>
the
augmented
predictive
analyzer
for
context
free
languages
its
relative
efficiency
it
has
been
proven
by
greibach
that
for
a
given
context
free
grammar
g
a
standard
form
grammar
gs
can
be
constructed
which
generates
the
same
languages
as
is
generated
by
g
and
whose
rules
are
all
of
the
form
z
cy
1
y
m
m
o
where
z
and
y
i
are
intermediate
symbols
and
c
a
terminal
symbol
since
the
predictive
analyzer
at
harvard
uses
a
standard
form
grammar
it
can
accept
the
language
of
any
context
free
grammar
g
given
an
equivalent
standard
form
grammar
gs
the
structural
descriptions
sd
gs
x
assigned
to
a
given
sentence
x
by
the
predictive
analyzer
however
are
usually
different
from
the
structural
descriptions
sd
g
x
assigned
to
the
same
sentence
by
the
original
context
free
grammar
g
from
which
gs
is
derived
in
section
1
an
algorithm
originally
due
to
abbott
is
described
standard
form
grammar
each
of
whose
rules
is
in
standard
form
supplemented
by
additional
information
describing
its
derivation
from
the
original
context
free
grammar
a
technique
for
performing
the
sd
gs
x
to
sd
g
x
transformation
effectively
is
also
described
in
section
2
the
augmented
predictive
analyzer
as
a
parsing
algorithm
for
arbitrary
context
free
languages
is
compared
with
two
other
parsing
algorithms
a
selective
top
to
bottom
algorithm
similar
to
irons
error
correcting
parse
algorithm
and
an
immediate
constituent
analyzer
which
is
an
extension
of
sakai
cocke
algorithm
for
normal
grammars
the
comparison
is
based
upon
several
criteria
of
efficiency
covering
core
storage
requirements
complexities
of
the
programs
and
processing
time
cacm
november
1966
kuno
s
ca661108
jb
march
2
1978
3
11
pm
1225
4
1350
1225
4
1350
1350
4
1350
1350
4
1350
1350
4
1350
1350
4
1350
1350
4
1350
1399
4
1350
1646
4
1350
1659
4
1350
1659
4
1350
1768
4
1350
1781
4
1350
1781
4
1350
1856
4
1350
1945
4
1350
1945
4
1350
1945
4
1350
2050
4
1350
2110
4
1350
2650
4
1350
2698
4
1350
2708
4
1350
3093
4
1350
3094
4
1350
1012
5
1350
1225
5
1350
1265
5
1350
1350
5
1350
1350
5
1350
1350
5
1350
1399
5
1350
1659
5
1350
680
5
1350
1225
6
1350
1265
6
1350
1350
6
1350
1671
6
1350
1697
6
1350
</TEXT>
</DOC>
<DOC>
<DOCNO>1351</DOCNO>
<TEXT>
automatic
error
bounds
on
real
zeros
of
rational
functions
a
procedure
for
implementing
an
interval
arithmetic
version
of
the
newton
raphson
method
is
proposed
the
procedure
require
only
a
starting
interval
over
which
the
zeros
of
a
given
rational
function
are
to
be
located
the
method
automatically
provides
bounds
for
roundoff
error
cacm
november
1966
dargel
r
h
loscalzo
f
r
witt
t
h
ca661107
jb
march
2
1978
3
31
pm
1351
5
1351
1351
5
1351
1351
5
1351
</TEXT>
</DOC>
<DOC>
<DOCNO>1352</DOCNO>
<TEXT>
automatic
integration
of
a
function
with
a
parameter
two
efficient
methods
for
automatic
numerical
integration
are
romberg
integration
and
adaptive
simpson
integration
for
integrands
of
the
form
f
x
g
x
a
where
a
is
a
parameter
it
is
shown
that
romberg
method
is
more
efficient
a
fortran
program
shows
how
to
achieve
this
greater
efficiency
cacm
november
1966
rabinowitz
p
ca661106
jb
march
2
1978
3
35
pm
1040
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1352
4
1352
1356
4
1352
1883
4
1352
1982
4
1352
1982
4
1352
2040
4
1352
2040
4
1352
2040
4
1352
2040
4
1352
2048
4
1352
2048
4
1352
2048
4
1352
2074
4
1352
2074
4
1352
2074
4
1352
2074
4
1352
2093
4
1352
2093
4
1352
2093
4
1352
2093
4
1352
2415
4
1352
2550
4
1352
1040
5
1352
1092
5
1352
1241
5
1352
1273
5
1352
1352
5
1352
1352
5
1352
1352
5
1352
324
5
1352
2040
5
1352
429
5
1352
570
5
1352
621
5
1352
786
5
1352
834
5
1352
872
5
1352
1241
6
1352
1273
6
1352
1352
6
1352
1356
6
1352
324
6
1352
621
6
1352
</TEXT>
</DOC>
<DOC>
<DOCNO>1353</DOCNO>
<TEXT>
techniques
for
automatic
tolerance
control
in
linear
programming
in
this
technical
note
the
numerical
steps
for
the
simplex
method
of
linear
programming
are
reviewed
and
the
tolerances
needed
in
the
numerical
procedure
are
defined
objective
criteria
are
given
for
accomplishing
the
numerical
steps
of
the
method
and
the
calculation
of
necessary
tolerances
cacm
november
1966
clasen
r
j
ca661105
jb
march
2
1978
3
37
pm
1353
5
1353
1353
5
1353
1353
5
1353
2589
5
1353
1353
6
1353
</TEXT>
</DOC>
<DOC>
<DOCNO>1354</DOCNO>
<TEXT>
conversion
of
decision
tables
to
computer
programs
by
rule
mark
techniques
the
rule
mask
technique
is
one
method
of
converting
limited
entry
decision
tables
to
computer
programs
recent
discussion
suggest
that
in
many
circumstances
it
is
to
be
preferred
to
the
technique
of
constructing
networks
or
trees
a
drawback
of
the
technique
as
hitherto
presented
is
its
liability
to
produce
object
programs
of
longer
run
time
than
necessary
in
this
paper
a
modification
of
the
technique
is
discussed
which
takes
into
account
both
rule
frequencies
and
the
relative
times
for
evaluating
conditions
this
can
materially
improve
object
program
run
time
cacm
november
1966
king
p
j
h
ca661104
jb
march
2
1978
3
41
pm
1354
4
1354
1354
4
1354
1354
4
1354
1488
4
1354
1488
4
1354
1994
4
1354
2053
4
1354
2053
4
1354
2053
4
1354
2220
4
1354
2220
4
1354
2220
4
1354
2273
4
1354
2273
4
1354
2273
4
1354
2453
4
1354
2598
4
1354
2726
4
1354
2726
4
1354
2856
4
1354
2856
4
1354
1172
5
1354
1237
5
1354
1327
5
1354
1354
5
1354
1354
5
1354
1354
5
1354
1684
5
1354
2053
5
1354
2220
5
1354
2273
5
1354
2453
5
1354
2726
5
1354
2856
5
1354
3113
5
1354
1172
6
1354
1172
6
1354
1172
6
1354
1172
6
1354
1172
6
1354
1172
6
1354
1237
6
1354
1237
6
1354
1237
6
1354
1327
6
1354
1327
6
1354
1327
6
1354
1327
6
1354
1327
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1354
6
1354
1488
6
1354
1489
6
1354
1489
6
1354
1548
6
1354
1548
6
1354
1564
6
1354
1684
6
1354
250
6
1354
2053
6
1354
2053
6
1354
2053
6
1354
2220
6
1354
2220
6
1354
2220
6
1354
2220
6
1354
2221
6
1354
2263
6
1354
2263
6
1354
2453
6
1354
2598
6
1354
2598
6
1354
2691
6
1354
2856
6
1354
753
6
1354
</TEXT>
</DOC>
<DOC>
<DOCNO>1355</DOCNO>
<TEXT>
regular
coulomb
wave
functions
algorithm
292
cacm
november
1966
gautschi
w
ca661103a
jb
march
2
1978
3
43
pm
1355
4
1355
2619
4
1355
1355
5
1355
1355
5
1355
1355
5
1355
1419
5
1355
</TEXT>
</DOC>
<DOC>
<DOCNO>1356</DOCNO>
<TEXT>
havie
integrator
algorithm
257
d1
cacm
november
1966
hillstrom
k
ca661103b
jb
march
23
1978
4
19
pm
1352
4
1356
1356
4
1356
1883
4
1356
2040
4
1356
1241
5
1356
1356
5
1356
1356
5
1356
1356
5
1356
2040
5
1356
1241
6
1356
1273
6
1356
1352
6
1356
1356
6
1356
324
6
1356
621
6
1356
</TEXT>
</DOC>
<DOC>
<DOCNO>1357</DOCNO>
<TEXT>
examination
scheduling
algorithm
286
h
cacm
november
1966
williams
r
ca661103c
jb
march
23
1978
4
20
pm
1357
5
1357
1357
5
1357
1357
5
1357
</TEXT>
</DOC>
<DOC>
<DOCNO>1358</DOCNO>
<TEXT>
syntax
macros
and
extended
translation
a
translation
approach
is
described
which
allows
one
to
extended
the
syntax
and
semantics
of
a
given
high
level
base
language
by
the
use
of
a
new
formalism
called
a
syntax
macro
syntax
macros
define
string
transformations
based
on
syntactic
elements
of
the
base
language
two
types
of
macros
are
discussed
and
examples
are
given
of
their
use
the
conditional
generation
of
macros
based
on
options
and
alternatives
recognized
by
the
scan
are
also
described
cacm
november
1966
leavenworth
b
m
ca661102
jb
march
2
1978
3
46
pm
1037
4
1358
1086
4
1358
1132
4
1358
1234
4
1358
1234
4
1358
1263
4
1358
1265
4
1358
1270
4
1358
1323
4
1358
1323
4
1358
1358
4
1358
1358
4
1358
1358
4
1358
1358
4
1358
1358
4
1358
1379
4
1358
1380
4
1358
1380
4
1358
1453
4
1358
1464
4
1358
1484
4
1358
1491
4
1358
1491
4
1358
1498
4
1358
1565
4
1358
1613
4
1358
1614
4
1358
1665
4
1358
1781
4
1358
1781
4
1358
1781
4
1358
1781
4
1358
1787
4
1358
1788
4
1358
1825
4
1358
1860
4
1358
1989
4
1358
2083
4
1358
2112
4
1358
2178
4
1358
2179
4
1358
2252
4
1358
2325
4
1358
2341
4
1358
2534
4
1358
2541
4
1358
2546
4
1358
2645
4
1358
2652
4
1358
2684
4
1358
2698
4
1358
2733
4
1358
2820
4
1358
2842
4
1358
2929
4
1358
2934
4
1358
3069
4
1358
3073
4
1358
3155
4
1358
669
4
1358
679
4
1358
691
4
1358
761
4
1358
949
4
1358
989
4
1358
205
5
1358
1358
5
1358
1358
5
1358
1358
5
1358
1460
5
1358
1541
5
1358
1565
5
1358
1781
5
1358
1824
5
1358
2252
5
1358
3184
5
1358
729
5
1358
799
5
1358
123
6
1358
196
6
1358
919
6
1358
990
6
1358
1007
6
1358
1046
6
1358
1131
6
1358
1139
6
1358
1140
6
1358
1149
6
1358
1162
6
1358
1198
6
1358
1215
6
1358
1223
6
1358
1265
6
1358
1303
6
1358
1323
6
1358
1358
6
1358
1358
6
1358
1358
6
1358
1358
6
1358
1358
6
1358
1366
6
1358
1380
6
1358
1421
6
1358
1455
6
1358
1460
6
1358
1462
6
1358
1463
6
1358
1467
6
1358
1468
6
1358
1477
6
1358
1491
6
1358
1496
6
1358
1496
6
1358
1531
6
1358
1535
6
1358
1565
6
1358
1601
6
1358
1602
6
1358
1613
6
1358
1614
6
1358
1614
6
1358
1626
6
1358
1641
6
1358
1781
6
1358
1787
6
1358
1788
6
1358
205
6
1358
205
6
1358
224
6
1358
249
6
1358
288
6
1358
316
6
1358
381
6
1358
398
6
1358
11
6
1358
2155
6
1358
404
6
1358
404
6
1358
410
6
1358
463
6
1358
464
6
1358
483
6
1358
3184
6
1358
3184
6
1358
3188
6
1358
584
6
1358
600
6
1358
680
6
1358
691
6
1358
763
6
1358
799
6
1358
</TEXT>
</DOC>
<DOC>
<DOCNO>1359</DOCNO>
<TEXT>
data
filtering
applied
to
information
storage
and
retrieval
applications
manipulation
of
data
strings
is
the
most
complex
processing
function
in
information
storage
and
retrieval
applications
data
string
manipulation
is
discussed
within
the
context
of
an
interpretive
processing
environment
controlled
by
the
use
of
procedural
directives
the
sequence
of
procedural
directives
is
derived
from
a
job
assumed
to
be
expressed
in
a
user
oriented
source
language
each
data
string
with
the
structured
data
environment
data
bank
is
explicitly
or
implicitly
related
to
a
format
declaration
residing
in
a
format
library
the
processing
mechanics
associated
with
data
string
manipulation
is
developed
in
accordance
with
a
generalized
data
filtering
concept
this
results
in
the
implementation
of
a
two
part
data
filter
module
that
satisfies
internal
processing
functions
by
filtering
data
strings
through
format
declarations
associated
with
its
input
and
output
ports
cacm
november
1966
larsen
r
p
ca661101
jb
march
2
1978
3
52
pm
1359
5
1359
1359
5
1359
1359
5
1359
</TEXT>
</DOC>
<DOC>
<DOCNO>1360</DOCNO>
<TEXT>
description
of
systems
used
for
data
transmission
an
asa
tutorial
cacm
october
1966
ca661007
jb
march
2
1978
3
54
pm
1360
5
1360
1360
5
1360
1360
5
1360
</TEXT>
</DOC>
<DOC>
<DOCNO>1361</DOCNO>
<TEXT>
rectangular
holes
in
twelve
row
punched
cards
proposed
american
standard
cacm
october
1966
ca661006
jb
march
2
1978
3
55
pm
1361
5
1361
1361
5
1361
1361
5
1361
</TEXT>
</DOC>
<DOC>
<DOCNO>1362</DOCNO>
<TEXT>
code
extension
in
ascii
an
asa
tutorial
the
american
standard
code
for
information
interchange
ascii
contains
a
number
of
control
characters
associated
with
the
principle
of
code
extension
that
is
with
the
representation
of
information
which
cannot
be
directly
represented
by
means
of
the
characters
in
the
code
the
manner
of
use
of
these
characters
has
not
previously
been
completely
described
this
paper
presents
a
set
of
mutually
consistent
philosophies
regarding
code
extension
applications
and
suggests
a
corollary
set
of
doctrines
for
the
application
of
the
code
extension
characters
distinctions
are
drawn
between
code
extension
and
such
other
concepts
as
graphic
substitution
or
syntactic
representation
which
are
often
used
to
meet
similar
requirements
also
covered
are
certain
topics
which
are
not
truly
concerned
with
code
extension
but
which
are
often
linked
with
it
in
discussion
on
code
applications
the
material
in
this
paper
is
equally
applicable
in
principle
to
the
proposed
iso
international
7
bit
code
for
information
interchange
cacm
october
1966
ca661005
jb
march
2
1978
4
02
pm
1362
5
1362
1362
5
1362
1362
5
1362
</TEXT>
</DOC>
<DOC>
<DOCNO>1363</DOCNO>
<TEXT>
a
general
method
of
systematic
interval
computation
for
numerical
integration
of
initial
value
problems
a
procedure
is
given
for
continuously
computing
and
monitoring
the
step
size
to
be
used
by
a
self
starting
p
th
order
numerical
integration
method
to
solve
an
initial
value
problem
the
procedure
uses
an
estimate
of
the
truncation
error
to
calculate
the
step
size
cacm
october
1966
martin
w
c
paulson
k
c
sashkin
l
ca661004
jb
march
2
1978
4
05
pm
1363
5
1363
1363
5
1363
1363
5
1363
</TEXT>
</DOC>
<DOC>
<DOCNO>1364</DOCNO>
<TEXT>
mathematical
experimentation
in
time
lag
modulation
equations
of
the
form
du
dt
g
u
t
u
h
t
arise
in
a
number
of
scientific
contexts
the
authors
point
out
some
interesting
properties
of
the
solution
u
t
u
t
1
k
sin
wt
sin
at
these
properties
were
obtained
by
means
of
numerical
solution
cacm
october
1966
bellman
r
buell
j
kalaba
r
ca661003
jb
march
2
1978
4
08
pm
1364
4
1364
1280
5
1364
1364
5
1364
1364
5
1364
1364
5
1364
</TEXT>
</DOC>
<DOC>
<DOCNO>1365</DOCNO>
<TEXT>
eliminating
monotonous
mathematics
with
formac
the
formac
formula
manipulation
compiler
programming
system
provides
a
powerful
tool
for
performing
mathematical
analysis
it
is
an
extension
of
fortran
iv
which
permits
the
use
of
the
computer
to
perform
the
tedious
algebraic
computations
that
arise
in
many
different
fields
among
the
areas
in
which
it
has
been
successfully
used
are
differentiation
of
complicated
expressions
expansion
of
truncated
power
series
solution
of
simultaneous
equations
with
literal
coefficients
nonlinear
maximum
likelihood
estimation
tensor
analysis
and
generation
of
the
coefficients
of
equations
in
keplerian
motion
these
types
of
analysis
which
arose
in
the
solution
of
specific
practical
problems
in
physics
engineering
astronomy
statistics
and
astronautics
are
discussed
in
the
paper
in
addition
to
its
usage
for
specific
problem
solutions
formac
can
also
be
used
to
automate
the
analysis
phase
in
certain
production
programming
several
such
applications
are
presented
cacm
october
1966
tobey
r
g
ca661002
jb
march
2
1978
4
14
pm
1396
5
1365
1365
5
1365
1365
5
1365
1365
5
1365
2229
5
1365
964
6
1365
1028
6
1365
1029
6
1365
1083
6
1365
1132
6
1365
1214
6
1365
1278
6
1365
1334
6
1365
1365
6
1365
1365
6
1365
1386
6
1365
1387
6
1365
1388
6
1365
1392
6
1365
1393
6
1365
1394
6
1365
1395
6
1365
1396
6
1365
1397
6
1365
1496
6
1365
284
6
1365
407
6
1365
3199
6
1365
3200
6
1365
3201
6
1365
3202
6
1365
3203
6
1365
3204
6
1365
561
6
1365
730
6
1365
</TEXT>
</DOC>
<DOC>
<DOCNO>1366</DOCNO>
<TEXT>
computer
simulation
discussion
of
the
technique
and
comparison
of
languages
the
purpose
of
this
paper
is
to
present
a
comparison
of
some
computer
simulation
languages
and
of
some
of
the
involved
in
comparing
software
packages
for
digital
computers
are
discussed
in
part
i
the
issue
is
obvious
users
of
digital
computers
must
choose
from
available
languages
or
write
their
own
substantial
costs
can
occur
particularly
in
training
implementation
and
computer
time
if
an
inappropriate
language
is
chosenore
and
more
computer
simulation
languages
are
being
developed
comparisons
and
evaluations
of
existing
languages
are
useful
for
designers
and
implementers
as
well
as
users
the
second
part
is
devoted
to
computer
simulation
and
simulation
languages
the
computational
characteristics
of
simulation
are
discussed
with
special
attention
being
paid
to
a
distinction
between
continuous
and
discrete
change
models
part
iii
presents
a
detailed
comparison
of
six
simulation
languages
and
packages
simscript
clp
csl
gasp
cpss
and
sol
the
characteristics
of
each
are
summarized
in
a
series
of
tables
the
implications
of
this
analysis
for
designers
of
languages
for
users
and
for
implementers
are
developed
the
conclusion
of
the
paper
is
that
the
packages
now
available
for
computer
simulation
offer
features
which
none
of
the
more
general
purpose
packages
do
and
that
analysis
of
strengths
and
weaknesses
of
each
suggests
ways
in
which
both
current
and
future
simulation
languages
and
packages
can
be
improved
cacm
october
1966
teichroew
d
lubin
j
f
ca661001
jb
march
2
1978
4
23
pm
1366
5
1366
1366
5
1366
1366
5
1366
1503
5
1366
1781
5
1366
1860
5
1366
2091
5
1366
123
6
1366
196
6
1366
919
6
1366
990
6
1366
1007
6
1366
1046
6
1366
1131
6
1366
1139
6
1366
1140
6
1366
1149
6
1366
1198
6
1366
1215
6
1366
1223
6
1366
1265
6
1366
1303
6
1366
1323
6
1366
1358
6
1366
1366
6
1366
1366
6
1366
1366
6
1366
1366
6
1366
1389
6
1366
1421
6
1366
1421
6
1366
1460
6
1366
1462
6
1366
1463
6
1366
1467
6
1366
1468
6
1366
1477
6
1366
1477
6
1366
1491
6
1366
1491
6
1366
1496
6
1366
1496
6
1366
1531
6
1366
1535
6
1366
1565
6
1366
1601
6
1366
1602
6
1366
1613
6
1366
1614
6
1366
1626
6
1366
1626
6
1366
1641
6
1366
1641
6
1366
1785
6
1366
1786
6
1366
1787
6
1366
1788
6
1366
205
6
1366
224
6
1366
249
6
1366
288
6
1366
316
6
1366
378
6
1366
381
6
1366
398
6
1366
11
6
1366
404
6
1366
410
6
1366
463
6
1366
464
6
1366
483
6
1366
3184
6
1366
3184
6
1366
3188
6
1366
584
6
1366
600
6
1366
680
6
1366
691
6
1366
763
6
1366
799
6
1366
</TEXT>
</DOC>
<DOC>
<DOCNO>1367</DOCNO>
<TEXT>
character
structure
and
character
parity
sense
for
parallel
by
bit
data
communication
in
ascii
proposed
american
standard
cacm
september
1966
ca660912
jb
march
2
1978
4
26
pm
1367
4
1367
2772
4
1367
2787
4
1367
1116
5
1367
1367
5
1367
1367
5
1367
1367
5
1367
</TEXT>
</DOC>
<DOC>
<DOCNO>1368</DOCNO>
<TEXT>
systematic
generation
of
hamiltonian
circuits
for
a
combinatorial
matrix
which
may
specify
both
directed
and
nondirected
arcs
the
paper
describes
a
computer
program
which
generates
systematically
and
exhaustively
all
the
hamiltonian
circuits
specific
application
is
made
to
the
traveling
salesman
problem
cacm
september
1966
roberts
s
m
ca660911
jb
march
2
1978
4
30
pm
1368
5
1368
1368
5
1368
1368
5
1368
</TEXT>
</DOC>
<DOC>
<DOCNO>1369</DOCNO>
<TEXT>
half
rotations
in
n
dimensional
euclidean
space
an
iterative
procedure
is
described
for
determining
half
rotations
in
n
dimensional
euclidean
space
the
method
is
a
variant
of
the
cyclic
jacobi
procedure
and
utilizers
elementary
plane
rotations
to
obtain
the
half
rotation
matrix
numerical
examples
are
given
cacm
september
1966
mccamon
r
b
ca660910
jb
march
2
1978
4
32
pm
1369
5
1369
1369
5
1369
1369
5
1369
1961
5
1369
1369
6
1369
1504
6
1369
1847
6
1369
</TEXT>
</DOC>
<DOC>
<DOCNO>1370</DOCNO>
<TEXT>
linear
equations
exact
solutions
algorithm
290
f4
cacm
september
1966
boothroyd
j
ca660909a
jb
march
2
1978
4
33
pm
1370
5
1370
1370
5
1370
1370
5
1370
1813
5
1370
1370
6
1370
</TEXT>
</DOC>
<DOC>
<DOCNO>1371</DOCNO>
<TEXT>
logarithm
of
gamma
function
algorithm
291
s14
cacm
september
1966
pike
m
c
hill
i
d
ca660909bjb
march
23
1978
4
24
pm
1371
5
1371
1371
5
1371
1371
5
1371
</TEXT>
</DOC>
<DOC>
<DOCNO>1372</DOCNO>
<TEXT>
direct
search
algorithm
178
e4
cacm
september
1966
bell
m
pike
m
c
ca660909c
jb
march
23
1978
4
25
pm
1372
5
1372
1372
5
1372
1372
5
1372
2190
5
1372
1372
6
1372
1849
6
1372
</TEXT>
</DOC>
<DOC>
<DOCNO>1373</DOCNO>
<TEXT>
gamma
function
gamma
function
for
range
1
to
2
reciprocal
gamma
function
to
real
argument
gamma
function
logarithm
of
gamma
function
algorithms
34
s14
54
s14
80
s14
221
s14
291
s14
cacm
september
1966
pike
m
c
hill
i
d
ca660909d
jb
march
23
1978
4
28
pm
1373
5
1373
1373
5
1373
1373
5
1373
</TEXT>
</DOC>
<DOC>
<DOCNO>1374</DOCNO>
<TEXT>
evaluation
of
determinant
determinant
evaluation
algorithms
41
f3
269
f3
cacm
september
1966
bergson
a
ca660909e
jb
march
23
1978
4
29
pm
1374
5
1374
1374
5
1374
1374
5
1374
</TEXT>
</DOC>
<DOC>
<DOCNO>1375</DOCNO>
<TEXT>
function
minimization
algorithm
251
e4
cacm
september
1966
fletcher
r
ca660909f
jb
march
23
1978
4
31
pm
1375
5
1375
1375
5
1375
1375
5
1375
</TEXT>
</DOC>
<DOC>
<DOCNO>1376</DOCNO>
<TEXT>
modified
graeffee
method
algorithm
256
c2
cacm
september
1966
stern
g
ca660909g
jb
march
23
1978
4
32
pm
1376
5
1376
1376
5
1376
1376
5
1376
</TEXT>
</DOC>
<DOC>
<DOCNO>1377</DOCNO>
<TEXT>
pseudo
random
numbers
algorithm
266
g5
cacm
september
1966
hansson
l
ca660909h
jb
march
23
1978
6
45
pm
1377
5
1377
1377
5
1377
1377
5
1377
</TEXT>
</DOC>
<DOC>
<DOCNO>1378</DOCNO>
<TEXT>
pseudo
random
numbers
algorithm
266
g5
cacm
september
1966
hill
i
d
pike
m
c
ca660909i
jb
march
23
1978
6
46
pm
1378
5
1378
1378
5
1378
1378
5
1378
</TEXT>
</DOC>
<DOC>
<DOCNO>1379</DOCNO>
<TEXT>
a
final
solution
to
the
dangling
else
of
algol
60
and
related
languages
the
dangling
else
problem
consists
of
a
class
of
potential
ambiguities
in
algol
like
conditional
statements
whose
basic
form
is
if
b1
then
if
b2
then
s1
else
s2
where
b1
and
b2
are
boolean
expressions
and
s1
and
s2
are
basic
statements
the
difficulty
lies
in
whether
to
attach
the
else
to
the
first
if
or
to
the
second
one
existing
solutions
to
the
problem
are
either
ambiguous
or
unnecessarily
restrictive
let
sand
s1
be
statements
we
define
s
to
be
closed
if
s
else
s1
is
not
a
statement
and
to
be
open
if
s
else
s1
is
a
statement
thus
an
unconditional
statement
is
a
closed
statement
open
and
closed
conditional
statements
are
defined
by
syntax
equations
in
such
a
way
as
to
preserve
openness
and
closure
in
each
case
an
else
must
always
be
preceded
by
a
closed
statement
it
is
shown
that
the
syntax
equations
are
unambiguous
and
that
may
change
in
the
statement
types
required
within
the
syntax
equations
would
lead
to
either
ambiguity
or
unnecessary
restriction
cacm
september
1966
abrahams
p
w
ca660908
jb
march
2
1978
6
18
pm
1084
4
1379
1086
4
1379
1132
4
1379
1234
4
1379
1263
4
1379
1265
4
1379
1270
4
1379
1323
4
1379
1358
4
1379
1379
4
1379
1379
4
1379
1379
4
1379
1379
4
1379
1379
4
1379
1380
4
1379
1453
4
1379
1464
4
1379
1484
4
1379
1491
4
1379
1498
4
1379
1613
4
1379
1614
4
1379
1625
4
1379
1693
4
1379
1781
4
1379
1781
4
1379
1825
4
1379
1836
4
1379
1860
4
1379
1945
4
1379
1945
4
1379
2015
4
1379
2060
4
1379
2061
4
1379
2083
4
1379
2091
4
1379
2178
4
1379
2179
4
1379
2179
4
1379
2252
4
1379
2325
4
1379
2341
4
1379
2546
4
1379
2546
4
1379
2645
4
1379
2652
4
1379
2684
4
1379
2698
4
1379
2708
4
1379
2842
4
1379
2929
4
1379
2934
4
1379
3045
4
1379
3069
4
1379
669
4
1379
679
4
1379
691
4
1379
761
4
1379
949
4
1379
989
4
1379
1263
5
1379
1379
5
1379
1379
5
1379
1379
5
1379
1477
5
1379
2167
5
1379
2956
5
1379
3184
5
1379
669
5
1379
761
5
1379
1379
6
1379
1379
6
1379
1392
6
1379
1393
6
1379
2169
6
1379
2651
6
1379
</TEXT>
</DOC>
<DOC>
<DOCNO>1380</DOCNO>
<TEXT>
simula
an
algol
based
simulation
language
this
paper
is
an
introduction
to
simula
a
programming
language
designed
to
provide
a
systems
analyst
with
unified
concepts
which
facilitate
the
concise
description
of
discrete
event
systems
a
system
description
also
serves
as
a
source
language
simulation
program
simula
is
an
extension
of
algol
60
in
which
the
most
important
new
concepts
is
that
of
quasi
parallel
processing
cacm
september
1966
dahl
o
j
nygaard
k
ca660907
jb
march
2
1978
6
21
pm
1024
4
1380
1051
4
1380
1086
4
1380
1098
4
1380
1132
4
1380
1214
4
1380
1234
4
1380
1263
4
1380
1265
4
1380
1270
4
1380
1323
4
1380
1323
4
1380
1358
4
1380
1358
4
1380
1379
4
1380
1380
4
1380
1380
4
1380
1380
4
1380
1380
4
1380
1388
4
1380
1393
4
1380
1453
4
1380
1464
4
1380
1484
4
1380
1485
4
1380
1487
4
1380
1491
4
1380
1498
4
1380
1549
4
1380
1552
4
1380
1570
4
1380
1613
4
1380
1614
4
1380
1665
4
1380
1693
4
1380
1781
4
1380
1781
4
1380
1781
4
1380
1787
4
1380
1825
4
1380
1854
4
1380
1860
4
1380
1860
4
1380
1878
4
1380
1946
4
1380
1957
4
1380
1989
4
1380
2060
4
1380
2083
4
1380
2112
4
1380
2168
4
1380
2178
4
1380
2179
4
1380
2252
4
1380
2325
4
1380
2341
4
1380
2534
4
1380
2541
4
1380
2546
4
1380
2645
4
1380
2652
4
1380
2684
4
1380
2698
4
1380
2723
4
1380
2733
4
1380
2820
4
1380
2842
4
1380
2857
4
1380
2929
4
1380
2934
4
1380
557
4
1380
3069
4
1380
3073
4
1380
3112
4
1380
3155
4
1380
669
4
1380
679
4
1380
691
4
1380
761
4
1380
949
4
1380
989
4
1380
1380
5
1380
1380
5
1380
1380
5
1380
1421
5
1380
1541
5
1380
1846
5
1380
2060
5
1380
2218
5
1380
3112
5
1380
3184
5
1380
731
5
1380
799
5
1380
106
6
1380
1358
6
1380
1380
6
1380
1380
6
1380
1380
6
1380
1380
6
1380
1380
6
1380
1421
6
1380
1424
6
1380
1469
6
1380
1477
6
1380
1484
6
1380
1491
6
1380
1572
6
1380
1572
6
1380
1728
6
1380
1751
6
1380
1752
6
1380
1810
6
1380
1826
6
1380
210
6
1380
1869
6
1380
1879
6
1380
1972
6
1380
2095
6
1380
2110
6
1380
2438
6
1380
2723
6
1380
2736
6
1380
2833
6
1380
2838
6
1380
576
6
1380
731
6
1380
</TEXT>
</DOC>
<DOC>
<DOCNO>1381</DOCNO>
<TEXT>
impact
of
computers
on
the
undergraduate
mathematics
curriculum
the
use
of
computers
to
permit
the
widespread
application
of
mathematical
ideas
requiring
computation
in
science
and
technology
is
extremely
significant
for
the
understanding
of
our
current
society
student
interest
in
this
development
is
intense
and
if
properly
utilized
should
yield
a
much
better
understanding
of
mathematical
concepts
as
well
as
the
ideas
of
programming
and
logical
structure
which
have
been
introduced
into
many
fields
by
the
use
of
computers
the
present
paper
suggests
that
that
portion
of
the
undergraduate
mathematical
curriculum
which
is
preparation
for
the
use
of
mathematics
by
persons
who
are
not
professional
mathematicians
be
modified
to
include
the
extensions
and
clarifications
which
are
possible
because
of
computers
an
early
introduction
to
programming
is
desirable
to
permit
a
continuing
use
of
automatic
computation
to
illustrate
and
clarify
mathematical
concepts
following
the
calculus
equation
stage
an
intensive
introduction
to
numerical
analysis
should
be
added
to
the
current
curriculum
in
addition
to
providing
competence
in
the
mostly
used
computing
techniques
it
would
permit
a
more
sophisticated
utilization
of
the
advanced
mathematical
ideas
associated
with
complex
variables
and
transform
theories
cacm
september
1966
murray
f
j
ca660905
jb
march
2
1978
6
31
pm
1381
5
1381
1381
5
1381
1381
5
1381
</TEXT>
</DOC>
<DOC>
<DOCNO>1382</DOCNO>
<TEXT>
desired
computer
impact
on
undergraduate
mathematics
three
matters
relating
to
the
theme
of
the
symposium
are
discussed
here
the
author
examines
some
projections
concerning
the
supply
and
demand
for
mathematicians
in
the
united
states
through
the
mid
1970s
comments
briefly
on
some
of
the
factors
which
may
influence
the
professional
activities
of
applied
mathematicians
over
the
next
several
years
and
discusses
in
broad
terms
how
this
information
may
relate
to
the
undergraduate
training
of
mathematicians
cacm
september
1966
macon
n
ca660904
jb
march
2
1978
6
35
pm
1382
5
1382
1382
5
1382
1382
5
1382
</TEXT>
</DOC>
<DOC>
<DOCNO>1383</DOCNO>
<TEXT>
implications
of
the
digital
computer
for
education
in
the
mathematical
sciences
the
digital
computer
has
profoundly
altered
the
definition
of
what
is
interesting
in
mathematics
the
importance
of
applied
logic
in
human
affairs
is
changed
by
the
existence
of
the
logical
engine
the
result
is
that
one
should
no
longer
think
in
terms
of
a
single
discipline
of
mathematics
but
in
terms
of
a
complex
of
mathematical
sciences
cacm
september
1966
givens
w
ca660903
jb
march
2
1978
6
39
pm
1383
5
1383
1383
5
1383
1383
5
1383
2665
5
1383
1383
6
1383
1549
6
1383
</TEXT>
</DOC>
<DOC>
<DOCNO>1384</DOCNO>
<TEXT>
mathematics
for
undergraduate
computer
scientists
the
mathematical
requirements
for
an
undergraduate
program
in
computer
science
are
a
subject
of
debate
the
association
for
computing
machinery
curriculum
committee
however
believes
that
these
requirements
are
essentially
the
same
as
the
mathematical
content
of
physical
sciences
undergraduate
programs
the
committee
believes
that
these
requirements
should
assure
the
student
of
a
broad
mathematical
background
and
should
enable
him
to
take
a
wide
variety
of
courses
in
other
scientific
disciplines
the
committee
concern
is
to
develop
a
solid
scientific
approach
to
computer
science
cacm
september
1966
atchison
w
f
ca660902
jb
march
2
1978
6
46
pm
1384
5
1384
1384
5
1384
1384
5
1384
</TEXT>
</DOC>
<DOC>
<DOCNO>1385</DOCNO>
<TEXT>
computer
technology
in
communist
china
1956
1965
based
on
information
from
translations
of
communist
chinese
news
items
and
periodical
literature
for
the
1965
period
computer
technology
in
china
is
reviewed
under
the
following
headings
1
initial
planning
organization
and
educational
aspects
of
computer
technology
and
automation
2
machine
development
progress
two
major
specific
machines
in
1958
59
with
soviet
aid
a
vacuum
in
1960
64
due
to
the
withdrawal
of
soviet
aid
then
presumably
all
chinese
made
machines
from
1965
to
the
present
3
computer
applications
4
the
trend
of
automation
control
of
production
processes
rather
than
data
processing
and
5
the
yun
ch
hsueh
science
of
operation
and
programming
campaign
of
1958
60
during
which
an
attempt
was
made
to
bring
concepts
such
as
linear
programming
to
ordinary
chinese
workers
and
peasants
communist
china
is
adjudged
to
have
a
marginal
computer
capability
with
most
of
its
machines
probably
being
of
a
binary
nature
however
a
turning
point
may
have
been
reached
in
mid
1965
cacm
september
1966
audette
d
g
ca660901
jb
march
2
1978
6
59
pm
1385
5
1385
1385
5
1385
1385
5
1385
</TEXT>
</DOC>
<DOC>
<DOCNO>1386</DOCNO>
<TEXT>
symbolic
factoring
of
polynomials
in
several
variables
an
algorithm
for
finding
the
symbolic
factors
of
a
multi
variate
polynomial
with
integer
coefficients
is
presented
the
algorithm
is
an
extension
of
a
technique
used
by
kronecker
in
a
proof
that
the
prime
factoring
of
any
polynomial
may
be
found
in
a
finite
number
of
steps
the
algorithm
consists
of
factoring
single
variable
instances
of
the
given
polynomial
by
kronecker
method
and
introducing
the
remaining
variables
by
interpolation
techniques
for
implementing
the
algorithm
and
several
examples
are
discussed
the
algorithm
promises
sufficient
power
to
be
used
efficiently
in
an
online
system
for
symbolic
mathematics
cacm
august
1966
jordan
d
e
kain
r
y
clapp
l
c
ca660812
jb
march
2
1978
7
06
pm
1396
5
1386
1386
5
1386
1386
5
1386
1386
5
1386
964
6
1386
1028
6
1386
1029
6
1386
1083
6
1386
1132
6
1386
1214
6
1386
1278
6
1386
1334
6
1386
1365
6
1386
1386
6
1386
1387
6
1386
1388
6
1386
1392
6
1386
1393
6
1386
1394
6
1386
1395
6
1386
1396
6
1386
1397
6
1386
1496
6
1386
284
6
1386
407
6
1386
3199
6
1386
3200
6
1386
3201
6
1386
3202
6
1386
3203
6
1386
3204
6
1386
561
6
1386
730
6
1386
</TEXT>
</DOC>
<DOC>
<DOCNO>1387</DOCNO>
<TEXT>
solution
of
systems
of
polynomial
equations
by
elimination
the
elimination
procedure
as
described
by
williams
has
been
coded
in
lisp
and
formac
and
used
in
solving
systems
of
polynomial
equations
it
is
found
that
the
method
is
very
effective
in
the
case
of
small
systems
where
it
yields
all
solutions
without
the
need
for
initial
estimates
the
method
by
itself
appears
in
appropriate
however
in
the
solution
of
large
systems
of
equation
due
to
the
explosive
growth
in
the
intermediate
equations
and
the
hazards
which
arise
when
the
coefficients
are
truncated
a
comparison
is
made
with
difficulties
found
in
other
problems
in
non
numerical
mathematics
such
as
symbolic
integration
and
simplification
cacm
august
1966
moses
j
ca660811
jb
march
2
1978
7
11
pm
1396
5
1387
1387
5
1387
1387
5
1387
1387
5
1387
1946
5
1387
878
6
1387
902
6
1387
964
6
1387
1028
6
1387
1029
6
1387
1083
6
1387
1093
6
1387
1132
6
1387
1177
6
1387
1214
6
1387
1278
6
1387
1334
6
1387
1365
6
1387
1386
6
1387
1387
6
1387
1387
6
1387
1388
6
1387
1392
6
1387
1393
6
1387
1393
6
1387
1394
6
1387
1395
6
1387
1396
6
1387
1397
6
1387
1496
6
1387
284
6
1387
360
6
1387
407
6
1387
3199
6
1387
3200
6
1387
3201
6
1387
3202
6
1387
3203
6
1387
3204
6
1387
561
6
1387
730
6
1387
731
6
1387
</TEXT>
</DOC>
<DOC>
<DOCNO>1388</DOCNO>
<TEXT>
automast
automatic
mathematical
analysis
and
symbolic
translation
a
procedure
for
numerically
solving
systems
of
ordinary
differential
equation
is
shown
to
also
generate
symbolic
solutions
the
procedure
is
based
on
a
finite
taylor
series
expansion
that
includes
an
estimate
of
the
error
in
the
final
result
a
computer
program
is
described
that
reads
in
a
system
of
such
equations
and
then
generates
the
expansions
for
all
of
the
dependent
variables
the
expansions
are
determined
symbolically
hence
any
non
numeric
parameters
in
the
original
equations
are
carried
automatically
into
the
final
expansions
thus
the
exact
influence
of
any
parameters
on
the
problem
solution
can
be
easily
displayed
cacm
august
1966
ball
w
e
berns
r
i
ca660810
jb
march
2
1978
7
16
pm
1024
4
1388
1051
4
1388
1098
4
1388
1214
4
1388
1223
4
1388
1380
4
1388
1388
4
1388
1388
4
1388
1393
4
1388
1485
4
1388
1487
4
1388
1549
4
1388
1570
4
1388
1878
4
1388
1946
4
1388
1957
4
1388
2168
4
1388
436
4
1388
2723
4
1388
2857
4
1388
3112
4
1388
1388
5
1388
1388
5
1388
1388
5
1388
1396
5
1388
405
5
1388
731
5
1388
964
6
1388
1028
6
1388
1029
6
1388
1083
6
1388
1132
6
1388
1214
6
1388
1278
6
1388
1334
6
1388
1365
6
1388
1386
6
1388
1387
6
1388
1388
6
1388
1392
6
1388
1393
6
1388
1394
6
1388
1395
6
1388
1396
6
1388
1397
6
1388
1496
6
1388
284
6
1388
407
6
1388
3199
6
1388
3200
6
1388
3201
6
1388
3202
6
1388
3203
6
1388
3204
6
1388
561
6
1388
730
6
1388
</TEXT>
</DOC>
<DOC>
<DOCNO>1389</DOCNO>
<TEXT>
a
programmer
description
of
l
6
bell
telephone
laboratories
low
linked
list
language
l
6
pronounced
l
six
is
a
new
programming
language
for
list
structure
manipulations
it
contains
many
of
the
facilities
which
underlie
such
list
processors
as
ipl
lisp
comit
ad
snobol
but
permits
the
user
to
get
much
closer
to
machine
code
in
order
to
write
faster
running
programs
to
use
storage
more
efficiently
and
to
build
a
wider
variety
of
linked
data
structures
cacm
august
1966
knowlton
k
c
ca660809
jb
march
2
1978
7
20
pm
1389
4
1389
1552
4
1389
2162
4
1389
2435
4
1389
2596
4
1389
2768
4
1389
2845
4
1389
2902
4
1389
2955
4
1389
1184
5
1389
1389
5
1389
1389
5
1389
1389
5
1389
1860
5
1389
1957
5
1389
2155
5
1389
2162
5
1389
1184
6
1389
1366
6
1389
1389
6
1389
1389
6
1389
1389
6
1389
1389
6
1389
1421
6
1389
1496
6
1389
1626
6
1389
1641
6
1389
1785
6
1389
1786
6
1389
210
6
1389
1860
6
1389
378
6
1389
378
6
1389
2046
6
1389
2060
6
1389
3184
6
1389
731
6
1389
</TEXT>
</DOC>
<DOC>
<DOCNO>1390</DOCNO>
<TEXT>
convert
a
programming
language
is
described
which
is
applicable
to
problems
conveniently
described
by
transformation
rules
by
this
is
meant
that
patterns
may
be
prescribed
each
being
associated
with
a
skeleton
so
that
a
series
of
such
pairs
may
be
searched
until
a
pattern
is
found
which
matches
an
expression
to
be
transformed
the
conditions
for
a
match
are
governed
by
a
code
which
also
allows
subexpressions
to
be
identified
and
eventually
substituted
into
the
corresponding
skeleton
the
primitive
patterns
and
primitive
skeletons
are
described
as
well
as
the
principle
which
allow
their
elaboration
in
to
more
complicated
patterns
and
skeletons
the
advantages
of
the
language
are
that
it
allows
one
to
apply
transformation
rules
to
lists
and
arrays
as
easily
as
strings
that
both
patterns
and
skeletons
may
be
defined
recursively
and
that
as
a
consequence
programs
may
be
stated
quite
concisely
cacm
august
1966
guzman
a
mcintosh
h
v
ca660808
jb
march
2
1978
7
32
pm
1024
4
1390
1051
4
1390
1102
4
1390
1132
4
1390
1390
4
1390
1486
4
1390
1549
4
1390
1706
4
1390
1826
4
1390
1878
4
1390
378
4
1390
2060
4
1390
2155
4
1390
2168
4
1390
2719
4
1390
2723
4
1390
2838
4
1390
2842
4
1390
2855
4
1390
2879
4
1390
3077
4
1390
3080
4
1390
3106
4
1390
627
4
1390
106
4
1390
210
5
1390
1390
5
1390
1390
5
1390
1390
5
1390
</TEXT>
</DOC>
<DOC>
<DOCNO>1391</DOCNO>
<TEXT>
computer
experiments
in
finite
algebra
a
medium
scale
programming
system
is
written
in
mad
and
fap
on
the
ibm
7094
to
manipulate
some
of
the
objects
of
modern
algebra
finite
groups
maps
and
sets
of
maps
subsets
and
sets
of
subsets
constant
integers
and
truth
values
designed
to
operate
in
a
time
sharing
environment
the
system
can
serve
as
a
teacher
aid
to
the
undergraduate
student
of
modern
algebra
as
well
as
for
the
working
scientist
or
engineer
wishing
to
familiarize
himself
with
the
subset
cacm
august
1966
maurer
w
d
ca660807
jb
march
2
1978
7
36
pm
1391
5
1391
1391
5
1391
1391
5
1391
1948
5
1391
1391
6
1391
1559
6
1391
</TEXT>
</DOC>
<DOC>
<DOCNO>1392</DOCNO>
<TEXT>
experience
with
formac
algorithm
design
various
facets
of
the
design
and
implementation
of
mathematical
expression
manipulation
algorithms
are
discussed
concrete
examples
are
provided
by
the
formac
expand
and
differentiation
algorithms
a
basic
formac
utility
routine
and
an
experiment
in
the
extraction
of
the
skeletal
structure
of
an
expression
one
recurrent
theme
is
the
need
to
avoid
excessive
intermediate
expression
swell
in
order
to
minimize
core
storage
requirements
although
many
details
from
the
formac
implementation
are
presented
an
attempt
is
made
to
stress
principles
and
ideas
of
general
relevance
in
the
design
of
algorithms
for
manipulating
mathematical
expressions
cacm
august
1966
tobey
r
g
ca660806
jb
march
2
1978
7
43
pm
1028
4
1392
1216
4
1392
1392
4
1392
1396
4
1392
964
4
1392
1396
5
1392
1392
5
1392
1392
5
1392
1392
5
1392
2167
5
1392
561
5
1392
964
6
1392
1028
6
1392
1029
6
1392
1083
6
1392
1132
6
1392
1214
6
1392
1278
6
1392
1334
6
1392
1365
6
1392
1379
6
1392
1386
6
1392
1387
6
1392
1388
6
1392
1392
6
1392
1392
6
1392
1393
6
1392
1393
6
1392
1394
6
1392
1395
6
1392
1396
6
1392
1397
6
1392
1496
6
1392
284
6
1392
2169
6
1392
407
6
1392
3199
6
1392
3200
6
1392
3201
6
1392
3202
6
1392
3203
6
1392
3204
6
1392
561
6
1392
730
6
1392
</TEXT>
</DOC>
<DOC>
<DOCNO>1393</DOCNO>
<TEXT>
pm
a
system
for
polynomial
manipulation
pm
is
an
ibm
7094
program
system
for
formal
manipulation
of
polynomials
in
any
number
of
variables
with
integral
coefficients
unrestricted
in
size
some
of
the
formal
operations
which
can
be
performed
by
the
system
are
sums
differences
products
quotients
derivatives
substitutions
and
greater
common
divisors
pm
is
based
on
the
refco
iii
list
processing
system
which
is
described
and
compared
with
the
lisp
and
slip
systems
the
pm
subroutines
for
arithmetic
of
large
integers
are
described
as
constituting
an
independently
useful
subsystem
pm
is
compared
with
the
alpak
system
in
several
respects
including
the
choice
of
canonical
forms
for
polynomials
a
new
algorithm
for
polynomial
greatest
common
divisor
calculation
is
mentioned
and
exaples
are
included
to
illustrate
its
superiority
cacm
august
1966
collins
g
e
ca660805
jb
march
2
1978
7
51
pm
1024
4
1393
1050
4
1393
1051
4
1393
1098
4
1393
1214
4
1393
1380
4
1393
1388
4
1393
1393
4
1393
1393
4
1393
1393
4
1393
1485
4
1393
1487
4
1393
1549
4
1393
1549
4
1393
1570
4
1393
1878
4
1393
1946
4
1393
1957
4
1393
2023
4
1393
2168
4
1393
2723
4
1393
2857
4
1393
3112
4
1393
3112
4
1393
627
4
1393
106
5
1393
1393
5
1393
1393
5
1393
1393
5
1393
1396
5
1393
296
5
1393
1946
5
1393
2167
5
1393
2857
5
1393
731
5
1393
878
6
1393
902
6
1393
964
6
1393
1028
6
1393
1029
6
1393
1083
6
1393
1093
6
1393
1132
6
1393
1177
6
1393
1214
6
1393
1278
6
1393
1334
6
1393
1365
6
1393
1379
6
1393
1386
6
1393
1387
6
1393
1387
6
1393
1388
6
1393
1392
6
1393
1392
6
1393
1393
6
1393
1393
6
1393
1393
6
1393
1393
6
1393
1394
6
1393
1395
6
1393
1396
6
1393
1397
6
1393
1496
6
1393
284
6
1393
360
6
1393
2169
6
1393
407
6
1393
3199
6
1393
3200
6
1393
3201
6
1393
3202
6
1393
3203
6
1393
3204
6
1393
561
6
1393
730
6
1393
731
6
1393
731
6
1393
</TEXT>
</DOC>
<DOC>
<DOCNO>1394</DOCNO>
<TEXT>
computation
of
algebraic
properties
of
elementary
particle
reactions
using
a
digital
computer
a
large
number
of
calculations
in
high
energy
elementary
particle
physics
involve
the
manipulation
of
complicated
algebraic
expressions
containing
both
tensor
and
noncommutative
matrix
quantities
many
of
these
calculations
take
several
months
to
complete
although
the
operations
involved
follow
straightforward
rules
in
this
paper
a
program
is
described
which
has
been
developed
in
lisp
for
solving
such
problems
the
manner
in
which
these
problems
are
encountered
is
outlined
and
their
representation
in
the
computer
discussed
at
present
about
six
months
of
human
work
takes
less
than
fifteen
minutes
on
an
ibm
7090
limitations
of
the
present
system
and
future
plans
are
also
outlined
cacm
august
1966
hearn
a
c
ca660804
jb
march
2
1978
7
58
pm
1396
5
1394
1394
5
1394
1394
5
1394
1394
5
1394
964
6
1394
1028
6
1394
1029
6
1394
1083
6
1394
1132
6
1394
1214
6
1394
1278
6
1394
1334
6
1394
1365
6
1394
1386
6
1394
1387
6
1394
1388
6
1394
1392
6
1394
1393
6
1394
1394
6
1394
1395
6
1394
1396
6
1394
1397
6
1394
1496
6
1394
284
6
1394
407
6
1394
3199
6
1394
3200
6
1394
3201
6
1394
3202
6
1394
3203
6
1394
3204
6
1394
561
6
1394
730
6
1394
</TEXT>
</DOC>
<DOC>
<DOCNO>1395</DOCNO>
<TEXT>
on
the
implementation
of
ambit
a
language
for
symbol
manipulation
a
brief
description
is
given
of
the
implementation
technique
for
the
replacement
rule
of
the
ambit
programming
language
the
algorithm
for
the
ambit
scan
and
an
example
of
its
application
are
given
the
algorithm
is
applicable
to
other
members
of
the
family
of
string
transformation
languages
of
which
ambit
is
a
member
and
it
provides
a
rationale
for
the
design
of
the
ambit
language
cacm
august
1966
christensen
c
ca660803
jb
march
2
1978
8
02
pm
1396
4
1395
1395
4
1395
1395
4
1395
1706
4
1395
1180
5
1395
1396
5
1395
1395
5
1395
1395
5
1395
1395
5
1395
1395
5
1395
964
6
1395
1028
6
1395
1029
6
1395
1083
6
1395
1132
6
1395
1180
6
1395
1214
6
1395
1278
6
1395
1334
6
1395
1365
6
1395
1386
6
1395
1387
6
1395
1388
6
1395
1392
6
1395
1393
6
1395
1394
6
1395
1395
6
1395
1395
6
1395
1396
6
1395
1397
6
1395
1496
6
1395
284
6
1395
407
6
1395
3199
6
1395
3200
6
1395
3201
6
1395
3202
6
1395
3203
6
1395
3204
6
1395
561
6
1395
730
6
1395
</TEXT>
</DOC>
<DOC>
<DOCNO>1396</DOCNO>
<TEXT>
survey
of
formula
manipulation
the
field
of
formula
manipulation
is
surveyed
with
particular
attention
to
the
specific
capabilities
of
differentiation
integration
and
the
supporting
capabilities
of
simplification
displays
and
input
output
editing
and
precision
arithmetic
general
systems
both
batch
and
online
are
described
finally
some
programs
to
solve
specific
applications
are
discussed
cacm
august
1966
sammet
j
e
ca660802
jb
march
2
1978
8
07
pm
1028
4
1396
1028
4
1396
1083
4
1396
1083
4
1396
1214
4
1396
1216
4
1396
1216
4
1396
1216
4
1396
1278
4
1396
1278
4
1396
1334
4
1396
1347
4
1396
1347
4
1396
1347
4
1396
1392
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1396
4
1396
1395
4
1396
1444
4
1396
1536
4
1396
1624
4
1396
1767
4
1396
1781
4
1396
1787
4
1396
1860
4
1396
1945
4
1396
1945
4
1396
1946
4
1396
1946
4
1396
1988
4
1396
2167
4
1396
2167
4
1396
2229
4
1396
2252
4
1396
2857
4
1396
679
4
1396
964
4
1396
964
4
1396
964
5
1396
1028
5
1396
1029
5
1396
1083
5
1396
1132
5
1396
1214
5
1396
1278
5
1396
1334
5
1396
1388
5
1396
1393
5
1396
1396
5
1396
1396
5
1396
1396
5
1396
1396
5
1396
1392
5
1396
1395
5
1396
1397
5
1396
1365
5
1396
284
5
1396
1386
5
1396
1387
5
1396
1394
5
1396
1496
5
1396
1945
5
1396
407
5
1396
561
5
1396
3199
5
1396
3200
5
1396
3201
5
1396
3202
5
1396
3203
5
1396
3204
5
1396
730
5
1396
823
6
1396
914
6
1396
915
6
1396
917
6
1396
964
6
1396
984
6
1396
989
6
1396
990
6
1396
1012
6
1396
1028
6
1396
1029
6
1396
1083
6
1396
1084
6
1396
1098
6
1396
1122
6
1396
1132
6
1396
1138
6
1396
1139
6
1396
1141
6
1396
1200
6
1396
1214
6
1396
1223
6
1396
1265
6
1396
1278
6
1396
1334
6
1396
1336
6
1396
1365
6
1396
1386
6
1396
1387
6
1396
1388
6
1396
1392
6
1396
1393
6
1396
1394
6
1396
1395
6
1396
1396
6
1396
1396
6
1396
1397
6
1396
1455
6
1396
1477
6
1396
1487
6
1396
1491
6
1396
1496
6
1396
1496
6
1396
284
6
1396
407
6
1396
483
6
1396
3199
6
1396
3200
6
1396
3201
6
1396
3202
6
1396
3203
6
1396
3204
6
1396
561
6
1396
584
6
1396
669
6
1396
680
6
1396
730
6
1396
763
6
1396
</TEXT>
</DOC>
<DOC>
<DOCNO>1397</DOCNO>
<TEXT>
proceedings
of
the
acm
symposium
on
symbolic
and
algebraic
manipulation
the
acm
symposium
on
symbolic
and
algebraic
manipulation
brought
together
over
four
hundred
people
interested
in
programming
languages
designed
for
manipulation
of
algebraic
formulas
and
symbol
strings
in
their
applications
and
in
algorithms
for
their
implementation
twenty
eight
papers
were
presented
followed
by
a
lively
panel
discussion
of
future
directions
evening
meetings
were
arranged
for
several
interest
groups
the
conference
was
sponsored
by
the
acm
special
interest
committee
on
symbolic
and
algebraic
manipulation
the
program
committee
consisted
of
chairman
jean
e
sammet
paul
abrahams
thomas
e
cheatham
max
goldstein
and
douglas
mcllroy
conference
arrangements
were
made
by
lewis
c
clapp
daniel
bobrow
and
james
h
griesmer
robert
w
floyd
editor
cacm
august
1966
ca660801
jb
march
2
1978
8
17
pm
1397
4
1397
2704
4
1397
1247
5
1397
1396
5
1397
1397
5
1397
1397
5
1397
1397
5
1397
964
6
1397
1028
6
1397
1029
6
1397
1083
6
1397
1132
6
1397
1214
6
1397
1278
6
1397
1334
6
1397
1365
6
1397
1386
6
1397
1387
6
1397
1388
6
1397
1392
6
1397
1393
6
1397
1394
6
1397
1395
6
1397
1396
6
1397
1397
6
1397
1496
6
1397
284
6
1397
407
6
1397
3199
6
1397
3200
6
1397
3201
6
1397
3202
6
1397
3203
6
1397
3204
6
1397
561
6
1397
730
6
1397
</TEXT>
</DOC>
<DOC>
<DOCNO>1398</DOCNO>
<TEXT>
robot
data
screening
a
solution
to
multivariate
type
problems
in
the
biological
and
social
sciences
a
new
approach
is
outlined
toward
the
solution
of
the
type
of
multivariate
problem
that
is
found
usually
in
the
biological
and
social
sciences
as
well
as
in
medicine
this
approach
uses
a
logical
rather
than
a
statistical
criterion
by
which
variables
are
grouped
into
a
deterministic
model
algorithm
are
developed
by
which
some
variables
are
kept
on
for
further
analysis
while
others
are
eliminated
criteria
for
the
acceptance
of
a
variable
as
well
as
the
termination
of
the
searching
process
are
derived
from
information
theory
cacm
july
1966
sterling
t
gleser
m
haberman
s
pollack
s
ca660714jb
march
2
1978
8
26
pm
1398
5
1398
1398
5
1398
1398
5
1398
</TEXT>
</DOC>
<DOC>
<DOCNO>1399</DOCNO>
<TEXT>
on
top
to
bottom
recognition
and
left
recursion
a
procedure
is
given
for
obtaining
structural
descriptions
in
a
context
free
grammar
by
performing
the
recognition
according
to
a
strongly
equivalent
left
recursion
freegrammar
the
effect
of
allowing
null
strings
in
the
rewriting
rules
is
discussed
cacm
july
1966
kurki
suonio
r
ca660713
jb
march
2
1978
8
29
pm
1350
4
1399
1399
4
1399
1659
4
1399
1768
4
1399
1781
4
1399
1945
4
1399
2110
4
1399
3094
4
1399
1265
5
1399
1350
5
1399
1399
5
1399
1399
5
1399
1399
5
1399
1012
6
1399
1225
6
1399
1265
6
1399
1399
6
1399
680
6
1399
</TEXT>
</DOC>
<DOC>
<DOCNO>1400</DOCNO>
<TEXT>
free
text
inputs
to
utility
routines
through
the
use
of
some
rather
simple
techniques
it
is
frequently
possible
to
produce
a
program
which
will
accept
free
text
inputs
the
techniques
are
discussed
and
related
to
a
general
tape
manipulation
routine
cacm
july
1966
blum
r
i
ca660712
jb
march
2
1978
8
32
pm
1400
4
1400
1553
4
1400
1945
4
1400
2127
4
1400
2396
4
1400
2730
4
1400
1400
5
1400
1400
5
1400
1400
5
1400
1487
5
1400
</TEXT>
</DOC>
<DOC>
<DOCNO>1401</DOCNO>
<TEXT>
quasilinearization
and
the
calculation
of
eigenvalues
several
eigenvalue
problems
for
systems
of
ordinary
differential
equations
are
considered
they
are
resolved
computationally
using
the
quasilinerization
technique
a
quadratically
convergent
successive
approximation
scheme
related
to
the
newton
raphson
kantorovich
method
cacm
july
1966
bellman
r
kagiwada
h
kalaba
r
ca660711
jb
march
2
1978
8
40
pm
1401
5
1401
1401
5
1401
1401
5
1401
1766
5
1401
1401
6
1401
</TEXT>
</DOC>
<DOC>
<DOCNO>1402</DOCNO>
<TEXT>
partial
step
integration
a
partial
step
integration
equation
is
derived
for
use
with
the
adams
or
adams
bashforth
method
of
integration
of
differential
equations
this
method
of
obtaining
functional
values
at
points
intermediate
to
the
integration
points
yields
accuracy
comparable
to
the
integration
and
does
not
require
storing
of
additional
information
as
in
interpolation
methods
cacm
july
1966
glauz
r
d
ca660710
jb
march
2
1978
9
08
pm
1402
5
1402
1402
5
1402
1402
5
1402
</TEXT>
</DOC>
<DOC>
<DOCNO>1403</DOCNO>
<TEXT>
a
method
for
finding
the
m
smallest
values
of
a
monotonic
function
defined
on
ordered
sets
of
positive
integers
the
minimum
value
of
a
monotonic
increasing
function
defined
on
a
partially
ordered
set
s
is
assumed
on
the
set
of
minimal
points
of
s
this
observation
is
used
to
devise
an
efficient
method
for
finding
the
m
smallest
functional
values
of
monotonic
functions
defined
on
ordered
pairs
of
positive
integers
the
method
is
easily
extended
to
include
monotonic
functions
defined
on
ordered
n
tuples
included
is
a
fortran
program
which
was
written
to
implement
the
procedure
for
a
certain
important
case
cacm
july
1966
sigillito
v
g
ca660709
jb
march
2
1978
9
13
pm
1403
5
1403
1403
5
1403
1403
5
1403
</TEXT>
</DOC>
<DOC>
<DOCNO>1404</DOCNO>
<TEXT>
computational
aspects
of
multiple
covariance
analysis
on
a
multifactor
structure
the
computational
procedure
for
the
analysis
of
multiple
covariance
in
statistics
is
discussed
with
reference
to
the
analysis
of
variance
a
special
operator
calculus
developed
by
hartly
for
programming
analysis
of
variance
for
multifactor
experiments
is
extended
to
cover
the
analysis
of
covariance
this
extension
is
accomplished
by
utilizing
the
connection
between
the
analysis
of
covariance
and
the
analysis
of
variance
and
by
introducing
a
new
operator
the
results
are
illustrated
by
a
numerical
example
for
analysis
of
covariance
in
which
the
basic
computations
are
shown
to
be
carried
out
by
an
analysis
of
variance
program
cacm
july
1966
peng
k
c
ca660708
jb
march
2
1978
9
18
pm
1404
4
1404
1045
5
1404
1404
5
1404
1404
5
1404
1404
5
1404
</TEXT>
</DOC>
<DOC>
<DOCNO>1405</DOCNO>
<TEXT>
matrix
triangulation
with
integer
arithmetic
algorithm
287
f1
cacm
july
1966
blankinship
w
a
ca660707a
jb
march
2
1978
9
20
pm
1405
5
1405
1405
5
1405
1405
5
1405
</TEXT>
</DOC>
<DOC>
<DOCNO>1406</DOCNO>
<TEXT>
solution
of
simultaneous
linear
diophantine
equations
algorithm
288
f4
cacm
july
1966
blankinship
w
a
ca660707b
jb
march
23
1978
7
06
pm
1406
5
1406
1406
5
1406
1406
5
1406
</TEXT>
</DOC>
<DOC>
<DOCNO>1407</DOCNO>
<TEXT>
confidence
interval
for
a
ratio
algorithm
289
g1
cacm
july
1966
hill
i
d
pike
m
c
ca660707c
jb
march
23
1978
7
07
pm
1407
5
1407
1407
5
1407
1407
5
1407
</TEXT>
</DOC>
<DOC>
<DOCNO>1408</DOCNO>
<TEXT>
the
eschenbach
drum
scheme
the
prime
function
of
a
drum
operating
in
real
time
is
to
perform
accesses
quickly
the
usual
means
for
increasing
this
capacity
is
to
incorporate
engineering
or
hardware
improvements
in
this
paper
the
problem
is
attacked
not
by
changing
the
drum
but
rather
by
modifying
the
manner
in
which
it
operates
at
the
outset
a
drum
is
given
a
functional
definition
then
a
simple
design
scheme
eschenbach
is
introduced
which
enormously
increases
the
rate
of
accessing
for
drums
so
defined
this
is
shown
to
enable
a
system
to
perform
a
job
by
employing
fewer
or
less
expensive
drums
it
is
suggested
that
although
the
design
scheme
has
a
specific
use
the
method
underlying
it
has
more
general
applicability
the
question
of
the
efficacy
of
the
drum
scheme
is
then
raised
to
deal
with
this
a
standard
of
efficiency
is
developed
in
light
of
realistic
real
time
circumstances
the
drum
scheme
is
then
modelled
in
a
manner
which
permits
it
to
be
analyzed
as
a
problem
in
queueing
theory
thus
one
is
enabled
to
ascertain
whether
the
drum
scheme
is
efficient
enough
for
its
application
again
whereas
the
analysis
of
the
drum
scheme
has
a
specific
use
the
methods
underlying
it
have
more
general
applicability
cacm
july
1966
weingarten
a
ca660706
jb
march
2
1978
9
29
pm
1408
5
1408
1408
5
1408
1408
5
1408
2319
5
1408
1408
6
1408
1719
6
1408
1749
6
1408
1751
6
1408
2016
6
1408
2017
6
1408
2080
6
1408
2188
6
1408
2203
6
1408
2204
6
1408
</TEXT>
</DOC>
<DOC>
<DOCNO>1409</DOCNO>
<TEXT>
nebula
a
digital
computer
using
a
20
mc
glass
delay
line
memory
oregon
state
university
has
designed
and
constructed
a
medium
speed
serial
digital
computer
using
glass
delay
lines
circulating
at
22
mc
as
memory
the
design
objectives
as
originally
conceived
in
a
special
seminar
were
1
to
be
a
research
project
in
computer
design
2
to
be
usable
as
an
educational
machine
and
3
to
have
easily
modifiable
hardware
for
basic
research
in
computer
systems
design
an
unusual
arrangement
of
information
within
the
22
mc
memory
allows
a
simple
interface
with
the
340
kc
arithmetic
unit
which
results
in
an
effective
zero
latency
time
and
provides
possibilities
for
an
associative
memory
the
arithmetic
unit
has
a
command
structure
similar
to
large
parallel
machines
and
uses
flip
flop
arithmetic
and
control
registers
throughout
all
hardware
development
has
been
aimed
toward
the
concept
of
easy
modification
elaborate
console
controls
for
effective
man
machine
interaction
and
low
cost
cacm
july
1966
boles
j
a
rux
p
t
weingarten
jr
f
w
ca660705
jb
march
2
1978
9
35
pm
1409
4
1409
1208
5
1409
1409
5
1409
1409
5
1409
1409
5
1409
</TEXT>
</DOC>
<DOC>
<DOCNO>1410</DOCNO>
<TEXT>
interarrival
statistics
for
time
sharing
systems
the
optimization
of
time
shared
system
performance
requires
the
description
of
the
stochastic
processes
governing
the
user
inputs
and
the
program
activity
this
paper
provides
a
statistical
description
of
the
user
input
process
in
the
sdc
arpa
general
purpose
time
sharing
system
tss
the
input
process
is
assumed
to
be
stationary
and
to
be
defined
by
the
interarrival
time
distribution
the
data
obtained
appear
to
justify
satisfactorily
the
common
assumption
that
the
interarrival
times
are
serially
independent
the
data
do
not
appear
to
justify
except
as
a
very
rough
approximation
the
usual
assumption
off
an
exponential
distribution
for
interarrival
time
a
much
more
satisfactory
approximation
to
the
data
can
be
obtained
with
a
biphase
or
triphase
hyperexponential
distribution
cacm
july
1966
coffman
e
g
wood
r
c
ca660704
jb
march
2
1978
9
45
pm
1410
5
1410
1410
5
1410
1410
5
1410
1604
5
1410
1951
5
1410
2373
5
1410
1224
6
1410
1410
6
1410
1410
6
1410
1410
6
1410
1604
6
1410
1751
6
1410
1810
6
1410
1951
6
1410
2374
6
1410
</TEXT>
</DOC>
<DOC>
<DOCNO>1411</DOCNO>
<TEXT>
comparison
of
several
algorithms
for
computation
of
means
standard
deviations
and
correlation
coefficients
several
algorithms
for
computation
of
basic
statistics
are
compared
by
their
performance
on
systematically
generated
test
data
the
statistics
calculated
were
the
mean
standard
deviation
and
correlation
coefficient
for
each
statistic
the
algorithm
included
the
usual
computing
formulas
correction
due
to
an
accumulated
error
term
and
a
recursive
computation
of
the
current
value
of
the
statistic
the
usual
computing
formulas
were
also
evaluated
in
double
precision
large
errors
were
noted
for
some
calculation
using
the
usual
computing
formulas
the
most
reliable
technique
was
correction
of
the
initial
estimate
by
use
of
an
accumulated
error
term
to
eliminate
the
need
for
making
two
passes
on
the
data
it
was
suggested
that
the
initial
estimate
of
the
mean
be
obtained
from
a
subset
of
the
data
cacm
july
1966
neely
p
m
ca660703
jb
march
6
1978
2
54
pm
1411
5
1411
1411
5
1411
1411
5
1411
1619
5
1411
3166
5
1411
1411
6
1411
1411
6
1411
2731
6
1411
2799
6
1411
3159
6
1411
3167
6
1411
</TEXT>
</DOC>
<DOC>
<DOCNO>1412</DOCNO>
<TEXT>
the
banking
information
system
concept
most
large
commercial
banks
have
progressed
to
the
point
where
their
major
accounting
applications
have
been
automated
and
more
sophisticated
usage
of
data
processing
equipment
is
being
sought
this
coupled
with
the
availability
of
equipment
well
suited
to
real
time
direct
access
processing
has
led
to
development
within
some
banks
of
the
central
file
of
data
base
approach
toward
a
banking
information
system
the
banking
information
system
now
serves
the
two
fold
purpose
of
providing
real
time
responses
to
inquires
about
individual
account
stasus
and
providing
more
complex
combinations
of
information
for
management
use
both
kinds
of
processing
draw
upon
a
common
store
of
data
contained
in
the
direct
access
central
file
this
data
base
includes
indexes
which
facilitate
cross
referencing
of
account
information
so
that
all
relationships
between
bank
and
customer
may
be
discerned
in
introducing
the
banking
information
system
concept
a
gradual
approach
to
account
cross
referencing
and
file
conversion
is
most
prudent
generally
this
system
must
interface
with
other
computer
applications
already
existing
within
the
bank
cacm
july
1966
head
r
v
ca660702
jb
march
2
1978
9
53
pm
1412
5
1412
1412
5
1412
1412
5
1412
</TEXT>
</DOC>
<DOC>
<DOCNO>1413</DOCNO>
<TEXT>
a
vision
of
technology
and
education
educational
technology
is
currently
quite
fashionable
here
as
in
many
other
branches
or
aspects
of
technology
changes
possible
in
the
next
generation
or
two
are
now
known
as
ideas
discoveries
or
inventions
the
unknown
is
whether
the
potential
will
become
the
actual
and
if
so
on
what
time
scale
this
ignorance
stems
largely
from
ignorance
about
the
social
response
to
potential
technological
change
the
object
of
this
paper
is
to
present
a
vision
of
potential
educational
technology
and
to
raise
questions
about
the
modes
of
social
response
and
adaptation
likely
to
be
evoked
by
such
a
vision
cacm
july
1966
oettinger
a
g
ca660701
jb
march
3
1978
8
38
am
1413
4
1413
1413
4
1413
1654
4
1413
1771
4
1413
1902
4
1413
2478
4
1413
1205
5
1413
1270
5
1413
1413
5
1413
1413
5
1413
1413
5
1413
</TEXT>
</DOC>
<DOC>
<DOCNO>1414</DOCNO>
<TEXT>
twelve
row
punched
card
code
for
information
interchange
proposed
american
standard
cacm
june
1966
ca660607
jb
march
3
1978
8
39
am
1414
5
1414
1414
5
1414
1414
5
1414
</TEXT>
</DOC>
<DOC>
<DOCNO>1415</DOCNO>
<TEXT>
automatic
derivation
of
microsentences
the
decomposition
of
long
complex
english
sentences
into
shorter
kernel
like
constituent
sentences
microsentences
has
often
been
suggested
as
an
avenue
toward
conducting
automatic
retrieval
of
natural
language
messages
to
explore
the
prospects
of
such
a
step
the
authors
attempted
in
1963
to
prepare
a
general
program
for
deriving
microsentences
from
longer
sentences
that
had
been
syntactically
analyzed
by
the
harvard
multipath
analysis
program
the
basic
idea
was
to
extract
the
subject
verb
and
object
if
any
of
each
clause
and
to
reassemble
these
materials
into
a
grammatical
microsentence
a
program
is
described
in
this
paper
which
was
designed
to
operate
on
the
tree
structure
output
of
the
analyzer
and
the
microsentences
that
were
produced
are
exhibited
the
authors
conclude
that
while
microsentences
of
the
quality
achieved
do
not
open
up
immediate
prospects
for
improving
the
performance
of
automatic
message
retrieval
systems
they
may
have
practical
value
in
man
machine
systems
using
human
monitors
to
select
the
preferred
syntactic
interpretation
of
a
sentence
cacm
june
1966
carmody
b
t
jones
jr
p
e
ca660606
jb
march
3
1978
8
47
am
1415
5
1415
1415
5
1415
1415
5
1415
</TEXT>
</DOC>
<DOC>
<DOCNO>1416</DOCNO>
<TEXT>
a
fortran
technique
for
simplifying
input
to
report
generators
typical
report
generators
allow
the
production
of
standard
forms
when
tabulating
a
magnetic
tape
file
the
extraction
of
nonstandard
sets
of
information
with
suitable
annotation
involves
troublesome
forms
design
a
method
of
information
extraction
involving
the
calculation
of
suitable
fortran
format
statements
which
combats
this
problem
is
described
cacm
june
1966
cleary
j
g
ca660605
jb
march
3
1978
8
53
am
1416
5
1416
1416
5
1416
1416
5
1416
</TEXT>
</DOC>
<DOC>
<DOCNO>1417</DOCNO>
<TEXT>
economies
of
scale
and
the
ibm
system
360
cost
functions
among
five
system
360
models
are
analyzed
through
examinations
of
instruction
times
program
kernels
and
a
typical
instruction
mix
comparisons
are
made
between
the
data
developed
here
and
grosch
law
which
seems
to
be
applicable
to
much
of
the
data
sizable
economies
of
scale
are
unquestionably
present
in
computing
equipment
cacm
june
1966
solomon
jr
m
b
ca660604
jb
march
3
1978
8
57
am
1417
5
1417
1417
5
1417
1417
5
1417
1653
5
1417
2387
5
1417
2852
5
1417
963
6
1417
1069
6
1417
1417
6
1417
1417
6
1417
1417
6
1417
1771
6
1417
2345
6
1417
2387
6
1417
2479
6
1417
3190
6
1417
</TEXT>
</DOC>
<DOC>
<DOCNO>1418</DOCNO>
<TEXT>
examination
scheduling
algorithm
286
zh
cacm
june
1966
peck
j
e
l
williams
m
r
ca660603a
jb
march
3
1978
8
58
am
1418
5
1418
1418
5
1418
1418
5
1418
2350
5
1418
2354
5
1418
2355
5
1418
1418
6
1418
1418
6
1418
1418
6
1418
1521
6
1418
1521
6
1418
1597
6
1418
1597
6
1418
1679
6
1418
1883
6
1418
2040
6
1418
2350
6
1418
2350
6
1418
2354
6
1418
2354
6
1418
2355
6
1418
2355
6
1418
</TEXT>
</DOC>
<DOC>
<DOCNO>1419</DOCNO>
<TEXT>
chebyshev
quadrature
algorithm
279
d1
cacm
june
1966
hopgood
f
r
a
litherland
c
ca660603b
jb
march
23
1978
7
09
pm
1355
5
1419
1419
5
1419
1419
5
1419
1419
5
1419
2619
5
1419
1419
6
1419
1419
6
1419
1429
6
1419
</TEXT>
</DOC>
<DOC>
<DOCNO>1420</DOCNO>
<TEXT>
a
new
uniform
pseudorandom
number
generator
a
new
multiplicative
congruential
pseudorandom
number
generator
is
discussed
in
which
the
modulus
is
the
largest
prime
within
accumulator
capacity
and
the
multiplier
is
a
primitive
root
of
that
prime
this
generator
passes
the
usual
statistical
tests
and
in
addition
the
least
significant
bits
appear
to
be
as
random
as
the
most
significant
bits
a
property
which
generators
having
modulus
2
k
do
not
possess
cacm
june
1966
hutchinson
d
w
ca660602
jb
march
3
1978
9
01
am
1420
5
1420
1420
5
1420
1420
5
1420
1691
5
1420
1293
6
1420
1420
6
1420
1631
6
1420
</TEXT>
</DOC>
<DOC>
<DOCNO>1421</DOCNO>
<TEXT>
a
contribution
to
the
development
of
algol
a
programming
language
similar
in
many
respects
to
algol
60
but
incorporating
a
large
number
of
improvements
based
on
six
years
experience
with
that
language
is
described
in
detail
part
i
consists
of
an
introduction
to
the
new
language
and
a
summary
of
the
changes
made
to
algol
60
together
with
a
discussion
of
the
motives
behind
there
visions
part
ii
is
a
rigorous
definition
of
the
proposed
language
part
iii
describes
a
set
of
proposed
standard
procedures
to
be
used
with
the
language
including
facilities
for
input
output
cacm
june
1966
wirth
n
hoare
c
a
r
ca660601
jb
march
3
1978
9
07
am
1380
5
1421
1421
5
1421
1421
5
1421
1421
5
1421
1552
5
1421
1693
5
1421
1781
5
1421
1854
5
1421
1860
5
1421
2060
5
1421
557
5
1421
123
6
1421
196
6
1421
919
6
1421
990
6
1421
1007
6
1421
1046
6
1421
1131
6
1421
1139
6
1421
1140
6
1421
1149
6
1421
1184
6
1421
1198
6
1421
1215
6
1421
1223
6
1421
1265
6
1421
1303
6
1421
1323
6
1421
1358
6
1421
1366
6
1421
1366
6
1421
1380
6
1421
1389
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1421
6
1421
1460
6
1421
1462
6
1421
1463
6
1421
1467
6
1421
1468
6
1421
1469
6
1421
1471
6
1421
1477
6
1421
1477
6
1421
1477
6
1421
1491
6
1421
1491
6
1421
1491
6
1421
1496
6
1421
1496
6
1421
1531
6
1421
1535
6
1421
1565
6
1421
1601
6
1421
1602
6
1421
1613
6
1421
1614
6
1421
1614
6
1421
1626
6
1421
1626
6
1421
1641
6
1421
1641
6
1421
1748
6
1421
1749
6
1421
1785
6
1421
1786
6
1421
1787
6
1421
1788
6
1421
205
6
1421
210
6
1421
224
6
1421
249
6
1421
1869
6
1421
288
6
1421
316
6
1421
378
6
1421
378
6
1421
381
6
1421
398
6
1421
2110
6
1421
11
6
1421
404
6
1421
410
6
1421
463
6
1421
464
6
1421
483
6
1421
3184
6
1421
3184
6
1421
3184
6
1421
3188
6
1421
584
6
1421
600
6
1421
680
6
1421
691
6
1421
731
6
1421
763
6
1421
799
6
1421
799
6
1421
</TEXT>
</DOC>
<DOC>
<DOCNO>1422</DOCNO>
<TEXT>
eleven
sixteenths
inch
perforated
paper
tape
proposed
american
standard
cacm
may
1966
ca660515
jb
march
3
1978
9
09
am
1422
5
1422
1422
5
1422
1422
5
1422
</TEXT>
</DOC>
<DOC>
<DOCNO>1423</DOCNO>
<TEXT>
a
simple
algorithm
for
computing
the
generalized
inverse
of
a
matrix
the
generalized
inverse
of
a
matrix
is
important
in
analysis
because
it
provides
an
extension
of
the
concept
of
an
inverse
which
applies
to
all
matrices
it
also
has
many
applications
in
numerical
analysis
but
it
is
not
widely
used
because
the
existing
algorithms
are
fairly
complicated
and
require
considerable
storage
space
a
simple
extension
has
been
found
to
the
conventional
orthogonalization
method
for
inverting
non
singular
matrices
which
gives
the
generalized
inverse
with
little
extra
effort
and
with
no
additional
storage
requirements
the
algorithm
gives
the
generalized
inverse
for
any
m
by
n
matrix
a
including
the
special
case
when
m
n
and
a
is
non
singular
and
the
case
when
m
n
and
rank
a
n
in
the
first
case
the
algorithm
gives
the
ordinary
inverse
of
a
in
the
second
case
the
algorithm
yields
the
ordinary
least
squares
transformation
matrix
inv
a
a
and
has
the
advantage
of
avoiding
the
loss
of
significance
which
results
in
forming
the
product
a
explicitly
cacm
may
1966
rust
r
burrus
w
r
schneeberger
c
ca660514
jb
march
3
1978
9
22
am
1423
5
1423
1423
5
1423
1423
5
1423
</TEXT>
</DOC>
<DOC>
<DOCNO>1424</DOCNO>
<TEXT>
automatic
analysis
of
electronic
digital
circuits
using
list
processing
a
mapping
from
black
diagrams
of
digital
circuits
to
list
structures
is
described
together
with
a
list
processing
program
written
for
the
control
data
3600
which
uses
this
mapping
to
automatically
carry
out
circuit
analysis
cacm
may
1966
shalla
l
ca660513
jb
march
3
1978
9
24
am
1424
5
1424
1424
5
1424
1424
5
1424
1846
5
1424
1380
6
1424
1424
6
1424
1484
6
1424
1572
6
1424
576
6
1424
</TEXT>
</DOC>
<DOC>
<DOCNO>1425</DOCNO>
<TEXT>
flow
diagrams
turing
machines
and
languages
with
only
two
formation
rules
in
the
first
part
of
the
paper
flow
diagrams
are
introduced
to
represent
inter
al
mappings
of
a
set
into
itself
although
not
every
diagram
is
decomposable
into
a
finite
number
of
given
base
diagrams
this
becomes
true
at
a
semantical
level
due
to
a
suitable
extension
of
the
given
set
and
of
the
basic
mappings
defined
in
it
two
normalization
methods
of
flow
diagrams
are
given
the
first
has
three
base
diagrams
the
second
only
two
in
the
second
part
of
the
paper
the
second
method
is
applied
to
the
theory
of
turing
machines
with
every
turing
machine
provided
with
a
two
way
half
tape
there
is
associated
a
similar
machine
doing
essentially
the
same
job
but
working
on
a
tape
obtained
from
the
first
one
by
interspersing
alternate
blank
squares
the
new
machine
belongs
to
the
family
elsewhere
introduced
generated
by
composition
and
iteration
from
the
two
machines
l
and
r
that
family
is
a
proper
subfamily
of
the
whole
family
of
turing
machines
cacm
may
1966
bohm
c
jacopini
g
ca660512
jb
march
3
1978
9
35
am
1425
4
1425
1781
4
1425
438
4
1425
762
4
1425
249
5
1425
1425
5
1425
1425
5
1425
1425
5
1425
2709
5
1425
2802
5
1425
3004
5
1425
1425
6
1425
1425
6
1425
1425
6
1425
2138
6
1425
2204
6
1425
2247
6
1425
2356
6
1425
2456
6
1425
2456
6
1425
2477
6
1425
3186
6
1425
</TEXT>
</DOC>
<DOC>
<DOCNO>1426</DOCNO>
<TEXT>
a
simulation
of
hospital
admission
policy
a
study
is
described
which
simulates
different
admission
policies
of
a
large
specialized
hospital
the
objective
is
to
determine
better
policies
for
stabilization
of
admission
and
census
rates
while
maintaining
a
reasonably
full
hospital
there
types
of
policies
were
examined
admission
based
on
percentages
of
discharge
rates
discharge
rates
plus
or
minus
a
constant
and
fixed
authorizations
independent
of
discharge
rates
the
last
type
policy
produced
more
stable
simulated
results
and
when
put
into
practice
improvements
were
realized
cacm
may
1966
smith
w
g
solomon
jr
m
b
ca660511
jb
march
3
1978
9
42
am
1426
5
1426
1426
5
1426
1426
5
1426
</TEXT>
</DOC>
<DOC>
<DOCNO>1427</DOCNO>
<TEXT>
simulation
of
radioisotope
scans
by
computer
in
radioisotope
scanning
a
field
which
is
assuming
increasing
importance
in
medical
diagnosis
the
scan
is
a
two
dimensional
pattern
made
up
of
dots
areas
of
increased
source
activity
are
represented
on
the
scan
by
areas
of
increased
dot
density
to
study
the
output
of
scanners
with
various
characteristics
a
program
which
simulates
radioisotope
scans
has
been
written
for
a
pdp
1
computer
with
auxiliary
disk
storage
and
cathode
ray
tube
display
past
and
present
research
using
the
output
of
the
simulator
has
shown
the
flexibility
of
the
system
to
be
important
the
structure
of
this
program
can
be
useful
in
the
simulation
of
the
output
of
any
quantum
limited
system
cacm
may
1966
pizer
s
m
ca660510
jb
march
3
1978
9
47
am
1427
5
1427
1427
5
1427
1427
5
1427
</TEXT>
</DOC>
<DOC>
<DOCNO>1428</DOCNO>
<TEXT>
shock
iii
a
computer
system
as
an
aid
in
the
management
of
critically
iii
patients
shock
iii
an
online
digital
computer
system
to
assist
the
physician
nurse
and
paramedical
personnel
in
monitoring
and
reporting
on
critically
ill
patients
is
described
cacm
may
1966
rockwell
jr
m
a
shubin
h
weil
m
h
meagher
p
f
ca660509
jb
march
3
1978
9
49
am
1428
5
1428
1428
5
1428
1428
5
1428
</TEXT>
</DOC>
<DOC>
<DOCNO>1429</DOCNO>
<TEXT>
matrix
reduction
using
the
hungarian
method
for
the
generation
of
school
timetables
the
application
of
kuhn
hungarian
method
to
the
problem
of
matrix
reduction
as
needed
in
gotlieb
method
for
timetable
generation
is
described
the
method
is
suited
to
both
hand
and
computer
calculation
devices
to
improve
the
efficiency
of
the
basic
algorithm
are
discussed
cacm
may
1966
lions
j
ca660508
jb
march
3
1978
9
52
am
1429
5
1429
1429
5
1429
1429
5
1429
2619
5
1429
2772
5
1429
2787
5
1429
1116
6
1429
1116
6
1429
1419
6
1429
1429
6
1429
1429
6
1429
1429
6
1429
</TEXT>
</DOC>
<DOC>
<DOCNO>1430</DOCNO>
<TEXT>
multiple
precision
floating
point
conversion
from
decimal
to
binary
and
vice
versa
decimal
to
binary
and
binary
to
decimal
floating
point
conversion
is
often
performed
by
using
a
table
of
the
powers
10
i
ia
positive
integer
for
converting
from
base
10
to
base
2
and
by
using
a
table
of
the
coefficient
of
a
polynomial
approximation
of
10
x
0
x
1
for
converting
from
base
2
to
base
10
these
tables
occupy
a
large
storage
region
in
the
case
of
a
nonsingle
precision
conversion
this
paper
shows
that
a
single
small
table
suffices
for
a
floating
point
conversion
from
decimal
to
binary
and
vice
versa
in
any
useful
precision
cacm
may
1966
mancino
o
g
ca660507
jb
march
3
1978
9
56
am
1430
5
1430
1430
5
1430
1430
5
1430
</TEXT>
</DOC>
<DOC>
<DOCNO>1431</DOCNO>
<TEXT>
on
a
storage
mapping
function
for
data
structures
some
basic
facts
about
certain
data
structures
are
reviewed
and
an
efficient
algorithm
is
presented
for
constructing
a
storage
mapping
function
for
a
structure
from
the
structure
definition
cacm
may
1966
deuel
p
ca660506
jb
march
3
1978
9
58
am
1431
5
1431
1431
5
1431
1431
5
1431
</TEXT>
</DOC>
<DOC>
<DOCNO>1432</DOCNO>
<TEXT>
incorporation
of
nonstandard
input
output
devices
into
fortran
systems
a
fortran
system
may
readily
be
modified
to
handle
input
output
with
nonstandard
media
on
the
same
basis
on
which
it
handles
the
standard
media
this
is
done
by
providing
a
character
handling
subroutine
suited
to
the
nonstandard
medium
and
arranged
to
be
called
by
an
otherwise
unused
output
statement
type
or
unit
number
this
method
was
used
to
control
output
of
alphanumeric
information
on
a
digital
graph
plotter
cacm
may
1966
cohn
c
e
ca660505
jb
march
3
1978
10
01
am
1432
5
1432
1432
5
1432
1432
5
1432
</TEXT>
</DOC>
<DOC>
<DOCNO>1433</DOCNO>
<TEXT>
a
note
on
linear
programming
algorithm
design
a
combinatorial
problem
as
linear
programming
models
grow
bigger
and
bigger
in
size
much
actual
data
that
must
be
memorized
is
often
put
on
magnetic
tape
or
disk
and
consequently
there
is
an
improportionality
fast
rise
in
the
consumption
of
computer
timeo
cut
down
this
expense
an
ever
increasing
effort
is
made
to
design
more
efficient
algorithms
this
paper
is
meant
to
support
the
effort
it
is
attempted
to
find
some
characteristics
of
the
way
a
pivot
column
is
found
the
number
of
repetitions
of
a
certain
transfer
of
data
from
tape
to
core
memory
is
considered
after
some
simplification
the
problem
is
restated
in
a
general
way
the
generating
function
of
the
probability
distribution
and
the
moment
generating
function
of
the
number
of
repetitions
is
found
asymptotic
formulas
are
given
for
the
moments
using
a
result
from
a
paper
of
s
narumi
1
the
results
may
be
applied
to
write
very
efficient
routines
that
search
for
an
extreme
value
in
a
table
formulas
provide
a
means
of
calculating
the
computer
timings
in
this
case
cacm
may
1966
roes
p
b
m
ca660504
jb
march
3
1978
10
10
am
1433
5
1433
1433
5
1433
1433
5
1433
</TEXT>
</DOC>
<DOC>
<DOCNO>1434</DOCNO>
<TEXT>
a
monte
carlo
algorithm
for
assigning
students
to
classes
a
technique
of
random
choice
is
illustrated
by
application
to
the
problem
of
assigning
students
to
a
fixed
schedule
of
courses
using
the
technique
it
is
possible
to
reduce
or
eliminate
difficulties
that
result
when
a
popular
section
is
filled
and
closed
before
all
students
requesting
and
requiring
it
have
been
scheduled
the
effectiveness
of
automatic
scheduling
is
retained
without
loss
of
the
students
privilege
of
picking
favorite
instructors
cacm
may
1966
macon
n
walker
e
e
ca660503
jb
march
3
1978
10
14
am
1434
5
1434
1434
5
1434
1434
5
1434
1540
5
1434
2209
5
1434
1434
6
1434
1434
6
1434
1540
6
1434
</TEXT>
</DOC>
<DOC>
<DOCNO>1435</DOCNO>
<TEXT>
design
of
computer
simulation
experiments
for
industrial
systems
the
aim
of
this
paper
is
to
provide
background
information
on
the
existing
literature
on
experimental
design
techniques
which
may
be
applicable
to
the
design
of
computer
simulation
experiments
for
industrial
systems
although
major
emphasis
is
placed
on
analysis
of
variance
techniques
three
other
techniques
of
data
analysis
are
considered
multiple
ranking
procedures
sequential
sampling
and
spectral
analysis
the
paper
treats
four
specific
experimental
design
problems
and
several
techniques
for
solving
them
the
four
experimental
design
problems
are
1
the
problem
of
stochastic
convergence
2
the
problem
of
factor
selection
3
the
problem
of
motive
and
4
the
many
response
problem
cacm
may
1966
burdick
d
s
naylor
t
h
ca660502
jb
march
3
1978
10
20
am
1435
5
1435
1435
5
1435
1435
5
1435
1517
5
1435
1435
6
1435
</TEXT>
</DOC>
<DOC>
<DOCNO>1436</DOCNO>
<TEXT>
interchange
of
two
blocks
of
data
algorithm
284
k2
cacm
may
1966
fletcher
w
ca660501a
jb
march
3
1978
10
21
am
1436
5
1436
1436
5
1436
1436
5
1436
</TEXT>
</DOC>
<DOC>
<DOCNO>1437</DOCNO>
<TEXT>
the
mutual
primal
dual
method
algorithm
285
h
cacm
may
1966
aird
t
j
ca660501b
jb
march
23
1978
7
12
pm
1437
5
1437
1437
5
1437
1437
5
1437
</TEXT>
</DOC>
<DOC>
<DOCNO>1438</DOCNO>
<TEXT>
a
method
for
locating
zeros
of
complex
functions
a
method
for
computing
the
index
or
winding
number
is
developed
and
applied
to
the
problem
of
finding
zeros
of
functions
from
the
plane
into
the
plane
cacm
april
1966
cain
jr
g
l
ca660411
jb
march
3
1978
10
23
am
1438
5
1438
1438
5
1438
1438
5
1438
</TEXT>
</DOC>
<DOC>
<DOCNO>1439</DOCNO>
<TEXT>
mechanization
of
the
curve
fitting
process
datan
a
process
for
fitting
a
curve
to
approximate
data
and
the
problem
it
creates
for
the
engineer
programmer
is
defined
an
approach
has
also
been
defined
and
a
system
has
been
written
for
the
sru
1107
to
mechanize
a
major
portion
of
this
process
the
techniques
developed
to
accomplish
the
mechanization
are
largely
empirical
and
are
dependent
for
their
information
only
on
the
actual
data
points
cacm
april
1966
simonsen
r
h
anketell
d
l
ca660410
jb
march
3
1978
10
26
am
1439
5
1439
1439
5
1439
1439
5
1439
</TEXT>
</DOC>
<DOC>
<DOCNO>1440</DOCNO>
<TEXT>
starting
approximations
for
square
root
calculation
on
ibm
system
360
several
starting
approximations
for
square
root
calculation
by
newton
method
are
presented
in
a
form
to
facilitate
their
use
in
ibm
system
360
square
root
routines
these
approximations
include
several
for
the
range
1
16
1
which
is
the
interval
of
primary
interest
on
ibm
system
360
cacm
april
1966
fike
c
t
ca660409
jb
march
3
1978
10
32
am
1015
4
1440
1346
4
1440
1440
4
1440
1440
4
1440
1645
4
1440
1932
4
1440
2159
4
1440
951
4
1440
962
5
1440
1440
5
1440
1440
5
1440
1440
5
1440
1566
5
1440
532
5
1440
1440
6
1440
</TEXT>
</DOC>
<DOC>
<DOCNO>1441</DOCNO>
<TEXT>
methods
of
numerical
integration
applied
to
a
system
having
trivial
function
evaluations
a
study
has
been
made
to
determine
which
methods
of
numerical
integration
require
the
least
computation
time
for
a
given
amount
of
truncation
error
when
applied
to
a
particular
system
of
ordinary
differential
equations
where
function
evaluations
are
relatively
trivial
recent
methods
due
to
butcher
and
gear
are
compared
with
classic
runge
kutta
kutta
nystrom
and
adams
methods
some
of
the
newer
one
step
methods
due
to
butcher
are
found
to
be
slightly
superior
but
no
one
method
is
found
to
have
any
great
advantage
over
the
others
in
the
application
to
this
particular
problem
cacm
april
1966
waters
j
ca660408
jb
march
3
1978
10
37
am
1441
5
1441
1441
5
1441
1441
5
1441
</TEXT>
</DOC>
<DOC>
<DOCNO>1442</DOCNO>
<TEXT>
recorded
magnetic
tape
for
information
interchange
800
cpi
nrzi
proposed
american
standard
cacm
april
1966
ca660407
jb
march
3
1978
10
39
am
1442
5
1442
1442
5
1442
1442
5
1442
</TEXT>
</DOC>
<DOC>
<DOCNO>1443</DOCNO>
<TEXT>
a
method
for
finding
the
least
squares
estimate
of
the
intersection
point
of
two
helices
in
space
when
the
helical
trajectories
of
two
charged
particles
moving
away
from
a
common
point
in
a
magnetic
field
are
reconstructed
from
measurements
on
the
tracks
the
reconstructed
tracks
are
perturbed
by
measurement
and
other
errors
and
do
not
in
general
intersect
a
method
is
given
for
adjusting
the
reconstructed
tracks
in
a
least
squares
manner
so
that
they
do
intersect
cacm
april
1966
royston
r
j
gregory
j
ca660406
jb
march
3
1978
10
42
am
1443
5
1443
1443
5
1443
1443
5
1443
</TEXT>
</DOC>
<DOC>
<DOCNO>1444</DOCNO>
<TEXT>
an
algorithm
for
generating
projective
reduction
formulas
for
matrix
elements
of
many
electron
wavefunctions
an
algol
procedure
is
given
for
automatically
generating
formulas
for
matrix
elements
arising
in
the
variational
solution
of
the
schrodinger
equation
for
many
electron
systems
cacm
april
1966
reeves
c
m
ca660405
jb
march
3
1978
10
44
am
1334
4
1444
1396
4
1444
1444
4
1444
964
5
1444
1444
5
1444
1444
5
1444
1444
5
1444
</TEXT>
</DOC>
<DOC>
<DOCNO>1445</DOCNO>
<TEXT>
use
of
the
computer
to
teach
introductory
statistics
it
has
always
been
obvious
that
the
aid
to
calculation
offered
by
the
computer
forces
a
change
in
the
curricula
of
mathematics
statistics
physics
engineering
and
other
courses
not
so
obvious
are
the
many
pedagogic
aids
the
computer
can
offer
in
teaching
the
subject
matter
the
possibilities
of
giving
the
student
a
better
technical
as
well
as
conceptual
understanding
of
statistics
were
explored
for
a
number
of
years
at
the
college
of
medicine
of
the
university
of
cincinnati
and
are
reported
here
cacm
april
1966
sterling
t
d
pollack
s
v
ca660404
jb
march
3
1978
10
48
am
1445
5
1445
1445
5
1445
1445
5
1445
</TEXT>
</DOC>
<DOC>
<DOCNO>1446</DOCNO>
<TEXT>
chebyshev
quadrature
algorithm
279
d1
cacm
april
1966
hopgood
f
r
a
litherland
c
ca660403a
jb
march
3
1978
10
50
am
1446
5
1446
1446
5
1446
1446
5
1446
</TEXT>
</DOC>
<DOC>
<DOCNO>1447</DOCNO>
<TEXT>
abscissas
and
weights
for
gregory
quadrature
d1
cacm
april
1966
welsch
j
h
ca660403b
jb
march
23
1978
7
16
pm
1447
5
1447
1447
5
1447
1447
5
1447
</TEXT>
</DOC>
<DOC>
<DOCNO>1448</DOCNO>
<TEXT>
abscissas
and
weights
for
romberg
quadrature
algorithm
281
d1
cacm
april
1966
welsch
j
h
ca660403c
jb
march
23
1978
7
17
pm
1448
5
1448
1448
5
1448
1448
5
1448
</TEXT>
</DOC>
<DOC>
<DOCNO>1449</DOCNO>
<TEXT>
derivatives
algorithm
282
s22
cacm
april
1966
gautschi
w
ca660403d
jb
march
23
1978
7
18
pm
1449
5
1449
1449
5
1449
1449
5
1449
2129
5
1449
1449
6
1449
</TEXT>
</DOC>
<DOC>
<DOCNO>1450</DOCNO>
<TEXT>
simultaneous
displacement
of
polynomial
roots
if
real
and
simple
algorithm
283
c2
cacm
april
1966
kerner
i
o
ca660403e
jb
march
23
1978
7
19
pm
1450
5
1450
1450
5
1450
1450
5
1450
</TEXT>
</DOC>
<DOC>
<DOCNO>1451</DOCNO>
<TEXT>
runge
kutta
integration
algorithm
9
d2
cacm
april
1966
thacher
jr
h
c
ca660403f
jb
march
23
1978
7
21
pm
1451
5
1451
1451
5
1451
1451
5
1451
</TEXT>
</DOC>
<DOC>
<DOCNO>1452</DOCNO>
<TEXT>
kutta
merson
algorithm
218
d2
cacm
april
1966
bayer
g
ca660403g
jb
march
30
1978
9
31
am
1452
5
1452
1452
5
1452
1452
5
1452
1633
5
1452
1452
6
1452
</TEXT>
</DOC>
<DOC>
<DOCNO>1453</DOCNO>
<TEXT>
a
nonrecursive
method
of
syntax
specification
the
use
of
the
kleene
regular
expression
notation
for
describing
algebraic
language
syntax
in
particular
of
algol
is
described
in
this
paper
a
fortran
ii
computer
program
for
carrying
out
the
elimination
algorithm
of
gorn
similar
to
gaussian
elimination
for
linear
systems
of
algebraic
equations
is
described
this
was
applied
to
numerous
smaller
languages
including
some
sublanguage
of
algol
a
hand
calculation
result
of
the
application
of
the
algorithm
to
all
of
algol
is
given
thus
expressing
the
revised
algol
1960
syntax
in
completely
nonrecursive
terms
as
far
as
its
context
free
portion
is
concerned
this
description
in
many
ways
is
far
more
intuitively
understood
than
the
previous
recursive
description
it
is
suggested
the
paper
also
includes
results
of
the
machine
program
which
does
not
include
a
simplification
algorithm
cacm
april
1966
carr
iii
j
w
weiland
j
ca660402
jb
march
3
1978
11
02
am
1086
4
1453
1132
4
1453
1234
4
1453
1263
4
1453
1263
4
1453
1265
4
1453
1270
4
1453
1323
4
1453
1358
4
1453
1379
4
1453
1380
4
1453
1453
4
1453
1453
4
1453
1464
4
1453
1484
4
1453
1491
4
1453
1498
4
1453
1613
4
1453
1614
4
1453
1781
4
1453
1825
4
1453
1860
4
1453
1945
4
1453
2083
4
1453
2178
4
1453
2179
4
1453
2252
4
1453
2325
4
1453
2341
4
1453
2546
4
1453
2645
4
1453
2652
4
1453
2684
4
1453
2842
4
1453
2929
4
1453
2934
4
1453
3069
4
1453
669
4
1453
679
4
1453
691
4
1453
761
4
1453
949
4
1453
989
4
1453
989
5
1453
1453
5
1453
1453
5
1453
1453
5
1453
1613
5
1453
3184
5
1453
987
6
1453
1086
6
1453
1134
6
1453
1453
6
1453
3184
6
1453
</TEXT>
</DOC>
<DOC>
<DOCNO>1454</DOCNO>
<TEXT>
a
simple
user
oriented
compiler
source
language
for
programming
automatic
test
equipment
for
the
nonprogrammer
difficulty
in
using
a
language
increases
rapidly
with
the
number
of
nonproblem
oriented
conventions
a
simple
language
even
if
inelegant
which
considers
the
user
background
as
part
of
the
problem
may
be
more
effective
than
a
source
language
containing
subtle
and
more
powerful
capabilities
the
language
described
in
this
paper
is
used
to
write
computer
programs
which
test
electronic
equipment
because
this
testing
process
contains
few
complex
ideas
there
is
little
need
for
the
elegance
and
redundancy
of
a
highly
syntax
oriented
language
a
simple
and
direct
language
will
suffice
for
the
problem
the
eventual
users
of
this
language
are
military
depot
personnel
who
cannot
he
expected
to
have
computer
programming
skill
or
significant
programming
training
for
this
nonprogramming
oriented
user
it
was
essential
to
create
a
language
using
familiar
engineering
statements
programming
oriented
conventions
would
have
unnecessarily
complicated
his
task
cacm
april
1966
scheff
b
h
ca660401
jb
march
3
1978
11
09
am
1454
5
1454
1454
5
1454
1454
5
1454
</TEXT>
</DOC>
<DOC>
<DOCNO>1455</DOCNO>
<TEXT>
trac
a
procedure
describing
language
for
the
reactive
typewriter
a
description
of
the
trac
text
reckoning
and
compiling
language
and
processing
algorithm
is
given
the
trac
language
was
developed
as
the
basis
of
a
software
package
for
the
reactive
typewriter
in
the
trac
language
one
can
write
procedures
for
accepting
naming
and
storing
any
character
string
from
the
typewriter
for
modifying
any
string
in
any
way
for
treating
any
string
at
any
time
as
an
executable
procedure
or
as
a
name
or
as
text
and
for
printing
out
any
string
the
trac
language
is
based
upon
an
extension
and
generalization
to
character
strings
of
the
programming
concept
of
the
macro
through
the
ability
of
trac
to
accept
and
store
definitions
of
procedures
the
capabilities
of
the
language
can
be
indefinitely
extended
and
can
deal
with
character
strings
integers
and
boolean
vector
variables
cacm
march
1966
mooers
c
n
ca660317
jb
march
3
1978
11
18
am
1455
5
1455
1455
5
1455
1455
5
1455
1530
5
1455
1531
5
1455
1565
5
1455
1703
5
1455
1945
5
1455
2036
5
1455
823
6
1455
914
6
1455
915
6
1455
917
6
1455
984
6
1455
989
6
1455
990
6
1455
1012
6
1455
1084
6
1455
1098
6
1455
1122
6
1455
1138
6
1455
1139
6
1455
1141
6
1455
1162
6
1455
1185
6
1455
1200
6
1455
1223
6
1455
1265
6
1455
1336
6
1455
1358
6
1455
1396
6
1455
1455
6
1455
1455
6
1455
1455
6
1455
1455
6
1455
1455
6
1455
1455
6
1455
1477
6
1455
1487
6
1455
1491
6
1455
1496
6
1455
1565
6
1455
205
6
1455
483
6
1455
584
6
1455
669
6
1455
680
6
1455
763
6
1455
</TEXT>
</DOC>
<DOC>
<DOCNO>1456</DOCNO>
<TEXT>
storage
and
retrieval
of
aspects
of
meaning
in
directed
graph
structures
an
experimental
system
that
uses
lisp
to
make
a
conceptual
dictionary
is
described
the
dictionary
associates
with
each
english
word
the
syntactic
information
definitional
material
and
references
to
the
contexts
in
which
it
has
been
used
to
define
other
words
such
relations
as
class
inclusion
possession
and
active
or
passive
actions
are
used
as
definitional
material
the
resulting
structure
serves
as
a
powerful
vehicle
for
research
on
the
logic
of
question
answering
examples
of
methods
of
inputting
information
and
answering
simple
english
questions
are
given
an
important
conclusion
is
that
although
lisp
and
other
list
processing
languages
are
ideally
suited
for
producing
complex
associative
structures
they
are
inadequate
vehicles
for
language
processing
on
any
large
scale
at
east
until
they
can
use
auxiliary
memory
as
a
continuous
extension
of
core
memory
cacm
march
1966
simmons
r
f
ca660316
jb
march
3
1978
11
25
am
1155
4
1456
1456
4
1456
1468
4
1456
1515
4
1456
1699
4
1456
1856
4
1456
2127
4
1456
1324
5
1456
1456
5
1456
1456
5
1456
1456
5
1456
</TEXT>
</DOC>
<DOC>
<DOCNO>1457</DOCNO>
<TEXT>
data
manipulation
and
programming
problems
in
automatic
information
retrieval
automatic
information
retrieval
programs
require
the
manipulation
of
a
variety
of
different
data
structures
including
linear
text
sparse
matrices
and
tree
or
list
structures
the
main
data
manipulations
to
be
performed
in
automatic
information
systems
are
first
briefly
reviewed
a
variety
of
data
representations
which
have
been
used
to
describe
structured
information
are
then
examined
and
the
characteristics
of
various
processing
languages
are
outlined
in
the
light
of
the
procedures
requiring
implementation
advantages
of
these
programming
languages
for
the
retrieval
application
are
examined
and
suggestions
are
made
for
the
design
of
programming
facilities
to
aid
in
information
retrieval
cacm
march
1966
salton
g
ca660315
jb
march
3
1978
11
35
am
1457
4
1457
1236
5
1457
1457
5
1457
1457
5
1457
1457
5
1457
</TEXT>
</DOC>
<DOC>
<DOCNO>1458</DOCNO>
<TEXT>
online
programming
when
the
transition
has
been
made
from
off
line
to
online
programming
there
are
a
number
of
changes
in
the
working
conditions
noted
these
changes
in
the
environment
make
necessary
corresponding
changes
in
the
processes
related
to
producing
and
checking
out
programs
in
the
main
it
it
not
the
programming
language
itself
which
must
be
changed
to
provide
a
facility
for
the
online
user
it
is
the
system
surrounding
the
programming
language
in
this
paper
the
online
environment
and
its
effect
on
programming
are
discussed
cacm
march
1966
schwartz
j
i
ca660314
jb
march
3
197811
44
am
1458
4
1458
1523
4
1458
1603
4
1458
1698
4
1458
1747
4
1458
1748
4
1458
1854
4
1458
1877
4
1458
1960
4
1458
2377
4
1458
2378
4
1458
2497
4
1458
2558
4
1458
2625
4
1458
2632
4
1458
2840
4
1458
2941
4
1458
3105
4
1458
3144
4
1458
1458
5
1458
1458
5
1458
1458
5
1458
1471
5
1458
</TEXT>
</DOC>
<DOC>
<DOCNO>1459</DOCNO>
<TEXT>
requirements
for
real
time
languages
real
time
languages
have
different
requirements
from
other
programming
languages
because
of
the
special
nature
of
their
applications
the
environment
in
which
their
object
programs
are
executed
and
the
environment
in
which
they
may
be
compiled
it
may
not
be
the
language
extensions
that
ultimately
advance
developments
in
the
field
progress
may
be
made
by
attacking
the
special
compiling
and
executing
system
problems
that
must
be
solved
cacm
march
1966
opler
a
ca660313
jb
march
3
1978
11
48
am
1459
5
1459
1459
5
1459
1459
5
1459
</TEXT>
</DOC>
<DOC>
<DOCNO>1460</DOCNO>
<TEXT>
evolution
of
the
meta
assembly
program
a
generalized
assembler
called
a
meta
assembler
is
described
the
meta
assembler
is
defined
and
factors
which
contributed
to
its
evolution
are
presented
how
a
meta
assembler
is
made
to
function
as
an
assembly
program
is
described
finally
the
implication
of
meta
assemblers
on
compiler
design
is
discussed
cacm
march
1966
ferguson
d
e
ca660312
jb
march
3
1978
11
56
am
1358
5
1460
1460
5
1460
1460
5
1460
1460
5
1460
1781
5
1460
123
6
1460
196
6
1460
919
6
1460
990
6
1460
1007
6
1460
1046
6
1460
1131
6
1460
1139
6
1460
1140
6
1460
1149
6
1460
1198
6
1460
1215
6
1460
1223
6
1460
1265
6
1460
1303
6
1460
1323
6
1460
1358
6
1460
1366
6
1460
1421
6
1460
1460
6
1460
1460
6
1460
1462
6
1460
1463
6
1460
1467
6
1460
1468
6
1460
1477
6
1460
1491
6
1460
1496
6
1460
1531
6
1460
1535
6
1460
1565
6
1460
1601
6
1460
1602
6
1460
1613
6
1460
1614
6
1460
1626
6
1460
1641
6
1460
1787
6
1460
1788
6
1460
205
6
1460
205
6
1460
224
6
1460
249
6
1460
288
6
1460
316
6
1460
381
6
1460
398
6
1460
11
6
1460
404
6
1460
410
6
1460
463
6
1460
464
6
1460
483
6
1460
3184
6
1460
3184
6
1460
3188
6
1460
584
6
1460
600
6
1460
680
6
1460
691
6
1460
729
6
1460
763
6
1460
799
6
1460
799
6
1460
</TEXT>
</DOC>
<DOC>
<DOCNO>1461</DOCNO>
<TEXT>
discussion
summary
on
operating
systems
cacm
march
1966
ca660311
jb
march
3
1978
1
26
pm
1461
5
1461
1461
5
1461
1461
5
1461
</TEXT>
</DOC>
<DOC>
<DOCNO>1462</DOCNO>
<TEXT>
multilevel
operating
systems
the
basic
software
for
all
newer
computers
is
built
on
the
well
established
need
for
standard
operating
systems
this
implies
that
all
applications
no
matter
how
large
complex
or
time
consuming
must
operate
under
or
more
precisely
on
top
of
the
standard
system
large
applications
require
supervisory
monitors
which
handle
problems
similar
to
those
of
the
operating
systems
but
at
a
different
level
sometimes
still
a
third
or
even
a
fourth
such
level
is
required
or
desirable
this
leads
naturally
to
the
concept
of
multilevel
systems
similar
vertically
but
different
horizontally
proper
division
of
responsibility
between
levels
leads
to
greater
efficiency
and
less
logical
complexity
while
actually
enhancing
capability
cacm
march
1966
orchard
hays
w
ca660310
jb
march
3
1978
1
31
pm
1462
5
1462
1462
5
1462
1462
5
1462
1781
5
1462
123
6
1462
196
6
1462
919
6
1462
990
6
1462
1007
6
1462
1046
6
1462
1131
6
1462
1139
6
1462
1140
6
1462
1149
6
1462
1198
6
1462
1215
6
1462
1223
6
1462
1265
6
1462
1303
6
1462
1323
6
1462
1358
6
1462
1366
6
1462
1421
6
1462
1460
6
1462
1462
6
1462
1463
6
1462
1467
6
1462
1468
6
1462
1477
6
1462
1491
6
1462
1496
6
1462
1531
6
1462
1535
6
1462
1565
6
1462
1601
6
1462
1602
6
1462
1613
6
1462
1614
6
1462
1626
6
1462
1641
6
1462
1787
6
1462
1788
6
1462
205
6
1462
224
6
1462
249
6
1462
288
6
1462
316
6
1462
381
6
1462
398
6
1462
11
6
1462
404
6
1462
410
6
1462
463
6
1462
464
6
1462
483
6
1462
3184
6
1462
3188
6
1462
584
6
1462
600
6
1462
680
6
1462
691
6
1462
763
6
1462
799
6
1462
</TEXT>
</DOC>
<DOC>
<DOCNO>1463</DOCNO>
<TEXT>
more
on
extensible
machines
one
of
the
most
salient
characteristics
of
extensible
machines
em
is
the
facility
for
providing
system
control
over
program
to
program
and
program
to
data
linkage
e
g
address
connection
it
is
the
intent
of
this
paper
to
expand
and
clarify
the
remarks
concerning
program
to
program
and
program
to
data
linkage
that
were
embodied
in
the
authors
previous
paper
on
the
em
concepts
and
to
finally
trace
the
employment
of
linkage
mechanisms
through
various
levels
of
programming
languages
cacm
march
1966
leonard
g
f
goodroe
j
r
ca660309
jb
march
3
1978
1
34
pm
1463
5
1463
1463
5
1463
1463
5
1463
1781
5
1463
123
6
1463
196
6
1463
919
6
1463
990
6
1463
1007
6
1463
1046
6
1463
1131
6
1463
1139
6
1463
1140
6
1463
1149
6
1463
1198
6
1463
1215
6
1463
1223
6
1463
1265
6
1463
1303
6
1463
1323
6
1463
1358
6
1463
1366
6
1463
1421
6
1463
1460
6
1463
1462
6
1463
1463
6
1463
1467
6
1463
1468
6
1463
1477
6
1463
1491
6
1463
1496
6
1463
1531
6
1463
1535
6
1463
1565
6
1463
1601
6
1463
1602
6
1463
1613
6
1463
1614
6
1463
1626
6
1463
1641
6
1463
1787
6
1463
1788
6
1463
205
6
1463
224
6
1463
249
6
1463
288
6
1463
316
6
1463
381
6
1463
398
6
1463
11
6
1463
404
6
1463
410
6
1463
463
6
1463
464
6
1463
483
6
1463
3184
6
1463
3188
6
1463
584
6
1463
600
6
1463
680
6
1463
691
6
1463
763
6
1463
799
6
1463
</TEXT>
</DOC>
<DOC>
<DOCNO>1464</DOCNO>
<TEXT>
an
algol
compiler
construction
and
use
in
relation
to
an
elaborate
operating
system
an
algol
translator
has
been
prepared
and
integrated
into
the
ibsys
operating
system
assembly
and
go
features
of
ibsys
permit
immediate
execution
with
optional
listings
decks
and
debugging
information
using
the
chain
feature
of
ibsys
links
written
in
map
or
fortran
as
well
as
algol
may
be
called
by
the
algol
main
program
in
addition
procedures
coded
in
map
may
be
included
in
any
algol
program
although
assembly
plus
loading
time
exceeds
compilation
time
the
total
time
is
satisfactory
and
the
user
gets
ease
and
facility
which
are
fully
compensating
cacm
march
1966
boussard
j
c
ca660308
jb
march
3
1978
1
41
pm
249
4
1464
254
4
1464
272
4
1464
1086
4
1464
1102
4
1464
1109
4
1464
1132
4
1464
1140
4
1464
1188
4
1464
1234
4
1464
1263
4
1464
1265
4
1464
1270
4
1464
1306
4
1464
1323
4
1464
1358
4
1464
1379
4
1464
1380
4
1464
1453
4
1464
1464
4
1464
1464
4
1464
1484
4
1464
1491
4
1464
1491
4
1464
1498
4
1464
1613
4
1464
1614
4
1464
1767
4
1464
1781
4
1464
1781
4
1464
1787
4
1464
1825
4
1464
1860
4
1464
1949
4
1464
321
4
1464
2059
4
1464
2083
4
1464
2126
4
1464
2178
4
1464
2179
4
1464
2252
4
1464
2325
4
1464
2341
4
1464
2546
4
1464
435
4
1464
437
4
1464
463
4
1464
483
4
1464
491
4
1464
2645
4
1464
2652
4
1464
2684
4
1464
2732
4
1464
2842
4
1464
2929
4
1464
2934
4
1464
560
4
1464
583
4
1464
3069
4
1464
3073
4
1464
627
4
1464
631
4
1464
632
4
1464
642
4
1464
644
4
1464
653
4
1464
669
4
1464
679
4
1464
680
4
1464
691
4
1464
761
4
1464
761
4
1464
762
4
1464
763
4
1464
123
4
1464
140
4
1464
919
4
1464
949
4
1464
989
4
1464
989
4
1464
196
5
1464
1464
5
1464
1464
5
1464
1464
5
1464
3184
5
1464
</TEXT>
</DOC>
<DOC>
<DOCNO>1465</DOCNO>
<TEXT>
program
translation
viewed
as
a
general
data
processing
problem
efficiency
dictates
that
the
overall
effectiveness
of
a
compiler
be
increased
by
all
means
available
for
a
compiler
to
have
a
substantial
useful
life
it
needs
a
clear
logical
structure
reliability
and
sound
data
processing
techniques
a
compiler
must
be
based
on
fixed
conventions
to
preserve
efficiency
and
reliability
empty
options
and
default
conventions
violate
this
dictum
use
of
structure
to
associate
various
parts
of
a
program
and
economy
of
features
promote
clarity
and
reliability
cacm
march
1966
naur
p
ca660307
jb
march
3
1978
1
45
pm
1465
5
1465
1465
5
1465
1465
5
1465
</TEXT>
</DOC>
<DOC>
<DOCNO>1466</DOCNO>
<TEXT>
discussion
summary
on
graphical
languages
cacm
march
1966
ca660306
jb
march
3
1978
1
46
pm
1466
5
1466
1466
5
1466
1466
5
1466
2341
5
1466
990
6
1466
1468
6
1466
1466
6
1466
3184
6
1466
</TEXT>
</DOC>
<DOC>
<DOCNO>1467</DOCNO>
<TEXT>
a
graphical
servicesystem
with
variable
syntax
man
machine
interaction
in
many
fields
of
endeavor
should
be
greatly
facilitated
in
the
near
future
through
the
use
of
interactive
graphical
languages
to
provide
a
variety
of
display
scope
communication
procedures
a
graphic
service
system
which
functions
as
a
generalized
graphical
language
translator
is
being
developed
to
aid
the
definition
as
well
as
the
use
of
new
graphical
languages
cacm
march
1966
roberts
l
g
ca660305
jb
march
3
1978
1
49
pm
1467
5
1467
1467
5
1467
1467
5
1467
1767
5
1467
1781
5
1467
123
6
1467
196
6
1467
196
6
1467
919
6
1467
990
6
1467
1007
6
1467
1046
6
1467
1131
6
1467
1139
6
1467
1140
6
1467
1149
6
1467
1198
6
1467
1215
6
1467
1223
6
1467
1265
6
1467
1303
6
1467
1323
6
1467
1358
6
1467
1366
6
1467
1421
6
1467
1460
6
1467
1462
6
1467
1463
6
1467
1467
6
1467
1467
6
1467
1468
6
1467
1468
6
1467
1477
6
1467
1491
6
1467
1496
6
1467
1496
6
1467
1531
6
1467
1535
6
1467
1565
6
1467
1601
6
1467
1602
6
1467
1613
6
1467
1614
6
1467
1626
6
1467
1641
6
1467
1787
6
1467
1788
6
1467
205
6
1467
224
6
1467
249
6
1467
288
6
1467
316
6
1467
381
6
1467
398
6
1467
11
6
1467
404
6
1467
410
6
1467
463
6
1467
464
6
1467
483
6
1467
3184
6
1467
3188
6
1467
584
6
1467
600
6
1467
680
6
1467
691
6
1467
763
6
1467
799
6
1467
</TEXT>
</DOC>
<DOC>
<DOCNO>1468</DOCNO>
<TEXT>
syntax
directed
interpretation
of
classes
of
pictures
a
descriptive
scheme
for
classes
of
pictures
based
on
labeling
techniques
using
parallel
processing
algorithms
was
proposed
by
the
author
some
years
ago
since
then
much
work
has
been
done
in
applying
this
to
bubble
chamber
pictures
the
parallel
processing
simulator
originally
written
for
an
ibm
7094
system
has
now
been
rewritten
for
a
cdc
3600
system
this
paper
descriptive
models
by
considering
their
specific
application
to
bubble
chamber
pictures
how
the
description
generated
in
this
phase
can
be
embedded
in
a
larger
conversation
program
is
explained
by
means
of
a
certain
specific
example
that
has
been
worked
out
a
partial
generative
grammar
for
handwritten
english
letters
is
given
as
are
also
a
few
computer
generated
outputs
using
this
grammar
and
the
parallel
processing
simulator
mentioned
earlier
cacm
march
1966
narasimhan
r
ca660304
jb
march
3
1978
1
56
pm
1155
4
1468
1456
4
1468
1468
4
1468
1515
4
1468
1699
4
1468
1856
4
1468
2127
4
1468
1324
5
1468
1468
5
1468
1468
5
1468
1468
5
1468
1767
5
1468
1781
5
1468
2341
5
1468
123
6
1468
196
6
1468
196
6
1468
919
6
1468
990
6
1468
990
6
1468
1007
6
1468
1046
6
1468
1131
6
1468
1139
6
1468
1140
6
1468
1149
6
1468
1198
6
1468
1215
6
1468
1223
6
1468
1265
6
1468
1303
6
1468
1323
6
1468
1358
6
1468
1366
6
1468
1421
6
1468
1460
6
1468
1462
6
1468
1463
6
1468
1467
6
1468
1467
6
1468
1468
6
1468
1468
6
1468
1468
6
1468
1466
6
1468
1477
6
1468
1491
6
1468
1496
6
1468
1496
6
1468
1531
6
1468
1535
6
1468
1565
6
1468
1601
6
1468
1602
6
1468
1613
6
1468
1614
6
1468
1626
6
1468
1641
6
1468
1787
6
1468
1788
6
1468
205
6
1468
224
6
1468
249
6
1468
288
6
1468
316
6
1468
381
6
1468
398
6
1468
11
6
1468
404
6
1468
410
6
1468
463
6
1468
464
6
1468
483
6
1468
3184
6
1468
3184
6
1468
3188
6
1468
584
6
1468
600
6
1468
680
6
1468
691
6
1468
763
6
1468
799
6
1468
</TEXT>
</DOC>
<DOC>
<DOCNO>1469</DOCNO>
<TEXT>
the
next
700
programming
languages
a
family
of
unimplemented
computing
languages
is
described
that
is
intended
to
span
differences
of
application
area
by
a
unified
framework
this
framework
dictates
the
rules
about
the
uses
of
user
coined
names
and
the
conventions
about
characterizing
functional
relationships
within
this
framework
the
design
of
a
specific
language
splits
into
two
independent
parts
one
is
the
choice
of
written
appearances
of
programs
or
more
generally
their
physical
representation
the
other
is
the
choice
of
the
abstract
entities
such
as
numbers
character
strings
lists
of
them
functional
relations
among
them
that
can
be
referred
to
in
the
language
the
system
is
biased
towards
expressions
rather
than
statements
it
includes
a
nonprocedural
purely
functional
subsystem
that
aims
to
expand
the
class
of
users
needs
that
can
be
met
by
a
single
print
instruction
without
sacrificing
the
important
properties
that
make
conventional
right
hand
side
expressions
easy
to
construct
and
understand
cacm
march
1966
landin
p
j
ca660303
jb
march
3
1978
2
05
pm
1469
4
1469
1486
4
1469
1491
4
1469
1781
4
1469
2178
4
1469
2326
4
1469
2470
4
1469
2684
4
1469
3044
4
1469
1303
5
1469
1469
5
1469
1469
5
1469
1469
5
1469
2060
5
1469
2294
5
1469
2470
5
1469
3124
5
1469
1303
6
1469
1380
6
1469
1421
6
1469
1469
6
1469
1469
6
1469
1469
6
1469
1469
6
1469
1477
6
1469
1491
6
1469
210
6
1469
1834
6
1469
1869
6
1469
2060
6
1469
2110
6
1469
2264
6
1469
</TEXT>
</DOC>
<DOC>
<DOCNO>1470</DOCNO>
<TEXT>
the
structure
of
programming
languages
the
following
are
identified
as
major
components
of
every
programming
language
1
the
elementary
program
statement
2
mechanisms
for
linking
elementary
statements
together
3
the
means
by
which
a
program
can
obtain
data
inputs
several
alternative
forms
of
each
of
these
components
are
described
compared
and
evaluated
many
examples
frequently
from
list
processing
languages
illustrate
the
forms
described
elementary
program
statements
usually
take
the
form
of
commands
requirements
or
implicit
specifications
a
command
is
an
imperative
statement
that
commands
the
action
to
be
taken
a
requirement
describes
the
effect
to
be
achieved
without
saying
anything
about
the
actions
to
be
taken
an
implicit
specification
is
similar
to
a
requirement
but
the
programmer
must
understand
what
actions
will
be
taken
to
achieve
the
desired
effect
subroutines
may
be
entered
explicitly
by
execute
call
or
by
function
composition
explicitly
called
subroutines
generally
require
special
linkage
conventions
an
execute
subroutine
call
is
syntactically
indistinguishable
from
a
basic
instruction
of
the
programming
language
function
composition
is
a
convenient
alternative
to
the
explicit
call
the
three
principal
ways
of
getting
inputs
for
routines
are
1
by
referring
to
the
data
itself
2
by
referring
to
the
data
by
a
name
and
3
by
referring
to
it
implicitly
by
means
of
variables
or
functions
names
are
useful
entry
points
into
permanent
data
structures
but
can
be
error
causing
distractions
in
other
contexts
the
author
discusses
advantages
disadvantages
and
factors
influencing
the
choice
of
a
form
of
component
for
a
language
he
concludes
by
suggesting
the
evolution
of
programming
languages
toward
one
which
will
permit
all
the
most
convenient
ways
of
structuring
programs
organizing
systems
and
referencing
data
cacm
march
1966
raphael
b
ca660302
jb
march
3
1978
2
20
pm
1470
5
1470
1470
5
1470
1470
5
1470
</TEXT>
</DOC>
<DOC>
<DOCNO>1471</DOCNO>
<TEXT>
programming
semantics
for
multiprogrammed
computations
the
semantics
are
defined
for
a
number
of
meta
instructions
which
perform
operation
essential
to
the
writing
of
programs
in
multiprogrammed
computer
systems
these
meta
instructions
relate
to
parallel
processing
protection
of
separate
computations
program
debugging
and
the
sharing
among
users
of
memory
segments
and
other
computing
objects
the
names
of
which
are
hierarchically
structured
the
language
sophistication
contemplated
is
midway
between
an
assembly
language
and
an
advanced
algebraic
language
cacm
march
1966
dennis
j
b
vanhorn
e
c
ca660301
jb
march
3
1978
2
25
pm
1471
4
1471
1471
4
1471
1774
4
1471
972
4
1471
276
5
1471
1458
5
1471
1471
5
1471
1471
5
1471
1471
5
1471
1523
5
1471
1603
5
1471
1698
5
1471
1747
5
1471
1748
5
1471
1854
5
1471
1877
5
1471
1960
5
1471
2377
5
1471
2378
5
1471
2497
5
1471
2558
5
1471
2625
5
1471
2632
5
1471
2840
5
1471
2941
5
1471
3105
5
1471
3144
5
1471
800
5
1471
1421
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1471
6
1471
1746
6
1471
1746
6
1471
1748
6
1471
1749
6
1471
1749
6
1471
1749
6
1471
1749
6
1471
1749
6
1471
1753
6
1471
1854
6
1471
2060
6
1471
2080
6
1471
2080
6
1471
2182
6
1471
2298
6
1471
2356
6
1471
2358
6
1471
2358
6
1471
2436
6
1471
2438
6
1471
2491
6
1471
2558
6
1471
2597
6
1471
2624
6
1471
2625
6
1471
2625
6
1471
2626
6
1471
2629
6
1471
2632
6
1471
2632
6
1471
2651
6
1471
2868
6
1471
2939
6
1471
3068
6
1471
</TEXT>
</DOC>
<DOC>
<DOCNO>1472</DOCNO>
<TEXT>
description
of
a
high
capacity
fast
turnaround
university
computing
center
the
operating
system
for
the
univac
1107
at
case
institute
is
reviewed
the
system
is
of
interest
because
of
the
low
turnaround
times
achieved
the
high
throughput
achieved
and
the
lack
of
an
operating
staff
turnaround
times
below
5
minutes
and
job
volume
above
75
000
per
quarter
year
one
reported
cacm
february
1966
lynch
w
ca660212
jb
march
3
1978
2
28
pm
1472
5
1472
1472
5
1472
1472
5
1472
1550
5
1472
1304
6
1472
1472
6
1472
</TEXT>
</DOC>
<DOC>
<DOCNO>1473</DOCNO>
<TEXT>
the
stability
of
the
fourth
order
runge
kutta
method
for
the
solution
of
systems
of
differential
equations
the
problem
of
the
region
of
stability
of
the
fourth
order
runge
kutta
method
for
the
solution
of
systems
of
differential
equations
is
studied
this
region
can
be
characterized
by
means
of
linear
transformation
but
can
not
be
given
in
a
closed
form
in
the
paper
this
region
is
determined
by
the
electronic
digital
computer
z22
cacm
february
1966
karim
a
i
a
ca660211
jb
march
3
1978
2
31
pm
1473
5
1473
1473
5
1473
1473
5
1473
</TEXT>
</DOC>
<DOC>
<DOCNO>1474</DOCNO>
<TEXT>
tests
of
probabilistic
models
for
propagation
of
roundoff
errors
in
any
prolonged
computation
it
is
generally
assumed
that
the
accumulated
effect
of
roundoff
errors
is
in
some
sense
statistical
the
purpose
of
this
paper
is
to
give
precise
descriptions
of
certain
probabilistic
models
for
roundoff
error
and
then
to
describe
a
series
of
experiments
for
testing
the
validity
of
these
models
it
is
concluded
that
the
models
are
in
general
very
good
discrepancies
are
both
rare
and
mild
the
test
techniques
can
also
be
used
to
experiment
with
various
types
of
special
arithmetic
cacm
february
1966
hull
t
e
swenson
j
r
ca660210
jb
march
3
1978
2
37
pm
1474
5
1474
1474
5
1474
1474
5
1474
2525
5
1474
1474
6
1474
</TEXT>
</DOC>
<DOC>
<DOCNO>1475</DOCNO>
<TEXT>
dribble
posting
a
master
file
many
business
applications
employ
sequential
magnetic
tape
rather
than
random
access
storage
techniques
to
process
a
very
small
number
of
transactions
against
a
voluminous
master
file
in
such
situations
it
may
prove
economical
to
avoid
creating
a
new
master
file
during
each
updating
run
by
producing
instead
a
dribble
ledger
containing
only
those
master
file
accounts
which
have
experienced
activity
cacm
february
1966
head
r
v
ca660209
jb
march
3
1978
2
41
pm
1475
5
1475
1475
5
1475
1475
5
1475
</TEXT>
</DOC>
<DOC>
<DOCNO>1476</DOCNO>
<TEXT>
control
procedures
for
data
communication
an
asa
progress
report
sectional
committee
x
3
of
the
american
standards
association
has
charged
one
of
its
task
groups
x3
3
4
with
the
responsibility
to
define
and
specify
functional
control
requirements
and
characteristics
governing
the
operation
of
digital
data
generating
and
receiving
systems
interconnected
by
communication
system
this
effort
is
primarily
directed
toward
systems
employing
the
american
standard
code
for
information
interchange
ascii
this
paper
represents
a
progress
report
on
the
work
of
this
group
toward
a
proposal
for
national
and
international
standardization
in
the
field
of
control
procedures
it
describes
both
the
old
and
new
work
of
the
task
group
the
new
work
is
presented
in
detail
while
the
work
that
has
been
presented
in
earlier
papers
control
procedures
for
data
communication
task
group
document
x3
3
4
44
may
1964
transparent
mode
control
procedures
for
data
communication
task
group
document
x3
3
4
58
december
1964
comm
acm
8
apr
1965
203
206
control
procedures
for
data
communications
task
group
document
x3
3
4
60
march
1965
is
retained
here
in
summary
form
many
of
the
concepts
and
principles
described
herein
have
been
submitted
to
the
international
organization
for
standardization
via
earlier
papers
and
are
now
embodied
in
working
papers
of
that
organization
cacm
february
1966
ca660208jb
march
3
1978
3
04
pm
1476
5
1476
1476
5
1476
1476
5
1476
</TEXT>
</DOC>
<DOC>
<DOCNO>1477</DOCNO>
<TEXT>
euler
a
generalization
of
algol
and
its
formal
definition
part
ii
cacm
february
1966
wirth
n
weber
h
ca660207
jb
march
3
1978
3
10
pm
1379
5
1477
1477
5
1477
1477
5
1477
1477
5
1477
1693
5
1477
1781
5
1477
1836
5
1477
1945
5
1477
2015
5
1477
2060
5
1477
2061
5
1477
2091
5
1477
2179
5
1477
2546
5
1477
2698
5
1477
2708
5
1477
3045
5
1477
823
6
1477
123
6
1477
196
6
1477
914
6
1477
915
6
1477
917
6
1477
919
6
1477
984
6
1477
989
6
1477
990
6
1477
990
6
1477
1007
6
1477
1012
6
1477
1046
6
1477
1084
6
1477
1098
6
1477
1122
6
1477
1131
6
1477
1138
6
1477
1139
6
1477
1139
6
1477
1140
6
1477
1140
6
1477
1141
6
1477
1141
6
1477
1149
6
1477
1191
6
1477
1198
6
1477
1200
6
1477
1215
6
1477
1223
6
1477
1223
6
1477
1263
6
1477
1265
6
1477
1265
6
1477
1303
6
1477
1323
6
1477
1336
6
1477
1358
6
1477
1366
6
1477
1366
6
1477
1380
6
1477
1396
6
1477
1421
6
1477
1421
6
1477
1421
6
1477
1455
6
1477
1460
6
1477
1462
6
1477
1463
6
1477
1467
6
1477
1468
6
1477
1469
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1477
6
1477
1487
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1491
6
1477
1496
6
1477
1496
6
1477
1531
6
1477
1535
6
1477
1565
6
1477
1601
6
1477
1602
6
1477
1613
6
1477
1614
6
1477
1614
6
1477
1626
6
1477
1641
6
1477
1781
6
1477
1781
6
1477
1781
6
1477
1787
6
1477
1787
6
1477
1788
6
1477
205
6
1477
1825
6
1477
1825
6
1477
210
6
1477
224
6
1477
249
6
1477
1869
6
1477
288
6
1477
316
6
1477
381
6
1477
398
6
1477
2015
6
1477
2110
6
1477
2110
6
1477
2110
6
1477
2111
6
1477
11
6
1477
2126
6
1477
2534
6
1477
2534
6
1477
2556
6
1477
2556
6
1477
404
6
1477
404
6
1477
410
6
1477
463
6
1477
464
6
1477
483
6
1477
483
6
1477
3184
6
1477
3184
6
1477
3184
6
1477
3184
6
1477
3188
6
1477
577
6
1477
584
6
1477
584
6
1477
600
6
1477
669
6
1477
669
6
1477
680
6
1477
680
6
1477
680
6
1477
680
6
1477
691
6
1477
761
6
1477
763
6
1477
763
6
1477
773
6
1477
799
6
1477
799
6
1477
</TEXT>
</DOC>
<DOC>
<DOCNO>1478</DOCNO>
<TEXT>
exponential
curve
fit
algorithm
275
e2
cacm
february
1966
deily
g
r
ca660206a
jb
march
3
1978
3
11
pm
1478
5
1478
1478
5
1478
1478
5
1478
2694
5
1478
1478
6
1478
</TEXT>
</DOC>
<DOC>
<DOCNO>1479</DOCNO>
<TEXT>
constrained
exponential
curve
fit
algorithm
276
e2
cacm
february
1966
deily
g
r
ca660206b
jb
march
23
1978
7
27
pm
1479
5
1479
1479
5
1479
1479
5
1479
</TEXT>
</DOC>
<DOC>
<DOCNO>1480</DOCNO>
<TEXT>
computation
of
chebyshev
series
coefficients
algorithm
277
c6
cacm
february
1966
smith
l
b
ca660206c
jb
march
23
1978
7
28
pm
1480
5
1480
1480
5
1480
1480
5
1480
1639
5
1480
1480
6
1480
</TEXT>
</DOC>
<DOC>
<DOCNO>1481</DOCNO>
<TEXT>
graph
plotter
algorithm
278
j6
cacm
february
1966
lloyd
p
ca660206d
jb
march
23
1978
7
30
pm
1481
5
1481
1481
5
1481
1481
5
1481
</TEXT>
</DOC>
<DOC>
<DOCNO>1482</DOCNO>
<TEXT>
bugsys
a
programming
system
for
picture
processing
not
for
debugging
bugsys
is
a
picture
processing
and
measuring
system
that
depends
upon
a
pictorial
input
to
the
computer
memory
bugsys
can
be
used
for
many
types
of
applications
in
particular
the
authors
have
used
the
system
for
the
analysis
of
linear
graphs
the
main
concept
of
the
system
is
the
use
of
a
collection
of
programmable
pointers
which
are
visualized
as
a
family
of
bugs
cacm
february
1966
ledley
r
s
jacobsen
j
belson
m
ca660205
jb
march
3
1978
3
16
pm
1482
5
1482
1482
5
1482
1482
5
1482
</TEXT>
</DOC>
<DOC>
<DOCNO>1483</DOCNO>
<TEXT>
a
comparison
of
the
fortran
language
implementation
for
several
computers
a
feature
by
feature
comparison
is
made
of
five
different
implementations
of
fortran
iv
representing
three
different
manufacturers
a
table
is
constructed
showing
where
possible
the
use
of
each
feature
in
each
implementation
only
those
items
which
are
different
from
or
have
been
added
to
fortran
ii
are
shown
cacm
february
1966
wright
d
l
ca660204
jb
march
3
1978
3
19
pm
1483
5
1483
1483
5
1483
1483
5
1483
</TEXT>
</DOC>
<DOC>
<DOCNO>1484</DOCNO>
<TEXT>
a
language
for
describing
the
functions
of
synchronous
systems
before
the
design
of
a
system
is
started
the
exact
function
desired
of
it
should
be
specified
it
is
suggested
that
a
computer
oriented
language
be
used
for
this
purpose
the
inadequacies
of
the
standard
programming
languages
for
the
description
of
systems
are
discussed
and
a
dialect
of
algol
which
is
suitable
for
describing
synchronous
systems
is
introduced
these
descriptions
can
be
used
for
simulation
and
automatic
design
of
the
system
described
in
addition
to
communicating
system
specifications
cacm
february
1966
parnas
d
l
ca660203
jb
march
3
1978
3
23
pm
1086
4
1484
1132
4
1484
1234
4
1484
1263
4
1484
1265
4
1484
1270
4
1484
1323
4
1484
1358
4
1484
1379
4
1484
1380
4
1484
1453
4
1484
1464
4
1484
1484
4
1484
1491
4
1484
1498
4
1484
1613
4
1484
1614
4
1484
1781
4
1484
1825
4
1484
1860
4
1484
2083
4
1484
2178
4
1484
2179
4
1484
2252
4
1484
2325
4
1484
2341
4
1484
2546
4
1484
2645
4
1484
2652
4
1484
2684
4
1484
2842
4
1484
2929
4
1484
2934
4
1484
3069
4
1484
669
4
1484
679
4
1484
691
4
1484
761
4
1484
949
4
1484
989
4
1484
1484
5
1484
1484
5
1484
1484
5
1484
1846
5
1484
3184
5
1484
1380
6
1484
1424
6
1484
1484
6
1484
1572
6
1484
576
6
1484
</TEXT>
</DOC>
<DOC>
<DOCNO>1485</DOCNO>
<TEXT>
the
structure
of
programming
languages
in
this
paper
the
major
components
of
every
programming
language
are
identified
as
1
the
elementary
program
statement
2
mechanisms
for
linking
elementary
statements
together
3
the
means
by
which
a
program
can
obtain
data
inputs
several
alternative
forms
of
each
of
these
components
are
also
described
compared
and
evaluated
many
examples
frequently
from
list
processing
languages
illustrate
the
forms
described
the
advantages
disadvantages
and
factors
influencing
the
choice
of
a
form
of
component
for
a
language
are
discussed
and
the
paper
concludes
with
the
suggestion
that
programming
languages
evolve
toward
one
which
will
permit
all
the
most
convenient
ways
of
structuring
programs
organizing
systems
and
referencing
data
cacm
february
1966
raphael
b
ca660202
jb
march
3
1978
3
46
pm
1024
4
1485
1051
4
1485
1098
4
1485
1214
4
1485
1380
4
1485
1388
4
1485
1393
4
1485
1485
4
1485
1487
4
1485
1549
4
1485
1570
4
1485
1878
4
1485
1946
4
1485
1957
4
1485
2168
4
1485
2723
4
1485
2857
4
1485
3112
4
1485
1485
5
1485
1485
5
1485
1485
5
1485
731
5
1485
</TEXT>
</DOC>
<DOC>
<DOCNO>1486</DOCNO>
<TEXT>
a
reprogramming
machine
in
this
paper
a
description
is
given
of
a
model
programming
system
which
is
directed
by
a
programming
language
and
has
a
library
for
storing
the
user
items
rules
are
given
for
transforming
programs
written
in
the
language
and
for
rearranging
the
items
in
the
library
so
that
they
share
their
common
parts
some
speculations
are
made
about
how
the
mechanical
detection
of
common
parts
or
patterns
of
library
items
could
help
a
user
to
solve
his
problems
and
about
the
relationships
between
the
behavior
of
the
reprogramming
machine
and
human
intelligent
behavior
cacm
february
1966
burge
w
h
ca660201
jb
march
3
1978
3
50
pm
1024
4
1486
1051
4
1486
1102
4
1486
1132
4
1486
1390
4
1486
1469
4
1486
1486
4
1486
1486
4
1486
1491
4
1486
1549
4
1486
1706
4
1486
1781
4
1486
1826
4
1486
1878
4
1486
378
4
1486
2060
4
1486
2155
4
1486
2168
4
1486
2178
4
1486
2326
4
1486
2470
4
1486
2684
4
1486
2719
4
1486
2723
4
1486
2838
4
1486
2842
4
1486
2855
4
1486
2879
4
1486
3044
4
1486
3077
4
1486
3080
4
1486
3106
4
1486
627
4
1486
106
4
1486
1303
5
1486
210
5
1486
1486
5
1486
1486
5
1486
1486
5
1486
</TEXT>
</DOC>
<DOC>
<DOCNO>1487</DOCNO>
<TEXT>
eliza
a
computer
program
for
the
study
ofnatural
language
communication
between
man
and
machine
eliza
is
a
program
operating
within
the
mac
time
sharing
system
at
mit
which
makes
certain
kinds
of
natural
language
conversation
between
man
and
computer
possible
input
sentences
are
analyzed
on
the
basis
of
decomposition
rules
which
are
triggered
by
key
words
appearing
in
the
input
text
responses
are
generated
by
reassembly
rules
associated
with
selected
decomposition
rules
the
fundamental
technical
problems
with
which
eliza
is
concerned
are
1
the
identification
of
key
words
2
the
discovery
of
minimal
context
3
the
choice
of
appropriate
transformations
4
generation
of
responses
in
the
absence
of
key
words
and
5
the
provision
of
an
editing
capability
for
eliza
scripts
a
discussion
of
some
psychological
issues
relevant
to
the
eliza
approach
as
well
as
of
future
developments
concludes
the
paper
cacm
january
1966
weizenbaum
j
ca660108
jb
march
3
1978
4
00
pm
1024
4
1487
1051
4
1487
1098
4
1487
1214
4
1487
1380
4
1487
1388
4
1487
1393
4
1487
1485
4
1487
1487
4
1487
1549
4
1487
1570
4
1487
1878
4
1487
1946
4
1487
1957
4
1487
2168
4
1487
2723
4
1487
2857
4
1487
3112
4
1487
1400
5
1487
1487
5
1487
1487
5
1487
1487
5
1487
1553
5
1487
1945
5
1487
2127
5
1487
2396
5
1487
2730
5
1487
731
5
1487
823
6
1487
914
6
1487
915
6
1487
917
6
1487
984
6
1487
989
6
1487
990
6
1487
1012
6
1487
1084
6
1487
1098
6
1487
1122
6
1487
1138
6
1487
1139
6
1487
1141
6
1487
1155
6
1487
1200
6
1487
1223
6
1487
1265
6
1487
1324
6
1487
1336
6
1487
1396
6
1487
1455
6
1487
1477
6
1487
1487
6
1487
1487
6
1487
1487
6
1487
1487
6
1487
1487
6
1487
1487
6
1487
1491
6
1487
1496
6
1487
1527
6
1487
1781
6
1487
1856
6
1487
1856
6
1487
2092
6
1487
2127
6
1487
483
6
1487
584
6
1487
669
6
1487
680
6
1487
763
6
1487
</TEXT>
</DOC>
<DOC>
<DOCNO>1488</DOCNO>
<TEXT>
programming
decision
tables
in
fortran
cobol
or
algol
a
simple
broad
based
approach
for
programming
decision
tables
in
fortran
or
cobol
is
developed
and
presented
with
inputs
in
standard
form
as
defined
in
the
paper
the
programming
of
any
decision
table
can
be
done
with
one
or
two
fortran
statements
or
with
two
cobol
statements
if
the
compute
verb
is
available
in
the
cobol
processor
it
is
shown
that
the
method
is
applicable
even
when
there
are
more
than
two
mutually
exclusive
states
of
one
two
or
more
table
conditions
it
is
further
shown
that
multi
state
conditions
in
decision
tables
can
often
simplify
the
programming
the
method
outlined
has
the
further
advantage
that
all
possible
combinations
of
conditions
are
considered
it
is
shown
that
the
suggested
procedure
is
easily
implemented
in
algol
cacm
january
1966
veinott
c
g
ca660107
jb
march
3
1978
4
08
pm
1354
4
1488
1354
4
1488
1488
4
1488
1488
4
1488
1994
4
1488
2053
4
1488
2053
4
1488
2220
4
1488
2220
4
1488
2273
4
1488
2273
4
1488
2726
4
1488
2856
4
1488
1237
5
1488
1327
5
1488
1488
5
1488
1488
5
1488
1488
5
1488
1548
5
1488
2726
5
1488
1172
6
1488
1327
6
1488
1354
6
1488
1488
6
1488
1488
6
1488
1489
6
1488
1489
6
1488
1548
6
1488
2220
6
1488
2221
6
1488
2263
6
1488
</TEXT>
</DOC>
<DOC>
<DOCNO>1489</DOCNO>
<TEXT>
data
documentation
and
decision
tables
in
business
data
processing
systems
it
is
necessary
to
be
able
to
define
and
document
data
files
programs
and
decision
rules
in
a
way
that
adequately
represents
both
1
their
changing
information
content
and
2
their
continuous
interaction
tabular
description
makes
this
possible
being
notably
objective
through
and
economical
in
cost
and
time
when
systems
must
be
analyzed
and
programs
prepared
or
modified
to
show
how
quickly
tabular
techniques
make
an
unfamiliar
system
manageable
a
detailed
example
and
a
self
test
are
provided
cacm
january
1966
fisher
d
l
ca660106
jb
march
3
1978
4
13
pm
1489
5
1489
1489
5
1489
1489
5
1489
1548
5
1489
2220
5
1489
2726
5
1489
1172
6
1489
1172
6
1489
1237
6
1489
1327
6
1489
1327
6
1489
1354
6
1489
1354
6
1489
1488
6
1489
1488
6
1489
1489
6
1489
1489
6
1489
1489
6
1489
1548
6
1489
1548
6
1489
250
6
1489
2220
6
1489
2221
6
1489
2263
6
1489
</TEXT>
</DOC>
<DOC>
<DOCNO>1490</DOCNO>
<TEXT>
one
inch
perforated
paper
tape
for
information
interchange
proposed
american
standard
cacm
january
1966
ca660105
jb
march
3
1978
4
14
pm
1490
5
1490
1490
5
1490
1490
5
1490
</TEXT>
</DOC>
<DOC>
<DOCNO>1491</DOCNO>
<TEXT>
euler
a
generalization
algol
and
its
formal
definition
part
i
a
method
for
defining
programming
languages
is
developed
which
introduces
a
rigorous
relationship
between
structure
and
meaning
the
structure
of
a
language
is
defined
by
a
phrase
structure
syntax
the
meaning
in
terms
of
the
effects
which
the
execution
of
a
sequence
of
interpretation
rules
exerts
upon
a
fixed
set
of
variables
called
the
environment
there
exists
a
one
to
one
correspondence
between
syntactic
rules
and
interpretation
rules
is
determined
by
the
sequence
of
corresponding
syntactic
reductions
which
constitute
a
parse
the
individual
interpretation
rules
are
explained
in
terms
of
an
elementary
an
d
obvious
algorithmic
notation
a
constructive
method
for
evaluating
a
text
is
provided
and
for
certain
decidable
classes
of
languages
their
unambiguity
is
proved
as
an
example
a
generalization
of
algol
is
described
in
full
detail
to
demonstrate
that
concepts
like
block
structure
procedures
parameters
etc
can
be
defined
adequately
and
precisely
by
this
method
cacm
january
1966
wirth
n
weber
h
ca660104
jb
march
3
1978
4
22
pm
249
4
1491
254
4
1491
272
4
1491
1037
4
1491
1086
4
1491
1102
4
1491
1109
4
1491
1132
4
1491
1140
4
1491
1188
4
1491
1234
4
1491
1234
4
1491
1263
4
1491
1265
4
1491
1270
4
1491
1306
4
1491
1323
4
1491
1358
4
1491
1358
4
1491
1379
4
1491
1380
4
1491
1453
4
1491
1464
4
1491
1464
4
1491
1469
4
1491
1484
4
1491
1486
4
1491
1491
4
1491
1491
4
1491
1491
4
1491
1491
4
1491
1491
4
1491
1498
4
1491
1613
4
1491
1614
4
1491
1767
4
1491
1781
4
1491
1781
4
1491
1781
4
1491
1781
4
1491
1787
4
1491
1825
4
1491
1860
4
1491
1949
4
1491
321
4
1491
2059
4
1491
2061
4
1491
2083
4
1491
2126
4
1491
2178
4
1491
2178
4
1491
2179
4
1491
2252
4
1491
2325
4
1491
2326
4
1491
2341
4
1491
2470
4
1491
2546
4
1491
435
4
1491
437
4
1491
463
4
1491
483
4
1491
491
4
1491
2645
4
1491
2652
4
1491
2684
4
1491
2684
4
1491
2732
4
1491
2842
4
1491
2929
4
1491
2934
4
1491
560
4
1491
583
4
1491
3044
4
1491
3069
4
1491
3073
4
1491
627
4
1491
631
4
1491
632
4
1491
642
4
1491
644
4
1491
653
4
1491
669
4
1491
679
4
1491
680
4
1491
691
4
1491
761
4
1491
761
4
1491
762
4
1491
763
4
1491
123
4
1491
140
4
1491
919
4
1491
949
4
1491
989
4
1491
989
4
1491
196
5
1491
1140
5
1491
1303
5
1491
1491
5
1491
1491
5
1491
1491
5
1491
1542
5
1491
1683
5
1491
1693
5
1491
1781
5
1491
1787
5
1491
1836
5
1491
1945
5
1491
2060
5
1491
2061
5
1491
2082
5
1491
2091
5
1491
2152
5
1491
2179
5
1491
2340
5
1491
2356
5
1491
2546
5
1491
2603
5
1491
2698
5
1491
2708
5
1491
2824
5
1491
2982
5
1491
2986
5
1491
3045
5
1491
3093
5
1491
3184
5
1491
729
5
1491
823
6
1491
123
6
1491
196
6
1491
196
6
1491
914
6
1491
915
6
1491
917
6
1491
919
6
1491
970
6
1491
984
6
1491
989
6
1491
990
6
1491
990
6
1491
1007
6
1491
1012
6
1491
1046
6
1491
1084
6
1491
1098
6
1491
1122
6
1491
1131
6
1491
1138
6
1491
1139
6
1491
1139
6
1491
1140
6
1491
1140
6
1491
1141
6
1491
1141
6
1491
1141
6
1491
1141
6
1491
1149
6
1491
1191
6
1491
1191
6
1491
1198
6
1491
1200
6
1491
1215
6
1491
1215
6
1491
1223
6
1491
1223
6
1491
1265
6
1491
1265
6
1491
1303
6
1491
1323
6
1491
1336
6
1491
1358
6
1491
1366
6
1491
1366
6
1491
1380
6
1491
1396
6
1491
1421
6
1491
1421
6
1491
1421
6
1491
1455
6
1491
1460
6
1491
1462
6
1491
1463
6
1491
1467
6
1491
1468
6
1491
1469
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1477
6
1491
1487
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1491
6
1491
1496
6
1491
1496
6
1491
1496
6
1491
1531
6
1491
1535
6
1491
1565
6
1491
1601
6
1491
1602
6
1491
1613
6
1491
1614
6
1491
1614
6
1491
1626
6
1491
1641
6
1491
1683
6
1491
1683
6
1491
1683
6
1491
1767
6
1491
1781
6
1491
1781
6
1491
1781
6
1491
1787
6
1491
1787
6
1491
1788
6
1491
205
6
1491
1825
6
1491
1825
6
1491
210
6
1491
1836
6
1491
1836
6
1491
1836
6
1491
224
6
1491
224
6
1491
249
6
1491
1869
6
1491
288
6
1491
316
6
1491
381
6
1491
398
6
1491
2015
6
1491
2110
6
1491
2110
6
1491
2110
6
1491
2111
6
1491
11
6
1491
2126
6
1491
2179
6
1491
2179
6
1491
2227
6
1491
2340
6
1491
2340
6
1491
2340
6
1491
2534
6
1491
2534
6
1491
2556
6
1491
2556
6
1491
2708
6
1491
404
6
1491
404
6
1491
410
6
1491
463
6
1491
464
6
1491
483
6
1491
483
6
1491
3184
6
1491
3184
6
1491
3184
6
1491
3188
6
1491
3198
6
1491
518
6
1491
577
6
1491
584
6
1491
584
6
1491
600
6
1491
669
6
1491
680
6
1491
680
6
1491
680
6
1491
680
6
1491
680
6
1491
691
6
1491
763
6
1491
763
6
1491
763
6
1491
763
6
1491
773
6
1491
799
6
1491
799
6
1491
799
6
1491
</TEXT>
</DOC>
<DOC>
<DOCNO>1492</DOCNO>
<TEXT>
serrev
algorithm
273
c1
cacm
january
1966
thacher
jr
h
c
ca660103a
jb
march
3
1978
4
23
pm
1492
5
1492
1492
5
1492
1492
5
1492
</TEXT>
</DOC>
<DOC>
<DOCNO>1493</DOCNO>
<TEXT>
generation
of
hilbert
derived
test
matrix
algorithm
274
f1
cacm
january
1966
boothroyd
j
ca660103b
jb
march
23
1978
7
32
pm
1493
5
1493
1493
5
1493
1493
5
1493
</TEXT>
</DOC>
<DOC>
<DOCNO>1494</DOCNO>
<TEXT>
complete
elliptic
integral
of
the
second
kind
algorithm
56
s21
cacm
january
1966
larssen
g
m
ca660103c
jb
march
23
1978
7
33
pm
1494
4
1494
1494
5
1494
1494
5
1494
1494
5
1494
1495
5
1494
1494
6
1494
</TEXT>
</DOC>
<DOC>
<DOCNO>1495</DOCNO>
<TEXT>
solution
of
transcendental
equations
by
series
reversion
an
algorithm
is
developed
for
expressing
the
solution
y
of
the
equation
f
y
g
x
as
a
power
series
in
x
x0
when
f
and
g
are
given
as
power
series
and
the
root
y0
is
known
at
y
x0
the
algorithm
is
illustrated
for
the
equation
y
y
x
i
e
1
y
ln
1
y
ln
1
x
cacm
january
1966
thacher
jr
h
c
ca660102
jb
march
3
1978
4
27
pm
1495
4
1495
1494
5
1495
1495
5
1495
1495
5
1495
1495
5
1495
1495
6
1495
</TEXT>
</DOC>
<DOC>
<DOCNO>1496</DOCNO>
<TEXT>
a
formal
semantics
for
computer
languages
and
its
application
in
a
compiler
compiler
a
semantic
meta
language
has
been
developed
for
representing
the
meanings
of
statements
in
a
large
class
of
computer
languages
this
meta
language
has
been
the
basis
for
construction
of
an
efficient
functioning
compiler
compiler
an
informal
discussion
of
the
meta
language
based
on
the
example
of
a
complete
translator
for
a
small
language
is
presented
cacm
january
1966
feldman
j
a
ca660101
jb
march
3
1978
4
31
pm
1046
4
1496
1086
4
1496
1105
4
1496
1139
4
1496
1140
4
1496
1234
4
1496
1263
4
1496
1265
4
1496
1496
4
1496
1496
4
1496
1496
4
1496
1683
4
1496
1768
4
1496
1781
4
1496
1787
4
1496
1824
4
1496
1945
4
1496
2061
4
1496
2126
4
1496
2546
4
1496
464
4
1496
584
4
1496
631
4
1496
653
4
1496
680
4
1496
763
4
1496
795
4
1496
799
4
1496
945
4
1496
1137
5
1496
1141
5
1496
1396
5
1496
1496
5
1496
1496
5
1496
1496
5
1496
1767
5
1496
1781
5
1496
1787
5
1496
1860
5
1496
1945
5
1496
1988
5
1496
2252
5
1496
404
5
1496
823
6
1496
123
6
1496
196
6
1496
196
6
1496
196
6
1496
914
6
1496
915
6
1496
917
6
1496
919
6
1496
964
6
1496
984
6
1496
989
6
1496
990
6
1496
990
6
1496
1007
6
1496
1012
6
1496
1028
6
1496
1029
6
1496
1046
6
1496
1083
6
1496
1084
6
1496
1098
6
1496
1122
6
1496
1131
6
1496
1132
6
1496
1138
6
1496
1139
6
1496
1139
6
1496
1140
6
1496
1141
6
1496
1141
6
1496
1149
6
1496
1198
6
1496
1200
6
1496
1214
6
1496
1215
6
1496
1215
6
1496
1223
6
1496
1223
6
1496
1265
6
1496
1265
6
1496
1278
6
1496
1303
6
1496
1323
6
1496
1334
6
1496
1336
6
1496
1358
6
1496
1358
6
1496
1365
6
1496
1366
6
1496
1366
6
1496
1386
6
1496
1387
6
1496
1388
6
1496
1389
6
1496
1392
6
1496
1393
6
1496
1394
6
1496
1395
6
1496
1396
6
1496
1396
6
1496
1397
6
1496
1421
6
1496
1421
6
1496
1455
6
1496
1460
6
1496
1462
6
1496
1463
6
1496
1467
6
1496
1467
6
1496
1468
6
1496
1468
6
1496
1477
6
1496
1477
6
1496
1487
6
1496
1491
6
1496
1491
6
1496
1491
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1496
6
1496
1531
6
1496
1535
6
1496
1565
6
1496
1601
6
1496
1602
6
1496
1613
6
1496
1614
6
1496
1626
6
1496
1626
6
1496
1641
6
1496
1641
6
1496
1781
6
1496
1785
6
1496
1786
6
1496
1787
6
1496
1788
6
1496
205
6
1496
224
6
1496
224
6
1496
249
6
1496
284
6
1496
288
6
1496
316
6
1496
378
6
1496
381
6
1496
381
6
1496
398
6
1496
11
6
1496
11
6
1496
14
6
1496
2155
6
1496
404
6
1496
407
6
1496
410
6
1496
463
6
1496
464
6
1496
483
6
1496
483
6
1496
3184
6
1496
3184
6
1496
3184
6
1496
3188
6
1496
3199
6
1496
3200
6
1496
3201
6
1496
3202
6
1496
3203
6
1496
3204
6
1496
561
6
1496
584
6
1496
584
6
1496
600
6
1496
669
6
1496
680
6
1496
680
6
1496
691
6
1496
730
6
1496
763
6
1496
763
6
1496
763
6
1496
799
6
1496
799
6
1496
</TEXT>
</DOC>
<DOC>
<DOCNO>1497</DOCNO>
<TEXT>
on
the
normalization
requirement
of
divisor
in
divide
and
correct
methods
this
paper
presents
an
analysis
on
the
normalization
requirement
of
the
divisor
in
a
divide
and
correct
method
this
analysis
is
made
subject
to
the
condition
that
not
more
than
one
correction
is
required
to
obtain
the
true
quotient
character
from
the
trial
estimate
got
from
the
division
of
a
two
precision
segment
of
every
partial
remainder
by
a
suitably
rounded
single
precision
divisor
this
segmented
division
is
denoted
here
as
a
2
1
precision
basic
division
it
is
found
that
the
normalization
requirement
could
be
narrowed
down
to
a
smaller
range
of
divisors
provided
the
magnitude
of
the
character
next
to
the
leading
character
of
the
divisor
is
known
if
however
the
normalization
is
to
be
eliminated
one
has
to
choose
proper
higher
precision
segments
of
operands
for
the
basic
division
also
considered
is
the
possibility
of
eliminating
the
normalization
by
an
increase
on
the
number
of
corrections
on
the
quotient
estimate
got
from
a
2
1
precision
basic
division
it
is
shown
that
such
a
scheme
is
economical
only
for
small
radices
cacm
december
1967
krishnamurthy
e
v
nandi
s
k
ca671210
jb
february
26
1978
2
15
pm
1026
4
1497
1258
4
1497
1258
4
1497
1292
4
1497
1292
4
1497
1497
4
1497
1497
4
1497
1497
4
1497
1497
4
1497
1593
4
1497
1975
4
1497
1975
4
1497
2605
4
1497
107
5
1497
1026
5
1497
1292
5
1497
1497
5
1497
1497
5
1497
1497
5
1497
1593
5
1497
1975
5
1497
1026
6
1497
1292
6
1497
1497
6
1497
</TEXT>
</DOC>
<DOC>
<DOCNO>1498</DOCNO>
<TEXT>
the
alcor
illinois
7090
7094
post
mortem
dump
a
dump
technique
for
programs
written
in
algol
60
is
described
this
technique
provides
an
intelligible
analysis
of
an
unsuccessful
computation
process
in
terms
of
the
original
source
program
cacm
december
1967
bayer
r
gries
d
paul
m
wiehle
h
r
ca671209
jb
february
26
1978
2
18
pm
1086
4
1498
1132
4
1498
1234
4
1498
1263
4
1498
1265
4
1498
1270
4
1498
1323
4
1498
1358
4
1498
1379
4
1498
1380
4
1498
1453
4
1498
1464
4
1498
1484
4
1498
1491
4
1498
1498
4
1498
1498
4
1498
1613
4
1498
1614
4
1498
1781
4
1498
1781
4
1498
1787
4
1498
1825
4
1498
1860
4
1498
2083
4
1498
2178
4
1498
2179
4
1498
2252
4
1498
2325
4
1498
2341
4
1498
2546
4
1498
2645
4
1498
2652
4
1498
2684
4
1498
2842
4
1498
2929
4
1498
2934
4
1498
3069
4
1498
669
4
1498
679
4
1498
691
4
1498
761
4
1498
949
4
1498
989
4
1498
1215
5
1498
1498
5
1498
1498
5
1498
1498
5
1498
3184
5
1498
</TEXT>
</DOC>
<DOC>
<DOCNO>1499</DOCNO>
<TEXT>
chebyschev
curve
fit
revised
algorithm
318
e2
cacm
december
1967
boothroyd
j
ca671208a
jb
february
26
1978
2
20
pm
1499
5
1499
1499
5
1499
1499
5
1499
</TEXT>
</DOC>
<DOC>
<DOCNO>1500</DOCNO>
<TEXT>
chebyschev
curve
fit
algorithm
91
e2
cacm
december
1967
boothroyd
j
ca671208b
jb
march
23
1978
2
11
pm
1500
5
1500
1500
5
1500
1500
5
1500
</TEXT>
</DOC>
<DOC>
<DOCNO>1501</DOCNO>
<TEXT>
eigenvectors
of
a
2n
x
2n
matrix
it
has
been
known
that
the
eigenvalues
of
a
certain
2n
x
2n
matrix
can
be
obtained
by
use
of
two
smaller
matrices
of
order
n
which
can
be
easily
constructed
an
algorithm
is
given
to
obtain
the
eigenvectors
of
the
2n
x
2n
matrix
by
use
of
the
eigenvectors
of
the
smaller
matrices
cacm
december
1967
charmonman
s
ca671207
jb
february
26
1978
2
22
pm
1501
5
1501
1501
5
1501
1501
5
1501
</TEXT>
</DOC>
<DOC>
<DOCNO>1502</DOCNO>
<TEXT>
an
online
editor
an
online
interactive
system
for
test
editing
is
described
in
detail
with
remarks
on
the
theoretical
and
experimental
justification
for
its
form
emphasis
throughout
the
system
is
on
providing
maximum
convenience
and
power
for
the
user
notable
features
are
its
ability
to
handle
any
piece
of
text
the
content
searching
facility
and
the
character
by
character
editing
operations
the
editor
can
be
programmed
to
a
limited
extent
cacm
december
1967
deutsch
l
p
lampson
b
w
ca671206
jb
february
26
1978
2
25
pm
1502
5
1502
1502
5
1502
1502
5
1502
2299
5
1502
2501
5
1502
2629
5
1502
2915
5
1502
3114
5
1502
1502
6
1502
1502
6
1502
1502
6
1502
1502
6
1502
1502
6
1502
1641
6
1502
1751
6
1502
1900
6
1502
2380
6
1502
2499
6
1502
2745
6
1502
</TEXT>
</DOC>
<DOC>
<DOCNO>1503</DOCNO>
<TEXT>
a
simscript
fortran
case
study
two
programs
for
a
vehicle
dispatching
model
one
written
in
7040
simscript
and
the
other
in
7040
fortran
iv
are
compared
the
comparison
is
made
in
terms
of
basic
program
design
decisions
storage
requirements
computer
time
used
and
the
ease
of
making
changes
in
the
simscript
program
the
primary
design
considerations
center
around
the
choice
of
model
variables
model
changing
events
and
model
testing
in
the
fortran
program
basic
design
problems
relate
to
the
representation
of
the
passage
of
time
the
allocation
of
storage
and
the
organization
of
input
data
the
comparison
of
these
differently
designed
programs
shows
that
the
simscript
program
uses
more
computer
storage
and
more
computer
time
but
requires
fewer
program
changes
to
introduce
model
revisions
cacm
december
1967
weinert
a
e
ca671205
jb
february
26
1978
2
30
pm
1503
4
1503
1781
4
1503
1860
4
1503
2091
4
1503
1366
5
1503
1503
5
1503
1503
5
1503
1503
5
1503
</TEXT>
</DOC>
<DOC>
<DOCNO>1504</DOCNO>
<TEXT>
algorithms
for
finding
a
fundamental
set
of
cycles
for
an
undirected
linear
graph
given
the
adjacency
matrix
of
the
graph
the
algorithm
presented
in
this
paper
finds
a
spanning
tree
and
then
constructs
the
set
of
fundamental
cycles
our
algorithm
is
slower
than
an
algorithm
presented
by
welch
by
a
ratio
of
n
3
n
is
the
number
of
nodes
but
requires
less
storage
for
graphs
with
a
large
number
of
nodes
and
edges
when
storage
is
limited
our
algorithm
is
superior
to
welch
however
when
the
graphs
are
small
or
machine
storage
is
very
large
welch
algorithm
is
superior
timing
estimates
and
storage
requirements
for
both
methods
are
presented
cacm
december
1967
gotlieb
c
c
corneil
d
g
ca671204
jb
february
26
19782
35
pm
1504
4
1504
3040
4
1504
1145
5
1504
1504
5
1504
1504
5
1504
1504
5
1504
1847
5
1504
1961
5
1504
2052
5
1504
1008
6
1504
1013
6
1504
1369
6
1504
1504
6
1504
1504
6
1504
1504
6
1504
1540
6
1504
1847
6
1504
</TEXT>
</DOC>
<DOC>
<DOCNO>1505</DOCNO>
<TEXT>
a
system
organization
for
resource
allocation
this
paper
introduces
a
system
for
resource
management
using
the
concepts
of
process
facility
and
event
except
for
the
processor
no
attempt
has
been
made
to
give
serious
suggestions
for
the
policy
to
be
followed
for
resource
allocation
however
a
basic
framework
is
provided
in
which
a
system
analyst
can
express
solutions
to
resource
management
problems
the
paper
is
divided
into
a
tutorial
presentation
a
description
of
the
system
primitives
and
a
small
collection
of
examples
of
the
use
of
the
primitives
cacm
december
1967
dahm
d
m
gerbstadt
f
h
pacelli
m
m
ca671203
jb
february
26
1978
2
40
pm
1505
5
1505
1505
5
1505
1505
5
1505
</TEXT>
</DOC>
<DOC>
<DOCNO>1506</DOCNO>
<TEXT>
the
laconiq
monitor
time
sharing
for
online
dialogues
the
laconiq
laboratory
computer
online
inquiry
monitor
was
developed
primarily
to
support
non
numerical
applications
such
as
retrieval
from
very
large
files
by
means
of
a
dialogue
between
a
system
user
and
a
retrieval
application
the
monitor
was
designed
so
that
it
could
work
with
a
small
computer
an
ibm
system
360
30
therefore
techniques
for
resource
allocation
were
important
for
this
reason
the
use
of
core
storage
computational
facilities
and
input
output
were
all
scheduled
an
unusual
feature
of
the
system
is
that
it
is
event
driven
rather
than
clock
driven
the
program
segments
called
into
execution
by
the
remote
crt
consoles
are
invariably
run
to
completion
rather
than
rolled
out
to
be
brought
back
at
a
later
time
cacm
december
1967
drew
d
l
ca671202
jb
february
26
1978
2
45
pm
1506
5
1506
1506
5
1506
1506
5
1506
</TEXT>
</DOC>
<DOC>
<DOCNO>1507</DOCNO>
<TEXT>
a
multiprogramming
environment
for
online
data
acquis
ition
and
analysis
an
experimental
system
for
acquis
ition
and
analysis
of
large
bodies
of
data
derived
from
scientific
experiments
is
described
its
architecture
and
implementation
is
largely
based
on
certain
objectives
and
characteristics
of
a
general
data
analysis
scheme
early
applications
have
been
oriented
towards
the
investigation
of
data
obtained
in
biological
research
some
of
the
problems
encountered
by
the
chosen
approach
are
discussed
cacm
december
1967
lockemann
p
c
knutsen
w
d
ca671201
jb
february
26
1978
2
48
pm
1507
5
1507
1507
5
1507
1507
5
1507
1712
5
1507
1507
6
1507
</TEXT>
</DOC>
<DOC>
<DOCNO>1508</DOCNO>
<TEXT>
magnetic
tape
labels
for
information
interchange
proposed
usa
standard
cacm
november
1967
ca671109
jb
february
26
1978
2
49
pm
1508
5
1508
1508
5
1508
1508
5
1508
</TEXT>
</DOC>
<DOC>
<DOCNO>1509</DOCNO>
<TEXT>
recorded
magnetic
tape
for
information
interchange
200
cpi
nrzi
proposed
usa
standard
cacm
november
1967
ca671108
jb
february
26
1978
2
52
pm
1509
5
1509
1509
5
1509
1509
5
1509
</TEXT>
</DOC>
<DOC>
<DOCNO>1510</DOCNO>
<TEXT>
finding
a
solution
of
n
functional
equations
in
n
unknown
algorithm
314
c5
cacm
november
1967
dulley
d
pitteway
l
v
ca671107a
jb
february
26
1978
2
54
pm
1510
5
1510
1510
5
1510
1510
5
1510
</TEXT>
</DOC>
<DOC>
<DOCNO>1511</DOCNO>
<TEXT>
the
damped
taylor
series
method
for
minimizing
a
sum
of
squares
and
for
solving
systems
of
nonlinear
equations
cacm
november
1967
spath
h
ca671107b
jb
march
23
1978
2
17
pm
1511
5
1511
1511
5
1511
1511
5
1511
1820
5
1511
1511
6
1511
</TEXT>
</DOC>
<DOC>
<DOCNO>1512</DOCNO>
<TEXT>
solution
of
simultaneous
non
linear
equations
algorithm
316
c5
cacm
november
1967
brown
k
m
ca671107c
jb
march
23
1978
2
19
pm
1512
5
1512
1512
5
1512
1512
5
1512
</TEXT>
</DOC>
<DOC>
<DOCNO>1513</DOCNO>
<TEXT>
permutation
algorithm
317
g6
cacm
november
1967
robinson
c
l
ca671107d
jb
march
23
1978
2
21
pm
1513
5
1513
1513
5
1513
1513
5
1513
</TEXT>
</DOC>
<DOC>
<DOCNO>1514</DOCNO>
<TEXT>
on
the
expected
gain
from
adjust
ing
matched
term
retrieval
systems
a
file
adjustment
procedure
based
on
maximizing
the
bayes
expected
gain
proposed
for
matched
term
retrieval
systems
the
expected
gain
and
its
probability
distribution
are
derived
as
a
function
of
1
the
prior
proportion
of
omitted
terms
and
2
the
coefficient
of
separation
between
two
distributions
corresponding
to
values
of
an
adjustment
statistic
an
example
evaluates
the
gain
parameters
for
a
typical
information
retrieval
system
cacm
november
1967
shumway
r
h
ca671106
jb
february
26
1978
2
59
pm
1514
5
1514
1514
5
1514
1514
5
1514
</TEXT>
</DOC>
<DOC>
<DOCNO>1515</DOCNO>
<TEXT>
a
computer
system
for
inference
execution
and
data
retrieval
this
paper
presents
a
rand
project
concerned
with
the
use
of
computers
as
assistants
in
the
logical
analysis
of
large
collections
of
factual
data
a
system
called
relational
data
file
was
developed
for
this
purpose
the
relational
data
file
is
briefly
detailed
and
problems
arising
from
its
implementation
are
discussed
cacm
november
1967
levien
r
e
ca671105
jb
february
26
1978
3
02
pm
1155
4
1515
1456
4
1515
1468
4
1515
1515
4
1515
1515
4
1515
1699
4
1515
1856
4
1515
2096
4
1515
2127
4
1515
2127
4
1515
2210
4
1515
1155
5
1515
1324
5
1515
1515
5
1515
1515
5
1515
1515
5
1515
2046
5
1515
2710
5
1515
1515
6
1515
1515
6
1515
2046
6
1515
2715
6
1515
616
6
1515
</TEXT>
</DOC>
<DOC>
<DOCNO>1516</DOCNO>
<TEXT>
automatic
data
compression
the
information
explosion
noted
in
recent
years
makes
it
essential
that
storage
requirements
for
all
information
be
kept
to
a
minimum
a
fully
automatic
and
rapid
three
part
compressor
which
can
be
used
with
any
body
of
information
to
greatly
reduce
slow
external
storage
requirements
and
to
increase
the
rate
of
information
transmission
through
a
computer
is
described
in
this
paper
the
system
will
also
automatically
decode
the
compressed
information
on
an
item
by
item
basis
when
it
is
required
the
three
component
compressors
which
can
be
used
separately
to
accomplish
their
specific
tasks
are
discussed
nupak
for
the
automatic
compression
of
numerical
data
anpak
for
the
automatic
compression
of
any
information
and
iopak
for
further
compression
of
information
to
be
stored
on
tape
or
cards
cacm
november
1967
marron
b
a
demaine
p
a
d
ca671104
jb
february
26
1978
3
08
pm
1516
5
1516
1516
5
1516
1516
5
1516
</TEXT>
</DOC>
<DOC>
<DOCNO>1517</DOCNO>
<TEXT>
methods
for
analyzing
data
from
computer
simulation
experiments
this
paper
addresses
itself
to
the
problem
of
analyzing
data
generated
by
computer
simulations
of
economic
systems
we
first
turn
to
a
hypothetical
firm
whose
operation
is
represented
by
single
channel
multistation
queueing
model
the
firm
seeks
to
maximize
total
expected
profit
for
the
coming
period
by
selecting
one
of
five
operating
plans
where
each
plan
incorporates
a
certain
marketing
strategy
an
allocation
of
productive
inputs
and
a
total
cost
the
results
of
the
simulated
activity
under
each
plan
are
subjected
to
an
f
test
two
multiple
comparison
methods
and
a
multiple
ranking
method
we
illustrate
compare
and
evaluate
these
techniques
the
paper
adopts
the
position
that
the
particular
technique
of
analysis
possibly
not
any
one
of
the
above
chosen
by
the
experimenter
should
be
an
expression
of
his
experimental
objective
the
f
test
tests
the
homogeneity
of
the
plans
multiple
comparison
methods
quantify
their
differences
and
multiple
ranking
methods
directly
identify
the
one
best
plan
or
best
plans
cacm
november
1967
naylor
t
h
wertz
k
wonnacott
t
h
ca671103
jb
february
26
1978
3
15
pm
1517
4
1517
1435
5
1517
1517
5
1517
1517
5
1517
1517
5
1517
</TEXT>
</DOC>
<DOC>
<DOCNO>1518</DOCNO>
<TEXT>
an
experimental
model
of
system
360
the
problem
of
predicting
the
performance
of
modern
computer
systems
is
formidable
one
general
technique
which
can
ease
this
problem
is
macroscopic
simulation
this
paper
reports
on
the
applicability
of
that
technique
to
system
360
the
paper
describes
an
experimental
model
of
system
360
its
hardware
software
and
its
environment
the
measures
of
system
performance
produced
by
the
model
consist
of
statistics
relating
to
turnaround
time
throughput
hardware
utilization
software
utilization
and
queueing
processes
the
model
is
mechanized
in
simscript
and
consists
of
some
1750
statements
an
auxiliary
programs
the
job
generator
creates
automatically
the
properties
of
system
360
jobs
that
get
simulated
cacm
november
1967
katz
j
h
ca671102
jb
february
26
1978
3
20
pm
1518
5
1518
1518
5
1518
1518
5
1518
1805
5
1518
1912
5
1518
1518
6
1518
1518
6
1518
1572
6
1518
1748
6
1518
</TEXT>
</DOC>
<DOC>
<DOCNO>1519</DOCNO>
<TEXT>
george
3
a
general
purpose
time
sharing
and
operating
system
an
operating
system
is
described
which
will
run
on
a
wide
variety
of
configurations
of
the
i
1900
and
can
handle
a
large
number
of
online
console
users
while
at
the
same
time
running
several
off
line
background
jobs
the
system
is
not
oriented
towards
either
mode
and
can
be
either
a
batch
processing
system
such
as
the
atlas
supervisor
ibsys
or
gecos
or
a
multiaccess
system
resembling
to
the
user
ctss
or
multics
or
both
simultaneously
depending
on
the
installation
which
can
adjust
the
schedulers
both
online
users
and
off
line
jobs
use
a
common
command
language
the
system
includes
a
multilevel
device
independent
file
store
cacm
november
1967
oestreicher
m
d
bailey
m
j
strauss
j
i
ca671101
jb
february
27
1978
1
47
pm
1519
5
1519
1519
5
1519
1519
5
1519
</TEXT>
</DOC>
<DOC>
<DOCNO>1520</DOCNO>
<TEXT>
absolute
value
and
square
root
of
a
complex
number
algorithm
312
a2
cacm
october
1967
friedland
p
ca671012a
jb
february
27
1978
1
49
pm
1520
5
1520
1520
5
1520
1520
5
1520
</TEXT>
</DOC>
<DOC>
<DOCNO>1521</DOCNO>
<TEXT>
multi
dimensional
partition
generator
algorithm
313
a1
cacm
october
1967
bratley
p
mckay
j
k
s
ca671012b
jb
march
23
1978
2
26
pm
1521
5
1521
1521
5
1521
1521
5
1521
2354
5
1521
2355
5
1521
1418
6
1521
1418
6
1521
1521
6
1521
1521
6
1521
1597
6
1521
1597
6
1521
1679
6
1521
1883
6
1521
2040
6
1521
2350
6
1521
2350
6
1521
2354
6
1521
2355
6
1521
</TEXT>
</DOC>
<DOC>
<DOCNO>1522</DOCNO>
<TEXT>
chebyschev
quadrature
algorithm
279
d1
cacm
october
1967
hillstrom
k
ca671012c
jb
march
23
1978
2
31
pm
1522
5
1522
1522
5
1522
1522
5
1522
</TEXT>
</DOC>
<DOC>
<DOCNO>1523</DOCNO>
<TEXT>
sharer
a
time
sharing
system
for
the
cdc
6600
a
time
sharing
system
embedded
within
the
standard
batch
processing
system
for
the
cdc
6600
is
described
the
system
is
general
purpose
and
file
based
providing
facilities
for
file
input
manipulation
editing
compilation
and
conversational
execution
it
uses
a
simple
scheme
for
system
extension
for
a
machine
with
only
one
relocation
and
memory
bound
register
no
attempt
was
made
to
use
reentrant
code
or
to
simulate
segmentation
or
paging
implementation
time
was
approximately
six
man
years
with
the
majority
of
the
code
being
written
in
fortran
cacm
october
1967
harrison
m
c
schwartz
j
t
ca671011
jb
february
27
1978
1
53
pm
1458
4
1523
1523
4
1523
1603
4
1523
1698
4
1523
1747
4
1523
1748
4
1523
1854
4
1523
1877
4
1523
1960
4
1523
2377
4
1523
2378
4
1523
2497
4
1523
2558
4
1523
2625
4
1523
2632
4
1523
2840
4
1523
2941
4
1523
3105
4
1523
3144
4
1523
1471
5
1523
1523
5
1523
1523
5
1523
1523
5
1523
1657
5
1523
2080
5
1523
2357
5
1523
2536
5
1523
1523
6
1523
1523
6
1523
1523
6
1523
1523
6
1523
1829
6
1523
2035
6
1523
</TEXT>
</DOC>
<DOC>
<DOCNO>1524</DOCNO>
<TEXT>
a
stopping
criterion
for
polynomial
root
finding
when
searching
for
the
root
of
a
polynomial
it
is
generally
difficult
to
know
just
when
to
accept
a
number
as
an
adequate
approximation
to
the
root
in
this
paper
an
algorithm
is
presented
which
allows
one
to
terminate
the
iteration
process
on
the
basis
of
calculated
bounds
for
the
roundoff
error
which
occurs
in
evaluating
the
polynomial
this
stopping
criterion
has
been
tested
on
numerous
examples
and
has
been
found
to
serve
as
a
satisfactory
means
for
accepting
a
complex
number
as
a
zero
of
a
real
polynomial
cacm
october
1967
adams
d
a
ca671009
jb
february
27
1978
1
56
pm
1524
4
1524
1524
4
1524
1524
4
1524
1931
4
1524
2214
4
1524
2544
4
1524
1197
5
1524
1524
5
1524
1524
5
1524
1524
5
1524
311
5
1524
2544
5
1524
879
5
1524
1524
6
1524
311
6
1524
2214
6
1524
</TEXT>
</DOC>
<DOC>
<DOCNO>1525</DOCNO>
<TEXT>
on
computing
the
fast
fourier
transform
cooley
and
tukey
have
proposed
a
fast
algorithm
for
computing
complex
fourier
transform
and
have
shown
major
time
savings
in
using
it
to
compute
large
transforms
on
a
digital
computer
with
n
a
power
of
two
computing
time
for
this
algorithm
is
proportional
to
n
log2
n
a
major
improvement
over
other
methods
with
computing
time
proportional
to
n
2
in
this
paper
the
fast
fourier
transform
algorithm
is
briefly
reviewed
and
fast
difference
equation
methods
for
accurately
computing
the
needed
trigonometric
function
values
are
given
the
problem
of
computing
a
large
fourier
transform
on
a
system
with
virtual
memory
is
considered
and
a
solution
is
proposed
this
method
has
been
used
to
compute
complex
fourier
transforms
of
size
n
2
16
on
a
computer
with
2
15
words
of
core
storage
this
exceeds
by
a
factor
of
eight
the
maximum
radix
two
transform
size
with
fixed
allocation
of
this
amount
of
core
storage
the
method
has
also
been
used
to
compute
large
mixed
radix
transforms
a
scaling
plan
for
computing
the
fast
fourier
transform
with
fixed
point
arithmetic
is
also
given
cacm
october
1967
singleton
r
c
ca671008
jb
february
27
1978
2
03
pm
1525
5
1525
1525
5
1525
1525
5
1525
1668
5
1525
1669
5
1525
1679
5
1525
1728
5
1525
2859
5
1525
1525
6
1525
1525
6
1525
1525
6
1525
1525
6
1525
1525
6
1525
1647
6
1525
1669
6
1525
1676
6
1525
1785
6
1525
</TEXT>
</DOC>
<DOC>
<DOCNO>1526</DOCNO>
<TEXT>
multiprogramming
under
a
page
on
demand
strategy
a
model
of
multiprogramming
for
a
particular
computer
system
using
a
page
on
demand
strategy
is
developed
analysis
of
this
model
is
used
to
predict
performance
measured
by
the
average
usage
of
the
cpu
when
user
programs
are
typical
of
those
arising
from
an
interactive
time
sharing
environment
the
effect
of
several
hardware
modifications
is
also
analyzed
a
parameter
readily
calculated
from
the
hardware
characteristics
and
the
program
statistics
is
proposed
for
gauging
the
effect
of
multiprogramming
cacm
october
1967
smith
j
l
ca671007
jb
february
27
1978
2
07
pm
1526
5
1526
1526
5
1526
1526
5
1526
1892
5
1526
2068
5
1526
2741
5
1526
1526
6
1526
1526
6
1526
1526
6
1526
1572
6
1526
1728
6
1526
1749
6
1526
1751
6
1526
1752
6
1526
2454
6
1526
</TEXT>
</DOC>
<DOC>
<DOCNO>1527</DOCNO>
<TEXT>
a
grammar
base
question
answering
procedure
the
subject
of
this
paper
is
a
procedure
for
the
automatic
retrieval
of
certain
segments
of
stored
information
either
explicitly
or
implicitly
represented
through
questions
posed
in
natural
language
sentences
this
procedure
makes
use
of
a
sentence
recognition
device
for
the
class
of
grammars
which
will
correctly
decide
between
the
grammatical
and
ungrammatical
sentences
of
a
natural
language
it
is
possible
to
make
use
of
a
recognition
device
of
this
sort
for
the
following
reason
much
data
is
fully
expressible
as
a
set
of
sentences
in
a
natural
language
a
set
which
can
be
exhaustively
and
exclusively
generated
by
a
grammar
based
upon
the
rules
of
this
grammar
a
sentence
recognizer
will
evaluate
sentences
questions
in
the
normal
situation
since
the
recognition
function
succeeds
just
in
case
the
posed
question
is
drawn
from
the
set
of
sentences
expressing
the
data
or
more
correctly
is
grammatical
in
terms
of
the
grammar
for
this
set
of
sentences
sentence
recognition
itself
is
a
procedure
for
retrieving
information
when
the
recognition
function
succeeds
its
value
represents
the
requested
information
cacm
october
1967
rosenbaum
p
ca671006
jb
february
27
1978
2
14
pm
1527
5
1527
1527
5
1527
1527
5
1527
2092
5
1527
2127
5
1527
1155
6
1527
1324
6
1527
1487
6
1527
1527
6
1527
1527
6
1527
1781
6
1527
1856
6
1527
</TEXT>
</DOC>
<DOC>
<DOCNO>1528</DOCNO>
<TEXT>
three
fonts
of
computer
drawn
letters
detailed
descriptions
are
given
for
three
fonts
of
letters
letter
shapes
are
entirely
described
by
numbers
the
basic
vectors
are
in
a
general
form
so
the
fonts
may
be
easily
drawn
on
a
variety
of
computers
and
cathode
ray
tubes
the
fonts
include
both
upper
and
lower
case
roman
letters
mathematical
signs
and
upper
and
lower
case
greek
letters
design
of
the
fonts
is
described
however
the
principal
contribution
of
this
paper
concerns
the
fonts
themselves
cacm
october
1967
mathews
m
v
lochbaum
c
moss
j
a
ca671005
jb
february
27
1978
2
24
pm
1528
5
1528
1528
5
1528
1528
5
1528
1697
5
1528
1528
6
1528
</TEXT>
</DOC>
<DOC>
<DOCNO>1529</DOCNO>
<TEXT>
decomposition
programming
an
analysis
of
matrix
substructure
a
petroleum
blending
problem
was
analyzed
in
order
to
compare
the
primal
and
primal
dual
decomposition
algorithms
in
the
course
of
the
analysis
a
substructure
was
discovered
which
has
relevance
to
the
relative
performance
of
the
two
algorithms
and
to
their
absolute
performance
as
compared
with
a
standard
primal
simplex
solution
without
decomposition
cacm
october
1967
bell
e
j
ca671004
jb
february
27
1978
2
33
pm
1529
5
1529
1529
5
1529
1529
5
1529
</TEXT>
</DOC>
<DOC>
<DOCNO>1530</DOCNO>
<TEXT>
the
ml
i
macro
processor
a
general
purpose
macro
processor
called
ml
i
is
described
ml
i
has
been
implemented
on
the
pdp
7
and
i
atlas
2
computers
and
is
intended
as
a
tool
to
allow
users
to
extend
any
existing
programming
language
by
incorporating
new
statements
and
other
syntactic
forms
of
their
own
choosing
and
in
their
own
notation
this
allows
a
complete
user
oriented
language
to
be
built
up
with
relative
ease
cacm
october
1967
brown
p
j
ca671003
jb
february
27
1978
2
38
pm
1530
4
1530
1530
4
1530
1531
4
1530
1565
4
1530
1703
4
1530
1781
4
1530
1852
4
1530
1945
4
1530
2034
4
1530
2036
4
1530
1455
5
1530
1530
5
1530
1530
5
1530
1530
5
1530
1565
5
1530
</TEXT>
</DOC>
<DOC>
<DOCNO>1531</DOCNO>
<TEXT>
the
remaining
trouble
spots
in
algol
60
this
paper
lists
the
ambiguities
remaining
in
the
language
algol
60
which
have
been
noticed
since
the
publication
of
the
revised
algol
60
report
in
1963
cacm
october
1967
knuth
d
e
ca671002
jb
february
27
1978
2
40
pm
1530
4
1531
1531
4
1531
1531
4
1531
1565
4
1531
1703
4
1531
1945
4
1531
2036
4
1531
2707
4
1531
2753
4
1531
1185
5
1531
1455
5
1531
1531
5
1531
1531
5
1531
1531
5
1531
1781
5
1531
123
6
1531
196
6
1531
919
6
1531
990
6
1531
1007
6
1531
1046
6
1531
1131
6
1531
1139
6
1531
1140
6
1531
1149
6
1531
1198
6
1531
1215
6
1531
1223
6
1531
1265
6
1531
1303
6
1531
1323
6
1531
1358
6
1531
1366
6
1531
1421
6
1531
1460
6
1531
1462
6
1531
1463
6
1531
1467
6
1531
1468
6
1531
1477
6
1531
1491
6
1531
1496
6
1531
1531
6
1531
1535
6
1531
1565
6
1531
1601
6
1531
1602
6
1531
1613
6
1531
1614
6
1531
1626
6
1531
1641
6
1531
1787
6
1531
1788
6
1531
205
6
1531
224
6
1531
249
6
1531
288
6
1531
316
6
1531
381
6
1531
398
6
1531
11
6
1531
404
6
1531
410
6
1531
463
6
1531
464
6
1531
483
6
1531
3184
6
1531
3188
6
1531
584
6
1531
600
6
1531
680
6
1531
691
6
1531
763
6
1531
799
6
1531
</TEXT>
</DOC>
<DOC>
<DOCNO>1532</DOCNO>
<TEXT>
the
hardware
software
complementarity
cacm
october
1967
oettinger
a
g
ca671001
jb
february
27
1978
2
42
pm
1532
5
1532
1532
5
1532
1532
5
1532
</TEXT>
</DOC>
<DOC>
<DOCNO>1533</DOCNO>
<TEXT>
a
marovian
model
of
the
university
of
michigan
executive
system
a
mathematical
model
of
a
computer
executive
system
is
postulated
and
its
parameters
estimated
with
the
aid
of
extensive
data
on
the
system
operation
although
simplifying
assumptions
are
made
the
results
predicted
by
the
model
agree
reasonable
well
with
actual
results
the
model
is
used
to
study
the
effects
of
changes
in
the
executive
system
and
in
one
of
its
compilers
further
applications
of
the
model
are
discussed
cacm
september
1967
foley
j
d
ca670911
jb
february
27
1978
2
50
pm
1533
4
1533
1533
4
1533
1604
4
1533
1951
4
1533
2667
4
1533
2668
4
1533
1224
5
1533
1533
5
1533
1533
5
1533
1533
5
1533
1604
5
1533
1916
5
1533
1533
6
1533
666
6
1533
</TEXT>
</DOC>
<DOC>
<DOCNO>1534</DOCNO>
<TEXT>
dad
the
c
operating
system
the
design
and
implementation
of
the
c
operating
system
dad
is
described
in
detail
this
system
is
designed
for
the
control
data
3600
using
a
large
drum
backing
store
and
is
intended
to
allow
the
integration
of
a
remote
console
display
subsystem
into
a
conventional
job
stack
environment
the
use
of
the
drums
the
buffering
of
input
and
output
on
slow
peripherals
and
the
execution
of
normal
job
stack
work
are
described
the
display
subsystem
is
described
only
as
it
integrates
into
the
rest
of
the
system
the
techniques
found
useful
in
the
development
of
dad
are
given
and
an
assessment
is
made
of
the
validity
of
various
design
decisions
performance
figures
based
on
several
months
of
operation
are
tabulated
cacm
september
1967
austin
b
j
holden
t
s
hudson
r
h
ca670910
jb
february
27
1978
2
58
pm
1534
5
1534
1534
5
1534
1534
5
1534
</TEXT>
</DOC>
<DOC>
<DOCNO>1535</DOCNO>
<TEXT>
a
comment
on
index
register
allocation
a
technique
is
presented
to
reduce
the
enumeration
required
by
a
known
procedure
for
optimal
index
register
allocation
in
straight
line
programs
this
technique
is
based
on
the
construction
of
a
link
diagram
which
shows
at
any
step
the
future
occurrences
of
indexes
which
must
be
loaded
into
index
registers
this
diagram
determines
in
advance
the
required
register
configuration
at
certain
steps
of
the
program
so
that
the
program
is
subdivided
into
separate
portions
to
which
the
allocation
procedure
may
be
applied
independently
cacm
september
1967
luccio
f
ca670909
jb
february
27
1978
3
06
pm
1535
5
1535
1535
5
1535
1535
5
1535
1781
5
1535
2579
5
1535
123
6
1535
196
6
1535
919
6
1535
990
6
1535
1007
6
1535
1046
6
1535
1131
6
1535
1139
6
1535
1140
6
1535
1149
6
1535
1198
6
1535
1215
6
1535
1223
6
1535
1265
6
1535
1303
6
1535
1323
6
1535
1358
6
1535
1366
6
1535
1421
6
1535
1460
6
1535
1462
6
1535
1463
6
1535
1467
6
1535
1468
6
1535
1477
6
1535
1491
6
1535
1496
6
1535
1531
6
1535
1535
6
1535
1535
6
1535
1565
6
1535
1601
6
1535
1602
6
1535
1613
6
1535
1614
6
1535
1626
6
1535
1641
6
1535
1787
6
1535
1788
6
1535
1807
6
1535
205
6
1535
224
6
1535
249
6
1535
288
6
1535
1947
6
1535
316
6
1535
381
6
1535
398
6
1535
11
6
1535
404
6
1535
410
6
1535
463
6
1535
464
6
1535
483
6
1535
3184
6
1535
3188
6
1535
584
6
1535
600
6
1535
680
6
1535
691
6
1535
763
6
1535
799
6
1535
</TEXT>
</DOC>
<DOC>
<DOCNO>1536</DOCNO>
<TEXT>
dynamic
computation
of
derivatives
it
is
shown
how
wengert
procedure
for
computation
of
derivatives
can
be
implemented
conveniently
by
use
of
compiler
generated
complex
addition
subtraction
and
linkage
to
complex
arithmetic
subroutines
evaluation
of
a
function
and
derivative
proceed
in
parallel
as
in
wengert
procedure
but
with
the
imaginary
parts
of
variables
declared
complex
bearing
the
values
of
the
derivatives
of
the
real
parts
this
technique
provides
a
simple
way
to
compute
the
derivatives
of
a
function
without
the
need
for
deriving
and
programming
the
evaluation
of
explicit
formulas
for
the
derivatives
cacm
september
1967
lesk
a
m
ca670908
jb
february
27
1978
3
11
pm
1028
4
1536
1216
4
1536
1278
4
1536
1347
4
1536
1396
4
1536
1536
4
1536
1029
5
1536
1536
5
1536
1536
5
1536
1536
5
1536
</TEXT>
</DOC>
<DOC>
<DOCNO>1537</DOCNO>
<TEXT>
prime
number
generator
1
algorithm
310
a1
cacm
september
1967
chartres
b
a
ca670907a
jb
february
27
1978
3
12
pm
1537
5
1537
1537
5
1537
1537
5
1537
2120
5
1537
2927
5
1537
1537
6
1537
1537
6
1537
1539
6
1537
1539
6
1537
1538
6
1537
1840
6
1537
1841
6
1537
377
6
1537
</TEXT>
</DOC>
<DOC>
<DOCNO>1538</DOCNO>
<TEXT>
prime
number
generator
2
algorithm
311
a1
cacm
september
1967
chartres
b
a
ca670907b
jb
march
23
1978
2
34
pm
1538
5
1538
1538
5
1538
1538
5
1538
2927
5
1538
1537
6
1538
1539
6
1538
1538
6
1538
1840
6
1538
1841
6
1538
</TEXT>
</DOC>
<DOC>
<DOCNO>1539</DOCNO>
<TEXT>
prime
number
generator
1
prime
number
generator
2
algorithm
35
a1
algorithm
310
a1
algorithm
311
a1
cacm
september
1967
chartres
b
a
ca670907c
jb
march
23
1978
2
37
pm
1539
5
1539
1539
5
1539
1539
5
1539
1841
5
1539
1967
5
1539
2120
5
1539
2927
5
1539
1537
6
1539
1537
6
1539
1539
6
1539
1539
6
1539
1539
6
1539
1539
6
1539
1538
6
1539
1840
6
1539
1841
6
1539
1841
6
1539
377
6
1539
377
6
1539
2120
6
1539
</TEXT>
</DOC>
<DOC>
<DOCNO>1540</DOCNO>
<TEXT>
an
algorithm
for
class
scheduling
with
section
preference
an
algorithm
for
assignment
of
students
to
classes
in
a
fixed
time
schedule
that
allows
students
to
give
a
preference
for
sections
within
courses
is
given
if
consistent
with
the
objective
of
balanced
sections
these
preferences
will
be
honored
the
algorithm
is
more
stochastic
than
monte
carlo
in
nature
results
are
given
that
compare
it
to
a
nonpreference
assignment
algorithm
cacm
september
1967
busam
v
a
ca670906
jb
february
27
1978
3
15
pm
1540
4
1540
2209
4
1540
1434
5
1540
1540
5
1540
1540
5
1540
1540
5
1540
2052
5
1540
2209
5
1540
1008
6
1540
1013
6
1540
1434
6
1540
1504
6
1540
1540
6
1540
1540
6
1540
</TEXT>
</DOC>
<DOC>
<DOCNO>1541</DOCNO>
<TEXT>
a
language
for
modeling
and
simulating
dynamic
systems
the
general
objective
of
this
language
is
to
facilitate
both
the
modeling
and
experimental
aspects
of
simulation
studies
the
ability
to
represent
systems
containing
highly
interactive
processes
is
an
essential
feature
the
nature
of
the
language
and
the
role
of
the
process
concept
is
presented
by
means
of
an
extended
example
cacm
september
1967
parente
r
j
krasnow
h
s
ca670905
jb
february
27
1978
3
18
pm
1541
4
1541
1541
4
1541
1565
4
1541
1781
4
1541
1824
4
1541
1846
4
1541
2060
4
1541
2218
4
1541
2252
4
1541
3112
4
1541
1358
5
1541
1380
5
1541
1541
5
1541
1541
5
1541
1541
5
1541
</TEXT>
</DOC>
<DOC>
<DOCNO>1542</DOCNO>
<TEXT>
a
microprogrammed
implementation
of
euler
on
ibm
system
360
model
30
an
experimental
processing
system
for
the
algorithmic
language
euler
has
been
implemented
in
microprogramming
on
an
ibm
system
360
model
30
using
a
second
read
only
storage
unit
the
system
consists
of
a
microprogrammed
compiler
and
a
microprogrammed
string
language
interpreter
and
of
an
i
o
control
program
written
in
360
machine
language
the
system
is
described
and
results
are
given
in
terms
of
microprogram
and
main
storage
space
required
and
compiler
and
interpreter
performance
obtained
the
role
of
microprogramming
is
stressed
which
opens
a
new
dimension
in
the
processing
of
interpretive
code
the
structure
and
content
of
a
higher
level
language
can
be
matched
by
an
appropriate
interpretive
language
which
can
be
executed
efficiently
by
microprograms
on
existing
computer
hardware
cacm
september
1967
weber
h
ca670904
jb
february
27
1978
3
44
pm
1542
4
1542
1542
4
1542
1683
4
1542
1693
4
1542
1781
4
1542
1787
4
1542
1836
4
1542
1945
4
1542
2060
4
1542
2061
4
1542
2082
4
1542
2091
4
1542
2152
4
1542
2179
4
1542
2340
4
1542
2356
4
1542
2546
4
1542
2603
4
1542
2698
4
1542
2708
4
1542
2824
4
1542
2982
4
1542
2986
4
1542
3045
4
1542
3093
4
1542
1491
5
1542
1542
5
1542
1542
5
1542
1542
5
1542
2202
5
1542
2527
5
1542
3198
5
1542
1542
6
1542
1542
6
1542
</TEXT>
</DOC>
<DOC>
<DOCNO>1543</DOCNO>
<TEXT>
computer
formulation
of
the
equations
of
motion
using
tensor
notation
a
means
is
described
for
extending
the
area
of
application
of
digital
computers
beyond
the
numerical
data
processing
stage
and
reducing
the
need
for
human
participation
in
the
formulation
of
certain
types
of
computer
problems
by
the
use
of
tensor
calculus
and
a
computer
language
designed
to
facilitate
symbolic
mathematical
computation
a
method
has
been
devised
whereby
a
digital
computer
can
be
used
to
do
non
numeric
work
that
is
symbolic
algebraic
manipulation
and
differentiation
to
illustrate
the
techniques
involved
a
digital
computer
has
been
used
to
derive
the
equations
of
motion
of
a
point
mass
in
a
general
orthogonal
curvilinear
coordinate
system
since
this
operation
involves
a
formulation
in
terms
of
first
and
second
order
differential
coefficients
it
provides
a
good
demonstration
of
a
computer
capability
to
do
non
numeric
work
and
to
assist
in
the
formulation
process
which
normally
precedes
the
numerical
data
processing
stage
moreover
this
particular
problem
serves
to
illustrate
the
advantages
of
the
mathematical
techniques
employed
with
the
program
prepared
for
this
purpose
the
computer
will
derive
the
equations
of
motion
in
any
coordinate
system
requested
by
the
user
results
are
presented
for
the
following
coordinate
systems
cylindrical
polar
spherical
polar
and
prolate
spheroidal
cacm
september
1967
howard
j
c
ca670903
jb
february
27
1978
3
58
pm
1543
4
1543
1543
4
1543
1664
4
1543
1664
4
1543
1345
5
1543
1543
5
1543
1543
5
1543
1543
5
1543
1616
5
1543
1664
5
1543
1345
6
1543
1543
6
1543
1616
6
1543
</TEXT>
</DOC>
<DOC>
<DOCNO>1544</DOCNO>
<TEXT>
tele
cupl
a
telephone
time
sharing
system
a
general
purpose
remote
access
computing
system
is
described
that
employs
twelve
key
keyboard
telephones
as
terminals
audio
output
is
provided
directly
to
the
telephone
terminals
but
the
system
will
normally
be
used
in
conjunction
with
remotely
located
high
speed
printing
devices
the
system
is
a
compatible
extension
of
an
existing
batch
processing
system
a
significant
element
of
the
system
is
a
scheme
for
transmitting
alphanumeric
information
by
single
strokes
on
a
numeric
keyboard
the
programmed
scanner
uses
context
to
eliminate
the
ambiguity
in
transmission
cacm
september
1967
conway
r
w
morgan
h
l
ca670902
jb
february
27
1978
4
04
pm
1179
4
1544
1288
4
1544
1544
4
1544
1646
4
1544
2111
4
1544
2534
4
1544
2556
4
1544
2650
4
1544
1544
5
1544
1544
5
1544
1544
5
1544
2054
5
1544
830
5
1544
1544
6
1544
</TEXT>
</DOC>
<DOC>
<DOCNO>1545</DOCNO>
<TEXT>
legal
safeguards
to
insure
privacy
in
a
computer
society
cacm
september
1967
westin
a
f
ca670901
jb
february
27
1978
4
06
pm
1545
5
1545
1545
5
1545
1545
5
1545
</TEXT>
</DOC>
<DOC>
<DOCNO>1546</DOCNO>
<TEXT>
toward
standards
for
handwritten
zero
and
oh
cacm
august
1967
bemer
r
w
ca670809
jb
february
27
1978
4
08
pm
1546
5
1546
1546
5
1546
1546
5
1546
</TEXT>
</DOC>
<DOC>
<DOCNO>1547</DOCNO>
<TEXT>
gamma
function
with
arbitrary
precision
algorithm
309
s14
cacm
august
1967
filho
a
m
schwachheim
g
ca670808
jb
february
27
1978
4
10
pm
1547
5
1547
1547
5
1547
1547
5
1547
2224
5
1547
1547
6
1547
</TEXT>
</DOC>
<DOC>
<DOCNO>1548</DOCNO>
<TEXT>
parsing
of
decision
tables
reduction
in
the
size
of
decision
tables
can
be
accomplished
by
several
techniques
the
techniques
considered
in
this
paper
are
on
the
parsing
of
decision
tables
with
regard
to
horizontal
and
vertical
data
structures
job
identity
hardware
and
job
priorities
and
context
relationships
such
parsing
rests
upon
some
conventions
for
the
linkage
of
decision
tables
cacm
august
1967
chapin
n
ca670807
jb
february
27
1978
4
14
pm
1548
4
1548
1548
4
1548
2220
4
1548
2726
4
1548
2726
4
1548
1488
5
1548
1489
5
1548
1548
5
1548
1548
5
1548
1548
5
1548
2220
5
1548
2492
5
1548
2518
5
1548
2598
5
1548
2616
5
1548
2726
5
1548
931
6
1548
1172
6
1548
1172
6
1548
1172
6
1548
1237
6
1548
1327
6
1548
1327
6
1548
1354
6
1548
1354
6
1548
1488
6
1548
1489
6
1548
1489
6
1548
1548
6
1548
1548
6
1548
1548
6
1548
1548
6
1548
1548
6
1548
1548
6
1548
1684
6
1548
1684
6
1548
250
6
1548
2220
6
1548
2220
6
1548
2221
6
1548
2263
6
1548
2263
6
1548
2453
6
1548
2517
6
1548
2691
6
1548
</TEXT>
</DOC>
<DOC>
<DOCNO>1549</DOCNO>
<TEXT>
an
efficient
machine
independent
procedure
for
garbage
collection
in
various
list
structures
a
method
for
returning
registers
to
the
free
list
is
an
essential
part
of
any
list
processing
system
in
this
paper
past
solutions
of
the
recovery
problem
are
reviewed
and
compared
a
new
algorithm
is
presented
which
offers
significant
advantages
of
speed
and
storage
utilization
the
routine
for
implementing
this
algorithm
can
be
written
in
the
list
language
with
which
it
is
to
be
used
thus
insuring
a
degree
of
machine
independence
finally
the
application
of
the
algorithm
to
a
number
of
different
list
structures
appearing
in
the
literature
is
indicated
cacm
august
1967
schorr
h
waite
w
m
ca670806
jb
february
27
1978
4
28
pm
1024
4
1549
1024
4
1549
1050
4
1549
1050
4
1549
1051
4
1549
1051
4
1549
1051
4
1549
1098
4
1549
1102
4
1549
1102
4
1549
1132
4
1549
1211
4
1549
1214
4
1549
1237
4
1549
1380
4
1549
1388
4
1549
1390
4
1549
1393
4
1549
1393
4
1549
1485
4
1549
1486
4
1549
1487
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1549
4
1549
1564
4
1549
1570
4
1549
1706
4
1549
1826
4
1549
1878
4
1549
1878
4
1549
1906
4
1549
1946
4
1549
1957
4
1549
378
4
1549
2023
4
1549
2060
4
1549
2155
4
1549
2168
4
1549
2168
4
1549
2453
4
1549
2719
4
1549
2723
4
1549
2723
4
1549
2723
4
1549
2838
4
1549
2842
4
1549
2855
4
1549
2857
4
1549
2879
4
1549
2882
4
1549
2902
4
1549
3077
4
1549
3080
4
1549
3106
4
1549
3112
4
1549
3112
4
1549
627
4
1549
627
4
1549
731
4
1549
793
4
1549
106
4
1549
106
5
1549
1051
5
1549
210
5
1549
1549
5
1549
1549
5
1549
1549
5
1549
1869
5
1549
2513
5
1549
2665
5
1549
2723
5
1549
2855
5
1549
406
5
1549
3106
5
1549
627
5
1549
731
5
1549
753
5
1549
1383
6
1549
1549
6
1549
1549
6
1549
1549
6
1549
1549
6
1549
1549
6
1549
1549
6
1549
1570
6
1549
1749
6
1549
1826
6
1549
1826
6
1549
210
6
1549
210
6
1549
210
6
1549
1972
6
1549
1972
6
1549
1972
6
1549
2513
6
1549
2651
6
1549
2665
6
1549
2766
6
1549
2766
6
1549
2833
6
1549
2855
6
1549
2954
6
1549
2998
6
1549
2998
6
1549
627
6
1549
731
6
1549
</TEXT>
</DOC>
<DOC>
<DOCNO>1550</DOCNO>
<TEXT>
a
comparison
of
batch
processing
and
instant
turnaround
a
study
of
the
programming
efforts
of
students
in
an
introductory
programming
course
is
presented
and
the
effects
of
having
instant
turnaround
a
few
minutes
as
opposed
to
conventional
batch
processing
with
turnaround
times
of
a
few
hours
are
examined
among
the
items
compared
are
the
number
of
computer
runs
per
trip
to
the
computation
center
program
preparation
time
keypunching
time
debugging
time
number
of
runs
and
elapsed
time
from
the
first
run
to
the
last
run
on
each
problem
even
though
the
results
are
influenced
by
the
fact
that
bonus
points
were
given
for
completion
of
a
programming
problem
in
less
than
a
specified
number
of
runs
there
is
evidence
to
support
instant
over
batch
cacm
august
1967
smith
l
b
ca670805
jb
february
27
1978
4
32
pm
1550
4
1550
1550
4
1550
1304
5
1550
1472
5
1550
1550
5
1550
1550
5
1550
1550
5
1550
1908
5
1550
1550
6
1550
1605
6
1550
</TEXT>
</DOC>
<DOC>
<DOCNO>1551</DOCNO>
<TEXT>
on
compiling
algorithms
for
arithmetic
expressions
this
paper
deals
with
algorithms
concerning
arithmetic
expressions
used
in
a
fortran
iv
compiler
for
a
hitac
5020
computer
having
n
accumulators
the
algorithms
generate
an
object
code
which
minimizes
the
frequency
of
storing
and
recovering
the
partial
results
of
the
arithmetic
expressions
in
cases
where
there
are
several
accumulators
cacm
august
1967
nakata
i
ca670804
jb
february
27
1978
4
35
pm
1551
4
1551
1945
4
1551
1122
5
1551
1551
5
1551
1551
5
1551
1551
5
1551
1807
5
1551
1934
5
1551
2175
5
1551
1223
6
1551
1248
6
1551
1551
6
1551
1551
6
1551
1551
6
1551
1613
6
1551
1886
6
1551
1947
6
1551
</TEXT>
</DOC>
<DOC>
<DOCNO>1552</DOCNO>
<TEXT>
the
aed
free
storage
package
the
most
fundamental
underlying
problem
in
sophisticated
software
systems
involving
elaborate
changing
data
structure
is
dynamic
storage
allocation
for
flexible
problem
modeling
the
free
storage
package
of
the
aed
1
compiler
systems
allows
blocks
of
available
storage
to
be
obtained
and
returned
for
reuse
the
total
available
space
is
partitioned
into
a
hierarchy
of
free
storage
zones
each
of
which
has
its
own
characteristics
blocks
may
be
of
any
size
and
special
provisions
allow
efficient
handling
of
selected
sizes
control
of
shattering
and
garbage
collection
and
sharing
of
physical
space
between
zones
the
routines
of
the
package
perform
high
level
functions
automatically
but
also
allow
access
and
control
of
fine
internal
details
as
well
cacm
august
1967
ross
d
t
ca670803
jb
february
27
1978
4
40
pm
1051
4
1552
1380
4
1552
1389
4
1552
1552
4
1552
1552
4
1552
1552
4
1552
1665
4
1552
1693
4
1552
1781
4
1552
1854
4
1552
1860
4
1552
1860
4
1552
2060
4
1552
2155
4
1552
2162
4
1552
2435
4
1552
2596
4
1552
2768
4
1552
2845
4
1552
2902
4
1552
2955
4
1552
557
4
1552
1184
5
1552
1421
5
1552
1552
5
1552
1552
5
1552
1552
5
1552
378
5
1552
2704
5
1552
2902
5
1552
1051
6
1552
1062
6
1552
1184
6
1552
1211
6
1552
1247
6
1552
1552
6
1552
1552
6
1552
1749
6
1552
1879
6
1552
2356
6
1552
2379
6
1552
2435
6
1552
2596
6
1552
2673
6
1552
2734
6
1552
2747
6
1552
2768
6
1552
</TEXT>
</DOC>
<DOC>
<DOCNO>1553</DOCNO>
<TEXT>
contextual
understanding
by
computers
a
further
development
of
a
computer
program
eliza
capable
of
conversing
in
natural
language
is
discussed
the
importance
of
context
to
both
human
and
machine
understanding
is
stressed
it
is
argued
that
the
adequacy
of
the
level
of
understanding
achieved
in
a
particular
conversation
depends
on
the
purpose
of
that
conversation
and
that
absolute
understanding
on
the
part
of
either
humans
or
machines
is
impossible
cacm
august
1967
weizenbaum
j
ca670802
jb
february
27
19784
44
pm
1400
4
1553
1553
4
1553
1945
4
1553
2127
4
1553
2396
4
1553
2730
4
1553
1487
5
1553
1553
5
1553
1553
5
1553
1553
5
1553
1856
5
1553
1225
6
1553
1324
6
1553
1553
6
1553
</TEXT>
</DOC>
<DOC>
<DOCNO>1554</DOCNO>
<TEXT>
a
computer
technique
for
displaying
n
dimensional
hyperobjects
a
digital
computer
and
automatic
plotter
have
been
used
to
generate
three
dimensional
stereoscopic
movies
of
the
three
dimensional
parallel
and
perspective
projections
of
four
dimensional
hyperobjects
rotating
in
four
dimensional
space
the
observed
projections
and
their
motions
were
a
direct
extension
of
three
dimensional
experience
but
no
profound
feeling
or
insight
into
the
fourth
spatial
dimension
was
obtained
the
technique
can
be
generalized
to
n
dimensions
and
applied
to
any
n
dimensional
hyperobject
or
hypersurface
cacm
august
1967
noll
a
m
ca670801
jb
february
27
1978
4
48
pm
1554
5
1554
1554
5
1554
1554
5
1554
2211
5
1554
1554
6
1554
1741
6
1554
</TEXT>
</DOC>
<DOC>
<DOCNO>1555</DOCNO>
<TEXT>
symmetric
polynomials
algorithm
305
c1
cacm
july
1967
bratley
p
mckay
j
k
s
ca670711a
jb
february
28
1978
8
26
am
1555
5
1555
1555
5
1555
1555
5
1555
</TEXT>
</DOC>
<DOC>
<DOCNO>1556</DOCNO>
<TEXT>
permutations
with
repetitions
algorithm
306
g6
cacm
july
1967
bratley
p
ca670711b
jb
march
23
1978
3
14
pm
1556
5
1556
1556
5
1556
1556
5
1556
</TEXT>
</DOC>
<DOC>
<DOCNO>1557</DOCNO>
<TEXT>
symmetric
group
characters
algorithm
307
a1
cacm
july
1967
mckay
j
k
s
ca670711c
jb
march
23
1978
3
15
pm
1557
5
1557
1557
5
1557
1557
5
1557
</TEXT>
</DOC>
<DOC>
<DOCNO>1558</DOCNO>
<TEXT>
generation
of
permutations
in
pseudo
lexicographic
order
algorithm
g6
cacm
july
1967
ord
smith
r
j
ca670711d
jb
march
23
1978
3
16
pm
1558
5
1558
1558
5
1558
1558
5
1558
2044
5
1558
996
6
1558
1558
6
1558
2230
6
1558
521
6
1558
</TEXT>
</DOC>
<DOC>
<DOCNO>1559</DOCNO>
<TEXT>
permutation
generator
permutation
in
lexicographical
order
permute
generation
of
permutations
in
lexicographical
order
algorithm
87
g6
algorithm
102
g6
algorithm
130
g6
algorithm
202
g6
cacm
july
1967
ord
smith
r
j
ca670711e
jb
march
23
1978
3
19
pm
1559
5
1559
1559
5
1559
1559
5
1559
1567
5
1559
1948
5
1559
1391
6
1559
1559
6
1559
1559
6
1559
</TEXT>
</DOC>
<DOC>
<DOCNO>1560</DOCNO>
<TEXT>
transport
transportation
problem
algorithm
258
h
algorithm
293
h
cacm
july
1967
sims
l
s
ca670711f
jb
march
23
1978
3
20
pm
1560
5
1560
1560
5
1560
1560
5
1560
</TEXT>
</DOC>
<DOC>
<DOCNO>1561</DOCNO>
<TEXT>
the
mutual
primal
dual
method
algorithm
285
h
cacm
july
1967
spath
h
ca670711g
jb
march
23
1978
3
21
pm
1561
5
1561
1561
5
1561
1561
5
1561
1987
5
1561
1561
6
1561
1581
6
1561
1779
6
1561
1944
6
1561
714
6
1561
</TEXT>
</DOC>
<DOC>
<DOCNO>1562</DOCNO>
<TEXT>
airy
function
algorithm
301
s20
cacm
july
1967
pitteway
m
l
v
ca670711h
jb
march
23
1978
3
22
pm
1562
5
1562
1562
5
1562
1562
5
1562
</TEXT>
</DOC>
<DOC>
<DOCNO>1563</DOCNO>
<TEXT>
a
method
for
finding
hamilton
paths
and
knight
tours
the
use
of
warnsdorff
rule
for
finding
a
knight
tour
is
generalized
and
applied
to
the
problem
of
finding
a
hamilton
path
in
a
graph
a
graph
theoretic
justification
for
the
method
is
given
cacm
july
1967
pohl
i
ca670710
jb
february
28
1978
8
28
am
1563
5
1563
1563
5
1563
1563
5
1563
</TEXT>
</DOC>
<DOC>
<DOCNO>1564</DOCNO>
<TEXT>
description
of
basic
algorithm
in
detab
65
preprocessor
the
basic
algorithm
for
the
conversion
of
decision
tables
into
cobol
code
is
contained
in
the
generator
portion
of
the
detab
65
preprocessor
the
generator
analyzes
a
decision
table
and
produces
simple
cobol
conditional
statements
core
storage
is
saved
by
using
queueing
techniques
and
extensive
indexing
and
also
by
outputting
the
code
as
it
is
generated
a
line
at
a
time
the
only
optimization
attempted
is
the
elimination
of
obviously
unnecessary
tests
on
certain
conditions
in
the
decision
table
since
the
preprocessor
and
this
language
associated
with
it
were
developed
for
cobol
users
the
preprocessor
was
written
in
a
modular
form
in
required
cobol
61
cacm
july
1967
callahan
m
d
chapman
a
e
ca670709
jb
february
28
1978
8
33
am
1237
4
1564
1549
4
1564
1564
4
1564
2453
4
1564
1564
5
1564
1564
5
1564
1564
5
1564
1684
5
1564
753
5
1564
1354
6
1564
1564
6
1564
</TEXT>
</DOC>
<DOC>
<DOCNO>1565</DOCNO>
<TEXT>
a
language
independent
macro
processor
a
macro
processor
is
described
which
can
be
used
with
almost
any
source
language
it
provides
all
features
normally
associated
with
a
macro
facility
plus
the
ability
to
make
arbitrary
transformations
of
the
argument
strings
the
program
is
used
at
the
basser
computing
department
university
of
sydney
sydney
australia
to
process
text
for
eight
different
compilers
cacm
july
1967
waite
w
m
ca670708
jb
february
28
1978
8
35
am
1358
4
1565
1530
4
1565
1531
4
1565
1541
4
1565
1565
4
1565
1565
4
1565
1565
4
1565
1565
4
1565
1703
4
1565
1781
4
1565
1781
4
1565
1788
4
1565
1824
4
1565
1945
4
1565
2036
4
1565
2252
4
1565
1162
5
1565
205
5
1565
1358
5
1565
1455
5
1565
1530
5
1565
1565
5
1565
1565
5
1565
1565
5
1565
1781
5
1565
1852
5
1565
2034
5
1565
123
6
1565
196
6
1565
919
6
1565
984
6
1565
990
6
1565
1007
6
1565
1046
6
1565
1131
6
1565
1139
6
1565
1140
6
1565
1149
6
1565
1198
6
1565
1215
6
1565
1223
6
1565
1231
6
1565
1265
6
1565
1303
6
1565
1323
6
1565
1358
6
1565
1366
6
1565
1421
6
1565
1455
6
1565
1460
6
1565
1462
6
1565
1463
6
1565
1467
6
1565
1468
6
1565
1477
6
1565
1491
6
1565
1496
6
1565
1531
6
1565
1535
6
1565
1565
6
1565
1565
6
1565
1565
6
1565
1565
6
1565
1601
6
1565
1602
6
1565
1613
6
1565
1614
6
1565
1626
6
1565
1641
6
1565
1787
6
1565
1788
6
1565
205
6
1565
224
6
1565
1852
6
1565
249
6
1565
288
6
1565
1926
6
1565
1947
6
1565
316
6
1565
381
6
1565
398
6
1565
11
6
1565
404
6
1565
410
6
1565
463
6
1565
464
6
1565
483
6
1565
3184
6
1565
3188
6
1565
584
6
1565
600
6
1565
680
6
1565
691
6
1565
763
6
1565
799
6
1565
</TEXT>
</DOC>
<DOC>
<DOCNO>1566</DOCNO>
<TEXT>
optimal
starting
values
for
newton
raphson
calculation
of
sqrt
x
the
problem
of
obtaining
starting
values
for
the
newton
raphson
calculation
of
sqrt
x
on
a
digital
computer
is
considered
it
is
shown
that
the
conventionally
used
best
uniform
approximations
to
sqrt
x
do
not
provide
optimal
starting
values
the
problem
of
obtaining
optimal
starting
values
the
problem
of
obtaining
optimal
starting
values
is
stated
and
several
basic
results
are
proved
a
table
of
optimal
polynomial
starting
values
is
given
cacm
july
1967
moursund
d
g
ca670707
jb
february
28
1978
8
53
am
1566
4
1566
1440
5
1566
1566
5
1566
1566
5
1566
1566
5
1566
1932
5
1566
2094
5
1566
962
6
1566
1566
6
1566
1566
6
1566
</TEXT>
</DOC>
<DOC>
<DOCNO>1567</DOCNO>
<TEXT>
on
the
representation
of
symmetric
polynomials
relations
are
given
between
certain
symmetric
polynomials
in
the
light
of
the
theory
of
the
symmetric
group
such
an
approach
unifies
earlier
work
and
lends
insight
to
previously
published
work
by
aaron
booker
a
generalization
of
graeffe
root
squaring
technique
for
the
determination
of
the
roots
of
a
polynomial
is
suggested
cacm
july
1967
mckay
j
k
s
ca670706
jb
february
28
1978
8
56
am
1567
4
1567
1948
4
1567
1559
5
1567
1567
5
1567
1567
5
1567
1567
5
1567
</TEXT>
</DOC>
<DOC>
<DOCNO>1568</DOCNO>
<TEXT>
plotting
a
function
of
three
independent
variables
a
method
is
developed
for
constructing
an
approximate
plot
of
a
function
of
three
independent
variables
the
plot
is
similar
to
a
conventional
contour
map
except
that
there
are
three
scales
to
represent
the
independent
variables
scale
values
of
the
three
independent
variables
are
added
vectorially
and
the
value
of
the
function
is
then
read
from
the
values
associated
with
nearby
contours
cacm
july
1967
stineman
r
w
ca670705
jb
february
28
1978
8
59
am
1568
5
1568
1568
5
1568
1568
5
1568
</TEXT>
</DOC>
<DOC>
<DOCNO>1569</DOCNO>
<TEXT>
implementing
phrase
structure
productions
in
pl
i
a
method
is
described
for
implementing
the
productions
of
a
context
free
phrase
structure
grammar
in
a
pl
i
procedure
whose
structure
and
statements
parallel
the
structure
and
notation
of
the
grammar
cacm
july
1967
irwin
l
ca670704
jb
february
28
1978
9
01
am
1569
5
1569
1569
5
1569
1569
5
1569
</TEXT>
</DOC>
<DOC>
<DOCNO>1570</DOCNO>
<TEXT>
string
processing
techniques
the
internal
organization
of
string
processing
systems
is
discussed
six
techniques
for
data
structures
are
presented
and
evaluated
on
the
basis
of
1
creation
of
strings
2
examination
of
strings
and
3
alteration
of
strings
speed
of
operation
storage
requirements
effect
on
paging
and
programmer
convenience
are
also
considered
one
of
the
techniques
single
word
linked
blocks
is
used
in
an
example
demonstrating
an
implementation
of
a
snobol
string
processing
language
on
an
ibm
system
360
cacm
july
1967
madnick
s
e
ca670703
jb
february
28
1978
9
04
am
1024
4
1570
1051
4
1570
1098
4
1570
1214
4
1570
1380
4
1570
1388
4
1570
1393
4
1570
1485
4
1570
1487
4
1570
1549
4
1570
1570
4
1570
1570
4
1570
1878
4
1570
1945
4
1570
1946
4
1570
1957
4
1570
2168
4
1570
2314
4
1570
2723
4
1570
2857
4
1570
3112
4
1570
1098
5
1570
1570
5
1570
1570
5
1570
1570
5
1570
1869
5
1570
731
5
1570
1549
6
1570
1570
6
1570
</TEXT>
</DOC>
<DOC>
<DOCNO>1571</DOCNO>
<TEXT>
a
user
oriented
time
shared
online
system
an
existing
system
and
planned
additions
within
the
data
processing
laboratory
of
the
brain
research
institute
at
ucla
is
described
the
system
represents
an
attempt
to
provide
research
workers
of
the
institute
with
the
ability
to
interact
directly
with
a
highly
sophisticated
digital
computing
complex
in
the
most
direct
and
simple
fashion
possible
it
is
anticipated
that
with
the
accumulation
of
experience
using
the
present
system
significant
advances
will
be
possible
in
the
system
design
through
determination
of
interface
parameters
between
the
biological
scientist
and
the
digital
computer
cacm
july
1967
betyar
l
ca670702
jb
february
28
1978
9
08
am
1571
5
1571
1571
5
1571
1571
5
1571
</TEXT>
</DOC>
<DOC>
<DOCNO>1572</DOCNO>
<TEXT>
the
simulation
of
time
sharing
systems
the
development
of
new
large
scale
time
sharing
systems
has
raised
a
number
of
problems
for
computation
center
management
not
only
is
it
necessary
to
develop
an
appropriate
hardware
configuration
for
these
systems
but
appropriate
software
adjustments
must
be
made
unfortunately
these
systems
often
do
not
respond
to
changes
in
the
manner
that
intuition
would
suggest
and
there
are
few
guides
to
assist
in
the
analysis
of
performance
characteristics
the
development
of
a
comprehensive
simulation
model
to
assist
in
the
investigation
of
these
questions
is
described
in
this
paper
the
resulting
model
has
a
general
purpose
design
and
can
be
used
to
study
a
variety
of
time
sharing
systems
it
can
also
be
used
to
assist
in
the
design
and
development
of
new
time
sharing
algorithms
or
techniques
for
the
sake
of
efficiency
and
greater
applicability
the
model
was
implemented
in
a
limited
fortran
subset
that
is
compatible
with
most
fortran
iv
compilers
the
use
of
the
simulation
is
demonstrated
by
a
study
of
the
ibm
360
67
time
sharing
system
cacm
july
1967
nielsen
n
r
ca670701
jb
february
28
1978
9
15
am
1572
5
1572
1572
5
1572
1572
5
1572
1805
5
1572
1846
5
1572
1892
5
1572
2188
5
1572
2218
5
1572
2317
5
1572
1198
6
1572
1380
6
1572
1380
6
1572
1424
6
1572
1484
6
1572
1518
6
1572
1526
6
1572
1572
6
1572
1572
6
1572
1572
6
1572
1572
6
1572
1572
6
1572
1572
6
1572
1693
6
1572
1728
6
1572
1728
6
1572
1748
6
1572
1749
6
1572
1751
6
1572
1751
6
1572
1753
6
1572
1752
6
1572
1752
6
1572
1781
6
1572
1810
6
1572
1879
6
1572
2095
6
1572
2126
6
1572
2148
6
1572
576
6
1572
</TEXT>
</DOC>
<DOC>
<DOCNO>1573</DOCNO>
<TEXT>
an
adaptive
quadrature
procedure
with
random
panel
sizes
algorithm
d1
cacm
june
1967
gallaher
l
j
ca670607a
jb
february
28
1978
9
17
am
1573
5
1573
1573
5
1573
1573
5
1573
2093
5
1573
2550
5
1573
834
6
1573
872
6
1573
1092
6
1573
1298
6
1573
1573
6
1573
1573
6
1573
2074
6
1573
429
6
1573
429
6
1573
</TEXT>
</DOC>
<DOC>
<DOCNO>1574</DOCNO>
<TEXT>
normal
curve
integral
algorithm
304
s15
cacm
june
1967
hill
i
d
joyce
s
a
ca670607b
jb
march
23
1978
3
27
pm
1574
5
1574
1574
5
1574
1574
5
1574
</TEXT>
</DOC>
<DOC>
<DOCNO>1575</DOCNO>
<TEXT>
incomplete
beta
ratio
algorithm
179
s14
cacm
june
1967
pike
m
c
hill
i
d
ca670607c
jb
march
23
1978
3
29
pm
1575
5
1575
1575
5
1575
1575
5
1575
</TEXT>
</DOC>
<DOC>
<DOCNO>1576</DOCNO>
<TEXT>
eigenvalues
of
a
real
symmetric
matrix
by
the
qr
method
algorithm
253
f2
cacm
june
1967
welsch
j
h
ca670607d
jb
march
23
1978
3
30
pm
1576
5
1576
1576
5
1576
1576
5
1576
</TEXT>
</DOC>
<DOC>
<DOCNO>1577</DOCNO>
<TEXT>
eigenvalues
and
eigenvectors
of
a
real
symmetric
matrix
by
the
qr
method
algorithm
254
f2
cacm
june
1967
welsch
j
h
ca670607e
jb
march
23
1978
3
31
pm
1577
5
1577
1577
5
1577
1577
5
1577
</TEXT>
</DOC>
<DOC>
<DOCNO>1578</DOCNO>
<TEXT>
generalized
least
squares
fit
by
orthogonal
polynomials
algorithm
296
e2
cacm
june
1967
makinson
g
j
ca670607f
jb
march
23
1978
3
33
pm
1578
5
1578
1578
5
1578
1578
5
1578
</TEXT>
</DOC>
<DOC>
<DOCNO>1579</DOCNO>
<TEXT>
real
error
function
erf
x
algorithm
123
s15
cacm
june
1967
hill
i
d
joyce
s
a
ca670607g
jb
march
23
1978
3
34
pm
1579
5
1579
1579
5
1579
1579
5
1579
</TEXT>
</DOC>
<DOC>
<DOCNO>1580</DOCNO>
<TEXT>
error
function
large
x
algorithm
180
s15
cacm
june
1967
hill
i
d
joyce
s
a
ca670607h
jb
march
23
1978
3
35
pm
1580
5
1580
1580
5
1580
1580
5
1580
2334
5
1580
1580
6
1580
</TEXT>
</DOC>
<DOC>
<DOCNO>1581</DOCNO>
<TEXT>
complementary
error
function
large
x
algorithm
181
s15
cacm
june
1967
hill
i
d
joyce
s
a
ca670607i
jb
march
23
1978
3
37
pm
1581
5
1581
1581
5
1581
1581
5
1581
1987
5
1581
2427
5
1581
1561
6
1581
1581
6
1581
1581
6
1581
1636
6
1581
1779
6
1581
1944
6
1581
714
6
1581
</TEXT>
</DOC>
<DOC>
<DOCNO>1582</DOCNO>
<TEXT>
gauss
algorithm
209
s15
cacm
june
1967
hill
i
d
joyce
s
a
ca670607j
jb
march
23
1978
3
38
pm
1582
5
1582
1582
5
1582
1582
5
1582
</TEXT>
</DOC>
<DOC>
<DOCNO>1583</DOCNO>
<TEXT>
normal
distribution
function
algorithm
226
s15
cacm
june
1967
hill
i
d
joyce
s
a
ca670607k
jb
march
23
1978
3
39
pm
1583
4
1583
1583
4
1583
1583
4
1583
1583
4
1583
967
5
1583
1126
5
1583
1583
5
1583
1583
5
1583
1583
5
1583
707
5
1583
831
5
1583
</TEXT>
</DOC>
<DOC>
<DOCNO>1584</DOCNO>
<TEXT>
procedure
for
the
normal
distribution
functions
algorithm
272
s15
cacm
june
1967
hill
i
d
joyce
s
a
ca670607l
jb
march
23
1978
3
40
pm
1584
5
1584
1584
5
1584
1584
5
1584
</TEXT>
</DOC>
<DOC>
<DOCNO>1585</DOCNO>
<TEXT>
normal
curve
integral
algorithm
304
s15
cacm
june
1967
hill
i
d
joyce
s
a
ca670607m
jb
march
23
1978
3
41
pm
1585
5
1585
1585
5
1585
1585
5
1585
1714
5
1585
1585
6
1585
</TEXT>
</DOC>
<DOC>
<DOCNO>1586</DOCNO>
<TEXT>
a
generalized
bairstow
algorithm
the
bairstow
algorithm
is
generalized
to
the
case
of
a
polynomial
which
is
itself
a
linear
combination
of
polynomials
satisfying
a
three
term
recursion
convergence
properties
of
the
method
are
derived
cacm
june
1967
golub
g
h
robertson
t
n
ca670606
jb
february
28
1978
9
21
am
1586
5
1586
1586
5
1586
1586
5
1586
</TEXT>
</DOC>
<DOC>
<DOCNO>1587</DOCNO>
<TEXT>
storage
allocation
in
a
certain
iterative
process
a
method
of
core
storage
allocation
in
a
certain
iterative
process
is
described
and
estimates
of
the
machine
time
required
are
given
the
method
is
applicable
to
iterative
processes
in
which
input
data
items
once
chosen
are
never
again
needed
in
this
method
the
input
data
is
continuously
relocated
and
the
space
made
available
apportioned
to
the
output
tables
when
an
overflow
occurs
some
important
special
cases
are
considered
in
which
considerable
simplification
occurs
cacm
june
1967
abramowich
j
ca670605
jb
february
28
1978
9
25
am
1587
5
1587
1587
5
1587
1587
5
1587
</TEXT>
</DOC>
<DOC>
<DOCNO>1588</DOCNO>
<TEXT>
pl
i
list
processing
the
concepts
of
list
processing
have
been
introduced
into
the
pl
i
language
with
these
new
facilities
it
is
possible
to
write
pl
i
procedures
that
operate
on
simple
and
complex
data
list
organizations
most
list
processing
languages
have
suffered
from
their
inability
to
deal
directly
with
complex
data
structures
and
or
from
their
inability
to
perform
the
complete
range
of
programming
language
operations
upon
the
data
list
structures
these
two
problems
have
been
eliminated
in
the
list
processing
facilities
of
pl
i
the
basic
concepts
of
list
processing
and
the
philosophy
of
the
pl
i
language
extensions
are
discussed
in
addition
several
detailed
list
processing
examples
are
provided
cacm
june
1967
lawson
jr
h
w
ca670604
jb
february
28
1978
9
30
am
1588
5
1588
1588
5
1588
1588
5
1588
</TEXT>
</DOC>
<DOC>
<DOCNO>1589</DOCNO>
<TEXT>
dialog
a
conversational
programming
system
with
a
graphical
orientation
dialog
is
an
algebraic
language
for
online
use
with
a
graphical
input
output
console
device
it
is
a
computational
aid
for
the
casual
user
which
provides
basic
facilities
for
graphical
and
numeric
input
and
display
online
and
off
line
program
preparation
and
storage
and
hard
copy
presentation
of
results
use
of
the
system
requires
a
minimum
of
experience
or
instruction
since
the
growth
of
an
overlaying
system
control
language
has
been
prevented
and
there
are
no
processor
oriented
statements
like
variable
type
or
dimension
declarations
moreover
in
the
online
situation
the
processor
interacts
with
the
graphical
keyboard
on
a
character
by
character
basis
so
as
to
restrict
the
programmer
choice
of
input
symbols
to
those
which
are
syntactically
correct
dialog
has
been
in
daily
operation
at
the
iit
research
institute
since
february
1966
cacm
june
1967
cameron
s
h
ewing
d
liveright
m
ca670603
jb
february
28
1978
9
36
am
1589
5
1589
1589
5
1589
1589
5
1589
1978
5
1589
1307
6
1589
1589
6
1589
1813
6
1589
</TEXT>
</DOC>
<DOC>
<DOCNO>1590</DOCNO>
<TEXT>
pitch
period
determination
of
speech
sounds
a
computer
procedure
which
determines
pitch
periods
by
the
recognition
of
the
peak
structure
of
the
speech
waveform
is
described
speech
sounds
were
sampled
by
a
microphone
and
an
analog
to
digital
converter
attached
to
an
interconnected
ibm
7090
pdp
1
system
these
utterances
were
recorded
at
the
normal
noise
level
of
the
computer
room
but
were
not
band
compressed
or
phase
distorted
in
any
manner
a
sequence
of
operations
defined
on
the
speech
wave
selects
a
list
of
points
along
the
waveform
as
candidates
for
pitch
markers
these
markers
are
validated
by
an
error
detection
and
correction
procedurebout
95
percent
of
the
pitch
periods
were
recognized
correctly
within
1
to
2
times
real
time
on
the
ibm
7090
cacm
june
1967
reddy
d
r
ca670602
jb
february
28
1978
9
42
am
1590
5
1590
1590
5
1590
1590
5
1590
</TEXT>
</DOC>
<DOC>
<DOCNO>1591</DOCNO>
<TEXT>
a
model
for
a
multifunctional
teaching
system
a
teaching
system
model
that
was
incorporated
into
an
operating
system
of
a
large
computer
is
described
the
model
transferred
control
to
the
operating
system
to
execute
functions
other
than
teaching
and
then
recovered
control
in
order
to
resume
teaching
the
teaching
system
abac
ii
was
written
to
run
under
the
operating
system
ibsys
for
the
ibm
7044
graphic
system
because
the
teaching
system
automatically
terminated
and
rescheduled
itself
a
student
studying
a
course
presented
at
a
cathode
ray
display
terminal
could
switch
readily
between
student
mode
and
programmer
mode
during
the
latter
the
full
resources
of
the
operating
system
language
processors
compilers
library
and
user
programs
were
at
his
disposal
he
could
for
example
write
assemble
debug
and
execute
at
the
terminal
a
program
written
in
any
language
processed
by
the
operating
system
a
course
could
therefore
include
text
material
interleaved
with
programming
problems
which
the
student
could
solve
without
leaving
the
terminal
exercises
in
simulation
and
gaming
could
also
be
provided
the
implications
of
a
teaching
system
with
this
degree
of
flexibility
for
industrial
and
executive
training
as
well
as
academic
education
are
discussed
in
addition
the
advantages
of
this
type
of
system
for
computer
programming
and
operation
are
also
considered
cacm
june
1967
engvold
k
j
hughes
j
l
ca670601
jb
february
28
1978
10
24
am
1591
5
1591
1591
5
1591
1591
5
1591
1680
5
1591
1591
6
1591
</TEXT>
</DOC>
<DOC>
<DOCNO>1592</DOCNO>
<TEXT>
string
similarity
and
misspellings
the
problem
of
programming
a
computer
to
determine
whether
or
not
a
string
of
characters
is
a
misspelling
of
a
given
word
was
considered
a
numberof
algorithms
were
evaluated
some
proposed
by
other
writers
some
by
the
author
these
techniques
were
tested
on
a
collection
of
misspellings
made
by
students
at
various
grade
levels
while
many
of
the
methods
were
clearly
unsatisfactory
some
gave
as
few
as
2
1
percent
incorrect
determinations
cacm
june
1967
alberga
c
n
ca670510
jb
february
28
1978
10
28
am
1112
4
1592
1592
4
1592
1592
4
1592
1592
4
1592
2111
4
1592
2111
4
1592
2339
4
1592
2339
4
1592
440
4
1592
982
5
1592
1112
5
1592
1592
5
1592
1592
5
1592
1592
5
1592
2111
5
1592
2339
5
1592
619
5
1592
830
6
1592
1112
6
1592
1112
6
1592
1592
6
1592
1592
6
1592
440
6
1592
619
6
1592
619
6
1592
</TEXT>
</DOC>
<DOC>
<DOCNO>1593</DOCNO>
<TEXT>
a
simple
technique
for
digital
division
a
simple
and
economical
method
for
digital
division
is
described
the
method
is
suitable
for
divisors
whose
leading
character
is
either
radix
less
one
or
is
unity
with
the
next
character
equal
to
zero
also
the
method
is
direct
and
needs
only
half
the
number
of
arithmetic
operations
needed
by
a
variant
of
the
harvard
iterative
method
described
by
gilman
which
is
suitable
for
similar
divisors
cacm
june
1967
nandi
s
k
krishnamurthy
e
v
ca670509
jb
february
28
1978
10
30
am
214
4
1593
1497
4
1593
1593
4
1593
1593
4
1593
1975
4
1593
1292
5
1593
1497
5
1593
1593
5
1593
1593
5
1593
1593
5
1593
91
5
1593
107
6
1593
1026
6
1593
1292
6
1593
1593
6
1593
</TEXT>
</DOC>
<DOC>
<DOCNO>1594</DOCNO>
<TEXT>
an
algorithm
for
generating
permutations
an
algorithm
is
described
which
under
repeated
application
generates
all
permutations
of
k
elements
only
the
previously
generated
permutation
the
constant
k
and
a
temporary
index
are
needed
starting
with
a
particular
ordering
of
k
elements
abcd
repeated
application
of
the
algorithm
will
generate
k
1
additional
permutations
by
k
1
successive
rotations
from
the
initial
circular
ordering
of
k
objects
another
circular
ordering
can
be
obtained
by
rotating
the
k
1
lowest
elements
for
each
new
k
1
circular
ordering
another
k
2
can
be
obtained
by
rotating
the
k
2
lowest
elements
by
continuing
in
this
manner
applications
of
the
algorithm
will
generate
all
k
1
circular
orderings
or
since
each
circular
ordering
yields
k
permutations
the
algorithm
generates
all
k
permutations
cacm
may
1967
langdon
jr
g
g
ca670508
jb
february
28
197810
35
am
1594
5
1594
1594
5
1594
1594
5
1594
2087
5
1594
2189
5
1594
3188
5
1594
1594
6
1594
1594
6
1594
1594
6
1594
2087
6
1594
3191
6
1594
521
6
1594
612
6
1594
</TEXT>
</DOC>
<DOC>
<DOCNO>1595</DOCNO>
<TEXT>
on
the
computer
enumeration
of
finite
topologies
the
problem
of
enumerating
the
number
of
topologies
which
can
be
formed
from
a
finite
point
set
is
considered
both
theoretically
and
computationally
certain
fundamental
results
are
established
leading
to
an
algorithm
for
enumerating
finite
topologies
and
computed
results
are
given
for
n
7
an
interesting
side
result
of
the
computational
work
was
the
unearthing
of
a
theoretical
error
which
had
been
induced
into
the
literature
the
use
of
the
computer
in
combinatorics
represents
chronologically
an
early
application
and
this
side
result
underscores
its
continuing
usefulness
in
this
area
cacm
may
1967
evans
j
w
harary
f
lynn
m
s
ca670507
jb
february
28
1978
10
37
am
1595
5
1595
1595
5
1595
1595
5
1595
</TEXT>
</DOC>
<DOC>
<DOCNO>1596</DOCNO>
<TEXT>
airy
function
algorithm
301
s20
cacm
may
1967
bond
g
pitteway
m
l
v
ca670506a
jb
february
28
1978
10
38
am
1596
5
1596
1596
5
1596
1596
5
1596
</TEXT>
</DOC>
<DOC>
<DOCNO>1597</DOCNO>
<TEXT>
transpose
vector
stored
array
algorithm
302
k2
cacm
may
1967
boothroyd
j
ca670506b
jb
march
23
1978
4
00
pm
1597
5
1597
1597
5
1597
1597
5
1597
2354
5
1597
2355
5
1597
1418
6
1597
1418
6
1597
1521
6
1597
1521
6
1597
1597
6
1597
1597
6
1597
1679
6
1597
1883
6
1597
2040
6
1597
2350
6
1597
2350
6
1597
2354
6
1597
2355
6
1597
</TEXT>
</DOC>
<DOC>
<DOCNO>1598</DOCNO>
<TEXT>
least
squares
fit
by
orthogonal
polynomials
algorithm
28
e2
cacm
may
1967
makinson
g
j
ca670506c
jb
march
23
1978
4
02
pm
1598
5
1598
1598
5
1598
1598
5
1598
</TEXT>
</DOC>
<DOC>
<DOCNO>1599</DOCNO>
<TEXT>
numerical
solution
of
the
polynomial
equation
algorithm
300
c2
cacm
may
1967
kohfeld
j
j
ca670506d
jb
march
23
1978
4
03
pm
1599
5
1599
1599
5
1599
1599
5
1599
</TEXT>
</DOC>
<DOC>
<DOCNO>1600</DOCNO>
<TEXT>
chebyshev
quadrature
algorithm
279
d1
cacm
may
1967
hillstrom
k
ca670506e
jb
march
23
1978
4
04
pm
1600
5
1600
1600
5
1600
1600
5
1600
2057
5
1600
2058
5
1600
2392
5
1600
2416
5
1600
1600
6
1600
1600
6
1600
1600
6
1600
1600
6
1600
1894
6
1600
2055
6
1600
2055
6
1600
2058
6
1600
</TEXT>
</DOC>
<DOC>
<DOCNO>1601</DOCNO>
<TEXT>
parallel
numerical
methods
for
the
solution
of
equations
classical
iterative
procedures
for
the
numerical
solution
of
equations
provide
at
each
stage
a
single
new
approximation
to
the
root
in
question
a
technique
is
given
for
the
development
of
numerical
procedures
which
provide
at
each
stage
several
approximations
to
a
solution
of
an
equation
the
s8everal
approximations
obtained
in
any
iteration
are
computationally
independent
making
the
methods
of
interest
in
a
parallel
processing
environment
convergence
is
insured
by
extracting
the
best
information
at
each
iteration
several
families
of
numerical
procedures
which
use
the
technique
of
the
procedures
in
a
parallel
processing
environment
are
developed
and
measurements
of
these
statistics
are
reported
these
measurements
are
interpreted
in
a
parallel
processing
environment
in
such
an
environment
the
procedures
obtained
are
superior
to
standard
algorithms
cacm
may
1967
shedler
g
s
ca670505
jb
february
28
1978
10
44
am
1601
5
1601
1601
5
1601
1601
5
1601
1781
5
1601
123
6
1601
196
6
1601
919
6
1601
990
6
1601
1007
6
1601
1046
6
1601
1131
6
1601
1139
6
1601
1140
6
1601
1149
6
1601
1198
6
1601
1215
6
1601
1223
6
1601
1265
6
1601
1303
6
1601
1323
6
1601
1358
6
1601
1366
6
1601
1421
6
1601
1460
6
1601
1462
6
1601
1463
6
1601
1467
6
1601
1468
6
1601
1477
6
1601
1491
6
1601
1496
6
1601
1531
6
1601
1535
6
1601
1565
6
1601
1601
6
1601
1602
6
1601
1613
6
1601
1614
6
1601
1626
6
1601
1641
6
1601
1787
6
1601
1788
6
1601
205
6
1601
224
6
1601
249
6
1601
288
6
1601
316
6
1601
381
6
1601
398
6
1601
11
6
1601
404
6
1601
410
6
1601
463
6
1601
464
6
1601
483
6
1601
3184
6
1601
3188
6
1601
584
6
1601
600
6
1601
680
6
1601
691
6
1601
763
6
1601
799
6
1601
</TEXT>
</DOC>
<DOC>
<DOCNO>1602</DOCNO>
<TEXT>
pose
a
language
for
posing
problems
to
a
computer
a
language
pose
is
described
which
is
a
drastic
departure
from
the
fortran
algol
type
though
it
does
utilize
fortran
formula
and
logic
representations
and
actually
contains
fortran
vi
as
a
subset
with
the
new
language
the
user
need
only
describe
his
problem
in
equation
like
form
the
method
of
solution
is
automatically
provided
in
conjunction
with
the
translation
from
equation
form
to
computer
instruction
in
this
way
the
pose
language
user
can
solve
difficult
computational
problems
like
the
solution
of
differential
equation
without
requiring
a
knowledge
of
numerical
methods
or
the
intricacies
of
computer
subroutine
logic
essentially
all
clerical
operations
now
required
for
fortran
programming
have
been
automated
so
that
the
pose
programmer
need
not
be
concerned
with
these
details
cacm
may
1967
schlesinger
s
sashkin
l
ca670504
jb
february
28
1978
10
53
am
1602
5
1602
1602
5
1602
1602
5
1602
1781
5
1602
123
6
1602
196
6
1602
919
6
1602
990
6
1602
1007
6
1602
1046
6
1602
1131
6
1602
1139
6
1602
1140
6
1602
1149
6
1602
1198
6
1602
1215
6
1602
1223
6
1602
1265
6
1602
1303
6
1602
1323
6
1602
1358
6
1602
1366
6
1602
1421
6
1602
1460
6
1602
1462
6
1602
1463
6
1602
1467
6
1602
1468
6
1602
1477
6
1602
1491
6
1602
1496
6
1602
1531
6
1602
1535
6
1602
1565
6
1602
1601
6
1602
1602
6
1602
1613
6
1602
1614
6
1602
1626
6
1602
1641
6
1602
1787
6
1602
1788
6
1602
205
6
1602
224
6
1602
249
6
1602
288
6
1602
316
6
1602
381
6
1602
398
6
1602
11
6
1602
404
6
1602
410
6
1602
463
6
1602
464
6
1602
483
6
1602
3184
6
1602
3188
6
1602
584
6
1602
600
6
1602
680
6
1602
691
6
1602
763
6
1602
799
6
1602
</TEXT>
</DOC>
<DOC>
<DOCNO>1603</DOCNO>
<TEXT>
a
multiprogramming
monitor
for
small
machines
int
a
combination
hardware
software
monitor
designed
to
control
a
wide
variety
of
real
time
input
output
devices
is
described
the
simple
hardware
additions
provide
a
uniform
device
to
machine
interface
for
such
elements
as
keyboards
graphic
input
devices
and
interval
timers
the
software
relieves
the
user
program
from
the
details
of
input
output
timing
buffering
and
task
scheduling
and
provides
parallel
processing
capability
user
programs
communicate
with
the
monitor
through
a
small
set
of
meta
instruction
which
consists
mostly
of
machine
language
subroutine
calls
cacm
may
1967
hornbuckle
g
d
ca670503
jb
february
28
1978
10
57
am
1458
4
1603
1523
4
1603
1603
4
1603
1698
4
1603
1747
4
1603
1748
4
1603
1854
4
1603
1877
4
1603
1960
4
1603
2377
4
1603
2378
4
1603
2497
4
1603
2558
4
1603
2625
4
1603
2632
4
1603
2840
4
1603
2941
4
1603
3105
4
1603
3144
4
1603
1471
5
1603
1603
5
1603
1603
5
1603
1603
5
1603
</TEXT>
</DOC>
<DOC>
<DOCNO>1604</DOCNO>
<TEXT>
further
analysis
of
a
computing
center
environment
empirical
distributions
of
program
lengths
execution
times
processing
times
and
loading
times
of
over
10
000
jobs
serviced
in
a
university
computing
center
environment
are
presented
the
data
are
subdivided
according
to
certain
characteristics
of
users
and
jobs
to
obtain
selected
empirical
conditional
distributions
of
those
time
properties
as
well
as
statistical
measures
of
other
interesting
properties
the
results
are
interpreted
in
terms
of
the
properties
of
the
system
studied
cacm
may
1967
walter
e
s
wallace
v
l
ca670502
jb
february
28
1978
11
02
am
1533
4
1604
1604
4
1604
1604
4
1604
1951
4
1604
2373
4
1604
1224
5
1604
1410
5
1604
1533
5
1604
1604
5
1604
1604
5
1604
1604
5
1604
1951
5
1604
2667
5
1604
2668
5
1604
1224
6
1604
1410
6
1604
1604
6
1604
1604
6
1604
1604
6
1604
1604
6
1604
1728
6
1604
1728
6
1604
1761
6
1604
1827
6
1604
1827
6
1604
2677
6
1604
</TEXT>
</DOC>
<DOC>
<DOCNO>1605</DOCNO>
<TEXT>
an
experimental
comparison
of
time
sharing
and
batch
processing
the
effectiveness
for
program
development
of
the
mit
compatible
time
sharing
system
ctss
was
compared
with
that
of
the
ibm
ibsys
batch
processing
system
by
means
of
a
statistically
designed
experiment
an
identical
set
of
four
programming
problems
was
assigned
to
each
of
a
group
of
four
programming
subjects
influences
external
to
the
systems
such
as
the
sequence
of
problem
solution
and
programmer
and
problem
characteristics
were
specified
as
design
factors
in
the
experiment
data
was
obtained
for
six
variables
e
g
programmer
time
computer
time
elapsed
time
etc
which
were
considered
to
be
definitive
of
system
effectiveness
and
analysis
of
variance
techniques
were
employed
to
estimate
system
differences
in
these
variables
after
differences
due
to
the
design
factors
had
been
eliminated
statistical
analysis
of
the
experimental
results
provided
strong
evidence
of
important
system
differences
as
well
as
a
critique
of
the
experimental
design
itself
with
implications
for
further
experimentation
cacm
may
1967
schatzoff
m
tsao
r
wiig
r
ca670501
jb
february
28
1978
11
09
am
1605
5
1605
1605
5
1605
1605
5
1605
1792
5
1605
1908
5
1605
1550
6
1605
1605
6
1605
1605
6
1605
224
6
1605
</TEXT>
</DOC>
<DOC>
<DOCNO>1606</DOCNO>
<TEXT>
chi
squared
integral
algorithm
299
s15
cacm
april
1967
hill
i
d
pike
m
c
ca670408a
jb
february
28
1978
11
10
am
1606
5
1606
1606
5
1606
1606
5
1606
2467
5
1606
2793
5
1606
1606
6
1606
1606
6
1606
</TEXT>
</DOC>
<DOC>
<DOCNO>1607</DOCNO>
<TEXT>
coulomb
wave
functions
algorithm
300
s22
cacm
april
1967
gunn
j
h
ca670408b
jb
march
23
1978
4
06
pm
1607
5
1607
1607
5
1607
1607
5
1607
</TEXT>
</DOC>
<DOC>
<DOCNO>1608</DOCNO>
<TEXT>
numerical
integration
of
function
that
has
a
pole
it
is
common
to
need
to
integrate
numerically
functions
that
diverge
somewhere
outside
the
range
of
integration
even
if
the
divergence
occurs
quite
far
away
integration
formulas
like
simpson
that
depend
on
fitting
a
polynomial
usually
will
be
inaccurate
near
a
pole
they
will
be
very
bad
a
method
is
described
that
gives
formulas
that
will
integrate
functions
of
this
kind
accurately
if
the
orders
and
positions
of
the
poles
are
known
explicit
formulas
are
given
that
are
easy
to
use
on
an
automatic
computer
it
is
shown
that
they
can
be
used
for
some
other
singularities
as
well
as
poles
if
the
integral
converges
integration
can
be
carried
to
the
singularity
the
accuracy
of
the
integration
with
a
pole
of
second
order
is
discussed
and
as
an
example
the
new
formula
is
compared
with
simpson
the
new
formulas
are
useful
even
far
from
the
pole
while
near
the
pole
their
advantage
is
overwhelming
cacm
april
1967
eisner
e
ca670407
jb
february
28
1978
11
20
am
1608
5
1608
1608
5
1608
1608
5
1608
</TEXT>
</DOC>
<DOC>
<DOCNO>1609</DOCNO>
<TEXT>
scheduling
university
course
examinations
by
computer
a
new
approach
to
the
problem
of
scheduling
course
examinations
is
presented
in
principle
an
examination
schedule
which
requires
a
minimum
number
of
examination
periods
and
satisfies
the
constraint
that
no
student
be
required
to
take
two
examinations
simultaneously
can
be
found
in
two
steps
first
course
which
may
have
their
examinations
scheduled
at
the
same
period
are
grouped
together
in
all
possible
ways
then
a
minimum
number
of
these
groups
such
that
each
course
is
included
at
least
once
are
selected
by
removing
multiple
occurrences
of
courses
and
then
scheduling
each
group
at
a
different
period
a
minimal
schedule
can
be
obtained
known
algorithms
for
carrying
out
these
procedures
are
prohibitively
expensive
approximations
to
the
ideal
procedure
outlined
above
are
given
which
yield
nonminimal
but
feasible
schedules
with
a
very
small
expenditure
of
time
results
of
experiments
using
these
techniques
are
given
these
are
encouraging
and
indicate
that
further
experimentation
would
be
worthwhile
cacm
april
1967
hall
jr
a
d
acton
f
s
ca670406
jb
february
28
1978
11
22
am
1609
4
1609
2052
4
1609
1013
5
1609
1609
5
1609
1609
5
1609
1609
5
1609
</TEXT>
</DOC>
<DOC>
<DOCNO>1610</DOCNO>
<TEXT>
a
method
for
the
solution
of
transportation
problems
with
tall
matrices
a
method
is
presented
for
the
solution
of
the
transportation
problem
having
a
cost
matrix
with
few
columns
the
computer
implementation
of
this
method
shows
it
to
be
very
fast
and
efficient
application
are
indicted
for
the
personnel
classification
problem
as
well
as
the
classical
transportation
problem
an
example
is
worked
out
in
detail
cacm
april
1967
dwyer
p
s
galler
b
a
ca670405
jb
february
28
1978
11
25
am
1610
5
1610
1610
5
1610
1610
5
1610
</TEXT>
</DOC>
<DOC>
<DOCNO>1611</DOCNO>
<TEXT>
scheduling
project
networks
some
of
the
basic
concepts
and
terminology
of
project
networking
are
developed
the
critical
path
algorithm
incorporated
in
the
c
e
i
r
proprietary
scheduling
system
ramps
resource
allocation
and
multi
project
scheduling
is
described
the
error
detection
and
network
analysis
features
of
the
algorithm
are
also
described
cacm
april
1967
klein
m
m
ca670404
jb
february
28
1978
11
31
am
1611
4
1611
1611
4
1611
1295
5
1611
1611
5
1611
1611
5
1611
1611
5
1611
340
5
1611
</TEXT>
</DOC>
<DOC>
<DOCNO>1612</DOCNO>
<TEXT>
top
to
bottom
parsing
rehabilitated
this
note
is
concerned
with
the
efficiency
of
the
top
to
bottom
parsing
algorithm
as
used
in
connection
with
programming
language
grammars
it
is
shown
for
instance
that
retracing
of
unprofitable
paths
can
often
be
eliminated
by
a
suitable
rearrangement
of
the
productions
defining
the
grammar
the
essential
weakness
of
the
method
is
in
dealing
with
complicated
syntactic
structures
which
are
in
practice
only
sparsely
occupied
e
g
arithmetic
expressions
cacm
april
1967
brooker
r
a
ca670403
jb
february
28
1978
11
32
am
1612
4
1612
1781
4
1612
1945
4
1612
1139
5
1612
1612
5
1612
1612
5
1612
1612
5
1612
</TEXT>
</DOC>
<DOC>
<DOCNO>1613</DOCNO>
<TEXT>
one
pass
compilation
of
arithmetic
expressions
for
a
parallel
processor
under
the
assumption
that
a
processor
may
have
a
multiplicity
of
arithmetic
units
a
compiler
for
such
a
processor
should
produce
object
code
to
take
advantage
of
possible
parallelism
of
operation
most
of
the
presently
known
compilation
techniques
are
inadequate
for
such
a
processor
because
they
produce
expression
structures
that
must
be
evaluated
serially
a
technique
is
presented
here
for
compiling
arithmetic
expressions
into
structures
that
can
be
evaluated
with
a
high
degree
of
parallelism
the
algorithm
is
a
variant
of
the
so
called
top
down
analysis
technique
and
requires
only
one
pass
of
the
input
text
cacm
april
1967
stone
h
s
ca670402
jb
february
28
1978
11
36
am
1086
4
1613
1132
4
1613
1234
4
1613
1263
4
1613
1265
4
1613
1270
4
1613
1323
4
1613
1358
4
1613
1379
4
1613
1380
4
1613
1453
4
1613
1464
4
1613
1484
4
1613
1491
4
1613
1498
4
1613
1613
4
1613
1613
4
1613
1613
4
1613
1613
4
1613
1613
4
1613
1614
4
1613
1646
4
1613
1781
4
1613
1825
4
1613
1860
4
1613
1900
4
1613
1947
4
1613
1955
4
1613
2025
4
1613
2083
4
1613
2154
4
1613
2178
4
1613
2179
4
1613
2252
4
1613
2325
4
1613
2341
4
1613
2365
4
1613
2506
4
1613
2546
4
1613
2645
4
1613
2652
4
1613
2684
4
1613
2842
4
1613
2929
4
1613
2934
4
1613
3060
4
1613
3069
4
1613
669
4
1613
679
4
1613
691
4
1613
761
4
1613
949
4
1613
989
4
1613
987
5
1613
1086
5
1613
1134
5
1613
1453
5
1613
1613
5
1613
1613
5
1613
1613
5
1613
1781
5
1613
2175
5
1613
3184
5
1613
123
6
1613
196
6
1613
919
6
1613
990
6
1613
1007
6
1613
1046
6
1613
1131
6
1613
1139
6
1613
1140
6
1613
1149
6
1613
1198
6
1613
1215
6
1613
1223
6
1613
1265
6
1613
1303
6
1613
1323
6
1613
1358
6
1613
1366
6
1613
1421
6
1613
1460
6
1613
1462
6
1613
1463
6
1613
1467
6
1613
1468
6
1613
1477
6
1613
1491
6
1613
1496
6
1613
1531
6
1613
1535
6
1613
1551
6
1613
1565
6
1613
1601
6
1613
1602
6
1613
1613
6
1613
1613
6
1613
1614
6
1613
1626
6
1613
1641
6
1613
1787
6
1613
1788
6
1613
205
6
1613
224
6
1613
249
6
1613
1886
6
1613
288
6
1613
316
6
1613
381
6
1613
398
6
1613
11
6
1613
404
6
1613
410
6
1613
463
6
1613
464
6
1613
483
6
1613
3184
6
1613
3188
6
1613
584
6
1613
600
6
1613
680
6
1613
691
6
1613
763
6
1613
799
6
1613
</TEXT>
</DOC>
<DOC>
<DOCNO>1614</DOCNO>
<TEXT>
a
proposal
for
definitions
in
algol
an
extension
to
algol
is
proposed
for
adding
new
data
types
and
operators
to
the
language
definitions
may
occur
in
any
block
heading
and
terminate
with
the
block
they
are
an
integral
part
of
the
program
and
are
not
fixed
in
the
language
even
the
behavior
of
existing
operators
may
be
redefined
the
processing
of
text
containing
defined
contexts
features
a
replacement
rule
that
eliminates
unnecessary
iterations
and
temporary
storage
examples
of
definition
sets
are
given
for
real
and
complex
matrices
complex
numbers
file
processing
and
list
manipulation
cacm
april
1967
galler
b
a
perlis
a
j
ca670401
jb
february
28
1978
11
43
am
1086
4
1614
1132
4
1614
1234
4
1614
1263
4
1614
1265
4
1614
1270
4
1614
1323
4
1614
1358
4
1614
1379
4
1614
1380
4
1614
1453
4
1614
1464
4
1614
1484
4
1614
1491
4
1614
1498
4
1614
1613
4
1614
1614
4
1614
1614
4
1614
1781
4
1614
1825
4
1614
1860
4
1614
2083
4
1614
2178
4
1614
2179
4
1614
2252
4
1614
2253
4
1614
2325
4
1614
2341
4
1614
2546
4
1614
2557
4
1614
2645
4
1614
2652
4
1614
2684
4
1614
2842
4
1614
2929
4
1614
2934
4
1614
3069
4
1614
669
4
1614
679
4
1614
691
4
1614
761
4
1614
949
4
1614
989
4
1614
1614
5
1614
1614
5
1614
1614
5
1614
1693
5
1614
1781
5
1614
1824
5
1614
1861
5
1614
2126
5
1614
437
5
1614
3184
5
1614
823
6
1614
123
6
1614
196
6
1614
196
6
1614
919
6
1614
990
6
1614
1007
6
1614
1046
6
1614
1131
6
1614
1139
6
1614
1140
6
1614
1149
6
1614
1198
6
1614
1215
6
1614
1223
6
1614
1265
6
1614
1303
6
1614
1323
6
1614
1358
6
1614
1358
6
1614
1366
6
1614
1421
6
1614
1421
6
1614
1460
6
1614
1462
6
1614
1463
6
1614
1467
6
1614
1468
6
1614
1477
6
1614
1477
6
1614
1491
6
1614
1491
6
1614
1496
6
1614
1531
6
1614
1535
6
1614
1565
6
1614
1601
6
1614
1602
6
1614
1613
6
1614
1614
6
1614
1614
6
1614
1614
6
1614
1614
6
1614
1614
6
1614
1626
6
1614
1641
6
1614
1693
6
1614
1781
6
1614
1781
6
1614
1787
6
1614
1788
6
1614
205
6
1614
224
6
1614
249
6
1614
288
6
1614
316
6
1614
381
6
1614
398
6
1614
11
6
1614
404
6
1614
404
6
1614
404
6
1614
408
6
1614
410
6
1614
463
6
1614
464
6
1614
483
6
1614
3184
6
1614
3188
6
1614
584
6
1614
600
6
1614
680
6
1614
691
6
1614
763
6
1614
799
6
1614
</TEXT>
</DOC>
<DOC>
<DOCNO>1615</DOCNO>
<TEXT>
an
algorithm
for
generating
root
locus
diagrams
a
technique
for
using
a
digital
computer
to
draw
both
ordinary
and
time
lag
root
locus
diagrams
is
described
ordinary
diagrams
are
drawn
much
faster
and
more
accurately
than
ever
before
time
lag
diagrams
which
had
been
impossible
to
obtain
are
drawn
with
the
same
speed
and
accuracy
as
ordinary
diagrams
cacm
march
1967
krall
a
m
fornaro
r
ca670313
jb
february
28
1978
12
57
pm
1615
5
1615
1615
5
1615
1615
5
1615
</TEXT>
</DOC>
<DOC>
<DOCNO>1616</DOCNO>
<TEXT>
tensor
calculations
on
computer
appendix
in
the
main
text
of
the
paper
comm
acm
9
12
dec
196
864
a
formac
program
was
discussed
which
is
capable
of
calculating
various
quantities
of
interest
in
tensor
calculus
this
appendix
is
intended
as
an
example
of
the
program
output
chrisoffel
symbols
calculated
for
12
basic
orthogonal
coordinate
systems
are
listed
cacm
march
1967
walton
j
j
ca670312
jb
february
28
1978
12
58
pm
1543
5
1616
1616
5
1616
1616
5
1616
1616
5
1616
1664
5
1616
1345
6
1616
1345
6
1616
1543
6
1616
1616
6
1616
1616
6
1616
</TEXT>
</DOC>
<DOC>
<DOCNO>1617</DOCNO>
<TEXT>
eigenvalues
and
eigenvectors
of
the
symmetric
system
algorithm
297
f2
cacm
march
1967
boothroyd
j
ca670311a
jb
february
28
1978
12
59
pm
1617
5
1617
1617
5
1617
1617
5
1617
</TEXT>
</DOC>
<DOC>
<DOCNO>1618</DOCNO>
<TEXT>
determination
of
the
square
root
of
a
positive
definite
matrix
algorithm
298
f1
cacm
march
1967
spath
h
ca670311b
jb
march
23
1978
4
09
pm
1618
5
1618
1618
5
1618
1618
5
1618
</TEXT>
</DOC>
<DOC>
<DOCNO>1619</DOCNO>
<TEXT>
error
free
methods
for
statistical
computations
neely
has
discussed
computational
error
generated
by
some
algorithms
used
to
compute
various
statistics
in
the
present
paper
methods
are
described
which
are
error
free
simple
in
concept
and
usually
less
costly
in
machine
time
than
those
mentioned
by
neely
cacm
march
1967
rodden
b
e
ca670310
jb
february
28
1978
1
02
pm
1619
4
1619
3166
4
1619
1411
5
1619
1619
5
1619
1619
5
1619
1619
5
1619
</TEXT>
</DOC>
<DOC>
<DOCNO>1620</DOCNO>
<TEXT>
methods
of
evaluating
polynomial
approximations
in
function
evaluation
routines
the
method
of
nested
multiplication
is
commonly
used
in
function
evaluation
routines
to
evaluate
approximation
polynomials
new
polynomial
evaluation
methods
have
been
developed
in
recent
years
which
require
fewer
multiplications
than
nested
multiplication
and
may
therefore
be
preferable
for
use
in
function
evaluation
routines
although
some
of
these
methods
do
not
appear
to
be
practically
useful
because
of
rounding
error
difficulties
several
methods
of
evaluating
low
degree
polynomials
have
been
found
to
be
satisfactory
three
such
methods
are
described
and
illustrated
cacm
march
1967
file
c
t
ca670309
jb
february
28
1978
1
08
pm
1620
4
1620
1620
4
1620
819
4
1620
1620
5
1620
1620
5
1620
1620
5
1620
436
5
1620
819
5
1620
</TEXT>
</DOC>
<DOC>
<DOCNO>1621</DOCNO>
<TEXT>
computer
typesetting
of
algol
an
application
of
computer
aided
typesetting
is
introduced
a
working
method
is
described
for
publishing
algol
by
computerized
translation
from
hardware
into
reference
representation
computerized
planning
of
typographical
lay
out
and
computerized
control
of
a
typesetting
machine
the
point
is
made
that
experts
in
science
technology
and
programming
are
guaranteed
a
correct
algol
documentation
without
spending
valuable
time
and
power
on
typographic
considerations
and
proofreading
cacm
march
1967
sydow
l
v
ca670308
jb
february
28
1978
1
12
pmb
1621
5
1621
1621
5
1621
1621
5
1621
</TEXT>
</DOC>
<DOC>
<DOCNO>1622</DOCNO>
<TEXT>
an
efficient
procedure
for
the
generation
of
closed
subsets
an
efficient
algorithm
is
described
for
generating
subsets
of
a
set
s
which
satisfy
constraints
of
the
form
if
s
i
is
a
member
of
the
subset
then
s
j
must
also
be
a
member
of
the
subset
the
algorithm
has
been
programmed
in
the
wisp
language
and
successfully
run
on
the
ibm
7094
in
connection
with
a
routine
to
detect
feedback
in
multidimensional
iterative
networks
cacm
march
1967
waite
w
m
ca670307
jb
february
28
1978
1
18
pm
1622
5
1622
1622
5
1622
1622
5
1622
</TEXT>
</DOC>
<DOC>
<DOCNO>1623</DOCNO>
<TEXT>
an
application
of
formac
a
nonlinear
circuit
analysis
problem
is
stated
and
the
way
in
which
it
was
solved
using
formac
is
indicated
the
solution
of
the
problem
using
formac
was
notable
since
several
other
methods
that
were
tried
failed
the
problem
is
straightforward
although
untenable
by
hand
but
nevertheless
involved
an
elaborate
use
of
the
formac
language
the
program
was
fairly
large
and
utilized
practically
every
command
in
particular
it
made
extensive
use
of
the
part
command
several
tricks
were
necessary
in
order
to
circumvent
some
of
the
shortcomings
of
the
formac
system
this
paper
is
more
concerned
with
the
use
of
programming
techniques
in
formac
than
with
the
actual
engineering
problem
although
readers
may
be
interested
in
the
problem
because
it
is
stated
in
a
general
mathematical
sense
and
could
be
of
interest
in
areas
other
than
circuit
analysis
cacm
march
1967
neidleman
l
d
ca670306
jb
february
28
1978
1
27
pm
1623
5
1623
1623
5
1623
1623
5
1623
</TEXT>
</DOC>
<DOC>
<DOCNO>1624</DOCNO>
<TEXT>
automatic
dimensioning
examples
of
algorithm
that
will
accomplish
automatic
storage
reservation
without
the
need
for
explicit
array
declarations
are
described
cacm
march
1967
klerer
m
may
j
ca670305
jb
february
28
1978
1
28
pm
1396
4
1624
1624
4
1624
1083
5
1624
1624
5
1624
1624
5
1624
1624
5
1624
</TEXT>
</DOC>
<DOC>
<DOCNO>1625</DOCNO>
<TEXT>
on
the
automatic
simplification
of
source
language
programs
methods
of
simplification
that
can
be
applied
automatically
to
programs
written
in
an
algol
like
language
are
discussed
the
simplifications
are
based
on
the
form
of
the
program
and
the
knowledge
obtained
by
a
processor
without
any
understanding
of
what
the
program
is
supposed
to
do
these
methods
have
been
implemented
in
a
processor
called
sure
that
accepts
a
program
written
in
jovial
and
outputs
an
equivalent
jovial
program
that
may
be
shorter
and
may
be
executed
faster
than
the
original
sure
is
described
some
of
the
problems
encountered
in
automatic
improvement
at
the
source
language
level
are
discussed
and
further
types
of
automatic
program
improvement
are
suggested
cacm
march
1967
clark
e
r
ca670304
jb
february
28
1978
1
33
pm
1084
4
1625
1379
4
1625
1625
4
1625
1625
4
1625
1807
4
1625
1945
4
1625
1947
4
1625
1248
5
1625
1625
5
1625
1625
5
1625
1625
5
1625
669
5
1625
</TEXT>
</DOC>
<DOC>
<DOCNO>1626</DOCNO>
<TEXT>
structure
of
a
lisp
system
using
two
level
storage
in
an
ideal
list
processing
system
there
would
be
enough
core
memory
to
contain
all
the
data
and
programs
described
in
this
paper
are
a
number
of
techniques
that
have
been
used
to
build
a
lisp
system
utilizing
a
drum
for
its
principal
storage
medium
with
a
surprisingly
low
time
penalty
for
use
of
this
slow
storage
device
the
techniques
include
careful
segmentation
of
system
programs
allocation
of
virtual
memory
to
allow
address
arithmetic
for
type
determination
and
a
special
algorithm
for
building
reasonably
linearized
lists
a
scheme
for
binding
variables
is
described
which
is
good
in
this
environment
and
allows
for
complete
compatibility
between
compiled
and
interpreted
programs
with
no
special
declarations
cacm
march
1967
bobrow
d
g
murphy
d
l
ca670303
jb
february
28
1978
1
39
pm
1626
4
1626
1708
4
1626
1781
4
1626
1860
4
1626
2299
4
1626
1626
5
1626
1626
5
1626
1626
5
1626
1641
5
1626
1708
5
1626
1781
5
1626
1826
5
1626
1860
5
1626
2156
5
1626
2168
5
1626
2249
5
1626
2314
5
1626
2719
5
1626
2736
5
1626
2833
5
1626
123
6
1626
196
6
1626
919
6
1626
990
6
1626
1007
6
1626
1046
6
1626
1098
6
1626
1131
6
1626
1139
6
1626
1140
6
1626
1149
6
1626
1198
6
1626
1215
6
1626
1223
6
1626
1265
6
1626
1303
6
1626
1323
6
1626
1358
6
1626
1366
6
1626
1366
6
1626
1389
6
1626
1421
6
1626
1421
6
1626
1460
6
1626
1462
6
1626
1463
6
1626
1467
6
1626
1468
6
1626
1477
6
1626
1491
6
1626
1496
6
1626
1496
6
1626
1531
6
1626
1535
6
1626
1565
6
1626
1601
6
1626
1602
6
1626
1613
6
1626
1614
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1626
6
1626
1641
6
1626
1641
6
1626
1641
6
1626
1708
6
1626
1785
6
1626
1786
6
1626
1787
6
1626
1788
6
1626
205
6
1626
1826
6
1626
1826
6
1626
1826
6
1626
1826
6
1626
210
6
1626
210
6
1626
210
6
1626
224
6
1626
1853
6
1626
1853
6
1626
249
6
1626
1878
6
1626
288
6
1626
1972
6
1626
1972
6
1626
316
6
1626
378
6
1626
381
6
1626
398
6
1626
2082
6
1626
11
6
1626
2148
6
1626
2151
6
1626
2167
6
1626
2210
6
1626
2645
6
1626
2657
6
1626
2736
6
1626
404
6
1626
410
6
1626
463
6
1626
464
6
1626
483
6
1626
3184
6
1626
3184
6
1626
3188
6
1626
584
6
1626
600
6
1626
680
6
1626
691
6
1626
731
6
1626
763
6
1626
799
6
1626
</TEXT>
</DOC>
<DOC>
<DOCNO>1627</DOCNO>
<TEXT>
application
of
level
changing
to
a
multilevel
storage
organization
a
technique
for
organizing
the
devices
of
a
computer
storage
system
is
described
this
technique
called
the
multilevel
store
provides
a
means
for
economically
satisfying
the
requirements
for
very
large
storage
capacities
of
certain
data
management
and
information
retrieval
systems
the
concept
of
level
changing
is
introduced
and
its
application
to
the
multilevel
store
is
discussed
a
possible
means
for
physically
organizing
the
information
for
efficient
use
of
the
multilevel
store
is
presented
cacm
march
1967
morenoff
e
mclean
j
b
ca670302
jb
february
28
1978
1
43
pm
1627
5
1627
1627
5
1627
1627
5
1627
</TEXT>
</DOC>
<DOC>
<DOCNO>1628</DOCNO>
<TEXT>
the
emergence
of
a
profession
computer
programming
deals
with
an
enormous
variety
of
activities
and
is
carried
on
by
people
with
a
great
variety
of
backgrounds
it
seems
clear
that
part
but
not
all
of
this
activity
is
evolving
toward
a
distinct
professional
field
but
that
the
scope
of
this
emerging
profession
and
some
of
its
economic
social
and
educational
characteristics
are
as
yet
by
no
means
well
defined
in
this
paper
these
issues
are
examined
and
some
opinions
about
them
are
expressed
cacm
march
1967
orden
a
ca670301
jb
february
28
1978
1
47
pm
1628
5
1628
1628
5
1628
1628
5
1628
1770
5
1628
1628
6
1628
</TEXT>
</DOC>
<DOC>
<DOCNO>1629</DOCNO>
<TEXT>
stat
pack
a
biostatistical
programming
package
a
package
of
fortran
statistical
programs
for
use
on
almost
any
small
to
medium
size
40k
characters
or
8k
words
for
which
a
fortran
ii
compiler
exists
is
described
and
its
availability
is
announced
the
major
design
criteria
of
ease
of
use
ease
of
modification
flexibility
of
input
and
detail
of
output
are
described
cacm
february
1967
shannon
s
henschke
c
ca670213
jb
february
28
1978
1
57
pm
1629
5
1629
1629
5
1629
1629
5
1629
</TEXT>
</DOC>
<DOC>
<DOCNO>1630</DOCNO>
<TEXT>
computer
representation
of
planar
regions
by
their
skeletons
any
region
can
be
regarded
as
a
union
of
maximal
neighborhoods
of
its
points
and
can
be
specified
by
the
centers
and
radii
of
these
neighborhoods
this
set
is
a
sort
of
skeleton
of
the
region
the
storage
required
to
represent
a
region
in
this
way
is
comparable
to
that
required
when
it
is
represented
by
encoding
its
boundary
moreover
the
skeleton
representation
seems
to
have
advantages
when
it
is
necessary
to
determine
repeatedly
whether
points
are
inside
or
outside
the
region
or
to
perform
set
theoretic
operations
on
regions
cacm
february
1967
pfaltz
j
l
rosenfeld
a
ca670212
jb
february
28
1978
2
07
pm
1630
4
1630
2547
4
1630
2987
4
1630
3165
4
1630
1326
5
1630
1630
5
1630
1630
5
1630
1630
5
1630
2987
5
1630
1326
6
1630
1630
6
1630
2125
6
1630
2547
6
1630
2633
6
1630
421
6
1630
524
6
1630
</TEXT>
</DOC>
<DOC>
<DOCNO>1631</DOCNO>
<TEXT>
testing
a
random
number
generator
the
first
1
000
000
numbers
produced
by
the
random
number
generator
used
in
the
general
purpose
systems
simulator
gpss
were
subjected
to
statistical
tests
the
tests
are
described
and
the
results
of
the
tests
are
presented
these
particular
tests
indicate
that
the
numbers
are
satisfactory
it
is
recommended
that
suitable
tests
be
applied
to
all
random
numbers
used
in
computer
simulations
cacm
february
1967
gorenstein
s
ca670211
jb
february
28
1978
2
10
pm
1631
5
1631
1631
5
1631
1631
5
1631
1691
5
1631
1293
6
1631
1420
6
1631
1631
6
1631
</TEXT>
</DOC>
<DOC>
<DOCNO>1632</DOCNO>
<TEXT>
programming
the
tabular
method
of
analysis
of
variance
for
factorial
experiments
the
ease
of
programming
the
tabular
method
of
analysis
of
variance
for
complete
factorial
experiments
in
a
fortran
language
is
demonstrated
in
this
method
the
total
sum
of
squares
is
partitioned
into
orthogonal
single
degree
of
freedom
sums
of
squares
main
effect
and
interaction
sums
of
squares
are
then
obtained
by
appropriate
pooling
of
the
single
degree
of
freedom
sums
of
squares
program
segments
to
accomplish
the
procedure
are
presented
modifications
to
handle
hierarchical
designs
and
replicated
experiments
are
mentioned
a
fortran
ii
program
for
an
ibm
7094
is
described
briefly
cacm
february
1967
carmer
s
g
ca670210
jb
february
28
1978
2
33
pm
1632
5
1632
1632
5
1632
1632
5
1632
</TEXT>
</DOC>
<DOC>
<DOCNO>1633</DOCNO>
<TEXT>
a
modified
newton
method
for
polynomials
a
modified
newton
method
for
polynomials
is
discussed
it
is
assumed
one
has
approximations
for
all
the
roots
of
the
polynomial
three
variations
are
described
if
the
roots
are
simple
it
is
shown
that
under
appropriate
conditions
two
of
the
variations
are
cubically
convergent
cacm
february
1967
ehrlich
l
w
ca670209
jb
february
28
1978
2
33
pm
1633
4
1633
1452
5
1633
1633
5
1633
1633
5
1633
1633
5
1633
</TEXT>
</DOC>
<DOC>
<DOCNO>1634</DOCNO>
<TEXT>
27
bits
are
not
enough
for
8
digit
accuracy
from
the
inequality
10
8
2
27
we
are
likely
to
conclude
that
we
can
represent
8
digit
decimal
floating
point
numbers
accurately
by
27
bit
floating
point
numbers
however
we
need
28
significant
bits
to
represent
some
8
digit
numbers
accurately
in
general
we
can
show
that
if
10
p
2
q
1
then
q
significant
bits
are
always
enough
for
p
digit
decimal
accuracy
finally
we
can
define
a
compact
27
bit
floating
point
representation
that
will
give
28
significant
bits
for
numbers
of
practical
importance
cacm
february
1967
goldberg
i
b
ca670208
jb
february
28
1978
2
38
pm
1634
5
1634
1634
5
1634
1634
5
1634
1783
5
1634
1843
5
1634
1634
6
1634
1634
6
1634
1783
6
1634
</TEXT>
</DOC>
<DOC>
<DOCNO>1635</DOCNO>
<TEXT>
parameters
for
pseudo
runge
kutta
methods
the
object
of
this
note
is
to
present
a
choice
of
the
free
parameters
in
the
third
and
fourth
order
pseudo
runge
kutta
methods
involving
two
points
this
choice
of
parameters
causes
a
bound
on
the
principal
part
of
the
truncation
error
term
to
be
near
the
minimum
for
the
fourth
order
method
and
at
the
minimum
for
the
third
order
method
cacm
february
1967
byrne
g
d
ca670207
jb
february
28
1978
3
20
pm
1635
5
1635
1635
5
1635
1635
5
1635
</TEXT>
</DOC>
<DOC>
<DOCNO>1636</DOCNO>
<TEXT>
invariant
imbeding
and
the
numerical
integration
of
boundary
value
problems
for
unstable
linear
systems
of
ordinary
differential
equations
in
such
diverse
areas
as
radiative
transfer
in
planetary
atmospheres
and
optimal
guidance
and
control
two
point
boundary
value
problems
for
unstable
systems
arise
greatly
complicating
the
numerical
solution
an
invariant
imbeding
technique
is
presented
which
is
useful
in
overcoming
these
frequently
encountered
instabilities
and
the
results
of
some
numerical
experiments
are
given
cacm
february
1967
belman
r
e
kagiwada
h
h
kalaba
r
e
ca670206
jb
february
28
1978
3
28
pm
1636
5
1636
1636
5
1636
1636
5
1636
2427
5
1636
1581
6
1636
1636
6
1636
</TEXT>
</DOC>
<DOC>
<DOCNO>1637</DOCNO>
<TEXT>
problems
in
the
statistical
analysis
of
simulation
experiments
the
comparison
of
means
and
the
length
of
sample
records
research
is
continued
into
statistical
analysis
of
simulation
experiments
containing
autocorrelated
time
series
it
is
shown
how
to
estimate
the
lengths
of
sample
records
needed
to
use
certain
large
sample
results
in
measuring
stability
analogies
between
autocorrelated
data
and
independent
observations
are
described
a
way
to
test
the
difference
of
the
mean
of
two
experiments
is
suggested
it
is
shown
how
the
variance
of
the
sample
mean
relates
to
the
spectrum
of
the
generating
process
and
estimation
of
the
quantities
of
interest
is
described
the
results
expand
the
possibilities
of
statistical
spectral
analysis
as
applied
to
simulation
experiments
cacm
february
1967
fishman
g
s
ca670205
jb
february
28
1978
3
34
pm
1637
5
1637
1637
5
1637
1637
5
1637
</TEXT>
</DOC>
<DOC>
<DOCNO>1638</DOCNO>
<TEXT>
sorting
by
replacement
selecting
in
sorting
by
replacement
selecting
the
expected
length
of
a
sequence
beginning
with
the
i
th
element
i
1
is
proved
to
be
2f
in
accordance
with
a
conjecture
of
e
h
friend
where
f
is
the
number
of
memory
cells
used
the
expected
length
of
the
j
th
sequence
is
determined
to
be
f
times
a
j
th
degree
polynomial
in
e
such
that
the
value
of
this
polynomial
approaches
2
as
j
approaches
infinity
recursive
formulas
are
obtained
for
both
the
mean
and
the
standard
deviation
of
the
length
of
the
j
th
sequence
the
mathematical
proofs
of
these
results
are
based
upon
the
assumption
that
n
the
number
of
items
to
be
sorted
is
infinite
but
it
is
shown
that
the
error
due
to
the
finiteness
of
n
approaches
zero
rapidly
as
n
increases
cacm
february
1967
gasner
b
j
ca670204
jb
february
28
1978
3
56
pm
1638
4
1638
2176
4
1638
2272
4
1638
1638
5
1638
1638
5
1638
1638
5
1638
1867
5
1638
2272
5
1638
677
5
1638
1638
6
1638
1638
6
1638
677
6
1638
</TEXT>
</DOC>
<DOC>
<DOCNO>1639</DOCNO>
<TEXT>
exponential
curve
fit
algorithm
295
e2
cacm
february
1967
spath
h
ca670203a
jb
february
28
1978
3
57
pm
1639
4
1639
1480
5
1639
1639
5
1639
1639
5
1639
1639
5
1639
2101
5
1639
2102
5
1639
1639
6
1639
1639
6
1639
</TEXT>
</DOC>
<DOC>
<DOCNO>1640</DOCNO>
<TEXT>
generalized
least
squared
fit
by
orthogonal
polynomials
algorithm
296
e2
cacm
february
1967
makinson
g
j
ca670203b
jb
march
23
1978
4
13
pm
1640
5
1640
1640
5
1640
1640
5
1640
</TEXT>
</DOC>
<DOC>
<DOCNO>1641</DOCNO>
<TEXT>
a
use
of
fast
and
slow
memories
in
list
processing
languages
a
scheme
is
described
which
permitting
a
substantial
increase
in
memory
space
utilized
to
store
list
structured
data
it
consists
in
reducing
to
one
level
a
nonhomogeneous
store
composed
of
fast
core
and
slow
disk
or
drum
memories
the
space
available
in
slow
memory
is
divided
into
pages
each
containing
a
given
number
of
machine
words
the
reduction
to
a
one
level
memory
is
performed
by
a
program
which
leaves
the
most
often
called
pages
in
the
fast
memory
when
a
new
page
from
slow
store
is
requested
the
page
in
core
having
the
longest
period
of
inactivity
is
transferred
back
to
the
slow
store
the
complete
scheme
has
been
implemented
in
connection
with
a
lisp
embedding
into
algol
using
an
ibm
7044
with
32k
of
core
memory
and
disks
gains
in
memory
space
were
about
100
fold
as
often
happens
in
programming
applications
the
price
of
the
additional
space
is
computer
time
although
the
disks
have
an
access
time
10
4
times
slower
than
core
tests
indicate
that
the
actual
slow
down
varied
from
3
to
10
depending
on
the
number
of
pages
available
in
the
fast
store
cacm
february
1967
cohen
j
ca670202
jb
february
28
1978
4
06
pm
1626
5
1641
1641
5
1641
1641
5
1641
1641
5
1641
1708
5
1641
1781
5
1641
1860
5
1641
2299
5
1641
123
6
1641
196
6
1641
919
6
1641
990
6
1641
1007
6
1641
1046
6
1641
1131
6
1641
1139
6
1641
1140
6
1641
1149
6
1641
1198
6
1641
1215
6
1641
1223
6
1641
1265
6
1641
1303
6
1641
1323
6
1641
1358
6
1641
1366
6
1641
1366
6
1641
1389
6
1641
1421
6
1641
1421
6
1641
1460
6
1641
1462
6
1641
1463
6
1641
1467
6
1641
1468
6
1641
1477
6
1641
1491
6
1641
1496
6
1641
1496
6
1641
1502
6
1641
1531
6
1641
1535
6
1641
1565
6
1641
1601
6
1641
1602
6
1641
1613
6
1641
1614
6
1641
1626
6
1641
1626
6
1641
1626
6
1641
1641
6
1641
1641
6
1641
1641
6
1641
1641
6
1641
1641
6
1641
1785
6
1641
1786
6
1641
1787
6
1641
1788
6
1641
205
6
1641
224
6
1641
249
6
1641
288
6
1641
316
6
1641
378
6
1641
381
6
1641
398
6
1641
11
6
1641
404
6
1641
410
6
1641
463
6
1641
464
6
1641
483
6
1641
3184
6
1641
3184
6
1641
3188
6
1641
584
6
1641
600
6
1641
680
6
1641
691
6
1641
763
6
1641
799
6
1641
</TEXT>
</DOC>
<DOC>
<DOCNO>1642</DOCNO>
<TEXT>
time
sharing
on
a
computer
with
a
small
memory
techniques
to
make
time
sharing
attractive
on
a
computer
with
a
small
central
memory
are
presented
small
is
taken
to
mean
that
only
one
user
program
plus
a
monitor
will
fit
into
the
memory
at
any
time
the
techniques
depend
on
having
two
levels
of
secondary
storage
level
1
several
times
larger
than
the
main
memory
and
quite
fast
and
level
2
many
times
larger
and
slower
than
level
1
cacm
february
1967
fisher
r
o
shepard
c
d
ca670201
jb
february
28
1978
4
10
pm
1642
5
1642
1642
5
1642
1642
5
1642
</TEXT>
</DOC>
<DOC>
<DOCNO>1643</DOCNO>
<TEXT>
an
improvement
to
iterative
methods
of
polynomial
factorization
methods
of
polynomial
factorization
which
find
the
zeros
one
at
a
time
require
the
division
of
the
polynomial
by
the
accepted
factor
it
is
shown
how
the
accuracy
of
this
division
may
be
increased
by
dividing
in
order
of
both
ascending
and
descending
powers
of
the
variable
and
choosing
a
crossover
point
which
minimizes
a
very
simply
calculated
error
criterion
cacm
january
1967
bingham
j
a
c
ca670112
jb
february
28
1978
4
20
pm
1643
5
1643
1643
5
1643
1643
5
1643
</TEXT>
</DOC>
<DOC>
<DOCNO>1644</DOCNO>
<TEXT>
on
the
computation
of
least
squares
polynomials
rounding
error
accumulated
during
digital
computation
of
a
least
squares
polynomial
makes
the
computed
polynomial
only
an
approximation
to
the
true
least
square
polynomial
a
simple
method
for
adjust
ing
the
constant
term
of
the
computed
polynomial
to
get
a
better
approximation
to
the
true
least
squares
polynomial
is
described
cacm
january
1967
goldberg
m
ca670111
jb
february
28
1978
4
24
pm
1644
5
1644
1644
5
1644
1644
5
1644
</TEXT>
</DOC>
<DOC>
<DOCNO>1645</DOCNO>
<TEXT>
a
note
on
computing
approximations
to
the
exponential
function
two
methods
are
discussed
which
result
in
near
minimax
rational
approximations
to
the
exponential
function
and
at
the
same
time
retain
the
desirable
property
that
the
approximation
for
negative
values
of
the
argument
is
the
reciprocal
of
the
approximation
for
corresponding
positive
values
these
methods
lead
to
approximations
which
are
much
superior
to
the
commonly
used
convergents
of
the
gaussian
continued
fraction
for
the
exponential
coefficients
and
errors
are
given
for
the
intervals
5
ln
2
5
ln
2
and
ln
2
ln
2
cacm
january
1967
cody
w
j
ralston
a
ca670110jb
february
28
1978
4
25
pm
1015
4
1645
1346
4
1645
1440
4
1645
1645
4
1645
951
4
1645
1645
5
1645
1645
5
1645
1645
5
1645
532
5
1645
</TEXT>
</DOC>
<DOC>
<DOCNO>1646</DOCNO>
<TEXT>
ditran
a
compiler
emphasizing
diagnostics
ditran
diagnostic
fortran
is
an
implementation
of
asa
basic
fortran
with
rather
extensive
error
checking
capabilities
both
at
compilation
time
and
during
execution
of
a
program
the
need
for
improved
diagnostic
capabilities
and
some
objectives
to
be
met
by
any
compiler
are
discussed
attention
is
given
to
the
design
and
implementation
of
ditran
and
the
particular
techniques
employed
to
provide
the
diagnostic
features
the
handling
of
error
messages
by
a
general
macro
approach
is
described
special
features
which
provide
teaching
aids
for
use
by
instructors
are
noted
cacm
january
1967
moulton
p
g
muller
m
e
ca670109
jb
february
28
1978
4
30
pm
1179
4
1646
1225
4
1646
1288
4
1646
1350
4
1646
1544
4
1646
1613
4
1646
1646
4
1646
1646
4
1646
1646
4
1646
1646
4
1646
1646
4
1646
1646
4
1646
1647
4
1646
1728
4
1646
1781
4
1646
1900
4
1646
1945
4
1646
1955
4
1646
2025
4
1646
2111
4
1646
2154
4
1646
2365
4
1646
2506
4
1646
2534
4
1646
2556
4
1646
2650
4
1646
2650
4
1646
2698
4
1646
2708
4
1646
3060
4
1646
3093
4
1646
987
5
1646
1072
5
1646
1179
5
1646
1646
5
1646
1646
5
1646
1646
5
1646
1647
5
1646
2887
5
1646
680
5
1646
830
5
1646
1646
6
1646
2111
6
1646
</TEXT>
</DOC>
<DOC>
<DOCNO>1647</DOCNO>
<TEXT>
watfor
the
university
of
waterloo
fortran
iv
compiler
watfor
is
an
in
core
load
and
go
compiler
which
has
been
implemented
within
the
ibm
7040
44
operating
system
fortran
iv
was
selected
as
the
source
language
in
order
to
achieve
maximum
language
compatibility
with
other
available
compiling
systems
in
particular
the
ibm
7040
44
fortran
iv
system
the
principal
advantage
of
the
watfor
compiler
is
that
it
translates
fortran
iv
programs
at
speeds
of
up
to
100
statements
per
second
since
the
compiler
resides
core
there
is
virtually
no
system
overhead
and
hence
large
batches
of
student
programs
may
be
processed
very
efficiently
the
compiler
also
provides
extensive
error
diagnostics
during
both
the
compilation
and
the
execution
phases
of
a
program
run
this
feature
makes
the
system
attractive
to
both
learners
and
learned
users
alike
cacm
january
1967
shantz
p
w
german
r
a
mitchell
j
g
ca670108
jb
february
28
1978
4
36
pm
267
4
1647
1139
4
1647
1141
4
1647
1215
4
1647
1223
4
1647
1646
4
1647
1647
4
1647
1647
4
1647
1781
4
1647
1787
4
1647
1792
4
1647
364
4
1647
405
4
1647
438
4
1647
763
4
1647
1179
5
1647
224
5
1647
1646
5
1647
1647
5
1647
1647
5
1647
1647
5
1647
1728
5
1647
830
6
1647
987
6
1647
1072
6
1647
1179
6
1647
1525
6
1647
1647
6
1647
1647
6
1647
1785
6
1647
680
6
1647
</TEXT>
</DOC>
<DOC>
<DOCNO>1648</DOCNO>
<TEXT>
uniform
random
algorithm
294
g5
cacm
january
1967
strome
w
m
ca670107
jb
february
28
1978
4
37
pm
1648
5
1648
1648
5
1648
1648
5
1648
1663
5
1648
2349
5
1648
1190
6
1648
1648
6
1648
1648
6
1648
1716
6
1648
1794
6
1648
1894
6
1648
2043
6
1648
501
6
1648
613
6
1648
774
6
1648
</TEXT>
</DOC>
<DOC>
<DOCNO>1649</DOCNO>
<TEXT>
data
directed
input
output
in
fortran
a
statement
which
is
similar
to
the
namelist
statement
of
fortran
iv
has
been
incorporated
in
the
fortran
63
compiler
the
fortran
63
implementation
allows
a
greater
flexibility
and
simplicity
than
the
fortran
iv
feature
the
hollerith
names
the
location
the
mode
and
the
dimensions
of
a
variable
can
be
discovered
by
means
of
standard
fortran
statements
methods
of
using
this
information
are
illustrated
in
relation
to
general
purpose
data
directed
input
and
output
routines
some
other
uses
such
as
matrix
manipulation
are
discussed
cacm
january
1967
hassitt
a
ca670106
jb
february
28
1978
4
41
pm
1649
4
1649
1053
5
1649
1649
5
1649
1649
5
1649
1649
5
1649
</TEXT>
</DOC>
<DOC>
<DOCNO>1650</DOCNO>
<TEXT>
a
unifying
computational
method
for
the
analysis
of
complete
factorial
experiments
a
computational
method
which
may
be
used
for
the
calculation
of
sums
of
squares
in
the
analysis
of
variance
of
complete
factorial
experiments
and
in
the
computation
of
main
effect
or
interaction
means
is
described
the
method
is
elucidated
as
unifying
since
one
method
can
be
used
for
a
variety
of
purposes
each
previously
requiring
different
methods
the
programming
advantages
of
such
a
method
are
obvious
the
following
variants
are
discussed
1
the
standard
analysis
of
variance
2
analyses
omitting
certain
levels
of
one
or
more
factors
3
separate
analyses
for
some
levels
of
a
factor
or
for
combinations
of
levels
of
more
than
one
factor
these
are
performed
simultaneously
4
the
calculation
of
main
effect
or
interaction
means
the
mean
expects
the
data
in
standard
order
and
it
leaves
the
data
in
that
order
so
that
many
analyses
of
the
same
data
can
be
performed
without
rearrangement
the
total
sum
of
squares
excluding
a
replication
sum
of
squares
is
partitioned
into
all
polynomial
partitions
and
their
interactions
each
with
one
degree
of
freedom
this
is
so
even
if
factors
have
unequally
spaced
factor
levels
cacm
january
1967
cooper
b
e
ca670105
jb
february
28
1978
4
49
pm
1650
5
1650
1650
5
1650
1650
5
1650
</TEXT>
</DOC>
<DOC>
<DOCNO>1651</DOCNO>
<TEXT>
an
interpretive
input
routine
for
linear
programming
in
this
descriptive
article
an
input
code
is
presented
which
greatly
simplifies
data
input
to
any
linear
programming
solution
routine
for
subsequent
use
either
as
a
pedagogical
device
or
for
solving
rather
small
lp
problems
this
latter
limited
use
derives
not
at
all
from
inherent
limitations
in
the
code
itself
but
from
an
efficiency
evaluation
large
lp
problems
would
doubtless
benefit
from
an
input
system
more
suited
for
bulk
data
handling
than
the
input
code
described
from
a
user
standpoint
input
appears
almost
exactly
as
a
textbook
presentation
of
the
lp
problem
limited
only
by
a
keypunch
inability
to
write
subscripts
etc
the
input
interpreter
scans
column
wise
thus
no
fixed
format
data
preparation
is
required
the
user
may
also
under
very
general
requirements
only
liberally
use
editorial
comments
throughout
the
input
deck
as
an
aid
in
identification
e
g
of
row
constraints
the
article
includes
examples
of
input
output
from
a
solution
routine
presently
in
use
and
a
skeleton
flowchart
of
the
input
interpreter
cacm
january
1967
aigner
d
j
ca670104
jb
march
1
1978
8
58
am
1651
5
1651
1651
5
1651
1651
5
1651
</TEXT>
</DOC>
<DOC>
<DOCNO>1652</DOCNO>
<TEXT>
a
code
for
non
numeric
information
processing
applications
in
online
systems
a
code
has
been
specifically
designed
to
simplify
the
internal
information
processing
operations
within
an
online
computer
system
with
respect
to
non
numeric
applications
and
to
maximize
the
transfer
rate
of
the
information
channel
linking
the
system
and
the
system
user
the
code
has
direct
application
to
problems
in
area
such
as
information
retrieval
document
classification
computer
aided
teaching
and
text
editing
this
code
called
ipc
information
processing
code
is
an
8
bit
code
set
constructed
so
that
7
6
5
and
4
bit
subsets
can
be
easily
derived
from
the
basic
set
the
code
set
is
organized
so
that
simple
binary
operations
can
distinguish
between
the
numeric
alphabetic
special
symbol
and
control
character
codes
the
number
of
usable
characters
within
the
basic
set
size
may
be
expanded
either
by
use
of
escape
codes
included
in
the
set
or
by
suitable
interpretation
of
otherwise
unassigned
codes
on
the
basis
of
the
requirements
of
local
environments
cacm
january
1967
morenoff
e
mclean
j
b
ca670103
jb
march
1
1978
9
05
am
1652
5
1652
1652
5
1652
1652
5
1652
</TEXT>
</DOC>
<DOC>
<DOCNO>1653</DOCNO>
<TEXT>
system
performance
evaluation
survey
and
appraisal
the
state
of
the
art
of
system
performance
evaluation
is
reviewed
and
evaluation
goals
and
problems
are
examined
throughput
turnaround
and
availability
are
defined
as
fundamental
measures
of
performance
overhead
and
cpu
speed
are
placed
in
perspective
the
appropriateness
of
instruction
mixes
kernels
simulators
and
other
tools
is
discussed
as
well
as
pitfalls
which
may
be
encountered
when
using
them
analysis
simulation
and
synthesis
are
presented
as
three
levels
of
approach
to
evaluation
requiring
successively
greater
amounts
of
information
the
central
role
of
measurement
in
performance
evaluation
and
in
the
development
of
evaluation
methods
is
explored
cacm
january
1967
calingaert
p
ca670102
jb
march
1
1978
9
10
am
1653
4
1653
1653
4
1653
1653
4
1653
2387
4
1653
2852
4
1653
2989
4
1653
963
5
1653
1069
5
1653
1417
5
1653
1653
5
1653
1653
5
1653
1653
5
1653
2151
5
1653
2318
5
1653
1653
6
1653
1653
6
1653
1747
6
1653
1860
6
1653
</TEXT>
</DOC>
<DOC>
<DOCNO>1654</DOCNO>
<TEXT>
a
university
educational
program
in
computer
science
after
a
review
of
the
power
of
contemporary
computers
computer
science
is
defined
in
several
ways
the
objectives
of
computer
science
education
are
stated
and
it
is
asserted
that
in
a
north
american
university
these
will
be
achieved
only
through
a
computer
science
department
the
program
at
stanford
university
is
reviewed
as
an
example
the
appendices
include
syllabic
of
ph
qualifying
examinations
for
stanford
computer
science
department
cacm
january
1967
forsythe
g
e
ca670101
jb
march
1
1978
9
13
am
1413
4
1654
1654
4
1654
1771
4
1654
2478
4
1654
1205
5
1654
1654
5
1654
1654
5
1654
1654
5
1654
1720
5
1654
1771
5
1654
1205
6
1654
1654
6
1654
1654
6
1654
1771
6
1654
</TEXT>
</DOC>
<DOC>
<DOCNO>1655</DOCNO>
<TEXT>
code
extension
procedures
for
information
interchange
proposed
usa
standard
cacm
december
1968
standard
code
code
information
interchange
characters
shift
out
shift
in
escape
data
link
escape
control
functions
standard
procedures
code
extension
code
table
bit
pattern
1
0
2
0
2
43
3
20
3
24
3
50
3
51
3
52
3
53
3
54
3
55
3
56
3
57
3
70
3
71
3
72
3
73
3
74
3
75
3
80
3
81
3
82
3
83
5
0
5
1
6
2
6
21
6
22
ca681211
jb
february
21
1978
12
16
pm
1655
5
1655
1655
5
1655
1655
5
1655
</TEXT>
</DOC>
<DOC>
<DOCNO>1656</DOCNO>
<TEXT>
procedures
for
the
standardization
process
proposed
usa
standard
cacm
december
1968
standardization
procedures
criteria
2
3
4
2
ca681210
jb
february
21
1978
12
21
pm
1656
5
1656
1656
5
1656
1656
5
1656
</TEXT>
</DOC>
<DOC>
<DOCNO>1657</DOCNO>
<TEXT>
implementation
of
the
sharer2
time
sharing
system
a
simple
mechanism
is
described
for
the
execution
of
part
of
a
program
with
its
own
memory
protection
this
allows
such
a
program
to
act
as
a
suboperating
system
an
improved
version
of
the
sharer
time
sharing
system
using
this
feature
is
described
cacm
december
1968
harrison
m
c
operating
system
memory
protection
time
sharing
multiprogramming
monitor
submonitor
suboperating
system
4
32
4
31
4
32
ca681209
jb
february
21
1978
1
27
pm
1657
4
1657
2080
4
1657
2357
4
1657
2536
4
1657
1523
5
1657
1657
5
1657
1657
5
1657
1657
5
1657
</TEXT>
</DOC>
<DOC>
<DOCNO>1658</DOCNO>
<TEXT>
analysis
of
algorithms
for
the
zero
one
programming
problem
this
paper
is
concerned
with
a
review
and
examination
of
several
existing
algorithms
for
the
zero
one
programming
problem
computational
experience
is
summarized
the
machine
time
and
storage
requirements
of
several
of
the
algorithms
are
compared
over
several
test
problems
of
small
and
intermediate
size
computer
experiments
still
provide
little
hope
of
solving
problems
with
over
100
variables
with
a
reasonable
amount
of
machine
time
cacm
december
1968
gue
r
l
liggett
j
c
cain
k
c
operations
research
optimization
theory
integer
programming
zero
one
variables
algorithms
5
39
5
41
ca681208
jb
february
21
1978
1
31
pm
1658
4
1658
1088
5
1658
1658
5
1658
1658
5
1658
1658
5
1658
2226
5
1658
1658
6
1658
1666
6
1658
</TEXT>
</DOC>
<DOC>
<DOCNO>1659</DOCNO>
<TEXT>
computational
linguistics
in
a
ph
computer
science
program
this
report
contains
recommendations
for
a
course
curriculum
on
computational
linguistics
in
a
ph
computer
science
program
a
classification
of
the
subject
areas
contained
in
computational
linguistics
is
presented
and
ten
courses
in
these
areas
are
described
a
basic
bibliography
in
computational
linguistics
is
appended
cacm
december
1968
kuno
s
oettinger
a
g
computational
linguistics
mathematical
linguistics
language
and
computer
language
data
processing
computational
linguistics
course
curriculum
computational
linguistics
graduate
program
computational
linguistics
bibliography
computer
science
curriculum
1
52
3
42
3
43
ca681207
jb
february
21
1978
1
37
pm
1350
4
1659
1350
4
1659
1399
4
1659
1659
4
1659
1659
4
1659
1659
4
1659
1659
4
1659
1659
4
1659
1768
4
1659
1781
4
1659
1856
4
1659
1945
4
1659
2050
4
1659
2110
4
1659
3094
4
1659
1225
5
1659
1265
5
1659
1350
5
1659
1659
5
1659
1659
5
1659
1659
5
1659
1671
5
1659
1697
5
1659
1927
5
1659
3003
5
1659
1659
6
1659
1659
6
1659
1678
6
1659
1771
6
1659
1927
6
1659
1945
6
1659
2097
6
1659
2147
6
1659
2163
6
1659
2187
6
1659
2329
6
1659
2345
6
1659
2367
6
1659
2407
6
1659
2478
6
1659
2479
6
1659
2480
6
1659
2538
6
1659
</TEXT>
</DOC>
<DOC>
<DOCNO>1660</DOCNO>
<TEXT>
index
by
subject
to
algorithms
1960
1968
cacm
december
1968
ca681206
jb
february
21
1978
1
39
pm
1660
5
1660
1660
5
1660
1660
5
1660
</TEXT>
</DOC>
<DOC>
<DOCNO>1661</DOCNO>
<TEXT>
multint
algorithm
32
d1
cacm
december
1968
kolbig
k
s
numerical
integration
multidimensional
integration
gaussian
integration
5
16
ca681205
jb
february
21
1978
1
41
pm
1661
5
1661
1661
5
1661
1661
5
1661
</TEXT>
</DOC>
<DOC>
<DOCNO>1662</DOCNO>
<TEXT>
eigenvalues
and
eigenvectors
of
a
real
general
matrix
f2
cacm
december
1968
grad
j
brebner
m
a
eigenvalues
eigenvectors
latent
roots
latent
vectors
householder
method
qr
algorithm
inverse
iteration
5
14
ca681204
jb
february
21
1978
1
42
pm
1662
5
1662
1662
5
1662
1662
5
1662
1968
5
1662
2099
5
1662
2335
5
1662
1662
6
1662
1662
6
1662
1662
6
1662
1707
6
1662
2099
6
1662
</TEXT>
</DOC>
<DOC>
<DOCNO>1663</DOCNO>
<TEXT>
generator
of
random
numbers
satisfying
the
poisson
distribution
g5
cacm
december
1968
snow
r
h
poisson
distribution
random
number
generator
monte
carlo
5
12
5
5
ca681203
jb
february
21
1978
1
45
pm
1663
4
1663
1663
4
1663
2195
4
1663
2349
4
1663
2679
4
1663
1190
5
1663
1648
5
1663
1663
5
1663
1663
5
1663
1663
5
1663
2123
5
1663
1663
6
1663
</TEXT>
</DOC>
<DOC>
<DOCNO>1664</DOCNO>
<TEXT>
an
algorithm
for
deriving
the
equations
of
mathematical
physics
by
symbolic
manipulation
a
method
is
described
whereby
a
digital
computer
can
be
used
to
derive
the
equations
of
mathematical
physics
in
any
curvilinear
coordinate
system
requested
by
the
user
the
effectiveness
of
the
technique
is
demonstrated
by
using
it
to
derive
the
navier
stokes
equations
of
fluid
motion
and
the
continuity
equation
to
derive
these
equations
by
this
method
the
user
need
know
only
the
coordinate
transformation
equations
relating
the
curvilinear
coordinates
of
interest
to
an
orthogonal
cartesian
triad
when
this
program
is
used
and
the
coordinate
transformation
equations
are
supplied
as
input
the
computer
will
derive
the
navier
stokes
equations
and
the
continuity
equation
the
equations
obtained
will
be
relative
to
the
curvilinear
coordinate
system
specified
by
the
transformation
equations
used
as
input
in
this
paper
the
emphasis
is
on
theoretical
considerations
and
methodology
rather
than
on
programming
details
results
are
presented
for
cylindrical
polar
and
spherical
polar
coordinate
systems
cacm
december
1968
howard
j
c
tashjian
h
formac
navier
strokes
equations
continuity
equation
tensor
tensor
equation
curvilinear
coordinate
systems
fortran
symbolic
manipulation
3
21
3
25
3
29
4
12
4
29
ca681202
jb
february
21
1978
2
02
pm
1543
4
1664
1543
4
1664
1664
4
1664
1664
4
1664
1664
4
1664
1345
5
1664
1543
5
1664
1616
5
1664
1664
5
1664
1664
5
1664
1664
5
1664
</TEXT>
</DOC>
<DOC>
<DOCNO>1665</DOCNO>
<TEXT>
automatic
generation
of
efficient
lexical
processors
using
finite
state
techniques
the
practical
application
of
the
theory
of
finite
state
automata
to
automatically
generate
lexical
processors
is
dealt
with
in
this
tutorial
article
by
the
use
of
the
aed
rword
system
developed
at
m
as
part
of
the
aed
1
system
this
system
accepts
as
input
description
of
the
multicharacter
items
or
of
words
allowable
in
a
language
given
in
terms
of
a
subset
of
regular
expressions
the
output
of
the
system
is
a
lexical
processor
which
reads
a
string
of
characters
and
combines
them
into
the
items
as
defined
by
the
regular
expressions
each
output
item
is
identified
by
a
code
number
together
with
a
pointer
to
a
block
of
storage
containing
the
characters
and
character
count
in
the
item
the
processors
produced
by
the
system
are
based
on
finite
state
machines
each
state
of
a
machine
corresponds
to
a
unique
condition
in
the
lexical
processing
of
a
character
string
at
each
state
a
character
is
read
and
the
machine
changes
to
a
new
state
at
each
transition
appropriate
actions
are
taken
based
on
the
particular
character
read
the
system
has
been
in
operation
since
1966
and
processors
generated
have
compared
favorably
in
speed
to
carefully
hand
coded
programs
to
accomplish
the
same
task
lexical
processors
for
aed
o
and
mad
are
among
the
many
which
have
been
produced
the
techniques
employed
are
independent
of
the
nature
of
the
items
being
evaluated
if
the
word
events
is
substituted
for
character
string
these
processors
may
be
described
as
generalized
decision
making
mechanisms
based
upon
an
ordered
sequence
of
events
this
allows
the
system
to
be
used
in
a
range
of
applications
outside
the
area
of
lexical
processing
however
convenient
these
advantages
may
be
speed
is
the
most
important
consideration
in
designing
a
system
for
automatic
generation
of
a
lexical
processor
the
goal
was
a
processor
which
completely
eliminated
backup
or
rereading
which
was
nearly
as
fast
as
hand
coded
processors
which
would
analyze
the
language
and
detect
errors
and
which
would
be
convenient
and
easy
to
use
cacm
december
1968
johnson
w
l
porter
j
h
ackley
s
i
ross
d
t
character
string
compiler
finite
state
automata
finite
state
machine
lexical
processor
nondeterministic
machine
parsing
plex
structure
regular
expressions
sequential
machine
syntactic
analysis
3
63
3
75
4
12
5
22
5
24
5
31
ca681201
jb
february
21
1978
2
19
pm
1051
4
1665
1139
4
1665
1265
4
1665
1323
4
1665
1358
4
1665
1380
4
1665
1552
4
1665
1665
4
1665
1665
4
1665
1665
4
1665
1665
4
1665
1768
4
1665
1781
4
1665
1787
4
1665
1787
4
1665
1824
4
1665
1825
4
1665
1836
4
1665
1860
4
1665
1861
4
1665
1989
4
1665
2015
4
1665
2110
4
1665
2112
4
1665
2127
4
1665
2155
4
1665
2187
4
1665
2317
4
1665
2534
4
1665
2541
4
1665
2545
4
1665
2698
4
1665
2698
4
1665
2733
4
1665
2733
4
1665
2820
4
1665
3073
4
1665
3155
4
1665
763
4
1665
1665
5
1665
1665
5
1665
1665
5
1665
1781
5
1665
378
5
1665
2746
5
1665
631
5
1665
799
5
1665
1665
6
1665
1739
6
1665
2139
6
1665
2545
6
1665
2786
6
1665
</TEXT>
</DOC>
<DOC>
<DOCNO>1666</DOCNO>
<TEXT>
solution
of
linear
programs
in
0
1
variables
by
implicit
enumeration
algorithm
341
h
cacm
november
1968
byrne
j
l
proll
l
g
linear
programming
zero
one
variables
partial
enumeration
5
41
ca681113
jb
february
21
1978
2
21
pm
1666
5
1666
1666
5
1666
1666
5
1666
2226
5
1666
1658
6
1666
1666
6
1666
</TEXT>
</DOC>
<DOC>
<DOCNO>1667</DOCNO>
<TEXT>
roots
of
polynomials
by
a
root
squaring
and
resultant
routine
algorithm
340
c2
cacm
november
1968
noltemeier
a
root
finders
roots
of
polynomial
equations
polynomial
zeros
root
squaring
operations
graeffe
method
resultant
procedure
subresultant
procedure
testing
of
roots
acceptance
criteria
5
15
ca681112
jb
february
21
1978
2
24
pm
1667
4
1667
1667
4
1667
1667
4
1667
178
5
1667
1242
5
1667
1667
5
1667
1667
5
1667
1667
5
1667
327
5
1667
</TEXT>
</DOC>
<DOC>
<DOCNO>1668</DOCNO>
<TEXT>
an
algol
procedure
for
the
fast
fourier
transform
with
arbitrary
factors
algorithm
339
c6
cacm
november
1968
singleton
r
c
fast
fourier
transform
multivariate
fourier
transform
fourier
series
harmonic
analysis
spectral
analysis
orthogonal
polynomials
orthogonal
transformation
virtual
core
memory
permutation
3
15
3
83
5
12
5
14
ca681111
jb
february
21
1978
2
26
pm
1668
4
1668
1668
4
1668
1669
4
1668
1679
4
1668
1728
4
1668
2859
4
1668
1525
5
1668
1668
5
1668
1668
5
1668
1668
5
1668
1669
5
1668
</TEXT>
</DOC>
<DOC>
<DOCNO>1669</DOCNO>
<TEXT>
algol
procedures
for
the
fast
fourier
transform
algorithm
338
c6
cacm
november
1968
singleton
r
c
fast
fourier
transform
complex
fourier
transform
multivariate
fourier
transform
fourier
series
harmonic
analysis
spectral
analysis
orthogonal
polynomials
orthogonal
transformation
virtual
core
memory
permutation
3
15
3
83
5
12
5
14
ca681110
jb
february
21
1978
2
29
pm
1668
4
1669
1669
4
1669
1679
4
1669
1728
4
1669
2859
4
1669
1525
5
1669
1668
5
1669
1669
5
1669
1669
5
1669
1669
5
1669
1525
6
1669
1669
6
1669
</TEXT>
</DOC>
<DOC>
<DOCNO>1670</DOCNO>
<TEXT>
correspondences
of
8
bit
and
hollerith
codes
for
computer
environments
a
usasi
tutorial
standard
cacm
november
1968
usa
standard
card
code
punched
card
punched
card
code
hole
patterns
hole
patterns
assignment
punched
card
systems
1
1
1
4
2
0
2
12
2
43
2
44
3
10
3
20
3
30
3
31
3
42
3
50
3
56
3
70
3
72
3
73
3
74
3
80
3
81
4
0
4
1
4
2
4
20
4
40
5
0
ca681109
jb
february
21
1978
2
33
pm
1670
5
1670
1670
5
1670
1670
5
1670
</TEXT>
</DOC>
<DOC>
<DOCNO>1671</DOCNO>
<TEXT>
a
phonological
rule
tester
the
design
and
implementation
of
a
system
to
alleviate
the
problem
of
rule
evaluation
for
the
linguist
in
the
area
of
phonology
are
presented
it
permits
the
user
to
define
on
line
sets
of
rules
statable
within
the
framework
presented
in
the
sound
patterns
of
english
by
chomsky
and
halle
1968
to
define
phonemes
as
bundles
of
specified
distinctive
features
to
define
data
as
strings
of
phonemes
with
associated
grammatical
structure
to
test
the
effect
of
applying
rules
to
the
data
and
to
store
both
the
definitions
and
results
the
rule
application
facility
described
in
detail
was
implemented
by
translating
linguistic
rules
to
rules
in
flip
a
format
directed
list
processor
embedded
in
lisp
this
made
the
system
construction
easy
while
providing
sophisticated
capabilities
for
the
linguist
the
system
is
written
in
bbn
lisp
on
the
scientific
data
system
940
computer
and
is
designed
to
be
used
on
line
in
interactive
fashion
with
control
returned
to
the
user
after
each
command
is
executed
cacm
november
1968
borrow
d
g
fraser
j
b
phonology
rule
tester
linguistics
transformational
grammar
lisp
format
directed
list
processing
on
line
systems
3
42
4
13
4
22
ca681108
jb
february
21
1978
2
41
pm
1659
5
1671
1671
5
1671
1671
5
1671
1671
5
1671
1225
6
1671
1265
6
1671
1350
6
1671
1671
6
1671
1697
6
1671
</TEXT>
</DOC>
<DOC>
<DOCNO>1672</DOCNO>
<TEXT>
practical
error
coefficients
in
the
integration
of
periodic
analytic
functions
by
the
trapezoidal
rule
theoretical
and
practical
values
of
error
coefficients
useful
in
bounding
the
error
in
integrating
periodic
analytic
functions
with
the
trapezoidal
rule
are
tabulated
for
various
ranges
of
the
parameters
cacm
november
1968
rabinowitz
p
theoretical
error
coefficients
practical
error
coefficients
numerical
integration
periodic
analytic
functions
trapezoidal
rule
roundoff
error
truncation
error
integration
algorithm
5
11
5
16
ca681107
jb
february
21
1978
2
45
pm
1672
4
1672
1672
5
1672
1672
5
1672
1672
5
1672
1784
5
1672
</TEXT>
</DOC>
<DOC>
<DOCNO>1673</DOCNO>
<TEXT>
approximate
solution
of
initial
boundary
wave
equation
problems
by
boundary
value
techniques
a
new
boundary
value
technique
is
proposed
for
the
treatment
of
initial
boundary
value
problems
for
linear
and
mildly
nonlinear
wave
equations
several
illustrative
examples
are
offered
to
demonstrate
the
ease
with
which
the
method
can
be
applied
cacm
november
1968
greenspan
d
initial
boundary
value
problem
wave
equation
boundary
value
technique
5
15
5
17
ca681106
jb
february
21
1978
2
48
pm
1673
5
1673
1673
5
1673
1673
5
1673
</TEXT>
</DOC>
<DOC>
<DOCNO>1674</DOCNO>
<TEXT>
one
line
random
number
generators
and
their
use
in
combinations
some
one
line
random
number
generators
i
e
generators
requiring
a
single
fortran
instruction
are
discussed
and
some
short
fortran
programs
which
mix
several
such
generators
are
described
the
aim
is
to
provide
methods
for
incorporating
random
number
generators
directly
in
fortran
programs
by
means
of
a
few
in
line
instructions
the
advantages
are
speed
avoiding
linkage
to
and
from
a
subroutine
convenience
and
versatility
anyone
wishing
to
experiment
with
generators
either
using
congruential
generators
by
themselves
or
mixing
several
generators
to
provide
a
composite
with
potentially
better
statistical
properties
than
the
library
generators
currently
available
may
wish
to
consider
some
of
the
simple
fortran
program
discussed
here
cacm
november
1968
marsaglia
g
bray
t
a
random
number
generation
monte
carlo
simulation
5
5
ca681105
jb
february
21
1978
2
54
pm
1674
4
1674
1691
4
1674
1293
5
1674
1674
5
1674
1674
5
1674
1674
5
1674
1794
5
1674
1870
5
1674
2122
5
1674
1674
6
1674
1674
6
1674
1674
6
1674
1691
6
1674
</TEXT>
</DOC>
<DOC>
<DOCNO>1675</DOCNO>
<TEXT>
a
note
on
a
relevance
estimate
and
its
improvement
in
this
paper
the
effect
of
iterating
the
improvement
procedure
is
examined
it
is
shown
that
applications
of
the
improvement
factor
beyond
the
first
time
are
ineffectual
and
that
the
factor
is
but
a
scale
factor
cacm
november
1968
korfhage
r
r
information
retrieval
relevance
indexing
classification
3
70
3
71
3
74
ca681104
jb
february
21
1978
2
57
pm
1675
5
1675
1675
5
1675
1675
5
1675
</TEXT>
</DOC>
<DOC>
<DOCNO>1676</DOCNO>
<TEXT>
the
lrltran
compiler
extensive
software
problems
confront
an
organization
which
possesses
a
number
of
different
computers
and
which
frequently
acquires
new
ones
to
maintain
cohesion
a
system
must
be
developed
written
in
a
high
level
language
which
minimizes
machine
dependencies
and
isolates
those
which
are
necessary
a
language
and
a
compiler
for
the
language
are
discussed
here
the
language
called
lrltran
is
a
heavily
augmented
fortran
the
tree
pass
compiler
makes
use
internally
of
a
postfix
polish
notation
pass
i
to
pass
ii
and
a
tree
representation
referred
to
as
a
composite
blocking
table
pass
i
to
pass
iii
machine
independent
optimization
occurs
in
pass
ii
and
do
loop
and
machine
dependent
optimization
in
pass
iii
cacm
november
1968
mendicino
s
f
martin
j
t
ranelletti
j
e
zwakenberg
r
g
compiler
compiler
compiler
machine
independence
scatter
storage
technique
polish
processor
common
subsegments
tree
representation
optimization
4
12
4
20
ca681103
jb
february
21
1978
3
03
pm
1676
4
1676
1682
4
1676
1728
4
1676
1860
4
1676
1973
4
1676
2018
4
1676
2032
4
1676
2033
4
1676
2107
4
1676
2109
4
1676
2203
4
1676
2251
4
1676
2359
4
1676
2524
4
1676
2543
4
1676
2552
4
1676
2559
4
1676
2991
4
1676
3053
4
1676
1676
5
1676
1676
5
1676
1676
5
1676
1785
5
1676
2859
5
1676
1525
6
1676
1676
6
1676
</TEXT>
</DOC>
<DOC>
<DOCNO>1677</DOCNO>
<TEXT>
storage
organization
in
programming
systems
the
system
of
program
and
data
representation
that
has
been
in
use
on
the
rice
university
computer
for
five
years
is
described
each
logical
entity
in
storage
occupies
a
block
of
consecutive
memory
locations
each
block
is
labeled
by
a
codeword
and
may
contain
a
program
a
data
vector
or
codewords
which
in
turn
label
blocks
to
form
arrays
this
storage
arrangement
is
discussed
with
its
realized
advantages
or
programming
systems
simplicity
of
programmed
addressing
flexibility
of
data
structures
efficiency
of
memory
utilization
variability
of
system
composition
during
execution
means
of
linkage
between
programs
and
from
programs
to
data
and
basis
for
storage
protection
the
application
of
labeled
blocks
may
be
extended
to
areas
of
time
sharing
and
multimedia
storage
control
on
the
basis
of
experience
at
rice
some
ideas
on
such
extensions
are
presented
cacm
november
1968
jodeit
j
g
storage
allocation
storage
organization
storage
control
codewords
data
representation
program
representation
data
structures
storage
protection
addressing
mechanisms
paging
segmentation
file
handling
4
30
4
40
6
20
ca681102
jb
february
21
1978
3
11
pm
1677
5
1677
1677
5
1677
1677
5
1677
2064
5
1677
1677
6
1677
</TEXT>
</DOC>
<DOC>
<DOCNO>1678</DOCNO>
<TEXT>
automata
formal
languages
abstract
switching
and
computability
in
a
ph
computer
science
program
a
number
of
courses
are
listed
in
the
area
describe
as
automata
formal
languages
abstract
switching
and
computability
that
might
be
available
to
a
ph
student
in
computer
science
a
brief
catalog
description
of
each
course
is
applied
and
the
role
of
each
of
the
courses
in
the
graduate
program
is
discussed
cacm
november
1968
mcnaughton
r
ph
computer
science
curriculum
ph
computer
science
program
automata
formal
languages
switching
theory
theory
of
computability
1
5
5
2
6
1
ca681101
jb
february
21
1978
3
16
pm
1678
5
1678
1678
5
1678
1678
5
1678
3003
5
1678
1659
6
1678
1678
6
1678
1927
6
1678
1945
6
1678
2097
6
1678
2147
6
1678
2163
6
1678
2187
6
1678
2329
6
1678
2345
6
1678
2367
6
1678
2407
6
1678
2478
6
1678
2479
6
1678
2480
6
1678
2538
6
1678
</TEXT>
</DOC>
<DOC>
<DOCNO>1679</DOCNO>
<TEXT>
a
fast
fourier
transform
algorithm
for
real
valued
series
a
new
procedure
is
presented
for
calculating
the
complex
discrete
fourier
transform
of
real
valued
time
series
this
procedure
is
described
for
an
example
where
the
number
of
points
in
the
series
is
an
integral
power
of
two
this
algorithm
preserves
the
order
and
symmetry
of
the
cooley
turkey
fast
fourier
transform
algorithm
while
effecting
the
two
to
one
reduction
in
computation
and
storage
which
can
be
achieved
when
the
series
is
real
also
discussed
are
hardware
and
software
implementations
of
the
algorithm
which
perform
only
n
4
log2
n
2
complex
multiply
and
add
operations
and
which
require
only
n
real
storage
locations
in
analyzing
each
n
point
record
cacm
october
1968
bergland
g
d
fast
fourier
transform
time
series
analysis
digital
filtering
spectral
analysis
real
time
spectrum
analyzers
fourier
analysis
discrete
fourier
transform
digital
spectrum
analysis
fourier
analysis
algorithm
fourier
synthesis
algorithm
3
80
3
81
4
9
5
49
6
22
ca681008
jb
february
21
1978
3
23
pm
1668
4
1679
1669
4
1679
1679
4
1679
1728
4
1679
2859
4
1679
1525
5
1679
1679
5
1679
1679
5
1679
1679
5
1679
2354
5
1679
1418
6
1679
1521
6
1679
1597
6
1679
1679
6
1679
2350
6
1679
2355
6
1679
</TEXT>
</DOC>
<DOC>
<DOCNO>1680</DOCNO>
<TEXT>
a
general
purpose
display
processing
and
tutorial
system
adept
a
display
expedited
processing
and
tutorial
system
is
described
this
system
was
designed
to
improve
man
computer
communications
by
employing
a
display
unit
to
interleave
tutoring
with
other
computer
operations
such
as
simulation
programming
and
information
retrieval
it
is
written
in
fortran
iv
g
for
the
ibm
system
360
model
40
and
the
ibm
2250
display
unit
under
operating
system
360
adept
is
a
cataloged
program
that
controls
the
standard
operating
system
by
terminating
and
rescheduling
itself
automatically
relinquishing
computer
resources
allocated
to
it
and
surrendering
control
to
the
operating
system
to
perform
other
jobs
it
expands
the
power
and
flexibility
of
computer
assisted
instruction
by
making
immediately
available
to
students
teachers
and
other
users
the
full
resources
system
cataloged
programs
of
the
operating
system
language
processors
and
compilers
simulation
models
mathematical
solution
techniques
stored
data
and
all
other
library
and
user
programs
can
be
incorporated
into
instructional
material
without
reprogramming
illustrations
of
the
various
applications
are
presented
and
their
implications
are
discussed
cacm
october
1968
engvold
k
j
hughes
j
l
computer
assisted
instruction
tutorial
systems
programming
simulation
modeling
information
retrieval
operating
systems
graphics
displays
man
machine
interface
on
line
computing
graphic
programming
1
5
3
3
3
5
3
8
4
0
4
3
ca681007
jb
february
21
1978
3
36
pm
1680
4
1680
1591
5
1680
1680
5
1680
1680
5
1680
1680
5
1680
</TEXT>
</DOC>
<DOC>
<DOCNO>1681</DOCNO>
<TEXT>
easy
english
a
language
for
information
retrieval
through
a
remote
typewriter
console
easy
english
is
a
natural
command
language
designed
to
simplify
communication
between
man
and
machine
through
remote
typewriter
console
it
has
been
developed
for
retrieval
of
documents
from
a
computerized
data
base
the
moore
school
information
systems
laboratory
files
requests
are
formulated
in
a
standardized
syntactical
form
examples
of
which
are
presented
and
this
form
is
then
transformed
into
an
equivalent
query
expressed
in
the
retrieval
system
original
symbolic
command
language
which
is
briefly
described
operation
of
easy
english
is
detailed
by
illustration
of
the
transformations
performed
upon
a
sample
request
up
to
the
point
at
which
the
request
string
is
sent
to
the
system
a
macro
flowchart
of
easy
english
is
included
and
an
appendix
provides
the
printout
of
a
retrieval
demonstration
cacm
october
1968
rubinoff
m
bergman
s
cautin
h
rapp
f
natural
language
communication
on
line
searching
remote
console
communication
information
retrieval
man
machine
communication
remote
terminal
communication
translator
document
retrieval
conversational
mode
information
retrieval
language
symbolic
command
language
3
74
3
81
4
19
ca681006
jb
february
21
1978
3
59
pm
1681
4
1681
1699
4
1681
1194
5
1681
1681
5
1681
1681
5
1681
1681
5
1681
1699
5
1681
1194
6
1681
1324
6
1681
1681
6
1681
</TEXT>
</DOC>
<DOC>
<DOCNO>1682</DOCNO>
<TEXT>
the
implementation
of
a
basic
system
in
a
multiprogramming
environment
the
implementation
of
a
remote
terminal
basic
system
within
the
context
of
an
existing
multiprogramming
computer
system
the
burroughs
b5500
is
described
this
implementation
combines
a
unique
mixture
of
machine
language
and
interpretive
techniques
with
an
incremental
compiler
cacm
october
1968
braden
h
v
wulf
w
a
multiprogramming
incremental
compilation
compilers
interpreters
4
1
4
12
4
2
4
22
4
3
4
32
ca681005
jb
february
21
1978
4
04
pm
1215
4
1682
1676
4
1682
1682
4
1682
1682
4
1682
1728
4
1682
1860
4
1682
1973
4
1682
2018
4
1682
2032
4
1682
2033
4
1682
2107
4
1682
2109
4
1682
2203
4
1682
2251
4
1682
2359
4
1682
2524
4
1682
2543
4
1682
2552
4
1682
2559
4
1682
2991
4
1682
3053
4
1682
1025
5
1682
1682
5
1682
1682
5
1682
1682
5
1682
1785
5
1682
2874
5
1682
1682
6
1682
2227
6
1682
2317
6
1682
2683
6
1682
2871
6
1682
521
6
1682
</TEXT>
</DOC>
<DOC>
<DOCNO>1683</DOCNO>
<TEXT>
boolean
matrix
methods
for
the
detection
of
simple
precedence
grammars
a
mechanical
procedure
is
derived
for
determining
whether
a
given
context
free
phrase
structure
grammar
is
a
simple
precedence
grammar
this
procedure
consists
of
elementary
operations
on
suitably
defined
boolean
matrices
application
of
the
procedure
to
operator
grammars
is
also
given
cacm
october
1968
martin
d
f
syntax
analysis
precedence
analysis
simple
precedence
grammar
simple
precedence
language
operator
grammar
operator
precedence
compilers
bounded
context
syntactic
analysis
boolean
matrices
relations
4
12
5
23
ca681004
jb
february
21
1978
4
09
pm
1496
4
1683
1542
4
1683
1683
4
1683
1683
4
1683
1693
4
1683
1768
4
1683
1781
4
1683
1787
4
1683
1787
4
1683
1836
4
1683
1945
4
1683
1945
4
1683
2060
4
1683
2061
4
1683
2061
4
1683
2082
4
1683
2091
4
1683
2152
4
1683
2179
4
1683
2340
4
1683
2356
4
1683
2546
4
1683
2603
4
1683
2698
4
1683
2708
4
1683
2824
4
1683
2982
4
1683
2986
4
1683
3045
4
1683
3093
4
1683
1141
5
1683
1491
5
1683
1683
5
1683
1683
5
1683
1683
5
1683
2221
5
1683
2340
5
1683
2824
5
1683
2986
5
1683
1191
6
1683
1491
6
1683
1491
6
1683
1491
6
1683
1683
6
1683
1683
6
1683
1683
6
1683
1683
6
1683
1836
6
1683
1836
6
1683
2053
6
1683
2179
6
1683
2340
6
1683
2340
6
1683
</TEXT>
</DOC>
<DOC>
<DOCNO>1684</DOCNO>
<TEXT>
ambiguity
in
limited
entry
decision
tables
the
use
of
decision
tables
as
a
tool
in
systems
analysis
and
for
program
specification
is
now
becoming
accepted
rules
on
redundancy
contradiction
and
completeness
for
limited
entry
tables
were
published
in
1963
these
are
usually
used
for
checking
preceded
if
necessary
by
a
conversion
from
extended
to
limited
entry
form
processors
which
automatically
translate
tables
to
more
conventional
program
usually
base
their
diagnostic
facilities
on
these
rules
in
this
paper
it
is
suggested
that
these
rules
are
unsatisfactory
and
that
the
important
aspect
of
checking
is
to
eliminate
ambiguity
from
tables
ambiguity
is
defined
and
discussed
and
a
procedure
for
producing
checked
out
decision
tables
is
proposed
the
theoretical
basis
of
the
algorithm
used
is
established
the
importance
of
well
designed
diagnostic
facilities
in
decision
table
processors
is
emphasized
cacm
october
1968
king
p
j
h
decision
tables
detab
65
systems
analysis
3
50
4
19
4
49
ca681003
jb
february
21
1978
4
17
pm
1684
4
1684
1684
4
1684
2053
4
1684
2220
4
1684
2273
4
1684
2453
4
1684
2726
4
1684
2856
4
1684
3113
4
1684
1354
5
1684
1564
5
1684
1684
5
1684
1684
5
1684
1684
5
1684
2053
5
1684
2517
5
1684
2518
5
1684
2616
5
1684
3034
5
1684
931
6
1684
1172
6
1684
1237
6
1684
1327
6
1684
1354
6
1684
1548
6
1684
1548
6
1684
1684
6
1684
1684
6
1684
1684
6
1684
1684
6
1684
1684
6
1684
2053
6
1684
2053
6
1684
2221
6
1684
2517
6
1684
2517
6
1684
</TEXT>
</DOC>
<DOC>
<DOCNO>1685</DOCNO>
<TEXT>
gan
a
system
for
generating
and
analyzing
activity
networks
gan
a
system
for
generating
activity
networks
is
designed
to
save
time
in
the
preparation
of
activity
networks
and
to
deal
conveniently
with
network
programs
a
defining
description
of
a
programming
language
designed
for
generating
activity
network
from
a
set
of
standard
networks
is
presented
also
a
general
idea
of
a
language
for
performing
calculations
on
activity
networks
scheduling
activity
networks
is
given
cacm
october
1968
schurmann
a
activity
network
management
project
standard
network
network
generator
network
assembler
activity
network
analysis
network
calculation
network
program
3
50
3
53
4
11
4
12
4
29
ca681002
jb
february
21
1978
4
22
pm
1685
4
1685
1685
5
1685
1685
5
1685
1685
5
1685
3059
5
1685
</TEXT>
</DOC>
<DOC>
<DOCNO>1686</DOCNO>
<TEXT>
computer
synthesis
of
holograms
for
3
d
display
optical
and
digital
holography
are
reviewed
the
mathematical
model
and
computational
techniques
of
the
authors
digital
holographic
process
are
discussed
and
applications
of
computer
holography
are
suggested
computer
holograms
have
been
made
of
three
dimensional
objects
which
give
faithful
reconstructions
even
in
white
light
a
new
approach
based
on
point
apertures
for
the
image
is
discussed
photographs
of
the
images
reconstructed
from
digital
holograms
are
presented
cacm
october
1968
lesem
l
b
hirsch
p
m
holography
optics
fourier
transforms
computer
applications
display
device
photography
physics
mathematics
image
processing
3
17
3
19
5
19
ca681001
jb
february
21
1978
4
27
pm
1686
5
1686
1686
5
1686
1686
5
1686
2004
5
1686
1686
6
1686
1915
6
1686
</TEXT>
</DOC>
<DOC>
<DOCNO>1687</DOCNO>
<TEXT>
netflow
algorithm
248
h
cacm
september
1968
bray
t
a
witzgall
c
capacitated
network
linear
programming
minimum
cost
flow
network
flow
out
of
kilter
5
32
5
41
ca680914
jb
february
21
1978
4
29
pm
1687
5
1687
1687
5
1687
1687
5
1687
</TEXT>
</DOC>
<DOC>
<DOCNO>1688</DOCNO>
<TEXT>
netflow
algorithm
248
h
cacm
september
1968
henderson
j
h
capacitated
network
linear
programming
minimum
cost
flow
network
flow
out
of
kilter
5
32
5
41
ca680913
jb
february
21
19784
31
pm
1688
5
1688
1688
5
1688
1688
5
1688
</TEXT>
</DOC>
<DOC>
<DOCNO>1689</DOCNO>
<TEXT>
calculation
of
a
polynomial
and
its
derivative
values
by
horner
scheme
algorithm
337
c1
cacm
september
1968
pankiewicz
w
function
evaluation
polynomial
evaluation
algol
procedure
horner
scheme
5
12
4
22
ca680912
jb
february
21
1978
4
33
pm
1689
5
1689
1689
5
1689
1689
5
1689
</TEXT>
</DOC>
<DOC>
<DOCNO>1690</DOCNO>
<TEXT>
netflow
algorithm
336
h
cacm
september
1968
bray
t
a
witzgall
c
capacitated
network
linear
programming
minimum
cost
flow
network
flow
out
of
kilter
5
32
5
41
ca680911
jb
february
21
1978
4
35
pm
1690
4
1690
1322
5
1690
1690
5
1690
1690
5
1690
1690
5
1690
</TEXT>
</DOC>
<DOC>
<DOCNO>1691</DOCNO>
<TEXT>
a
comparison
of
the
correlational
behavior
of
random
number
generators
for
the
ibm
360
hutchinson
states
that
the
new
prime
modulo
multiplicative
congruential
pseudorandom
generator
attributed
to
d
h
lehmer
has
passed
the
usual
statistical
tests
for
random
number
generators
it
is
here
empirically
shown
that
generators
of
this
type
can
produce
sequences
whose
autocorrelation
functions
up
to
lag
50
exhibit
evidence
of
nonrandomness
for
many
multiplicative
constants
an
alternative
generator
proposed
by
tausworthe
which
uses
irreducible
polynomials
over
the
field
of
characteristic
two
is
shown
to
be
free
from
this
defect
the
applicability
of
these
two
generators
to
the
ibm
360
is
then
discussed
since
computer
word
size
can
affect
a
generator
statistical
behavior
the
older
mixed
and
simple
congruential
generators
although
extensively
tested
on
computers
having
36
or
more
bits
per
word
may
not
be
optimum
generators
for
the
ibm
360
cacm
september
1968
whittlesey
j
r
random
numbers
pseudorandom
number
generators
autocorrelation
function
serial
correlation
digital
shift
register
generators
linear
recurrence
modulo
two
irreducible
polynomials
primitive
trinomials
modulo
two
congruential
generators
prime
numbers
statistical
tests
for
randomness
ibm
360
32
bit
versus
36
bit
word
size
5
5
ca680910
jb
february
21
1978
4
44
pm
1674
4
1691
1691
4
1691
1691
4
1691
1691
4
1691
1293
5
1691
1420
5
1691
1631
5
1691
1691
5
1691
1691
5
1691
1691
5
1691
2115
5
1691
2122
5
1691
1674
6
1691
1691
6
1691
1691
6
1691
1930
6
1691
</TEXT>
</DOC>
<DOC>
<DOCNO>1692</DOCNO>
<TEXT>
numerical
solution
of
a
thin
plate
heat
transfer
problem
the
numerical
solution
of
a
system
of
linear
equations
resulting
from
a
discrete
approximation
to
a
thin
plate
heat
transfer
problem
is
considered
the
slow
convergence
of
point
iterative
methods
is
analyzed
and
shown
to
be
caused
by
one
of
the
boundary
conditions
the
difficulty
may
be
removed
by
a
standard
line
iterative
technique
cacm
september
1968
stewart
iii
g
lick
d
w
heat
transfer
problem
poisson
equation
boundary
value
problem
thin
domain
successive
overrelaxation
sor
block
sor
3
20
5
17
ca680909
jb
february
21
1978
4
48
pm
1692
5
1692
1692
5
1692
1692
5
1692
</TEXT>
</DOC>
<DOC>
<DOCNO>1693</DOCNO>
<TEXT>
gpl
a
truly
general
purpose
language
a
truly
general
purpose
programming
language
gpl
is
described
which
contains
facilities
for
constructing
within
the
language
new
data
types
as
well
as
facilities
for
operations
performed
upon
them
the
basic
language
is
minimal
in
the
sense
that
no
basic
element
can
be
derived
from
the
others
with
high
efficiency
in
the
object
programs
constructs
like
the
algol
60
for
statements
and
if
statements
are
not
basic
they
are
special
types
of
procedures
new
symbols
underlined
words
in
algol
60
are
implicitly
defined
by
usage
in
other
declarations
as
part
words
are
definable
packed
words
are
handled
as
easily
as
full
words
address
variables
pointers
are
included
in
full
generality
cacm
september
1968
garwick
j
v
programming
language
general
purpose
self
extending
macro
algol
4
20
ca680908
jb
february
22
1978
8
40
am
1379
4
1693
1380
4
1693
1542
4
1693
1552
4
1693
1683
4
1693
1693
4
1693
1693
4
1693
1693
4
1693
1693
4
1693
1781
4
1693
1781
4
1693
1781
4
1693
1781
4
1693
1787
4
1693
1824
4
1693
1836
4
1693
1836
4
1693
1854
4
1693
1860
4
1693
1861
4
1693
1945
4
1693
1945
4
1693
2015
4
1693
2060
4
1693
2060
4
1693
2060
4
1693
2061
4
1693
2061
4
1693
2082
4
1693
2091
4
1693
2091
4
1693
2126
4
1693
2152
4
1693
2179
4
1693
2179
4
1693
2340
4
1693
2356
4
1693
2546
4
1693
2546
4
1693
2603
4
1693
2698
4
1693
2698
4
1693
2708
4
1693
2708
4
1693
2824
4
1693
2982
4
1693
2986
4
1693
557
4
1693
3045
4
1693
3045
4
1693
3093
4
1693
1421
5
1693
1477
5
1693
1491
5
1693
1614
5
1693
1693
5
1693
1693
5
1693
1693
5
1693
2126
5
1693
2317
5
1693
823
6
1693
196
6
1693
1198
6
1693
1572
6
1693
1614
6
1693
1693
6
1693
1693
6
1693
1749
6
1693
1753
6
1693
1781
6
1693
2126
6
1693
2148
6
1693
404
6
1693
</TEXT>
</DOC>
<DOC>
<DOCNO>1694</DOCNO>
<TEXT>
an
algorithm
for
the
probability
of
the
union
of
a
large
number
of
events
an
algorithm
is
presented
which
efficiently
evaluates
the
probability
for
the
union
of
n
independent
and
not
mutually
exclusive
events
the
problem
is
that
of
evaluating
the
sums
of
the
products
of
all
possible
combinations
of
n
variables
in
minimum
time
and
storage
space
cacm
september
1968
miller
g
d
algorithm
probability
optimum
storage
vs
time
compromise
set
union
mutually
exclusive
events
5
12
5
5
5
6
ca680907
jb
february
22
1978
8
45
am
1694
5
1694
1694
5
1694
1694
5
1694
</TEXT>
</DOC>
<DOC>
<DOCNO>1695</DOCNO>
<TEXT>
plexus
an
on
line
system
for
modeling
neural
networks
a
description
is
presented
of
plexus
a
system
which
enables
a
user
to
construct
and
specify
a
neural
network
to
analyze
the
output
data
produced
by
the
network
and
to
store
and
retrieve
networks
and
data
from
a
library
the
system
operated
entirely
from
a
digital
display
unit
interacts
directly
with
the
user
and
permits
easy
and
rapid
transitions
between
the
various
phases
of
the
modeling
process
plexus
is
designed
to
complement
neurophysiological
research
so
that
the
systematic
development
of
neural
models
can
be
coordinated
with
experimental
work
plexus
networks
are
built
up
from
components
representing
individual
neurons
external
stimuli
and
interconnecting
fibers
each
component
being
of
a
relatively
detailed
nature
provision
is
also
made
for
the
use
of
experimental
data
as
input
to
a
network
convenient
means
for
specification
and
modification
of
a
network
and
extensive
error
checking
capabilities
are
provided
data
resulting
from
the
simulation
of
a
network
may
be
analyzed
by
a
variety
of
techniques
ranging
from
examinations
of
the
gross
characteristics
of
the
data
to
the
determination
of
detailed
statistical
properties
cacm
september
1968
dill
j
c
randall
d
l
richer
i
biological
modeling
data
analysis
discrete
system
simulation
library
systems
modeling
network
simulation
neural
networks
neurophysiological
models
on
line
simulation
simulation
3
12
3
19
3
29
3
65
ca680906
jb
february
22
1978
8
56
am
1695
5
1695
1695
5
1695
1695
5
1695
</TEXT>
</DOC>
<DOC>
<DOCNO>1696</DOCNO>
<TEXT>
an
algorithm
for
identifying
the
ergodic
subchains
and
transient
states
of
a
stochastic
matrix
an
algorithm
for
identifying
the
ergodic
subchains
and
transient
states
of
a
stochastic
matrix
is
presented
applications
in
markov
renewal
programming
and
in
the
construction
of
variable
length
codes
are
reviewed
and
an
updating
procedure
for
dealing
with
certain
sequences
of
stochastic
matrices
is
discussed
computation
times
are
investigated
experimentally
and
compared
with
those
of
another
recently
propose
method
cacm
september
1968
fox
b
l
landi
d
m
stochastic
matrix
ergodic
chain
identification
5
39
5
5
ca680905
jb
february
22
1978
9
04
am
1696
5
1696
1696
5
1696
1696
5
1696
</TEXT>
</DOC>
<DOC>
<DOCNO>1697</DOCNO>
<TEXT>
graphical
input
output
of
nonstandard
characters
a
system
developed
at
harvard
for
graphically
inputting
and
outputting
nonstandard
characters
on
a
computer
is
printed
in
principle
the
system
can
deal
with
any
orthography
although
at
present
it
is
limited
to
4000
chinese
characters
and
some
mathematical
symbols
new
characters
can
be
added
to
the
repertoire
of
the
system
by
graphical
input
on
a
display
scope
text
inputting
is
accomplished
via
a
display
scope
or
a
rand
tablet
the
organization
and
operation
of
the
current
system
are
described
and
a
discussion
of
the
relative
merits
of
such
a
system
is
given
illustrations
of
the
computer
input
and
output
of
chinese
characters
are
included
cacm
september
1968
hayashl
h
duncan
s
kuno
s
chinese
characters
input
output
orthography
rand
tablet
pdp
1
automatic
typesetting
man
machine
communication
computer
graphics
graphical
input
on
line
editing
3
40
4
41
ca680904
jb
february
22
1978
9
13
am
1697
4
1697
1528
5
1697
1659
5
1697
1697
5
1697
1697
5
1697
1697
5
1697
1225
6
1697
1265
6
1697
1350
6
1697
1671
6
1697
1697
6
1697
</TEXT>
</DOC>
<DOC>
<DOCNO>1698</DOCNO>
<TEXT>
a
statistical
model
for
console
behavior
in
multiuser
computers
the
ability
of
a
computer
system
to
communicate
with
the
outside
world
efficiently
is
as
important
as
its
ability
to
perform
computations
efficiently
it
is
quite
difficult
to
characterize
a
particular
user
but
rather
easy
to
characterize
the
entire
user
community
based
on
the
properties
of
this
community
we
have
postulated
a
hypothetical
virtual
console
no
claim
is
made
that
a
virtual
console
behaves
like
any
actual
console
but
the
entire
collection
of
virtual
consoles
models
the
collection
of
actual
consoles
using
the
model
we
answer
questions
like
how
many
processes
are
suspended
waiting
for
console
input
what
is
the
maximum
rate
at
which
a
process
can
execute
what
bounds
can
be
set
on
overall
buffer
requirements
answers
to
these
and
similar
questions
are
needed
in
certain
aspects
of
operating
system
design
cacm
september
1968
denning
p
j
statistical
models
for
input
output
operating
system
design
input
output
design
4
30
4
41
5
5
ca680903
jb
february
22
1978
9
21
am
1458
4
1698
1523
4
1698
1603
4
1698
1698
4
1698
1747
4
1698
1748
4
1698
1854
4
1698
1877
4
1698
1960
4
1698
2377
4
1698
2378
4
1698
2497
4
1698
2558
4
1698
2625
4
1698
2632
4
1698
2840
4
1698
2941
4
1698
3105
4
1698
3144
4
1698
1471
5
1698
1698
5
1698
1698
5
1698
1698
5
1698
</TEXT>
</DOC>
<DOC>
<DOCNO>1699</DOCNO>
<TEXT>
experimental
evaluation
of
information
retrieval
through
a
teletypewriter
experiments
designed
to
evaluate
the
capabilities
of
mechanized
information
retrieval
systems
with
emphasis
on
interactive
man
machine
language
and
on
some
of
the
mechanical
and
psychological
limitations
in
their
design
were
conducted
at
the
moore
school
information
systems
laboratory
the
basic
assumption
of
the
research
is
that
an
information
retrieval
system
that
provides
for
man
machine
dialogue
at
a
remote
inquiry
terminal
should
provide
a
searcher
with
many
of
the
tools
which
would
be
available
to
him
were
he
actually
performing
his
search
at
a
library
or
repository
of
documents
factors
involved
in
evaluation
of
such
a
system
include
ease
of
use
learning
time
and
effectiveness
of
actual
retrieval
three
experiments
and
the
conclusions
resulting
from
them
are
detailed
cacm
september
1968
rubinoff
m
bergman
s
franks
w
rubinoff
e
information
retrieval
testing
information
system
evaluation
experimental
document
retrieval
document
retrieval
document
perusal
man
machine
communication
remote
console
communication
teletypewriter
communication
remote
terminal
communication
retrieval
command
language
symbolic
command
language
interactive
systems
user
learning
factors
on
line
searching
3
72
3
74
3
79
3
81
ca680902
jb
february
22
1978
9
30
am
1155
4
1699
1456
4
1699
1468
4
1699
1515
4
1699
1681
4
1699
1699
4
1699
1699
4
1699
1699
4
1699
1856
4
1699
2127
4
1699
1194
5
1699
1324
5
1699
1681
5
1699
1699
5
1699
1699
5
1699
1699
5
1699
</TEXT>
</DOC>
<DOC>
<DOCNO>1700</DOCNO>
<TEXT>
peekabit
computer
offspring
of
punched
card
peekaboo
for
natural
language
searching
the
peekaboo
idea
from
punched
card
information
retrieval
methods
has
been
mated
with
the
idea
of
superimposed
punching
to
produce
a
programming
technique
which
cuts
computer
run
time
in
half
on
a
test
search
of
33
000
subject
index
entries
a
search
program
using
the
device
has
been
operational
since
late
1963
as
an
item
is
entered
in
the
store
an
18
byte
mask
is
created
from
the
item
meaningful
words
using
the
inclusive
or
operation
if
at
search
time
the
logical
product
using
the
and
operation
of
this
mask
and
a
similarly
constructed
question
mask
is
not
equal
to
the
question
mask
then
one
or
more
question
words
are
not
present
in
the
store
item
an
equality
is
in
conclusive
the
words
of
the
store
item
must
be
unpacked
and
compared
with
question
words
the
present
store
is
made
up
of
over
600
000
subject
index
entries
estimated
to
average
60
characters
each
longer
texts
such
as
abstracts
could
be
handled
by
multiple
masks
cacm
september
1968
hutton
f
c
peekaboo
superimposed
coding
natural
language
searching
text
searching
information
compaction
computer
search
technique
3
74
ca680901
jb
february
22
1978
9
38
am
1700
5
1700
1700
5
1700
1700
5
1700
</TEXT>
</DOC>
<DOC>
<DOCNO>1701</DOCNO>
<TEXT>
synchronous
signaling
rates
for
data
transmission
proposed
usa
standard
cacm
august
1968
ca680813
jb
february
22
1978
9
41
am
1701
5
1701
1701
5
1701
1701
5
1701
</TEXT>
</DOC>
<DOC>
<DOCNO>1702</DOCNO>
<TEXT>
commentary
on
mr
mooers
paper
cacm
august
1968
steel
jr
t
b
ca680812
jb
february
22
1978
9
42
am
1702
5
1702
1702
5
1702
1702
5
1702
</TEXT>
</DOC>
<DOC>
<DOCNO>1703</DOCNO>
<TEXT>
accommodating
standards
and
identification
of
programming
languages
the
user
public
wants
standardization
and
reliable
identification
of
programming
languages
and
related
services
one
way
of
achieving
these
goals
illustrated
by
the
methods
adopted
for
trac
t
64
interactive
language
and
its
related
family
of
languages
oppressive
rigidity
usually
associated
with
standardization
is
avoided
by
a
new
accommodation
technique
accessible
to
the
user
to
allow
local
variations
with
the
language
explicit
standardization
of
the
language
is
undertaken
at
the
organizational
source
of
the
language
use
of
the
organizational
trademark
trac
on
the
published
standards
and
services
relying
upon
them
provides
a
reliable
public
identification
these
methods
can
be
usefully
applied
to
other
programming
languages
and
computer
services
cacm
august
1968
mooers
c
n
standardization
programming
languages
trac
t
64
language
tranemark
public
identification
of
programming
languages
standards
which
accommodate
2
12
4
2
2
9
ca680811
jb
february
22
1978
9
50
am
1530
4
1703
1531
4
1703
1565
4
1703
1703
4
1703
1945
4
1703
2036
4
1703
1455
5
1703
1703
5
1703
1703
5
1703
1703
5
1703
</TEXT>
</DOC>
<DOC>
<DOCNO>1704</DOCNO>
<TEXT>
minimum
excess
cost
curve
algorithm
217
h
cacm
august
1968
muth
j
f
critical
path
scheduling
pert
cost
time
tradeoffs
network
flows
3
59
5
41
ca680810
jb
february
22
1978
9
52
am
1704
5
1704
1704
5
1704
1704
5
1704
</TEXT>
</DOC>
<DOC>
<DOCNO>1705</DOCNO>
<TEXT>
a
set
of
basic
input
output
procedures
algorithm
335
15
by
means
of
the
primitives
in
symbol
outsymbol
and
length
as
requested
by
this
journal
algorithms
policy
comm
acm
10
nov
67
729
a
basic
set
of
input
output
procedures
is
defined
aiming
at
quality
and
flexibility
outreal
for
instance
is
written
as
a
derived
procedure
it
outputs
using
the
fixed
point
or
the
floating
point
representation
and
rounds
properly
variants
can
easily
be
written
because
of
the
explicit
call
of
the
procedures
decompose
integer
and
decompose
real
the
highly
recommended
practice
of
echoing
input
is
made
easy
with
one
subset
of
derived
procedures
ioi
ior
iob
ioa
the
documentation
of
output
in
the
form
of
equivalent
algol
statements
is
also
provided
when
use
is
made
of
the
subset
oti
otr
otb
ota
the
berkeley
style
of
providing
information
on
the
form
of
output
using
prior
calls
of
procedures
such
as
real
format
is
defined
a
use
of
the
parameter
outchannel
to
provide
information
for
simultaneous
output
to
several
channels
is
suggested
interrelationship
between
the
declared
procedures
is
furnished
in
tabular
form
cacm
august
1968
de
vogelaere
r
input
output
transput
input
output
procedures
input
echo
quality
output
decompose
integer
decompose
real
style
berkeley
style
procedures
relationship
output
documentation
equivalent
algol
statements
algol
algol
60
integer
format
real
format
out
integer
read
real
input
output
boolean
input
output
array
fixed
point
representation
floating
point
representation
output
channel
interpretation
4
0
4
41
ca680809
jb
february
22
1978
10
32
am
1705
4
1705
1705
4
1705
1705
4
1705
1705
4
1705
1945
4
1705
2034
4
1705
984
5
1705
986
5
1705
1020
5
1705
1321
5
1705
1705
5
1705
1705
5
1705
1705
5
1705
</TEXT>
</DOC>
<DOC>
<DOCNO>1706</DOCNO>
<TEXT>
champ
character
manipulation
procedures
a
new
programming
language
facility
for
symbol
manipulation
is
described
string
procedures
may
be
declared
and
called
in
a
standard
algol
context
algol
procedures
can
in
turn
be
called
by
string
procedures
so
that
numeric
and
symbolic
processes
may
conveniently
be
programmed
together
concatenation
and
a
variant
of

pattern
matching
make
up
a
set
of
primitive
commands
these
are
assembled
together
into
conditional
expressions
which
are
to
be
used
to
provide
alternative
computational
patterns
arrays
of
strings
are
processed
using
quantifiers
the
class
of
things
which
may
be
assigned
to
an
identifier
can
be
restricted
by
a
procedure
expressed
in
the
notation
the
language
facilities
have
been
implemented
in
the
algol
compiler
for
the
burroughs
b5500
cacm
august
1968
storm
e
f
symbol
manipulation
string
handling
character
manipulation
conditional
expressions
procedures
structure
matching
recursive
programming
quantifiers
4
22
4
13
ca680808
jb
february
22
1978
10
39
am
1024
4
1706
1051
4
1706
1102
4
1706
1132
4
1706
1390
4
1706
1395
4
1706
1486
4
1706
1549
4
1706
1706
4
1706
1706
4
1706
1826
4
1706
1878
4
1706
378
4
1706
2060
4
1706
2155
4
1706
2168
4
1706
2719
4
1706
2723
4
1706
2838
4
1706
2842
4
1706
2855
4
1706
2879
4
1706
3077
4
1706
3080
4
1706
3106
4
1706
627
4
1706
106
4
1706
1180
5
1706
210
5
1706
1706
5
1706
1706
5
1706
1706
5
1706
</TEXT>
</DOC>
<DOC>
<DOCNO>1707</DOCNO>
<TEXT>
generation
of
positive
test
matrices
with
known
positive
spectra
sufficient
conditions
are
given
for
a
real
matrix
to
be
similar
to
a
positive
matrix
this
result
is
used
to
construct
a
similarity
transformation
which
when
applied
to
a
particular
upper
triangular
matrix
yields
a
positive
matrix
with
a
preassigned
positive
spectrum
cacm
august
1968
hall
c
a
porsching
t
a
test
matrices
positive
matrices
similarity
transformation
positive
eigenvalues
5
1
5
14
ca680807
jb
february
22
1978
10
42
am
1707
4
1707
1707
4
1707
1047
5
1707
1707
5
1707
1707
5
1707
1707
5
1707
1876
5
1707
2099
5
1707
511
5
1707
1662
6
1707
1707
6
1707
1707
6
1707
</TEXT>
</DOC>
<DOC>
<DOCNO>1708</DOCNO>
<TEXT>
a
note
on
the
efficiency
of
a
lisp
computation
in
a
paged
machine
the
problem
of
the
use
of
two
levels
of
storage
for
programs
is
explored
in
the
context
of
a
lisp
system
which
uses
core
memory
as
a
buffer
for
a
large
virtual
memory
stored
on
a
drum
details
of
timing
are
given
for
one
particular
problem
cacm
august
1968
borrow
d
g
murphy
d
l
storage
management
list
processor
implementation
lisp
paging
secondary
storage
utilization
efficiency
of
paged
computation
3
7
4
1
4
2
ca680806
jb
february
22
1978
10
45
am
1626
4
1708
1708
4
1708
1708
4
1708
1781
4
1708
1781
4
1708
1826
4
1708
1860
4
1708
1860
4
1708
2156
4
1708
2168
4
1708
2249
4
1708
2299
4
1708
2314
4
1708
2719
4
1708
2736
4
1708
2833
4
1708
1626
5
1708
1641
5
1708
1708
5
1708
1708
5
1708
1708
5
1708
2249
5
1708
1626
6
1708
1708
6
1708
1853
6
1708
</TEXT>
</DOC>
<DOC>
<DOCNO>1709</DOCNO>
<TEXT>
a
modification
of
efroymson
technique
for
stepwise
regression
analysis
the
computational
technique
conventionally
used
for
stepwise
multiple
linear
regression
requires
the
storage
of
an
n
x
n
matrix
of
data
when
the
number
of
variables
n
is
large
this
requirement
taxes
the
storage
capacity
of
presently
used
machinery
the
near
symmetry
of
the
matrices
involved
permits
a
modification
requiring
only
half
the
storage
and
computations
of
the
conventional
algorithm
and
this
additional
storage
allows
the
analysis
of
problems
containing
more
variables
alternatively
it
permits
the
analysis
of
problems
containing
the
same
number
of
variables
but
with
all
computations
performed
in
double
precision
cacm
august
1968
breaux
h
j
multiple
linear
regression
statistical
recurrence
formulas
correlation
linear
statistical
models
statistical
computer
programs
curve
fitting
4
0
4
40
5
0
5
5
5
10
5
13
ca680805
jb
february
22
1978
10
52
am
1709
5
1709
1709
5
1709
1709
5
1709
</TEXT>
</DOC>
<DOC>
<DOCNO>1710</DOCNO>
<TEXT>
asp
a
ring
implemented
associative
structure
package
asp
is
a
general
purpose
associative
data
structure
package
in
which
an
arbitrary
number
of
data
items
and
an
arbitrary
number
of
the
relationships
between
these
data
items
may
be
represented
a
special
picture
language
is
described
which
has
proved
very
useful
for
drawing
asp
structures
on
paper
asp
structures
are
built
and
manipulated
by
means
of
a
series
of
macro
calls
which
are
outlined
in
the
appendix
emphasis
is
on
the
philosophy
of
the
system
rather
than
a
particular
implementation
though
sufficient
information
is
included
to
enable
the
reader
to
produce
his
own
implementation
of
asp
cacm
august
1968
lang
c
a
gray
j
c
associative
data
structure
ring
structure
lists
list
structure
set
languages
modeling
graphics
4
20
4
22
ca680804
jb
february
22
1978
11
02
am
1710
5
1710
1710
5
1710
1710
5
1710
1853
5
1710
2003
5
1710
1710
6
1710
1710
6
1710
1767
6
1710
2105
6
1710
</TEXT>
</DOC>
<DOC>
<DOCNO>1711</DOCNO>
<TEXT>
when
your
computer
needs
a
lawyer
possible
liability
for
negligence
for
other
torts
such
as
slander
of
credit
and
for
liability
under
theories
of
express
or
implied
warranty
guarantees
are
discussed
and
legal
complications
are
explained
so
that
users
operators
owners
and
leasors
of
computers
may
be
alerted
to
potential
legal
problems
focus
is
also
on
trouble
spots
in
contracting
for
data
processing
services
in
automating
record
keeping
operations
in
deciding
whether
or
not
to
automate
certain
operations
and
in
complying
with
statutes
and
regulation
relating
to
record
keeping
information
is
given
on
patents
copyrights
and
trade
secret
protection
for
programs
and
the
problem
of
using
copyrighted
material
in
information
storage
and
retrieval
systems
including
the
pending
copyright
and
patent
revision
bills
cacm
august
1968
banzhaf
iii
j
f
law
legal
lawyer
liability
torts
negligence
contracts
warrantees
guarantees
accounting
regulations
simulation
income
tax
copyrights
patents
trade
secrets
standard
of
care
slander
of
credit
crime
criminals
record
keeping
records
evidence
copying
1
3
2
11
2
12
2
2
3
33
ca680803
jb
february
22
1978
11
12
am
1711
4
1711
1711
4
1711
997
5
1711
1001
5
1711
1711
5
1711
1711
5
1711
1711
5
1711
</TEXT>
</DOC>
<DOC>
<DOCNO>1712</DOCNO>
<TEXT>
recovery
of
disk
contents
after
system
failure
a
method
is
discussed
by
which
after
a
system
malfunction
the
contents
of
disk
files
can
be
restored
to
their
status
at
the
time
of
the
failure
cacm
august
1968
lockemann
p
c
knutsen
w
d
data
acquisitition
disk
file
organization
error
recovery
file
organization
3
73
ca680802
jb
february
22
1978
11
14
am
1712
4
1712
1507
5
1712
1712
5
1712
1712
5
1712
1712
5
1712
3164
5
1712
1712
6
1712
</TEXT>
</DOC>
<DOC>
<DOCNO>1713</DOCNO>
<TEXT>
on
overcoming
high
priority
paralysis
in
multiprogramming
systems
a
case
his
tory
high
priority
paralysis
is
the
degradation
that
can
occur
in
multiprogramming
systems
when
scheduling
is
based
primarily
on
preassigned
priorities
it
can
be
alleviated
by
modifying
the
scheduling
algorithm
to
maximize
the
number
of
programs
active
at
one
time
the
case
his
tory
given
in
this
paper
indicates
two
general
methods
by
which
simultaneity
can
be
increased
possible
refinements
in
the
scheduling
algorithm
for
future
improvements
are
considered
briefly
cacm
august
1968
stevens
d
f
multiprogram
scheduling
dynamic
priority
assignment
scheduling
4
30
4
32
4
39
ca680801
jb
february
22
1978
11
19
am
1713
4
1713
1713
4
1713
1901
4
1713
1901
4
1713
491
4
1713
491
4
1713
168
5
1713
185
5
1713
1713
5
1713
1713
5
1713
1713
5
1713
3072
5
1713
1713
6
1713
2219
6
1713
2245
6
1713
2375
6
1713
</TEXT>
</DOC>
<DOC>
<DOCNO>1714</DOCNO>
<TEXT>
procedure
for
the
normal
distribution
algorithm
272
s15
cacm
july
1968
maclaren
m
d
normal
distribution
function
error
function
normal
function
normal
curve
integral
5
5
5
12
ca680715
jb
february
22
1978
11
21
am
1714
4
1714
1585
5
1714
1714
5
1714
1714
5
1714
1714
5
1714
</TEXT>
</DOC>
<DOC>
<DOCNO>1715</DOCNO>
<TEXT>
direct
search
algorithm
178
e4
cacm
july
1968
de
vogelaere
r
function
minimization
search
direct
search
5
19
ca680714
jb
february
22
1978
11
24
am
1715
5
1715
1715
5
1715
1715
5
1715
1815
5
1715
1715
6
1715
</TEXT>
</DOC>
<DOC>
<DOCNO>1716</DOCNO>
<TEXT>
normal
random
deviates
algorithm
334
g5
cacm
july
1968
bell
j
r
normal
deviates
normal
distribution
random
number
random
number
generator
simulation
probability
distribution
frequency
distribution
random
5
5
5
13
ca680713
jb
february
22
1978
11
26
am
1716
4
1716
1189
5
1716
1716
5
1716
1716
5
1716
1716
5
1716
2349
5
1716
2565
5
1716
1648
6
1716
1716
6
1716
1716
6
1716
1794
6
1716
1894
6
1716
2043
6
1716
2276
6
1716
501
6
1716
613
6
1716
774
6
1716
</TEXT>
</DOC>
<DOC>
<DOCNO>1717</DOCNO>
<TEXT>
generating
prime
implicants
via
ternary
encoding
and
decimal
arithmetic
decimal
arithmetic
ternary
encoding
of
cubes
and
topological
considerations
are
used
in
an
algorithm
to
obtain
the
extremals
and
prime
implicants
of
boolean
functions
the
algorithm
which
has
been
programmed
in
the
fortran
language
generally
requires
less
memory
than
other
minimization
procedures
and
treats
don
care
terms
in
an
efficient
manner
cacm
july
1968
dietmeyer
d
l
duley
j
r
prime
implicants
extremal
switching
function
minimization
cubical
complexes
ternary
encoding
3
24
6
1
ca680712
jb
february
22
1978
11
30
am
1717
5
1717
1717
5
1717
1717
5
1717
</TEXT>
</DOC>
<DOC>
<DOCNO>1718</DOCNO>
<TEXT>
logical
arithmetic
on
computers
with
two
complement
binary
arithmetic
algorithms
are
presented
for
multiplication
and
division
of
unsigned
integer
operands
in
which
the
digits
normally
reserved
for
signs
participate
as
significant
arithmetic
digits
with
positive
weight
cacm
july
1968
ehrman
j
r
binary
arithmetic
unsigned
operand
arithmetic
maximum
significance
arithmetic
full
precision
arithmetic
3
15
5
11
ca680711
jb
february
22
1978
11
34
am
1718
5
1718
1718
5
1718
1718
5
1718
1965
5
1718
2200
5
1718
1718
6
1718
1718
6
1718
</TEXT>
</DOC>
<DOC>
<DOCNO>1719</DOCNO>
<TEXT>
a
methodology
for
calculating
and
optimizing
real
time
system
performance
the
continually
increasing
size
complexity
number
of
types
and
cost
of
data
processing
systems
are
causing
serious
re
examination
within
government
and
industry
of
the
criteria
for
and
methods
of
calculating
and
optimizing
data
processing
system
cost
and
performance
real
time
data
processing
systems
as
typified
by
the
automated
airline
reservation
system
are
discussed
in
this
paper
criteria
for
evaluating
performance
are
described
a
methodology
for
calculating
and
optimizing
is
outlined
and
the
method
is
illustrated
by
carrying
out
a
portion
of
the
performance
calculation
and
the
optimization
of
a
drum
oriented
message
switching
system
cacm
july
1968
stimler
s
brons
k
a
real
time
system
analysis
real
time
system
design
real
time
system
performance
criteria
real
time
system
cost
performance
ratio
3
27
3
80
3
81
3
89
6
9
ca680710
jb
february
22
1978
11
40
am
1719
5
1719
1719
5
1719
1719
5
1719
2319
5
1719
1408
6
1719
1719
6
1719
1749
6
1719
1751
6
1719
2016
6
1719
2017
6
1719
2080
6
1719
2188
6
1719
2203
6
1719
2204
6
1719
</TEXT>
</DOC>
<DOC>
<DOCNO>1720</DOCNO>
<TEXT>
master
level
computer
science
curricula
the
results
of
a
survey
of
the
course
work
done
by
master
degree
candidates
at
25
us
universities
are
presented
and
some
general
comments
concerning
the
emphasis
of
these
programs
are
given
cacm
july
1968
elliott
r
w
surveys
education
computer
science
curricula
1
52
ca680709
jb
february
22
1978
11
44
am
1720
4
1720
1720
4
1720
1771
4
1720
1927
4
1720
2147
4
1720
2163
4
1720
2345
4
1720
2478
4
1720
2594
4
1720
2852
4
1720
2899
4
1720
3130
4
1720
1654
5
1720
1720
5
1720
1720
5
1720
1720
5
1720
1771
5
1720
2163
5
1720
1720
6
1720
1771
6
1720
1927
6
1720
2181
6
1720
</TEXT>
</DOC>
<DOC>
<DOCNO>1721</DOCNO>
<TEXT>
determination
of
the
intersection
points
of
two
plane
curves
by
means
of
differential
equations
a
new
method
is
proposed
to
calculate
the
intersection
points
of
two
plane
curves
the
theory
of
singular
points
off
a
system
of
two
differential
equations
is
used
in
developing
the
method
the
intersection
point
to
be
determined
is
identified
with
such
a
singular
point
and
appropriate
modifications
are
applied
to
the
system
to
ensure
that
the
singular
point
be
stable
i
e
all
integrals
which
start
in
the
neighborhood
of
the
singular
point
will
always
approach
this
point
if
the
integral
parameter
tends
to
infinity
in
addition
a
method
is
described
for
systematically
searching
for
all
intersection
points
in
a
prescribed
rectangular
area
cacm
july
1968
kuiken
h
k
plane
curves
intersection
points
intersections
plane
curves
integration
differential
equations
matrix
iteration
singular
points
nonlinear
differential
equations
eigenvalues
complex
roots
roots
stationary
points
runge
kutta
stable
singularity
unstable
singularity
2
0
3
10
3
20
3
50
5
10
ca680708
jb
february
22
1978
11
51
am
1721
5
1721
1721
5
1721
1721
5
1721
</TEXT>
</DOC>
<DOC>
<DOCNO>1722</DOCNO>
<TEXT>
methods
of
convergence
improvement
for
some
improper
integrals
in
the
numerical
integration
of
an
improper
integral
of
the
first
kind
it
is
customary
to
truncate
the
integral
when
the
change
yielded
by
the
last
iteration
is
less
than
some
predetermined
constant
the
efficiency
of
such
integration
schemes
can
often
be
improved
by
use
of
recent
advances
in
the
theory
of
nonlinear
transformations
however
for
several
important
integrals
e
g
integrals
whose
integrands
are
rational
polynomials
these
transformations
fail
to
yield
much
improvement
in
this
paper
several
methods
of
convergence
improvement
are
developed
which
greatly
improve
convergence
of
some
improper
integrals
including
the
integrals
of
rational
polynomials
cacm
july
1968
mcwilliams
g
v
thompson
r
w
approximation
nonlinear
improper
integral
convergence
improvement
numerical
integration
rational
polynomials
truncation
3
15
5
13
5
16
5
19
ca680707
jb
february
22
1978
11
58
am
1722
5
1722
1722
5
1722
1722
5
1722
</TEXT>
</DOC>
<DOC>
<DOCNO>1723</DOCNO>
<TEXT>
computer
construction
of
project
networks
project
networks
are
used
in
pert
and
cpm
an
algorithm
is
given
for
constructing
project
networks
directly
from
the
project
precedence
relations
the
algorithm
creates
dummy
activities
and
topologically
orders
the
arcs
and
nodes
the
number
of
nodes
created
is
minimal
for
the
given
precedence
relations
it
has
been
experimentally
programmed
in
fortran
ii
for
the
ibm
7094
cacm
july
1968
fisher
a
c
liebman
j
s
nemhauser
g
l
project
networks
pert
cpm
topological
ordering
network
construction
by
computer
5
32
ca680706
jb
february
22
1978
12
07
pm
1723
4
1723
758
4
1723
1723
5
1723
1723
5
1723
1723
5
1723
2515
5
1723
441
5
1723
1723
6
1723
</TEXT>
</DOC>
<DOC>
<DOCNO>1724</DOCNO>
<TEXT>
a
generalized
partial
pass
block
sort
the
design
of
a
partial
pass
block
sort
with
arbitrary
range
of
key
and
number
of
work
files
is
described
the
design
is
a
generalization
of
the
partial
pass
column
sort
by
ashenhurst
and
the
amphisbaenic
sort
by
nagler
the
power
of
the
sort
is
tabulated
for
various
sizes
of
input
file
and
number
of
work
files
consideration
is
given
to
the
problem
of
combining
a
block
sort
with
internal
sorts
and
to
the
best
use
of
direct
access
storage
devices
cacm
july
1968
bayes
a
block
sort
partial
pass
sort
direct
access
devices
column
sort
chaining
reverse
chaining
sort
amphisbaenic
5
31
ca680705
jb
february
22
1978
12
12
pm
1724
5
1724
1724
5
1724
1724
5
1724
</TEXT>
</DOC>
<DOC>
<DOCNO>1725</DOCNO>
<TEXT>
a
simple
proof
of
lewin
ordered
retrieval
theorem
for
associative
memories
an
efficient
method
of
ordered
retrieval
of
binary
words
from
an
associative
memory
as
described
by
lewin
is
based
on
the
use
of
special
readout
circuits
which
indicate
the
digit
values
present
in
the
individual
digit
columns
of
the
memory
thus
the
circuits
indicate
whether
the
individual
digit
columns
contain
digits
of
both
values
or
of
only
one
value
or
contain
no
digits
at
all
i
e
that
the
memory
is
empty
the
use
of
these
circuits
which
in
this
paper
are
termed
column
value
indicators
reduces
considerably
the
number
of
memory
accesses
necessary
to
retrieve
in
order
a
number
of
distinct
words
from
the
memory
lewin
proves
that
for
the
readout
by
the
described
method
of
m
distinct
binary
words
2m
1
memory
accesses
are
necessary
thus
he
proves
that
the
number
of
necessary
memory
accesses
of
his
method
unlike
those
of
other
methods
is
independent
of
the
word
length
in
this
paper
a
very
simple
proof
of
this
theorem
derived
from
some
elementary
aspects
of
the
structure
of
sets
of
binary
numbers
is
presented
cacm
july
1968
wolinsky
a
associative
memories
content
addressed
memories
ordered
lists
ordered
information
retrieval
ordered
retrieval
theorem
column
digit
values
digit
value
variety
column
sensing
arrangement
digit
value
readout
digit
variety
readout
memory
access
memory
access
frequency
ordered
retrieval
efficiency
access
frequency
proof
retrieval
theorem
proof
3
74
3
79
5
29
5
31
6
31
6
36
ca680704
jb
february
22
1978
12
24
pm
1725
5
1725
1725
5
1725
1725
5
1725
</TEXT>
</DOC>
<DOC>
<DOCNO>1726</DOCNO>
<TEXT>
preliminary
investigation
of
techniques
for
automated
reading
of
unformatted
text
methods
for
converting
unstructured
printed
material
into
computer
code
are
experimentally
investigated
an
operator
controlled
mode
depending
on
human
demarcation
of
the
various
regions
of
the
page
for
guiding
the
scanner
is
implemented
by
means
of
a
joystick
and
a
crt
display
this
mode
for
which
some
performance
figures
are
obtained
is
thought
to
be
suitable
for
processing
very
complicated
material
such
as
technical
journals
for
simpler
material
for
instance
the
claims
sections
of
patents
and
in
applications
where
the
utmost
accuracy
is
not
necessary
an
unsupervised
mode
is
advocated
here
the
textual
portions
of
the
page
are
located
during
a
rapid
prescan
by
a
rudimentary
form
of
frequency
analysis
these
areas
are
then
rescanned
at
a
higher
resolution
suitable
for
character
recognition
error
rates
of
the
order
of
0
1
percent
are
obtained
in
a
simple
problem
involving
photographs
of
telephone
company
meter
boards
other
matters
related
to
the
design
of
a
general
purpose
page
reader
such
as
the
segmentation
of
printed
text
the
possibility
of
time
sharing
the
scanner
interactive
man
machine
operation
and
the
facsimile
reproduction
of
illustrations
are
discussed
cacm
july
1968
nagy
g
pattern
recognition
character
recognition
text
reading
information
retrieval
unformatted
text
operator
controlled
reader
online
reader
text
image
discrimination
reading
machine
3
63
3
79
3
89
6
29
6
35
ca680703
jb
february
22
1978
2
52
pm
1726
5
1726
1726
5
1726
1726
5
1726
2370
5
1726
1726
6
1726
</TEXT>
</DOC>
<DOC>
<DOCNO>1727</DOCNO>
<TEXT>
one
way
of
estimating
frequencies
of
jumps
in
a
program
for
the
segmentation
of
a
program
it
is
useful
to
have
a
reasonable
estimation
of
the
values
of
s
ij
where
s
ij
is
the
mean
value
of
the
number
of
jumps
from
the
i
th
instruction
on
to
the
j
th
instruction
in
the
run
time
in
the
cases
where
the
s
ij
are
estimated
directly
the
structure
of
the
whole
program
must
be
generally
taken
into
account
therefore
it
is
very
difficult
for
the
programmer
and
or
the
translator
to
obtain
a
good
estimation
of
the
s
ij
it
is
easier
to
estimate
not
s
ij
but
the
quantities
p
ij
s
ij
c
i
sum
s
ij
j
1
n
where
c
i
is
an
arbitrary
positive
constant
for
each
i
although
the
p
ij
are
for
each
i
proportional
to
s
ij
the
estimation
of
p
ij
is
easier
because
we
must
estimate
only
the
probabilities
of
events
where
instruction
i
is
executed
after
instruction
i
i
this
estimation
can
often
be
done
without
considering
the
structure
of
the
whole
program
in
the
first
part
of
the
paper
using
the
theory
of
the
markov
chains
an
algorithm
for
the
computation
of
the
s
ij
from
the
p
ij
is
found
and
some
ways
of
obtaining
estimates
of
the
p
ij
are
given
in
the
second
part
a
variant
of
this
algorithm
is
derived
avoiding
the
necessity
of
computation
involving
large
matrices
cacm
july
1968
kral
j
object
program
reduction
supervisor
calls
decreasing
jump
frequencies
estimation
control
transfers
estimation
optimal
program
segmentation
markov
chain
program
correspondence
program
graph
one
entry
subgraph
locally
estimated
jump
frequencies
supervisor
overhead
decreasing
program
segmentation
algorithm
jump
frequencies
program
segmentation
problem
4
11
4
19
4
39
4
49
ca680702
jb
february
22
1978
3
05
pm
1727
5
1727
1727
5
1727
1727
5
1727
</TEXT>
</DOC>
<DOC>
<DOCNO>1728</DOCNO>
<TEXT>
further
experimental
data
on
the
behavior
of
programs
in
a
paging
environment
results
are
summarized
from
an
empirical
study
directed
at
the
measurement
of
program
operating
behavior
in
those
multiprogramming
systems
in
which
programs
are
organized
into
fixed
length
pages
the
data
collected
from
the
interpretive
execution
of
a
number
of
paged
programs
are
used
to
describe
the
frequency
of
page
faults
i
e
the
frequency
of
those
instants
at
which
an
executing
program
requires
a
page
of
data
or
instructions
not
in
main
core
memory
these
data
are
used
also
for
the
evaluation
of
page
replacement
algorithms
and
for
assessing
the
effects
on
performance
of
changes
in
the
amount
of
storage
allocated
to
executing
programs
cacm
july
1968
coffman
e
g
varian
l
c
paging
systems
paging
dynamic
program
behavior
program
behavior
virtual
memory
systems
single
level
storage
one
level
storage
operating
system
simulation
operating
systems
supervisor
simulation
machine
language
program
interpretation
4
13
4
32
4
39
4
9
ca680701
jb
february
22
1978
3
13
pm
1646
4
1728
1668
4
1728
1669
4
1728
1676
4
1728
1679
4
1728
1682
4
1728
1728
4
1728
1728
4
1728
1728
4
1728
1860
4
1728
1973
4
1728
2018
4
1728
2032
4
1728
2033
4
1728
2107
4
1728
2109
4
1728
2203
4
1728
2251
4
1728
2359
4
1728
2524
4
1728
2543
4
1728
2552
4
1728
2559
4
1728
2859
4
1728
2991
4
1728
3053
4
1728
1525
5
1728
1647
5
1728
1728
5
1728
1728
5
1728
1728
5
1728
1785
5
1728
1892
5
1728
1924
5
1728
2095
5
1728
2218
5
1728
2297
5
1728
2374
5
1728
2526
5
1728
2667
5
1728
2668
5
1728
2862
5
1728
2863
5
1728
1380
6
1728
1526
6
1728
1572
6
1728
1572
6
1728
1604
6
1728
1604
6
1728
1728
6
1728
1728
6
1728
1728
6
1728
1728
6
1728
1728
6
1728
1728
6
1728
1728
6
1728
1728
6
1728
1728
6
1728
1728
6
1728
1728
6
1728
1751
6
1728
1751
6
1728
1751
6
1728
1751
6
1728
1754
6
1728
1754
6
1728
1752
6
1728
1752
6
1728
1761
6
1728
1810
6
1728
1827
6
1728
1827
6
1728
1879
6
1728
1879
6
1728
1901
6
1728
1901
6
1728
2095
6
1728
2373
6
1728
2677
6
1728
2863
6
1728
</TEXT>
</DOC>
<DOC>
<DOCNO>1729</DOCNO>
<TEXT>
minit
algorithm
for
linear
programming
algorithm
333
h
cacm
june
1968
salazar
r
c
sen
s
linear
programming
dual
simplex
method
primal
problem
dual
problem
5
41
ca680616
jb
february
22
19783
15
pm
1729
5
1729
1729
5
1729
1729
5
1729
2784
5
1729
1729
6
1729
309
6
1729
2783
6
1729
</TEXT>
</DOC>
<DOC>
<DOCNO>1730</DOCNO>
<TEXT>
jacobi
polynomials
algorithm
332
s22
cacm
june
1968
witte
b
f
w
jacobi
polynomials
orthogonal
polynomials
three
term
recurrences
special
functions
5
12
ca680615
jb
february
22
1978
3
17
pm
1730
5
1730
1730
5
1730
1730
5
1730
</TEXT>
</DOC>
<DOC>
<DOCNO>1731</DOCNO>
<TEXT>
gaussian
quadrature
formulas
algorithm
331
d1
cacm
june
1968
gautschi
w
quadrature
gaussian
quadrature
numerical
integration
weight
function
orthogonal
polynomials
5
16
ca680614
jb
february
22
1978
3
20
pm
1731
5
1731
1731
5
1731
1731
5
1731
</TEXT>
</DOC>
<DOC>
<DOCNO>1732</DOCNO>
<TEXT>
factorial
analysis
of
variance
algorithm
330
g1
cacm
june
1968
oliver
i
factorial
variance
analysis
variance
statistical
analysis
5
5
ca680613
jb
february
22
1978
3
21
pm
1732
5
1732
1732
5
1732
1732
5
1732
</TEXT>
</DOC>
<DOC>
<DOCNO>1733</DOCNO>
<TEXT>
distribution
of
indistinguishable
objects
into
distinguishable
slots
algorithm
g6
cacm
june
1968
fenichel
r
r
object
distributions
combinations
distribution
numbers
5
39
ca680612
jb
february
22
1978
3
58
pm
1733
5
1733
1733
5
1733
1733
5
1733
</TEXT>
</DOC>
<DOC>
<DOCNO>1734</DOCNO>
<TEXT>
chebyshev
solution
to
an
overdetermined
linear
system
algorithm
328
f4
cacm
june
1968
bartels
r
h
goulub
h
g
chebyshev
solutions
overdetermined
linear
systems
linear
equations
exchange
algorithm
5
13
5
14
5
41
ca680611
jb
february
22
1978
4
01
pm
1734
5
1734
1734
5
1734
1734
5
1734
2143
5
1734
1734
6
1734
</TEXT>
</DOC>
<DOC>
<DOCNO>1735</DOCNO>
<TEXT>
a
futures
market
in
computer
time
an
auction
method
is
described
for
allocating
computer
time
that
allows
the
price
of
computer
time
to
fluctuate
with
the
demand
and
the
relative
priority
of
users
to
be
controlled
so
that
more
important
projects
get
better
access
this
auction
is
free
of
the
periodic
fluctuation
in
computer
use
often
associated
with
monthly
time
allocation
schemes
cacm
june
1968
sutherland
i
e
computer
scheduling
auction
time
allocation
operating
efficiency
2
40
ca680610
jb
february
22
1978
4
04
pm
1735
5
1735
1735
5
1735
1735
5
1735
2020
5
1735
1735
6
1735
</TEXT>
</DOC>
<DOC>
<DOCNO>1736</DOCNO>
<TEXT>
heading
format
for
data
transmission
a
usaai
tutorial
standards
cacm
june
1968
data
transmission
heading
format
heading
format
message
format
data
transmission
message
headings
3
57
3
81
6
39
ca680609
jb
february
22
1978
4
07
pm
1736
5
1736
1736
5
1736
1736
5
1736
</TEXT>
</DOC>
<DOC>
<DOCNO>1737</DOCNO>
<TEXT>
a
global
parser
for
context
free
phrase
structure
grammars
cacm
june
1968
unger
s
h
ca680608
jb
february
22
1978
4
08
pm
1737
5
1737
1737
5
1737
1737
5
1737
</TEXT>
</DOC>
<DOC>
<DOCNO>1738</DOCNO>
<TEXT>
writing
an
outline
debugging
program
for
the
experienced
user
presently
available
online
debugging
routines
are
often
unsatisfactory
for
the
experienced
user
because
they
require
unnecessarily
rigid
and
complicated
typing
formats
make
it
difficult
for
the
user
to
correct
typing
errors
and
consume
excessive
memory
with
intricate
features
in
a
debugging
program
it
is
of
prime
importance
that
the
program
be
simple
flexible
and
highly
efficient
to
use
communication
between
the
user
and
the
debugging
program
can
be
improved
by
using
certain
techniques
applicable
to
most
online
debugging
programs
these
techniques
are
presented
and
are
illustrated
by
their
use
in
opak
octal
package
a
debugging
program
coded
for
the
pdp
5
8
and
the
sds
930
the
compromise
between
economy
of
utility
program
core
storage
and
incorporation
of
elegant
debugging
features
is
discussed
cacm
june
1968
brady
p
t
debugging
utility
program
programming
languages
4
42
ca680607
jb
february
22
1978
4
14
pm
1738
4
1738
1257
5
1738
1738
5
1738
1738
5
1738
1738
5
1738
</TEXT>
</DOC>
<DOC>
<DOCNO>1739</DOCNO>
<TEXT>
regular
expression
search
algorithm
a
method
for
locating
specific
character
strings
embedded
in
character
text
is
described
and
an
implementation
of
this
method
in
the
form
of
a
compiler
is
discussed
the
compiler
accepts
a
regular
expression
as
source
language
and
produces
an
ibm
7094
program
as
object
language
the
object
program
then
accepts
the
text
to
be
searched
as
input
and
produces
a
signal
every
time
an
embedded
string
in
the
text
matches
the
given
regular
expression
examples
problems
and
solution
are
also
presented
cacm
june
1968
thompson
k
search
match
regular
expression
3
74
4
49
5
32
ca680606
jb
february
22
1978
4
18
pm
1739
5
1739
1739
5
1739
1739
5
1739
2545
5
1739
2746
5
1739
1665
6
1739
1739
6
1739
1739
6
1739
1781
6
1739
2139
6
1739
2341
6
1739
2545
6
1739
2786
6
1739
</TEXT>
</DOC>
<DOC>
<DOCNO>1740</DOCNO>
<TEXT>
an
inexpensive
braille
terminal
device
the
active
use
of
time
shared
facilities
for
blind
programmers
requires
a
braille
terminal
system
details
are
given
for
the
construction
of
a
brailler
from
a
model
33
teletype
by
modifying
the
print
head
and
increasing
the
resiliency
of
the
platen
a
description
of
the
programming
needed
to
drive
the
brailler
is
presented
cacm
june
1968
anderson
g
b
rogers
d
w
blind
communication
blind
programming
aid
braille
braille
computer
communication
braille
output
braille
teletype
braille
terminal
braille
type
head
embosser
tactile
computer
communication
tactile
teletype
tactile
terminal
4
41
6
35
ca680605
jb
february
22
1978
4
23
pm
1264
4
1740
1740
4
1740
1099
5
1740
1740
5
1740
1740
5
1740
1740
5
1740
2279
5
1740
1740
6
1740
</TEXT>
</DOC>
<DOC>
<DOCNO>1741</DOCNO>
<TEXT>
brad
the
brookhaven
raster
display
a
multiconsole
computer
display
system
has
been
designed
that
provides
very
rich
displays
at
low
unit
cost
each
brad
brookhaven
raster
display
console
can
plot
tens
of
thousands
of
points
or
up
to
4000
characters
at
30
frames
per
second
after
an
initial
display
system
investment
of
50
000
each
display
with
teletype
costs
less
than
3
000
the
technique
employed
is
that
of
programmatically
generating
a
binary
image
of
the
desired
display
in
a
computer
the
image
is
written
on
a
rotating
drum
memory
independent
read
heads
continuously
display
the
picture
which
is
generated
by
swept
horizontal
lines
a
standard
tv
monitor
serves
as
the
display
device
the
technique
has
two
drawbacks
a
computer
must
compute
any
image
to
be
displayed
also
the
pointing
interaction
is
more
difficult
this
is
because
the
pointing
function
gives
only
the
coordinates
of
the
point
on
the
screen
the
inverse
of
the
map
generation
process
is
required
to
calculate
the
coordinates
of
the
point
on
the
screen
the
inverse
of
the
map
generation
process
is
required
to
calculate
the
coordinates
at
the
selected
point
in
the
input
space
cacm
june
1968
ophir
d
rankowitz
s
shepherd
b
j
spinrad
r
j
computer
display
computer
graphics
computer
raster
display
tv
display
console
digital
tv
display
swept
raster
computer
display
swept
raster
tv
computer
display
tv
graphics
terminal
multiconsole
computer
graphics
inexpensive
graphic
terminal
2
0
4
49
6
35
ca680604
jb
february
22
1978
4
35
pm
1741
5
1741
1741
5
1741
1741
5
1741
1891
5
1741
2211
5
1741
2421
5
1741
2674
5
1741
2687
5
1741
1554
6
1741
1741
6
1741
1741
6
1741
1741
6
1741
1741
6
1741
1741
6
1741
1915
6
1741
2004
6
1741
2004
6
1741
2211
6
1741
2421
6
1741
2687
6
1741
</TEXT>
</DOC>
<DOC>
<DOCNO>1742</DOCNO>
<TEXT>
on
the
design
of
display
processors
the
flexibility
and
power
needed
in
the
data
channel
for
a
computer
display
are
considered
to
work
efficiently
such
a
channel
must
have
a
sufficient
number
of
instructions
that
it
is
best
understood
as
a
small
processor
rather
than
a
powerful
channel
as
it
was
found
that
successive
improvements
to
the
display
processor
design
lie
on
a
circular
path
by
making
improvements
one
can
return
to
the
original
simple
design
plus
one
new
general
purpose
computer
for
each
trip
around
the
degree
of
physical
separation
between
display
and
parent
computer
is
a
key
factor
in
display
processor
design
cacm
june
1968
myer
t
h
display
processor
design
display
system
computer
graphics
graphic
terminal
displays
graphics
display
generator
display
channel
display
programming
graphical
interaction
remote
displays
2
44
6
22
6
29
6
35
ca680603
jb
february
22
1978
4
41
pm
1742
5
1742
1742
5
1742
1742
5
1742
</TEXT>
</DOC>
<DOC>
<DOCNO>1743</DOCNO>
<TEXT>
reliable
full
duplex
file
transmission
over
half
duplex
telephone
lines
a
field
proven
scheme
for
achieving
reliable
duplex
transmission
over
a
half
duplex
communication
line
is
presented
and
to
demonstrate
the
difficulty
of
the
problem
another
similar
scheme
which
is
only
slightly
unreliable
is
also
presented
a
flowchart
for
the
reliable
scheme
and
some
interesting
examples
are
given
cacm
june
1968
lynch
w
c
telephone
communication
half
duplex
transmission
error
correction
full
duplex
telephone
errors
3
81
4
41
6
35
ca680602
jb
february
22
1978
4
45
pm
1743
5
1743
1743
5
1743
1743
5
1743
1907
5
1743
1743
6
1743
</TEXT>
</DOC>
<DOC>
<DOCNO>1744</DOCNO>
<TEXT>
stable
numerical
methods
for
obtaining
the
chebyshev
solution
to
an
overdetermined
system
of
equations
an
implementation
of
stiefel
exchange
algorithm
for
determining
a
chebyshev
solution
to
an
overdetermined
system
of
linear
equations
is
presented
that
uses
gaussian
lu
decomposition
with
row
interchanges
the
implementation
is
computationally
more
stable
than
those
usually
given
in
the
literature
a
generalization
of
stiefel
algorithm
is
developed
which
permits
the
occasional
exchange
of
two
equations
simultaneously
cacm
june
1968
bartels
r
h
golub
g
h
chebyshev
solutions
overdetermined
linear
systems
linear
equations
exchange
algorithm
5
13
5
14
5
41
ca680601
jb
february
22
1978
4
50
pm
1744
5
1744
1744
5
1744
1744
5
1744
1905
5
1744
1744
6
1744
</TEXT>
</DOC>
<DOC>
<DOCNO>1745</DOCNO>
<TEXT>
a
position
paper
on
computing
and
communications
the
effective
operation
of
free
enterprise
in
creating
the
envisioned
information
service
industry
is
dependent
upon
three
accomplishments
1
the
restructuring
of
our
information
processing
industry
so
that
a
clear
division
of
costs
is
made
among
computing
communications
and
the
development
of
information
services
2
the
wide
use
of
multiaccess
system
concepts
so
that
information
services
may
share
in
the
use
of
computer
installations
and
so
that
the
cost
of
their
construction
is
reasonable
and
3
the
development
of
public
message
switched
communications
services
so
that
adequate
provisions
are
made
for
information
security
cacm
may
1968
dennis
j
b
information
networks
information
systems
computing
and
free
enterprise
computing
economics
computer
installation
management
government
regulation
communications
services
distributed
data
base
program
leasing
2
3
2
40
3
80
4
30
ca680511
jb
february
23
1978
8
49
am
1745
5
1745
1745
5
1745
1745
5
1745
</TEXT>
</DOC>
<DOC>
<DOCNO>1746</DOCNO>
<TEXT>
protection
in
an
information
processing
utility
one
of
the
critical
problems
in
the
design
of
an
information
processing
utility
that
permits
flexible
sharing
of
user
information
is
privacy
one
solution
for
this
problem
is
discussed
cacm
may
1968
graham
r
protection
privacy
information
processing
utility
time
sharing
multi
user
multiprogramming
multiprocessing
security
shared
information
controlled
access
reliable
operation
segmentation
4
32
4
39
ca680510
jb
february
23
1978
8
52
am
1746
5
1746
1746
5
1746
1746
5
1746
1753
5
1746
2358
5
1746
2377
5
1746
2372
5
1746
2626
5
1746
2840
5
1746
1471
6
1746
1471
6
1746
1746
6
1746
1746
6
1746
1746
6
1746
1746
6
1746
1746
6
1746
1746
6
1746
1749
6
1746
1751
6
1746
1753
6
1746
274
6
1746
2358
6
1746
2358
6
1746
2377
6
1746
2436
6
1746
2625
6
1746
2626
6
1746
2629
6
1746
2629
6
1746
</TEXT>
</DOC>
<DOC>
<DOCNO>1747</DOCNO>
<TEXT>
three
criteria
for
designing
computing
systems
to
facilitate
debugging
the
designer
of
a
computing
system
should
adopt
explicit
criteria
for
accepting
or
rejecting
proposed
system
features
three
possible
criteria
of
this
kind
are
input
recordability
input
specifiability
and
asynchronous
reproducibility
of
output
these
criteria
imply
that
a
user
can
if
he
desires
either
know
or
control
all
the
influences
affecting
the
content
and
extent
of
his
computer
output
to
define
the
scope
of
the
criteria
the
notion
of
an
abstract
machine
of
a
programming
language
and
the
notion
of
a
virtual
computer
are
explained
examples
of
applications
of
the
criteria
concern
the
reading
of
a
time
of
day
clock
the
synchronization
of
parallel
processes
protection
in
multiprogrammed
systems
and
the
assignment
of
capability
indexes
cacm
may
1968
van
horn
e
c
computer
design
computer
design
criteria
computer
systems
computer
systems
design
input
equipment
input
equipment
design
operating
systems
operating
systems
design
multiprogramming
multiprogrammed
systems
multiprogrammed
system
design
virtual
computers
programming
languages
programming
language
design
program
semantics
programming
language
semantics
determinism
reproducibility
repeatability
deterministic
computers
protection
memory
protection
information
security
information
privacy
computing
reliability
debugging
program
debugging
program
testing
parallel
processing
parallel
programming
multiprocessing
2
11
4
12
4
13
4
20
4
30
4
42
4
43
5
24
6
20
6
35
ca680509
jb
february
23
1978
9
06
am
1458
4
1747
1523
4
1747
1603
4
1747
1698
4
1747
1747
4
1747
1748
4
1747
1854
4
1747
1877
4
1747
1960
4
1747
2377
4
1747
2378
4
1747
2497
4
1747
2558
4
1747
2625
4
1747
2632
4
1747
2840
4
1747
2941
4
1747
3105
4
1747
3144
4
1747
1471
5
1747
1747
5
1747
1747
5
1747
1747
5
1747
2151
5
1747
1653
6
1747
1747
6
1747
1860
6
1747
</TEXT>
</DOC>
<DOC>
<DOCNO>1748</DOCNO>
<TEXT>
a
scheduling
philosophy
for
multiprocessing
systems
a
collection
of
basic
ideas
is
presented
which
have
been
evolved
by
various
workers
over
the
past
four
years
to
provide
a
suitable
framework
for
the
design
and
analysis
of
multiprocessing
systems
the
notions
of
process
and
state
vector
are
discussed
and
the
nature
of
basic
operations
on
processes
is
considered
some
of
the
connections
between
processes
and
protection
are
analyzed
a
very
general
approach
to
priority
oriented
scheduling
is
described
and
its
relationship
to
conventional
interrupt
systems
is
explained
some
aspects
of
time
oriented
scheduling
are
considered
the
implementation
of
the
scheduling
mechanism
is
analyzed
in
detail
and
the
feasibility
of
embodying
it
in
hardware
established
finally
several
methods
for
interlocking
the
execution
of
independent
processes
are
presented
and
compared
cacm
may
1968
lampson
b
w
time
sharing
multiprocessing
process
scheduling
interlocks
protection
priority
interrupt
systems
4
31
4
32
6
21
ca680508
jb
february
23
1978
9
13
am
1458
4
1748
1523
4
1748
1603
4
1748
1698
4
1748
1747
4
1748
1748
4
1748
1854
4
1748
1877
4
1748
1960
4
1748
2377
4
1748
2378
4
1748
2497
4
1748
2558
4
1748
2625
4
1748
2632
4
1748
2840
4
1748
2941
4
1748
3105
4
1748
3144
4
1748
1471
5
1748
1748
5
1748
1748
5
1748
1748
5
1748
1805
5
1748
1828
5
1748
1854
5
1748
2187
5
1748
1421
6
1748
1471
6
1748
1518
6
1748
1572
6
1748
1748
6
1748
1748
6
1748
1748
6
1748
1748
6
1748
1749
6
1748
1749
6
1748
1781
6
1748
</TEXT>
</DOC>
<DOC>
<DOCNO>1749</DOCNO>
<TEXT>
the
structure
of
the
the
multiprogramming
system
a
multiprogramming
system
is
described
in
which
all
activities
are
divided
over
a
number
of
sequential
processes
these
sequential
processes
are
placed
at
various
hierarchical
levels
in
each
of
which
one
or
more
independent
abstractions
have
been
implemented
the
hierarchical
structure
proved
to
be
vital
for
the
verification
of
the
logical
soundness
of
the
design
and
the
correctness
of
its
implementation
cacm
may
1968
dijkstra
e
w
operating
system
multiprogramming
system
system
hierarchy
system
structure
real
time
debugging
program
verification
synchronizing
primitives
cooperating
sequential
processes
system
levels
input
output
buffering
multiprogramming
processor
sharing
multiprocessing
4
30
4
32
ca680507
jb
february
23
1978
9
20
am
1749
5
1749
1749
5
1749
1749
5
1749
1828
5
1749
1854
5
1749
1877
5
1749
1960
5
1749
2150
5
1749
2317
5
1749
2319
5
1749
2342
5
1749
2376
5
1749
2377
5
1749
2379
5
1749
2424
5
1749
2482
5
1749
2618
5
1749
2632
5
1749
2704
5
1749
2723
5
1749
2738
5
1749
2740
5
1749
2741
5
1749
2867
5
1749
3184
5
1749
1198
6
1749
1198
6
1749
1198
6
1749
1198
6
1749
1198
6
1749
1198
6
1749
1247
6
1749
1338
6
1749
1338
6
1749
1338
6
1749
1408
6
1749
1421
6
1749
1471
6
1749
1471
6
1749
1471
6
1749
1471
6
1749
1471
6
1749
1526
6
1749
1549
6
1749
1552
6
1749
1572
6
1749
1693
6
1749
1719
6
1749
1746
6
1749
1748
6
1749
1748
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1749
6
1749
1751
6
1749
1753
6
1749
1781
6
1749
1826
6
1749
210
6
1749
1854
6
1749
1877
6
1749
1877
6
1749
1877
6
1749
1960
6
1749
2016
6
1749
2017
6
1749
2080
6
1749
2080
6
1749
2080
6
1749
2080
6
1749
2126
6
1749
2148
6
1749
2188
6
1749
2203
6
1749
2204
6
1749
2228
6
1749
2228
6
1749
2247
6
1749
2247
6
1749
2256
6
1749
2356
6
1749
2356
6
1749
2358
6
1749
2379
6
1749
2379
6
1749
2454
6
1749
2651
6
1749
2673
6
1749
2777
6
1749
557
6
1749
627
6
1749
731
6
1749
</TEXT>
</DOC>
<DOC>
<DOCNO>1750</DOCNO>
<TEXT>
considerations
in
the
design
of
a
multiple
computer
system
with
extended
core
storage
the
use
of
large
quantities
of
addressable
but
not
executable
fast
random
access
memory
to
heighten
the
multiprogramming
performance
of
a
multicomputer
system
is
discussed
the
general
design
of
the
hardware
arrangement
and
the
software
components
and
functions
of
such
a
system
are
based
on
a
planned
configuration
of
dual
cdc
6600
that
share
one
million
words
of
extended
core
storage
in
the
generalization
of
such
a
design
special
emphasis
is
placed
on
estimating
expected
gains
when
compared
with
the
traditional
configuration
of
separate
and
independent
computers
without
extended
core
storage
an
observation
is
made
on
the
use
of
conventional
slower
speed
random
access
storage
devices
in
place
of
the
faster
memory
cacm
may
1968
fuchel
k
heller
s
multiple
computer
systems
extended
core
storage
multiprogrammed
operating
systems
multiprocessor
operating
systems
control
data
corporation
6600
operating
system
with
ecs
4
30
4
32
ca680506
jb
february
23
1978
9
27
am
1750
5
1750
1750
5
1750
1750
5
1750
2988
5
1750
1750
6
1750
</TEXT>
</DOC>
<DOC>
<DOCNO>1751</DOCNO>
<TEXT>
the
working
set
model
for
program
behavior
probably
the
most
basic
reason
behind
the
absence
of
a
general
treatment
of
resource
allocation
in
modern
computer
systems
is
an
adequate
model
for
program
behavior
in
this
paper
a
new
model
the
working
set
model
is
developed
the
working
set
of
pages
associated
with
a
process
defined
to
be
the
collection
of
its
most
recently
used
pages
provides
knowledge
vital
to
the
dynamic
management
of
paged
memories
process
and
working
set
are
shown
to
be
manifestations
of
the
same
ongoing
computational
activity
then
processor
demand
and
memory
demand
are
defined
and
resource
allocation
is
formulated
as
the
problem
of
balancing
demands
against
available
equipment
cacm
may
1968
denning
p
j
general
operating
system
concepts
multiprocessing
multiprogramming
operating
systems
program
behavior
program
models
resource
allocation
scheduling
storage
allocation
4
30
4
32
ca680505
jb
february
23
1978
9
33
am
1751
4
1751
1892
4
1751
2128
4
1751
2218
4
1751
1751
5
1751
1751
5
1751
1751
5
1751
1752
5
1751
1892
5
1751
1901
5
1751
2085
5
1751
2095
5
1751
2218
5
1751
2277
5
1751
2319
5
1751
2329
5
1751
2358
5
1751
2373
5
1751
2380
5
1751
2434
5
1751
2499
5
1751
2501
5
1751
2582
5
1751
2669
5
1751
2828
5
1751
2863
5
1751
2881
5
1751
2928
5
1751
2996
5
1751
3006
5
1751
3067
5
1751
168
6
1751
185
6
1751
1380
6
1751
1408
6
1751
1410
6
1751
1502
6
1751
1526
6
1751
1572
6
1751
1572
6
1751
1719
6
1751
1728
6
1751
1728
6
1751
1728
6
1751
1728
6
1751
1746
6
1751
1749
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1751
6
1751
1753
6
1751
1754
6
1751
1754
6
1751
1754
6
1751
1752
6
1751
1752
6
1751
1810
6
1751
1810
6
1751
1879
6
1751
1879
6
1751
1884
6
1751
1884
6
1751
274
6
1751
1901
6
1751
1901
6
1751
1924
6
1751
1951
6
1751
2004
6
1751
2016
6
1751
2017
6
1751
2017
6
1751
2017
6
1751
2080
6
1751
2095
6
1751
2130
6
1751
2188
6
1751
2203
6
1751
2204
6
1751
2277
6
1751
2358
6
1751
2374
6
1751
2374
6
1751
2374
6
1751
2373
6
1751
2373
6
1751
2373
6
1751
2373
6
1751
2380
6
1751
2522
6
1751
2569
6
1751
2595
6
1751
2595
6
1751
2595
6
1751
2682
6
1751
2751
6
1751
2841
6
1751
2863
6
1751
2863
6
1751
2864
6
1751
3006
6
1751
</TEXT>
</DOC>
<DOC>
<DOCNO>1752</DOCNO>
<TEXT>
resource
management
for
a
medium
scale
time
sharing
operating
system
task
scheduling
and
resource
balancing
for
a
medium
size
virtual
memory
paging
machine
are
discussed
in
relation
to
a
combined
batch
processing
and
time
sharing
environment
a
synopsis
is
given
of
the
task
scheduling
and
paging
algorithms
that
were
implemented
and
the
results
of
comparative
simulation
are
given
by
tracing
the
development
of
the
algorithms
through
six
predecessor
versions
throughout
the
discussion
particular
emphasis
is
placed
on
balancing
the
system
performance
relative
to
the
characteristics
of
all
the
system
resources
simulation
results
relative
to
alternate
hardware
characteristics
and
the
effects
of
program
mix
and
loading
variations
are
also
presented
cacm
may
1968
oppenheimer
g
weizer
n
time
sharing
operating
systems
resource
management
task
scheduling
paging
system
simulation
memory
management
virtual
memories
4
30
4
31
4
32
ca680504
jb
february
23
1978
9
39
am
1751
5
1752
1752
5
1752
1752
5
1752
1752
5
1752
1892
5
1752
2128
5
1752
2218
5
1752
1380
6
1752
1526
6
1752
1572
6
1752
1572
6
1752
1728
6
1752
1728
6
1752
1751
6
1752
1751
6
1752
1752
6
1752
1752
6
1752
1752
6
1752
1752
6
1752
1810
6
1752
1879
6
1752
2095
6
1752
</TEXT>
</DOC>
<DOC>
<DOCNO>1753</DOCNO>
<TEXT>
virtual
memory
processes
and
sharing
in
multics
some
basic
concepts
involved
in
the
design
of
the
multics
operating
system
are
introduced
multics
concepts
of
processes
address
space
and
virtual
memory
are
defined
and
the
use
of
paging
and
segmentation
is
explained
the
means
by
which
users
may
share
procedures
and
data
is
discussed
and
the
mechanism
by
which
symbolic
references
are
dynamically
transformed
into
virtual
machine
addresses
is
described
in
detail
cacm
may
1968
daley
r
c
dennis
j
b
virtual
memory
information
sharing
shared
procedures
data
sharing
dynamic
linking
segmentation
paging
multiprogramming
storage
management
storage
hierarchies
file
maintenance
3
73
4
32
ca680503
jb
february
23
1978
9
44
am
1753
4
1753
2358
4
1753
2377
4
1753
2372
4
1753
2626
4
1753
2840
4
1753
1746
5
1753
1753
5
1753
1753
5
1753
1753
5
1753
2317
5
1753
2358
5
1753
2625
5
1753
1198
6
1753
1471
6
1753
1572
6
1753
1693
6
1753
1746
6
1753
1749
6
1753
1751
6
1753
1753
6
1753
1753
6
1753
1753
6
1753
1781
6
1753
274
6
1753
2126
6
1753
2148
6
1753
2358
6
1753
2438
6
1753
</TEXT>
</DOC>
<DOC>
<DOCNO>1754</DOCNO>
<TEXT>
dynamic
storage
allocation
systems
in
many
recent
computer
system
designs
hardware
facilities
have
been
provided
for
easing
the
problems
of
storage
allocation
a
method
of
characterizing
dynamic
storage
allocation
systems
according
to
the
functional
capabilities
provided
and
the
underlying
techniques
used
is
presented
the
basic
purpose
of
the
paper
is
to
provide
a
useful
perspective
from
which
the
utility
of
various
hardware
facilities
may
be
assessed
a
brief
survey
of
storage
allocation
facilities
in
several
representative
computer
systems
is
included
as
an
appendix
cacm
may
1968
randell
b
kuehner
c
j
segmentation
paging
multiprogramming
storage
allocation
storage
management
virtual
memories
storage
fragmentation
storage
hierarchies
addressing
mechanisms
4
30
6
20
ca680502
jb
february
23
1978
9
49
am
1754
4
1754
1754
4
1754
2358
4
1754
488
4
1754
274
5
1754
1754
5
1754
1754
5
1754
1754
5
1754
1879
5
1754
1884
5
1754
1901
5
1754
376
5
1754
2095
5
1754
2277
5
1754
2297
5
1754
2365
5
1754
168
6
1754
185
6
1754
987
6
1754
1728
6
1754
1728
6
1754
1751
6
1754
1751
6
1754
1751
6
1754
1754
6
1754
1754
6
1754
1754
6
1754
1754
6
1754
1754
6
1754
1754
6
1754
1754
6
1754
1879
6
1754
1924
6
1754
2362
6
1754
</TEXT>
</DOC>
<DOC>
<DOCNO>1755</DOCNO>
<TEXT>
proceedings
of
the
acm
symposium
on
operating
system
principles
cacm
may
1968
acm
special
interest
committee
ca680501
jb
february
23
1978
9
56
am
1755
5
1755
1755
5
1755
1755
5
1755
</TEXT>
</DOC>
<DOC>
<DOCNO>1756</DOCNO>
<TEXT>
hollerith
punched
card
code
proposed
usa
standard
cacm
april
1968
usa
standard
card
code
punched
card
punched
card
code
hole
patterns
hole
patterns
assignment
punched
card
systems
1
4
2
0
2
2
2
43
2
9
3
15
3
24
3
50
3
57
3
7
3
80
3
81
3
82
4
11
4
12
ca680414
jb
february
23
1978
10
14
am
1756
5
1756
1756
5
1756
1756
5
1756
</TEXT>
</DOC>
<DOC>
<DOCNO>1757</DOCNO>
<TEXT>
data
code
for
calendar
date
for
machine
to
machine
data
interchange
proposed
usa
standard
cacm
april
1968
usa
standard
data
code
calendar
date
machine
to
machine
data
interchange
recording
calendar
date
data
group
identifier
2
0
2
11
2
19
2
3
2
40
2
43
2
49
3
50
3
52
3
53
3
55
3
56
3
59
3
70
3
71
3
73
3
74
3
79
3
81
4
1
4
9
ca680413
jb
february
23
1978
10
18
am
1757
5
1757
1757
5
1757
1757
5
1757
</TEXT>
</DOC>
<DOC>
<DOCNO>1758</DOCNO>
<TEXT>
symmetric
polynomials
algorithm
305
c1
cacm
april
1968
mckay
s
symmetric
polynomials
symmetric
sum
unitary
symmetric
functions
schur
functions
5
39
ca680412
jb
february
23
1978
10
19
am
1758
5
1758
1758
5
1758
1758
5
1758
</TEXT>
</DOC>
<DOC>
<DOCNO>1759</DOCNO>
<TEXT>
transportation
problem
algorithm
293
h
cacm
april
1968
bayer
g
transportation
problem
linear
programming
5
41
ca680411
jb
february
23
1978
10
20
am
1759
5
1759
1759
5
1759
1759
5
1759
</TEXT>
</DOC>
<DOC>
<DOCNO>1760</DOCNO>
<TEXT>
normal
curve
integral
algorithm
304
s15
cacm
april
1968
bergson
a
normal
curve
integral
probability
special
functions
5
5
5
12
ca680410
jb
february
23
1978
10
22
am
1760
5
1760
1760
5
1760
1760
5
1760
1838
5
1760
1760
6
1760
</TEXT>
</DOC>
<DOC>
<DOCNO>1761</DOCNO>
<TEXT>
chi
squared
integral
algorithm
299
s15
cacm
april
1968
o
w
m
wood
j
chi
squared
integral
probability
special
functions
5
5
5
12
ca680409
jb
february
23
1978
10
24
am
1761
5
1761
1761
5
1761
1761
5
1761
2668
5
1761
1604
6
1761
1728
6
1761
1761
6
1761
1827
6
1761
2677
6
1761
</TEXT>
</DOC>
<DOC>
<DOCNO>1762</DOCNO>
<TEXT>
dilogarithm
algorithm
327
s22
cacm
april
1968
kolbig
k
s
dilogarithm
function
special
functions
5
12
ca680408
jb
february
23
1978
10
25
am
1762
5
1762
1762
5
1762
1762
5
1762
</TEXT>
</DOC>
<DOC>
<DOCNO>1763</DOCNO>
<TEXT>
roots
of
low
order
polynomial
equations
algorithm
326
c2
cacm
april
1968
nonweiler
t
f
root
finders
polynomial
equation
roots
quadratic
equation
roots
cubic
equation
roots
biquadratic
equation
roots
polynomial
zeros
5
15
ca680407
jb
february
23
1978
10
27
am
1763
5
1763
1763
5
1763
1763
5
1763
</TEXT>
</DOC>
<DOC>
<DOCNO>1764</DOCNO>
<TEXT>
panel
discussion
on
computer
appreciation
session
19
of
the
acm
20
th
anniversary
conference
on
august
31
1967
was
entitled
education
design
experiments
and
computer
appreciation
its
second
half
consisted
of
a
panel
discussion
on
computer
appreciation
organized
and
chaired
by
elliot
i
organick
the
four
panelists
were
charles
h
davidson
bernard
a
galler
richard
w
hamming
and
alan
j
perlis
after
making
prepared
statements
the
panelists
were
joined
in
discussion
by
andries
van
dam
and
arthur
bohn
who
had
presented
papers
in
the
first
half
this
is
a
transcript
of
the
panel
discussion
condensed
by
dr
organick
and
edited
by
him
and
the
panelists
some
remarks
referred
to
papers
by
van
dam
and
kahn
or
to
the
discussion
during
the
first
half
of
the
session
pertinent
papers
are
included
in
the
references
cacm
april
1968
organick
e
i
computer
appreciation
students
liberal
arts
courses
survey
courses
beginning
programming
course
content
computer
courses
dropout
rates
college
versus
precollege
teaching
and
social
responsibility
1
1
1
51
1
52
ca680406
jb
february
23
1978
10
34
am
1764
5
1764
1764
5
1764
1764
5
1764
</TEXT>
</DOC>
<DOC>
<DOCNO>1765</DOCNO>
<TEXT>
expenditures
sources
of
funds
and
utilization
of
digital
computers
for
research
and
instruction
in
higher
education
1964
65
with
projections
for
1968
69
the
southern
regional
education
board
published
a
complete
report
on
a
survey
it
conducted
to
determine
the
funding
and
characterize
the
utilization
of
computers
used
for
research
and
instruction
in
institutions
of
higher
education
in
the
united
states
the
sampling
survey
is
described
and
the
estimates
for
this
total
population
are
presented
cacm
april
1968
hamblen
j
w
computing
centers
research
instruction
utilization
expenditures
support
sources
of
funds
higher
education
post
secondary
education
colleges
universities
1
52
2
45
ca680405
jb
february
23
1978
11
07
am
1765
5
1765
1765
5
1765
1765
5
1765
</TEXT>
</DOC>
<DOC>
<DOCNO>1766</DOCNO>
<TEXT>
quasilinearization
and
the
estimation
of
differential
operators
from
eigenvalues
given
a
linear
ordinary
differential
operator
containing
several
unknown
constants
and
a
number
of
its
eigenvalues
the
values
of
the
unknown
constants
are
estimated
a
precise
formulation
is
provided
and
an
effective
numerical
procedure
for
solution
is
indicated
the
results
of
some
computational
experiments
are
given
cacm
april
1968
bellman
r
e
kagiwada
h
h
kalaba
r
e
vasudenvan
r
quasilinearization
eigenvalues
differential
operators
nonlinear
boundary
value
problems
inverse
problems
differential
equations
system
identification
3
15
3
17
5
17
ca680404
jb
february
23
1978
11
12
am
1766
4
1766
1401
5
1766
1766
5
1766
1766
5
1766
1766
5
1766
</TEXT>
</DOC>
<DOC>
<DOCNO>1767</DOCNO>
<TEXT>
a
general
purpose
graphic
language
interactive
use
of
computers
with
graphic
terminals
will
permit
many
new
problems
to
be
solved
using
machines
in
order
to
handle
a
variety
of
applications
it
is
expedient
to
develop
a
general
purpose
graphic
language
that
is
useful
on
a
number
of
graphic
devices
a
system
has
been
designed
to
produce
such
a
language
quickly
and
cheaply
a
model
graphic
language
which
has
been
developed
with
the
system
is
presented
cacm
april
1968
kulsrud
h
e
graphic
language
interactive
incremental
compilation
language
design
metacompiler
syntax
specified
language
4
12
4
22
ca680403
jb
february
23
1978
11
17
am
249
4
1767
254
4
1767
272
4
1767
1102
4
1767
1109
4
1767
1140
4
1767
1188
4
1767
1306
4
1767
1396
4
1767
1464
4
1767
1491
4
1767
1767
4
1767
1767
4
1767
1767
4
1767
1767
4
1767
1781
4
1767
1781
4
1767
1781
4
1767
1781
4
1767
1787
4
1767
1787
4
1767
1860
4
1767
1945
4
1767
1949
4
1767
1988
4
1767
321
4
1767
2059
4
1767
2126
4
1767
2252
4
1767
2341
4
1767
435
4
1767
437
4
1767
463
4
1767
483
4
1767
491
4
1767
2732
4
1767
560
4
1767
583
4
1767
3073
4
1767
627
4
1767
631
4
1767
632
4
1767
642
4
1767
644
4
1767
653
4
1767
680
4
1767
761
4
1767
762
4
1767
763
4
1767
123
4
1767
140
4
1767
919
4
1767
989
4
1767
196
5
1767
1468
5
1767
1467
5
1767
1496
5
1767
1767
5
1767
1767
5
1767
1767
5
1767
2002
5
1767
2003
5
1767
2152
5
1767
1491
6
1767
1710
6
1767
1767
6
1767
1767
6
1767
1767
6
1767
1937
6
1767
2105
6
1767
</TEXT>
</DOC>
<DOC>
<DOCNO>1768</DOCNO>
<TEXT>
a
global
parser
for
context
free
phrase
structure
grammars
an
algorithm
for
analyzing
any
context
free
phrase
structure
grammar
and
for
generating
a
program
which
can
then
parse
any
sentence
in
the
language
or
indicate
that
the
given
sentence
is
invalid
is
described
the
parser
is
of
the
top
to
bottom
type
and
is
recursive
a
number
of
heuristic
procedures
whose
purpose
is
to
shorten
the
basic
algorithm
by
quickly
ascertaining
that
certain
substrings
of
the
input
sentence
cannot
correspond
to
the
target
nonterminal
symbols
are
included
both
the
generating
algorithm
and
the
parser
have
been
implemented
in
rca
snobol
and
have
been
tested
successfully
on
a
number
of
artificial
grammars
and
on
a
subset
of
algol
a
number
of
the
routines
for
extracting
data
about
a
grammar
such
as
minimum
lengths
of
n
derivable
strings
and
possible
prefixes
are
given
and
may
be
of
interest
apart
from
their
application
in
this
particular
context
cacm
april
1968
unger
s
h
parser
syntax
directed
compiler
context
free
grammars
syntactic
analysis
translators
3
42
4
12
5
24
ca680402
jb
february
23
1978
11
27
am
1350
4
1768
1399
4
1768
1496
4
1768
1659
4
1768
1665
4
1768
1683
4
1768
1768
4
1768
1768
4
1768
1768
4
1768
1781
4
1768
1787
4
1768
1787
4
1768
1824
4
1768
1825
4
1768
1836
4
1768
1861
4
1768
1945
4
1768
1945
4
1768
2015
4
1768
2061
4
1768
2110
4
1768
2110
4
1768
2127
4
1768
2187
4
1768
2317
4
1768
2545
4
1768
2698
4
1768
2733
4
1768
3094
4
1768
1141
5
1768
1265
5
1768
1768
5
1768
1768
5
1768
1768
5
1768
1781
5
1768
</TEXT>
</DOC>
<DOC>
<DOCNO>1769</DOCNO>
<TEXT>
the
expanding
world
of
computers
the
onward
sweep
of
automatic
processing
of
information
is
impeded
by
nine
principal
barriers
geography
cost
problem
complexity
man
machine
communication
inadequate
sensors
lack
of
understanding
distance
time
and
size
the
main
incentive
for
breaching
these
barriers
is
the
universal
need
for
processing
information
ever
more
urgent
as
the
greater
part
of
human
work
activity
changes
from
production
to
service
computer
developments
in
hardware
programming
time
sharing
education
data
communication
and
displays
are
judged
by
how
effectively
they
remove
these
barriers
and
their
barrier
smashing
potentialities
indicate
continued
rapid
expansion
problem
oriented
languages
are
particularly
effective
over
the
entire
front
online
computers
and
time
sharing
also
rate
high
by
this
measure
education
and
increased
understanding
are
basic
to
all
progress
with
the
computer
this
complex
but
powerful
tool
is
the
most
important
one
available
to
governments
and
scientists
to
use
in
studying
the
problems
being
created
by
the
population
explosion
and
in
analyzing
possible
solutions
cacm
april
1968
harder
e
l
barriers
philosophy
developments
computer
aided
design
problem
oriented
languages
data
communication
education
computer
science
forecast
survey
introduction
1
0
1
3
2
1
3
24
4
0
6
20
6
30
ca680401
jb
february
23
1978
11
36
am
1769
5
1769
1769
5
1769
1769
5
1769
</TEXT>
</DOC>
<DOC>
<DOCNO>1770</DOCNO>
<TEXT>
rules
of
ethics
in
information
processing
the
background
and
motivation
for
the
adoption
by
the
acm
council
on
november
11
1966
of
a
set
of
guidelines
for
professional
conduct
in
information
processing
are
described
a
brief
his
tory
is
given
of
ethical
codes
in
other
professions
some
reasons
for
and
against
adoption
of
ethical
rules
are
considered
and
several
sections
of
the
acm
guidelines
are
analyzed
the
purpose
is
to
inform
about
this
important
aspect
of
our
profession
as
well
as
to
stimulate
thought
and
interest
cacm
march
1968
parker
d
b
ethics
professional
conduct
code
of
ethics
acm
guidelines
professionalism
professional
societies
unethical
conduct
1
3
2
2
ca680302
jb
february
23
1978
11
41
am
1770
4
1770
1628
5
1770
1770
5
1770
1770
5
1770
1770
5
1770
</TEXT>
</DOC>
<DOC>
<DOCNO>1771</DOCNO>
<TEXT>
curriculum
68
recommendations
for
academic
programs
in
computer
science
a
report
of
the
acm
curriculum
committee
on
computer
science
this
report
contains
recommendations
on
academic
programs
in
computer
science
which
were
developed
by
the
acm
curriculum
committee
on
computer
science
a
classification
of
the
subject
areas
contained
in
computer
science
is
presented
and
twenty
two
courses
in
these
areas
are
described
prerequisites
catalog
descriptions
detailed
outlines
and
annotated
bibliographies
for
these
courses
are
included
specific
recommendations
which
have
evolved
from
the
committee
1965
preliminary
recommendations
are
given
for
undergraduate
programs
graduate
programs
in
computer
science
are
discussed
and
some
recommendations
are
presented
for
the
development
of
master
degree
programs
ways
of
developing
guidelines
for
doctoral
programs
are
discussed
but
no
specific
recommendations
are
made
the
importance
of
service
courses
minors
and
continuing
education
in
computer
science
is
emphasized
attention
is
given
to
the
organization
staff
requirements
computer
resources
and
other
facilities
needed
to
implement
computer
science
educational
programs
cacm
march
1968
computer
science
courses
computer
science
curriculum
computer
science
education
computer
science
academic
programs
computer
science
graduate
programs
computer
science
undergraduate
programs
computer
science
course
bibliographies
1
52
ca680301
jb
february
23
1978
11
52
am
1413
4
1771
1654
4
1771
1720
4
1771
1771
4
1771
1771
4
1771
2478
4
1771
1205
5
1771
1654
5
1771
1720
5
1771
1771
5
1771
1771
5
1771
1771
5
1771
1927
5
1771
2147
5
1771
2163
5
1771
2345
5
1771
2478
5
1771
2594
5
1771
2852
5
1771
2899
5
1771
3130
5
1771
1205
6
1771
1417
6
1771
1654
6
1771
1659
6
1771
1720
6
1771
1771
6
1771
1771
6
1771
1771
6
1771
1771
6
1771
1771
6
1771
1771
6
1771
1771
6
1771
1771
6
1771
1771
6
1771
1771
6
1771
1927
6
1771
2155
6
1771
2181
6
1771
2181
6
1771
2204
6
1771
2329
6
1771
2345
6
1771
2387
6
1771
2479
6
1771
2538
6
1771
3003
6
1771
3186
6
1771
</TEXT>
</DOC>
<DOC>
<DOCNO>1772</DOCNO>
<TEXT>
usascsocr
dual
case
keyboard
arrangement
proposed
usa
standard
cacm
february
1968
ca680210
jb
february
23
1978
11
54
am
1772
5
1772
1772
5
1772
1772
5
1772
</TEXT>
</DOC>
<DOC>
<DOCNO>1773</DOCNO>
<TEXT>
general
purpose
alphanumeric
keyboard
arrangement
for
information
interchange
proposed
usa
standard
cacm
february
1968
ca680209
jb
february
23
1978
11
56
am
1773
5
1773
1773
5
1773
1773
5
1773
</TEXT>
</DOC>
<DOC>
<DOCNO>1774</DOCNO>
<TEXT>
program
overlay
techniques
the
general
features
of
program
overlay
systems
are
described
three
main
types
automatic
semiautomatic
and
nonautomatic
are
classified
and
the
programming
techniques
are
explained
as
a
function
of
machine
hardware
and
other
system
features
the
implementation
of
semiautomatic
overlay
facility
in
a
multiprogrammed
system
on
the
cdc
6600
is
described
in
detail
with
special
reference
to
real
time
applications
cacm
february
1968
pankhurst
r
j
loaders
multiprogramming
overlay
techniques
storage
allocation
and
segmentation
4
39
ca680208
jb
february
23
1978
11
59
am
1471
4
1774
1774
4
1774
1774
4
1774
1774
4
1774
2343
4
1774
560
4
1774
972
4
1774
1173
5
1774
271
5
1774
1774
5
1774
1774
5
1774
1774
5
1774
2343
5
1774
800
5
1774
1173
6
1774
1774
6
1774
1845
6
1774
</TEXT>
</DOC>
<DOC>
<DOCNO>1775</DOCNO>
<TEXT>
adjustment
of
the
inverse
of
a
symmetric
matrix
when
two
symmetric
elements
are
changed
algorithm
325
f1
cacm
february
1968
zielke
g
symmetric
matrix
matrix
inverse
matrix
perturbation
matrix
modification
5
14
ca680207
jb
february
23
1978
12
01
pm
1775
5
1775
1775
5
1775
1775
5
1775
</TEXT>
</DOC>
<DOC>
<DOCNO>1776</DOCNO>
<TEXT>
maxflow
algorithm
324
h
cacm
february
1968
bayer
g
network
liner
programming
maximum
flow
5
41
ca680206
jb
february
23
1978
12
02
pm
1776
5
1776
1776
5
1776
1776
5
1776
</TEXT>
</DOC>
<DOC>
<DOCNO>1777</DOCNO>
<TEXT>
generation
of
permutations
in
lexicographic
order
algorithm
323
g6
cacm
february
1968
ord
smith
r
j
permutations
lexicographic
order
lexicographic
generation
permutation
generation
5
39
ca680205
jb
february
23
1978
12
04
pm
1777
5
1777
1777
5
1777
1777
5
1777
1814
5
1777
1777
6
1777
</TEXT>
</DOC>
<DOC>
<DOCNO>1778</DOCNO>
<TEXT>
f
distribution
algorithm
322
s14
cacm
february
1968
dorrer
e
fisher
f
distribution
student
t
distribution
5
5
ca680204
jb
february
23
1978
12
06
pm
1778
5
1778
1778
5
1778
1778
5
1778
1920
5
1778
1778
6
1778
714
6
1778
</TEXT>
</DOC>
<DOC>
<DOCNO>1779</DOCNO>
<TEXT>
t
test
probabilities
algorithm
s14
cacm
february
1968
morris
j
t
test
student
t
statistic
distribution
function
5
5
ca680203
jb
february
23
1978
1
33
pm
1157
4
1779
1779
4
1779
1920
4
1779
1944
4
1779
1987
4
1779
2548
4
1779
1779
5
1779
1779
5
1779
1779
5
1779
1944
5
1779
1987
5
1779
714
5
1779
1561
6
1779
1581
6
1779
1779
6
1779
1779
6
1779
1944
6
1779
714
6
1779
714
6
1779
</TEXT>
</DOC>
<DOC>
<DOCNO>1780</DOCNO>
<TEXT>
harmonic
analysis
for
symmetrically
distributed
data
algorithm
320
c6
cacm
february
1968
hunter
d
b
harmonic
analysis
cosine
series
sine
series
function
approximation
curve
fitting
trigonometric
series
5
13
ca680202
jb
february
23
1978
1
34
pm
1780
5
1780
1780
5
1780
1780
5
1780
</TEXT>
</DOC>
<DOC>
<DOCNO>1781</DOCNO>
<TEXT>
translator
writing
systems
a
critical
review
of
recent
efforts
to
automate
the
writing
of
translators
of
programming
languages
is
presented
the
formal
study
of
syntax
and
its
application
to
translator
writing
are
discussed
in
section
ii
various
approaches
to
automating
the
post
syntactic
semantic
aspects
of
translator
writing
are
discussed
in
section
iii
and
several
related
topics
in
section
iv
cacm
february
1968
feldman
j
gries
d
compiler
compiler
compiler
translator
translator
writing
systems
metacompiler
syntax
semantics
syntax
directed
meta
assembler
macroprocessor
parser
syntactic
analysis
generator
4
1
4
10
4
12
4
22
5
23
ca680201
jb
february
23
1978
2
02
pm
249
4
1781
254
4
1781
267
4
1781
272
4
1781
1046
4
1781
1062
4
1781
1072
4
1781
1086
4
1781
1102
4
1781
1102
4
1781
1105
4
1781
1109
4
1781
1121
4
1781
1132
4
1781
1139
4
1781
1139
4
1781
1139
4
1781
1140
4
1781
1140
4
1781
1141
4
1781
1142
4
1781
1188
4
1781
1215
4
1781
1215
4
1781
1223
4
1781
1225
4
1781
1234
4
1781
1234
4
1781
1263
4
1781
1263
4
1781
1265
4
1781
1265
4
1781
1265
4
1781
1270
4
1781
1306
4
1781
1306
4
1781
1323
4
1781
1323
4
1781
1350
4
1781
1350
4
1781
1358
4
1781
1358
4
1781
1358
4
1781
1358
4
1781
1379
4
1781
1379
4
1781
1380
4
1781
1380
4
1781
1380
4
1781
1396
4
1781
1399
4
1781
1425
4
1781
1453
4
1781
1464
4
1781
1464
4
1781
1469
4
1781
1484
4
1781
1486
4
1781
1491
4
1781
1491
4
1781
1491
4
1781
1491
4
1781
1496
4
1781
1498
4
1781
1498
4
1781
1503
4
1781
1530
4
1781
1541
4
1781
1542
4
1781
1552
4
1781
1565
4
1781
1565
4
1781
1612
4
1781
1613
4
1781
1614
4
1781
1626
4
1781
1646
4
1781
1647
4
1781
1659
4
1781
1665
4
1781
1683
4
1781
1693
4
1781
1693
4
1781
1693
4
1781
1693
4
1781
1708
4
1781
1708
4
1781
1767
4
1781
1767
4
1781
1767
4
1781
1767
4
1781
1768
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1781
4
1781
1787
4
1781
1787
4
1781
1787
4
1781
1787
4
1781
1787
4
1781
1787
4
1781
1787
4
1781
1788
4
1781
1788
4
1781
1792
4
1781
1807
4
1781
1824
4
1781
1824
4
1781
1824
4
1781
1825
4
1781
1826
4
1781
1836
4
1781
1836
4
1781
1852
4
1781
1854
4
1781
1860
4
1781
1860
4
1781
1860
4
1781
1860
4
1781
1860
4
1781
1860
4
1781
1861
4
1781
1945
4
1781
1945
4
1781
1945
4
1781
1945
4
1781
1945
4
1781
1945
4
1781
1945
4
1781
1945
4
1781
1945
4
1781
1945
4
1781
1945
4
1781
1947
4
1781
1949
4
1781
1988
4
1781
1988
4
1781
1988
4
1781
1989
4
1781
321
4
1781
364
4
1781
2015
4
1781
2034
4
1781
2059
4
1781
2060
4
1781
2060
4
1781
2060
4
1781
2061
4
1781
2061
4
1781
2061
4
1781
2083
4
1781
2082
4
1781
2091
4
1781
2091
4
1781
2091
4
1781
2110
4
1781
2112
4
1781
2126
4
1781
2126
4
1781
2126
4
1781
2150
4
1781
2152
4
1781
2156
4
1781
2168
4
1781
2175
4
1781
2178
4
1781
2178
4
1781
2178
4
1781
2179
4
1781
2179
4
1781
2179
4
1781
2228
4
1781
2249
4
1781
2252
4
1781
2252
4
1781
2252
4
1781
2256
4
1781
2299
4
1781
2314
4
1781
2317
4
1781
2325
4
1781
2326
4
1781
2326
4
1781
2341
4
1781
2341
4
1781
2341
4
1781
2340
4
1781
2356
4
1781
2342
4
1781
2376
4
1781
2470
4
1781
2534
4
1781
2534
4
1781
405
4
1781
2541
4
1781
2546
4
1781
2546
4
1781
2546
4
1781
2546
4
1781
435
4
1781
437
4
1781
438
4
1781
438
4
1781
2579
4
1781
463
4
1781
464
4
1781
483
4
1781
491
4
1781
2603
4
1781
2603
4
1781
2618
4
1781
2645
4
1781
2650
4
1781
2652
4
1781
2684
4
1781
2684
4
1781
2684
4
1781
2698
4
1781
2698
4
1781
2698
4
1781
2698
4
1781
2708
4
1781
2708
4
1781
2708
4
1781
2708
4
1781
2719
4
1781
2732
4
1781
2733
4
1781
2736
4
1781
2820
4
1781
2824
4
1781
2833
4
1781
2842
4
1781
2929
4
1781
2934
4
1781
2982
4
1781
2986
4
1781
557
4
1781
560
4
1781
583
4
1781
584
4
1781
3044
4
1781
3045
4
1781
3045
4
1781
3069
4
1781
3073
4
1781
3073
4
1781
3093
4
1781
3093
4
1781
3094
4
1781
3155
4
1781
3184
4
1781
627
4
1781
631
4
1781
631
4
1781
632
4
1781
637
4
1781
642
4
1781
644
4
1781
653
4
1781
653
4
1781
669
4
1781
669
4
1781
679
4
1781
680
4
1781
680
4
1781
691
4
1781
720
4
1781
729
4
1781
759
4
1781
761
4
1781
761
4
1781
762
4
1781
762
4
1781
762
4
1781
763
4
1781
763
4
1781
763
4
1781
795
4
1781
799
4
1781
123
4
1781
140
4
1781
919
4
1781
945
4
1781
949
4
1781
949
4
1781
949
4
1781
989
4
1781
989
4
1781
989
4
1781
123
5
1781
196
5
1781
919
5
1781
990
5
1781
1007
5
1781
1046
5
1781
1131
5
1781
1139
5
1781
1140
5
1781
1149
5
1781
1198
5
1781
1215
5
1781
1223
5
1781
1265
5
1781
1303
5
1781
1323
5
1781
205
5
1781
1358
5
1781
224
5
1781
249
5
1781
1366
5
1781
288
5
1781
1421
5
1781
1460
5
1781
1462
5
1781
1463
5
1781
1468
5
1781
1467
5
1781
1477
5
1781
1491
5
1781
1496
5
1781
1531
5
1781
1535
5
1781
1565
5
1781
1601
5
1781
1602
5
1781
1613
5
1781
1614
5
1781
1626
5
1781
1641
5
1781
1665
5
1781
1768
5
1781
1781
5
1781
1781
5
1781
1781
5
1781
1787
5
1781
1788
5
1781
1824
5
1781
1825
5
1781
1836
5
1781
1861
5
1781
316
5
1781
381
5
1781
398
5
1781
2015
5
1781
2110
5
1781
2127
5
1781
2187
5
1781
2317
5
1781
2545
5
1781
2698
5
1781
2733
5
1781
404
5
1781
410
5
1781
463
5
1781
464
5
1781
483
5
1781
11
5
1781
584
5
1781
3184
5
1781
3188
5
1781
600
5
1781
680
5
1781
691
5
1781
763
5
1781
799
5
1781
196
6
1781
1141
6
1781
1141
6
1781
1155
6
1781
1191
6
1781
1198
6
1781
1215
6
1781
1265
6
1781
1265
6
1781
1324
6
1781
1358
6
1781
1477
6
1781
1477
6
1781
1477
6
1781
1487
6
1781
1491
6
1781
1491
6
1781
1491
6
1781
1496
6
1781
1527
6
1781
1572
6
1781
1614
6
1781
1614
6
1781
1693
6
1781
1739
6
1781
1748
6
1781
1749
6
1781
1753
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
1781
6
1781
224
6
1781
1856
6
1781
378
6
1781
2110
6
1781
2126
6
1781
2148
6
1781
2179
6
1781
2341
6
1781
2423
6
1781
2556
6
1781
2786
6
1781
404
6
1781
408
6
1781
3184
6
1781
577
6
1781
631
6
1781
680
6
1781
763
6
1781
799
6
1781
799
6
1781
799
6
1781
799
6
1781
</TEXT>
</DOC>
<DOC>
<DOCNO>1782</DOCNO>
<TEXT>
a
numerical
integration
formula
useful
in
fourier
analysis
a
numerical
integration
formula
is
presented
which
uses
unequal
sampling
intervals
the
intervals
are
equally
spaced
on
a
log
scale
such
a
formulation
is
useful
in
fourier
analysis
to
improve
accuracy
and
ease
of
usage
a
complete
set
of
formulas
for
numerical
fourier
analysis
is
given
cacm
january
1968
meisel
w
s
numerical
integration
fourier
analysis
integration
5
16
ca680112
jb
february
23
1978
2
05
pm
1782
5
1782
1782
5
1782
1782
5
1782
</TEXT>
</DOC>
<DOC>
<DOCNO>1783</DOCNO>
<TEXT>
in
and
out
conversions
byan
in
and
out
conversion
we
mean
that
a
floating
point
number
in
one
base
is
converted
into
a
floating
point
number
in
another
base
and
then
converted
back
to
a
floating
point
number
in
the
original
base
for
all
combinations
of
rounding
and
truncation
conversions
the
question
is
considered
of
how
many
significant
digits
are
needed
in
the
intermediate
base
to
allow
such
in
and
out
conversions
to
return
the
original
number
when
possible
or
at
least
significant
digit
cacm
january
1968
matula
d
w
floating
point
numbers
significance
base
conversion
rounding
truncation
3
15
5
11
ca680111
jb
february
23
1978
2
14
pm
1783
4
1783
1843
4
1783
1634
5
1783
1783
5
1783
1783
5
1783
1783
5
1783
1843
5
1783
1634
6
1783
1783
6
1783
</TEXT>
</DOC>
<DOC>
<DOCNO>1784</DOCNO>
<TEXT>
practical
error
coefficients
for
estimating
quadrature
errors
for
analytic
functions
all
published
error
coefficients
for
estimating
quadrature
errors
for
analytic
functions
were
computed
on
the
assumption
that
the
quadrature
rule
was
exact
for
polynomials
up
to
a
given
degree
since
these
rules
use
rounded
values
for
the
abscissas
and
weights
and
since
the
true
values
of
the
integrals
of
some
of
the
polynomials
in
question
have
an
infinite
binary
expression
the
quadrature
rule
is
not
exact
hence
these
errors
must
be
taken
into
consideration
in
computing
practical
error
coefficients
cacm
january
1968
rabinowitz
p
numerical
integration
quadrature
truncation
error
theoretical
error
coefficients
practical
error
coefficients
integration
analytical
functions
roundoff
error
5
11
5
16
ca680110
jb
february
23
1978
2
22
pm
1672
5
1784
1784
5
1784
1784
5
1784
1784
5
1784
1784
6
1784
</TEXT>
</DOC>
<DOC>
<DOCNO>1785</DOCNO>
<TEXT>
scatter
storage
techniques
scatter
storage
techniques
as
a
method
for
implementing
the
symbol
tables
of
assemblers
and
compilers
are
reviewed
and
a
number
of
ways
of
using
them
more
effectively
are
presented
many
of
the
most
useful
variants
of
the
techniques
are
documented
cacm
january
1968
morris
r
scatter
storage
hash
addressing
searching
file
searching
file
addressing
storage
layout
3
73
3
74
ca680109
jb
february
23
1978
2
26
pm
1271
4
1785
1785
4
1785
1785
4
1785
1785
4
1785
2203
4
1785
2203
4
1785
2543
4
1785
2552
4
1785
2552
4
1785
2860
4
1785
911
4
1785
911
4
1785
911
5
1785
1676
5
1785
1682
5
1785
1728
5
1785
1785
5
1785
1785
5
1785
1785
5
1785
1860
5
1785
1973
5
1785
332
5
1785
2018
5
1785
2032
5
1785
2033
5
1785
2107
5
1785
2109
5
1785
2203
5
1785
2251
5
1785
2359
5
1785
2524
5
1785
2543
5
1785
2552
5
1785
2559
5
1785
2991
5
1785
492
5
1785
3053
5
1785
849
6
1785
911
6
1785
911
6
1785
1025
6
1785
1314
6
1785
1329
6
1785
1366
6
1785
1389
6
1785
1421
6
1785
1496
6
1785
1525
6
1785
1626
6
1785
1641
6
1785
1647
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1785
6
1785
1786
6
1785
1786
6
1785
1786
6
1785
1786
6
1785
1786
6
1785
1786
6
1785
1786
6
1785
1786
6
1785
1786
6
1785
1973
6
1785
1973
6
1785
1973
6
1785
1973
6
1785
1992
6
1785
332
6
1785
332
6
1785
378
6
1785
2018
6
1785
2107
6
1785
2107
6
1785
2107
6
1785
2107
6
1785
2107
6
1785
2107
6
1785
2107
6
1785
2109
6
1785
2109
6
1785
2109
6
1785
2109
6
1785
2109
6
1785
2109
6
1785
2203
6
1785
2203
6
1785
2203
6
1785
2412
6
1785
2543
6
1785
2673
6
1785
2707
6
1785
2770
6
1785
492
6
1785
3184
6
1785
</TEXT>
</DOC>
<DOC>
<DOCNO>1786</DOCNO>
<TEXT>
an
improved
hash
code
for
scatter
storage
introduced
is
a
hash
coding
method
based
on
fixed
point
division
rather
than
multiplication
or
logical
operations
this
new
method
allows
the
hash
table
to
have
almost
any
length
also
a
new
method
of
handling
collisions
is
discussed
known
as
quadratic
search
this
method
is
faster
than
random
search
and
free
from
the
clusters
that
build
up
with
a
linear
search
cacm
january
1968
maurer
w
d
hash
code
hash
table
scatter
storage
searching
3
74
4
11
4
12
4
9
ca680108
jb
february
23
1978
2
31
pm
1786
5
1786
1786
5
1786
1786
5
1786
1860
5
1786
1973
5
1786
1992
5
1786
2018
5
1786
2033
5
1786
2107
5
1786
2109
5
1786
2203
5
1786
2251
5
1786
2543
5
1786
2573
5
1786
2770
5
1786
911
6
1786
1314
6
1786
1366
6
1786
1389
6
1786
1421
6
1786
1496
6
1786
1626
6
1786
1641
6
1786
1785
6
1786
1785
6
1786
1785
6
1786
1785
6
1786
1785
6
1786
1785
6
1786
1785
6
1786
1785
6
1786
1785
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1786
6
1786
1869
6
1786
1973
6
1786
1973
6
1786
1973
6
1786
1992
6
1786
332
6
1786
378
6
1786
2018
6
1786
2018
6
1786
2018
6
1786
2107
6
1786
2107
6
1786
2107
6
1786
2107
6
1786
2107
6
1786
2107
6
1786
2109
6
1786
2109
6
1786
2109
6
1786
2109
6
1786
2109
6
1786
2109
6
1786
2673
6
1786
492
6
1786
3184
6
1786
</TEXT>
</DOC>
<DOC>
<DOCNO>1787</DOCNO>
<TEXT>
use
of
transition
matrices
in
compiling
an
algorithms
is
described
which
constructs
from
a
suitable
bnf
grammar
an
efficient
left
right
recognizer
for
sentences
of
the
corresponding
language
the
type
of
recognizer
used
in
a
number
of
compilers
operates
with
a
pushdown
stack
and
with
a
transition
matrix
two
examples
illustrate
how
such
recognizers
may
be
used
effectively
for
other
purposes
besides
the
usual
syntax
checking
cacm
january
1968
gries
d
transition
matrices
compilation
translation
grammar
context
free
language
formal
language
parsing
4
12
5
23
ca680107
jb
february
23
1978
2
35
pm
249
4
1787
254
4
1787
267
4
1787
272
4
1787
1102
4
1787
1109
4
1787
1139
4
1787
1140
4
1787
1141
4
1787
1188
4
1787
1215
4
1787
1215
4
1787
1223
4
1787
1306
4
1787
1323
4
1787
1358
4
1787
1380
4
1787
1396
4
1787
1464
4
1787
1491
4
1787
1496
4
1787
1498
4
1787
1542
4
1787
1647
4
1787
1665
4
1787
1665
4
1787
1683
4
1787
1683
4
1787
1693
4
1787
1767
4
1787
1767
4
1787
1768
4
1787
1768
4
1787
1781
4
1787
1781
4
1787
1781
4
1787
1781
4
1787
1781
4
1787
1781
4
1787
1781
4
1787
1787
4
1787
1787
4
1787
1787
4
1787
1787
4
1787
1787
4
1787
1787
4
1787
1787
4
1787
1787
4
1787
1787
4
1787
1792
4
1787
1824
4
1787
1825
4
1787
1836
4
1787
1836
4
1787
1860
4
1787
1861
4
1787
1945
4
1787
1945
4
1787
1945
4
1787
1945
4
1787
1949
4
1787
1988
4
1787
1989
4
1787
321
4
1787
364
4
1787
2015
4
1787
2059
4
1787
2060
4
1787
2061
4
1787
2061
4
1787
2082
4
1787
2091
4
1787
2110
4
1787
2112
4
1787
2126
4
1787
2127
4
1787
2152
4
1787
2179
4
1787
2187
4
1787
2252
4
1787
2317
4
1787
2340
4
1787
2356
4
1787
2534
4
1787
405
4
1787
2541
4
1787
2545
4
1787
2546
4
1787
435
4
1787
437
4
1787
438
4
1787
463
4
1787
483
4
1787
491
4
1787
2603
4
1787
2603
4
1787
2698
4
1787
2698
4
1787
2698
4
1787
2708
4
1787
2732
4
1787
2733
4
1787
2733
4
1787
2820
4
1787
2824
4
1787
2982
4
1787
2986
4
1787
560
4
1787
583
4
1787
3045
4
1787
3073
4
1787
3073
4
1787
3093
4
1787
3155
4
1787
627
4
1787
631
4
1787
632
4
1787
642
4
1787
644
4
1787
653
4
1787
680
4
1787
761
4
1787
762
4
1787
763
4
1787
763
4
1787
123
4
1787
140
4
1787
919
4
1787
989
4
1787
196
5
1787
1141
5
1787
1215
5
1787
224
5
1787
1491
5
1787
1496
5
1787
1781
5
1787
1787
5
1787
1787
5
1787
1787
5
1787
2534
5
1787
2708
5
1787
763
5
1787
799
5
1787
830
6
1787
123
6
1787
196
6
1787
919
6
1787
990
6
1787
1007
6
1787
1046
6
1787
1131
6
1787
1139
6
1787
1140
6
1787
1149
6
1787
1198
6
1787
1215
6
1787
1223
6
1787
1265
6
1787
1303
6
1787
1323
6
1787
1358
6
1787
1366
6
1787
1421
6
1787
1460
6
1787
1462
6
1787
1463
6
1787
1467
6
1787
1468
6
1787
1477
6
1787
1477
6
1787
1491
6
1787
1491
6
1787
1496
6
1787
1531
6
1787
1535
6
1787
1565
6
1787
1601
6
1787
1602
6
1787
1613
6
1787
1614
6
1787
1626
6
1787
1641
6
1787
1787
6
1787
1787
6
1787
1787
6
1787
1788
6
1787
205
6
1787
224
6
1787
249
6
1787
288
6
1787
1959
6
1787
1973
6
1787
316
6
1787
381
6
1787
398
6
1787
2111
6
1787
2111
6
1787
11
6
1787
2182
6
1787
2534
6
1787
2556
6
1787
404
6
1787
410
6
1787
463
6
1787
464
6
1787
483
6
1787
3184
6
1787
3188
6
1787
584
6
1787
600
6
1787
680
6
1787
680
6
1787
691
6
1787
763
6
1787
799
6
1787
799
6
1787
</TEXT>
</DOC>
<DOC>
<DOCNO>1788</DOCNO>
<TEXT>
toward
a
general
processor
for
programming
languages
many
efforts
have
been
made
to
develop
a
better
way
of
implementing
a
higher
level
programming
language
than
by
the
construction
of
a
whole
new
compiler
but
so
far
none
has
proved
generally
satisfactory
in
this
paper
it
is
contended
that
a
programming
language
is
best
described
functionally
as
a
body
of
macro
instructions
and
that
the
macro
call
constitutes
a
canonical
form
in
terms
of
which
a
programming
notation
may
be
described
a
supporting
discussion
of
the
logical
and
his
torical
role
of
the
macro
instruction
is
presented
also
discussed
are
the
conflict
between
machine
independence
and
object
program
efficiency
and
the
question
of
where
the
greatest
difficulties
lie
in
compiler
construction
cacm
january
1968
halpern
m
j
programming
language
translator
programming
language
processor
general
translator
general
processor
macro
instruction
processor
meta
processor
meta
language
translator
meta
language
processor
compiler
compiler
writing
system
translator
writing
system
4
10
4
11
4
12
4
20
ca680106
jb
february
23
1978
2
42
pm
1358
4
1788
1565
4
1788
1781
4
1788
1781
4
1788
1788
4
1788
1788
4
1788
1788
4
1788
1788
4
1788
1006
5
1788
1007
5
1788
205
5
1788
1781
5
1788
1788
5
1788
1788
5
1788
1788
5
1788
3189
5
1788
123
6
1788
196
6
1788
919
6
1788
990
6
1788
1007
6
1788
1046
6
1788
1131
6
1788
1139
6
1788
1140
6
1788
1149
6
1788
1198
6
1788
1215
6
1788
1223
6
1788
1265
6
1788
1303
6
1788
1323
6
1788
1358
6
1788
1366
6
1788
1421
6
1788
1460
6
1788
1462
6
1788
1463
6
1788
1467
6
1788
1468
6
1788
1477
6
1788
1491
6
1788
1496
6
1788
1531
6
1788
1535
6
1788
1565
6
1788
1601
6
1788
1602
6
1788
1613
6
1788
1614
6
1788
1626
6
1788
1641
6
1788
1787
6
1788
1788
6
1788
205
6
1788
224
6
1788
249
6
1788
288
6
1788
316
6
1788
381
6
1788
398
6
1788
11
6
1788
404
6
1788
410
6
1788
463
6
1788
464
6
1788
483
6
1788
3184
6
1788
3188
6
1788
584
6
1788
600
6
1788
680
6
1788
691
6
1788
763
6
1788
799
6
1788
</TEXT>
</DOC>
<DOC>
<DOCNO>1789</DOCNO>
<TEXT>
logarithm
of
gamma
function
algorithm
291
s14
cacm
january
1968
hoare
m
r
ca680104
jb
february
23
1978
2
45
pm
1789
5
1789
1789
5
1789
1789
5
1789
</TEXT>
</DOC>
<DOC>
<DOCNO>1790</DOCNO>
<TEXT>
muller
method
for
finding
roots
of
an
arbitrary
function
algorithm
196
c5
cacm
january
1968
whitley
v
w
equation
roots
function
zeros
5
15
ca680103
jb
february
23
1978
2
47
pm
1790
5
1790
1790
5
1790
1790
5
1790
</TEXT>
</DOC>
<DOC>
<DOCNO>1791</DOCNO>
<TEXT>
triangular
factors
of
modified
matrices
algorithm
319
f1
cacm
january
1968
green
d
r
matrix
decomposition
matrix
factors
matrix
modifier
matrix
perturbation
5
14
ca680102
jb
february
23
1978
2
50
pm
1791
5
1791
1791
5
1791
1791
5
1791
</TEXT>
</DOC>
<DOC>
<DOCNO>1792</DOCNO>
<TEXT>
exploratory
experimental
studies
comparing
online
and
off
line
programming
performance
two
exploratory
experiments
were
conducted
at
system
development
corporation
to
compare
debugging
performance
of
programmers
working
under
conditions
of
on
line
and
off
line
access
to
a
computer
these
are
the
first
known
studies
that
measure
programmers
performance
under
controlled
conditions
for
standard
tasks
statistically
significant
results
of
both
experiments
indicated
faster
debugging
under
online
conditions
but
perhaps
the
most
important
practical
finding
involves
the
striking
individual
differences
in
programmer
performance
methodological
problems
encountered
in
designing
and
conducting
these
experiments
are
described
limitations
of
the
findings
are
pointed
out
hypotheses
are
presented
to
account
for
results
and
suggestions
are
made
for
further
research
cacm
january
1968
sackman
h
erikson
w
j
grant
e
e
online
vs
off
line
performance
programmer
computer
communication
programming
experimental
empirical
studies
programming
cost
effectiveness
programming
performance
debugging
effectiveness
time
sharing
vs
batch
processing
factor
analysis
application
programmer
trainee
performance
basic
programming
knowledge
test
experienced
programmer
study
analysis
of
variance
programmer
individual
differences
2
40
ca680101
jb
february
23
1978
2
58
pm
267
4
1792
1139
4
1792
1141
4
1792
1215
4
1792
1223
4
1792
1647
4
1792
1781
4
1792
1787
4
1792
1792
4
1792
1792
4
1792
1908
4
1792
364
4
1792
405
4
1792
438
4
1792
763
4
1792
224
5
1792
1605
5
1792
1792
5
1792
1792
5
1792
1792
5
1792
3091
5
1792
1792
6
1792
</TEXT>
</DOC>
<DOC>
<DOCNO>1793</DOCNO>
<TEXT>
presentation
of
alphameric
characters
for
information
processing
proposed
american
national
standard
cacm
december
1969
alphameric
handwritten
input
encoding
transcription
numerals
upper
case
hand
printed
2
43
4
41
ca691219
jb
february
15
1978
1
55
pm
1793
5
1793
1793
5
1793
1793
5
1793
2333
5
1793
1793
6
1793
87
6
1793
88
6
1793
</TEXT>
</DOC>
<DOC>
<DOCNO>1794</DOCNO>
<TEXT>
a
fast
random
number
generator
for
ibm
360
cacm
december
1969
seraphin
d
s
pseudorandom
number
modulus
period
float
normalization
characteristic
chi
square
test
4
49
5
19
5
5
ca691218
jb
february
15
1978
1
58
pm
1794
4
1794
1870
4
1794
2122
4
1794
1674
5
1794
1794
5
1794
1794
5
1794
1794
5
1794
2349
5
1794
1648
6
1794
1716
6
1794
1794
6
1794
1894
6
1794
2043
6
1794
501
6
1794
613
6
1794
774
6
1794
</TEXT>
</DOC>
<DOC>
<DOCNO>1795</DOCNO>
<TEXT>
optimal
code
for
serial
and
parallel
computation
cacm
december
1969
fateman
r
j
code
optimization
sequencing
of
operations
detection
of
common
subexpressions
4
12
ca691217
jb
february
15
1978
1
59
pm
1795
5
1795
1795
5
1795
1795
5
1795
</TEXT>
</DOC>
<DOC>
<DOCNO>1796</DOCNO>
<TEXT>
index
by
subject
to
algorithms
1969
cacm
december
1969
this
1969
index
is
the
first
supplement
to
the
index
by
subject
to
algorithms
1960
1968
comm
acm
11
12
dec
1968
827
830
ca691216
jb
february
15
1978
2
03
pm
1796
5
1796
1796
5
1796
1796
5
1796
</TEXT>
</DOC>
<DOC>
<DOCNO>1797</DOCNO>
<TEXT>
solution
of
linear
programs
in
0
1
algorithm
341
h
cacm
december
1969
proll
l
g
linear
programming
zero
one
variables
partial
enumeration
5
41
ca691215
jb
february
15
1978
2
06
pm
1797
5
1797
1797
5
1797
1797
5
1797
</TEXT>
</DOC>
<DOC>
<DOCNO>1798</DOCNO>
<TEXT>
coulomb
wave
functions
algorithm
300
s22
cacm
december
1969
kolbig
k
s
coulomb
wave
functions
wave
functions
special
functions
function
evaluation
5
12
ca691214
jb
february
15
1978
2
08
pm
1798
5
1798
1798
5
1798
1798
5
1798
</TEXT>
</DOC>
<DOC>
<DOCNO>1799</DOCNO>
<TEXT>
elementary
functions
by
continued
fractions
algorithm
229
b1
cacm
december
1969
bray
t
a
continued
factions
pade
table
5
19
ca691213
jb
february
15
1978
2
09
pm
1799
5
1799
1799
5
1799
1799
5
1799
</TEXT>
</DOC>
<DOC>
<DOCNO>1800</DOCNO>
<TEXT>
psif
algorithm
147
s14
cacm
december
1969
parsons
r
g
gamma
function
logarithmic
derivative
factorial
function
psi
function
5
12
ca691212
jb
february
15
1978
2
11
pm
1800
4
1800
1800
5
1800
1800
5
1800
1800
5
1800
2222
5
1800
871
5
1800
970
6
1800
1800
6
1800
1818
6
1800
1834
6
1800
2042
6
1800
</TEXT>
</DOC>
<DOC>
<DOCNO>1801</DOCNO>
<TEXT>
analysis
of
variance
for
balanced
experiments
algorithm
367
g2
cacm
december
1969
claringbold
p
j
analysis
of
variance
analysis
of
covariance
regression
analysis
experimental
design
balanced
experiment
missing
data
interblock
estimate
intra
block
estimate
5
14
5
5
ca691211
jb
february
15
1978
2
14
pm
1801
4
1801
1801
5
1801
1801
5
1801
1801
5
1801
1802
5
1801
</TEXT>
</DOC>
<DOC>
<DOCNO>1802</DOCNO>
<TEXT>
regression
using
certain
direct
product
matrices
algorithm
366
g2
cacm
december
1969
claringbold
p
j
analysis
of
variance
analysis
of
covariance
regression
analysis
experimental
design
matrix
direct
product
protection
operator
orthogonal
matrix
5
14
5
5
ca691210
jb
february
15
1978
2
23
pm
1801
5
1802
1802
5
1802
1802
5
1802
1802
5
1802
1802
6
1802
</TEXT>
</DOC>
<DOC>
<DOCNO>1803</DOCNO>
<TEXT>
complex
root
finding
algorithm
365
c5
cacm
december
1969
bach
h
downhill
method
complex
relaxation
method
complex
iteration
complex
equation
transcendental
complex
equation
algebraic
complex
equation
5
15
ca691209
jb
february
15
1978
2
25
pm
1803
4
1803
1806
5
1803
1803
5
1803
1803
5
1803
1803
5
1803
</TEXT>
</DOC>
<DOC>
<DOCNO>1804</DOCNO>
<TEXT>
coloring
polygonal
regions
algorithm
364
z
cacm
december
1969
herriot
r
g
coloring
polygonal
regions
coloring
planar
surfaces
drawing
pictures
shading
enclosed
regions
4
9
ca691208
jb
february
15
1978
2
27
pm
1804
4
1804
1804
4
1804
2987
4
1804
2987
4
1804
1804
5
1804
1804
5
1804
1804
5
1804
421
5
1804
524
5
1804
</TEXT>
</DOC>
<DOC>
<DOCNO>1805</DOCNO>
<TEXT>
productivity
of
multiprogrammed
computers
progress
in
developing
an
analytic
prediction
method
multiprogramming
as
it
is
discussed
here
is
a
mode
of
computer
operation
in
which
two
or
more
programs
are
concurrently
in
processor
memory
and
proceeding
each
using
the
same
central
processor
unit
cpu
and
input
output
i
o
channels
these
programs
are
actually
proceeding
intermittently
and
singly
according
to
eligibility
readiness
to
proceed
and
priority
it
is
useful
to
be
able
to
represent
them
as
proceeding
continuously
and
simultaneously
each
at
an
effective
rate
which
may
be
a
fraction
of
that
which
it
would
enjoy
in
the
absence
of
the
other
programs
the
effective
progress
rate
of
each
program
is
sensitive
to
many
detailed
characteristics
of
itself
and
its
co
residents
and
simulation
has
been
the
best
available
method
of
predicting
it
this
paper
presents
the
results
of
progress
in
developing
an
alternative
to
simulation
a
simulation
tested
iterative
computation
of
these
rates
under
certain
situations
the
algorithm
is
sensitive
to
most
of
the
factors
that
control
the
phenomenon
including
nonquantitative
or
topological
features
of
the
programs
structures
cacm
december
1969
lasser
d
j
productivity
prediction
multiprogramming
simulation
equipment
evaluation
hardware
evaluation
monitor
operating
system
system
software
supervisors
performance
time
sharing
time
slicing
2
43
2
44
4
32
ca691207
jb
february
15
1978
2
47
pm
1805
4
1805
1805
4
1805
1805
4
1805
1828
4
1805
1846
4
1805
1854
4
1805
1892
4
1805
1912
4
1805
2187
4
1805
2188
4
1805
2218
4
1805
2317
4
1805
1518
5
1805
1572
5
1805
1748
5
1805
1805
5
1805
1805
5
1805
1805
5
1805
3070
5
1805
1805
6
1805
2454
6
1805
2741
6
1805
2988
6
1805
</TEXT>
</DOC>
<DOC>
<DOCNO>1806</DOCNO>
<TEXT>
on
the
downhill
method
the
downhill
method
is
a
numerical
method
for
solving
complex
equations
f
z
0
on
which
the
only
restriction
is
that
the
function
w
f
z
must
be
analytical
an
introduction
to
this
method
is
given
and
a
critical
review
of
relating
literature
is
presented
although
in
theory
the
method
always
converges
it
is
shown
that
a
fundamental
dilemma
exists
which
may
cause
a
breakdown
in
practical
applications
to
avoid
this
difficulty
and
to
improve
the
rate
of
convergence
toward
a
root
some
modifications
of
the
original
method
are
proposed
and
a
program
fortran
based
on
the
modified
method
is
given
in
algorithm
365
some
numerical
examples
are
included
cacm
december
1969
bach
h
downhill
method
complex
relaxation
method
complex
iteration
complex
equation
transcendental
complex
equation
algebraic
complex
equation
5
15
ca691206
jb
february
15
1978
2
54
pm
1806
4
1806
1806
5
1806
1806
5
1806
1806
5
1806
1803
5
1806
535
5
1806
1806
6
1806
</TEXT>
</DOC>
<DOC>
<DOCNO>1807</DOCNO>
<TEXT>
optimization
of
expressions
in
fortran
a
method
of
optimizing
the
computation
of
arithmetic
and
indexing
expressions
of
a
fortran
program
is
presented
the
method
is
based
on
a
linear
analysis
of
the
definition
points
of
the
variables
and
the
branching
and
do
loop
structure
of
the
program
the
objectives
of
the
processing
are
1
to
eliminate
redundant
calculations
when
references
are
made
to
common
subexpression
values
2
to
remove
invariant
calculations
from
do
loops
3
to
efficiently
compute
subscripts
containing
do
iteration
variables
and
4
to
provide
efficient
index
register
usage
the
method
presented
requires
at
least
a
three
pass
compiler
the
second
of
which
is
scanned
backward
it
has
been
used
in
the
development
of
several
fortran
compilers
that
have
proved
to
produce
excellent
object
code
without
significantly
reducing
the
compilation
speed
cacm
december
1969
busam
v
a
england
d
e
fortran
optimization
expressions
compilers
compilation
subscripts
register
allocation
do
loops
common
subexpressions
invariant
calculations
4
12
ca691205
jb
february
15
1978
4
16
pm
1625
4
1807
1781
4
1807
1807
4
1807
1807
4
1807
1807
4
1807
1807
4
1807
1934
4
1807
1945
4
1807
1947
4
1807
1947
4
1807
2034
4
1807
2175
4
1807
2290
4
1807
2579
4
1807
2923
4
1807
2945
4
1807
1223
5
1807
1248
5
1807
1551
5
1807
1807
5
1807
1807
5
1807
1807
5
1807
1947
5
1807
2579
5
1807
2923
5
1807
1535
6
1807
1807
6
1807
1807
6
1807
1947
6
1807
1947
6
1807
</TEXT>
</DOC>
<DOC>
<DOCNO>1808</DOCNO>
<TEXT>
advanced
cryptographic
techniques
for
computers
cryptographic
techniques
which
can
be
used
to
maintain
the
confidentiality
of
information
processed
by
computers
are
dealt
with
special
emphasis
is
paid
to
the
unique
characteristics
of
computer
files
that
make
many
cryptographic
methods
of
little
use
relative
security
costs
and
preferred
methods
are
included
in
this
paper
cacm
december
1969
van
tassel
d
cryptographic
cryptanalysis
ciphers
secrecy
systems
security
systems
confidential
information
processing
1
3
2
12
2
19
3
73
3
81
4
41
ca691204
jb
february
15
1978
4
20
pm
1808
5
1808
1808
5
1808
1808
5
1808
</TEXT>
</DOC>
<DOC>
<DOCNO>1809</DOCNO>
<TEXT>
numerical
analysis
in
a
ph
computer
science
program
numerical
analysis
is
the
study
of
methods
and
procedures
used
to
obtain
approximate
solutions
to
mathematical
problems
much
of
the
emphasis
is
on
scientific
calculation
the
difficulties
of
education
in
such
a
broad
area
center
around
the
question
of
background
and
emphasis
the
numerical
analysis
program
in
the
computer
science
department
should
emphasize
an
awareness
of
the
problems
of
computer
implementation
and
experimental
procedures
nevertheless
there
is
a
need
for
a
solid
background
in
applied
mathematics
cacm
december
1969
parter
s
v
ph
program
numerical
analysis
course
separation
education
1
52
ca691203
jb
february
15
1978
4
25
pm
1809
5
1809
1809
5
1809
1809
5
1809
</TEXT>
</DOC>
<DOC>
<DOCNO>1810</DOCNO>
<TEXT>
is
automatic
folding
of
programs
efficient
enough
to
displace
manual
the
operation
of
folding
a
program
into
the
available
memory
is
discussed
measurements
by
brown
et
al
and
by
nelson
on
an
automatic
folding
mechanism
of
simple
design
a
demand
paging
unit
built
at
the
ibm
research
center
by
belady
nelson
o
and
others
permitting
its
quality
to
be
compared
with
that
of
manual
folding
are
discussed
and
it
is
shown
that
given
some
care
in
use
the
unit
performs
satisfactorily
under
the
conditions
tested
even
though
it
is
operating
across
a
memory
to
storage
interface
with
a
very
large
speed
difference
the
disadvantages
of
prefolding
which
is
required
when
the
folding
is
manual
are
examined
and
a
number
of
the
important
troubles
which
beset
computing
today
are
shown
to
arise
from
or
be
aggravated
by
this
source
it
is
concluded
that
a
folding
mechanism
will
probably
become
a
normal
part
of
most
computing
systems
cacm
december
1969
sayre
d
paging
automatic
paging
demand
paging
folding
automatic
folding
storage
hierarchies
memory
hierarchies
replacement
algorithms
performance
measurement
4
0
4
19
4
39
6
20
6
34
ca691202
jb
february
15
1978
4
33
pm
1810
5
1810
1810
5
1810
1810
5
1810
2218
5
1810
2373
5
1810
1380
6
1810
1410
6
1810
1572
6
1810
1728
6
1810
1751
6
1810
1751
6
1810
1752
6
1810
1810
6
1810
1810
6
1810
1879
6
1810
1951
6
1810
2095
6
1810
2374
6
1810
</TEXT>
</DOC>
<DOC>
<DOCNO>1811</DOCNO>
<TEXT>
a
case
study
in
programming
for
parallel
processors
an
affirmative
partial
answer
is
provided
to
the
question
of
whether
it
is
possible
to
program
parallel
processor
computing
systems
to
efficiently
decrease
execution
time
for
useful
problems
parallel
processor
systems
are
multiprocessor
systems
in
which
several
of
the
processors
can
simultaneously
execute
separate
tasks
of
a
single
job
thus
cooperating
to
decrease
the
solution
time
of
a
computational
problem
the
processors
have
independent
instruction
counters
meaning
that
each
processor
executes
its
own
task
program
relatively
independently
of
the
other
processors
communication
between
cooperating
processors
is
by
means
of
data
in
storage
shared
by
all
processors
a
program
for
the
determination
of
the
distribution
of
current
in
an
electrical
network
was
written
for
a
parallel
processor
computing
system
and
execution
of
this
program
was
simulated
the
data
gathered
from
simulation
runs
demonstrate
the
efficient
solution
of
this
problem
typical
of
a
large
class
of
important
problems
it
is
shown
that
with
proper
programming
solution
time
when
n
processors
are
applied
approaches
1
n
times
the
solution
time
for
a
single
processor
while
improper
programming
can
actually
lead
to
an
increase
of
solution
time
with
the
number
of
processors
stability
of
the
method
of
solution
was
also
investigated
cacm
december
1969
rosenfeld
j
l
parallel
processor
parallelism
parallel
programming
multiprocessor
multiprogramming
tasking
storage
interference
electrical
network
simulation
relaxation
jacobi
gauss
seidel
convergence
3
24
4
9
5
14
5
17
6
21
ca691201
jb
february
15
1978
4
45
pm
1811
5
1811
1811
5
1811
1811
5
1811
</TEXT>
</DOC>
<DOC>
<DOCNO>1812</DOCNO>
<TEXT>
more
on
fortran
random
number
generators
cacm
november
1969
grosenbaugh
l
r
random
number
generation
monte
carlo
simulation
5
5
ca691118
jb
february
15
1978
11
57
am
1812
5
1812
1812
5
1812
1812
5
1812
</TEXT>
</DOC>
<DOC>
<DOCNO>1813</DOCNO>
<TEXT>
generation
of
permutations
in
pseudo
lexicographic
order
algorithm
308
g6
cacm
november
1969
ord
smith
r
j
permutations
lexicographic
order
lexicographic
generation
permutation
generation
5
39
ca691117
jb
february
15
1978
11
59
am
1813
4
1813
1370
5
1813
1813
5
1813
1813
5
1813
1813
5
1813
1978
5
1813
1307
6
1813
1589
6
1813
1813
6
1813
</TEXT>
</DOC>
<DOC>
<DOCNO>1814</DOCNO>
<TEXT>
direct
search
algorithm
178
e4
cacm
november
1969
smith
l
b
function
minimization
search
direct
search
5
19
ca691117
jb
february
15
1978
12
00
pm
1814
4
1814
1777
5
1814
1814
5
1814
1814
5
1814
1814
5
1814
</TEXT>
</DOC>
<DOC>
<DOCNO>1815</DOCNO>
<TEXT>
direct
search
algorithm
178
e4
cacm
november
1969
tomlin
f
k
smith
l
b
function
minimization
search
direct
search
5
19
ca691115
jb
february
15
1978
12
02
pm
1815
4
1815
1715
5
1815
1815
5
1815
1815
5
1815
1815
5
1815
</TEXT>
</DOC>
<DOC>
<DOCNO>1816</DOCNO>
<TEXT>
generalized
least
squares
fit
by
orthogonal
polynomials
algorithm
296
e2
cacm
november
1969
watson
w
t
least
squares
curve
fitting
orthogonal
polynomials
three
term
recurrence
polynomial
regression
approximation
forsythe
method
5
13
5
5
ca691114
jb
february
15
1978
12
06
pm
1816
4
1816
125
5
1816
1816
5
1816
1816
5
1816
1816
5
1816
</TEXT>
</DOC>
<DOC>
<DOCNO>1817</DOCNO>
<TEXT>
computation
of
fourier
coefficients
algorithm
255
c6
cacm
november
1969
hall
g
ray
v
a
numerical
integration
fourier
coefficients
filon
method
5
16
ca691113
jb
february
15
1978
12
08
pm
1817
5
1817
1817
5
1817
1817
5
1817
</TEXT>
</DOC>
<DOC>
<DOCNO>1818</DOCNO>
<TEXT>
associated
legendre
functions
of
the
first
kind
for
real
or
imaginary
arguments
algorithm
47
s16
cacm
november
1969
cobb
s
m
legendre
function
associated
legendre
function
real
or
imaginary
arguments
5
12
ca691112
jb
february
15
1978
12
11
pm
1818
4
1818
1818
5
1818
1818
5
1818
1818
5
1818
2222
5
1818
778
5
1818
970
6
1818
1800
6
1818
1818
6
1818
1834
6
1818
2042
6
1818
</TEXT>
</DOC>
<DOC>
<DOCNO>1819</DOCNO>
<TEXT>
complex
error
function
algorithm
363
s15
cacm
november
1969
gautschi
w
error
function
for
complex
argument
voigt
function
laplace
continued
fraction
gauss
hermite
quadrature
recursive
computation
5
12
ca691111
jb
february
15
1978
12
13
pm
1819
5
1819
1819
5
1819
1819
5
1819
</TEXT>
</DOC>
<DOC>
<DOCNO>1820</DOCNO>
<TEXT>
generation
of
random
permutations
algorithm
362
g6
cacm
november
1969
robson
j
m
permutation
random
permutation
transposition
5
5
ca691110
jb
february
15
1978
12
15
pm
1820
4
1820
1511
5
1820
1820
5
1820
1820
5
1820
1820
5
1820
</TEXT>
</DOC>
<DOC>
<DOCNO>1821</DOCNO>
<TEXT>
permanent
function
of
a
square
matrix
i
and
ii
algorithm
361
g6
cacm
november
1969
shriver
b
eberlein
p
j
dixon
r
d
matrix
permanent
determinant
5
30
ca691109
jb
february
15
197812
18
pm
1821
5
1821
1821
5
1821
1821
5
1821
</TEXT>
</DOC>
<DOC>
<DOCNO>1822</DOCNO>
<TEXT>
shortest
path
forest
with
topological
ordering
algorithm
h
cacm
november
1969
dial
r
b
shortest
path
tree
network
directed
graph
5
32
5
42
ca691108
jb
february
15
1978
12
21
pm
1822
5
1822
1822
5
1822
1822
5
1822
</TEXT>
</DOC>
<DOC>
<DOCNO>1823</DOCNO>
<TEXT>
factorial
analysis
of
variance
algorithm
g1
cacm
november
1969
howell
j
r
factorial
variance
analysis
variance
statistical
analysis
5
5
ca691107
jb
february
15
1978
12
22
pm
1823
5
1823
1823
5
1823
1823
5
1823
</TEXT>
</DOC>
<DOC>
<DOCNO>1824</DOCNO>
<TEXT>
aparel
a
parse
request
language
aparel
is
described
this
language
is
an
extension
to
an
algorithmic
language
pl
i
that
provides
the
pattern
matching
capabilities
normally
found
only
in
special
purpose
languages
such
as
snobol4
and
tmg
this
capability
is
provided
through
parse
requests
stated
in
a
bnf
like
format
these
parse
requests
form
their
own
programming
language
with
special
sequencing
rules
upon
successfully
completing
a
parse
request
an
associated
piece
of
pl
i
code
is
executed
this
code
has
available
for
use
as
normal
pl
i
strings
the
various
pieces
at
all
levels
of
the
parse
it
also
has
available
as
normal
pl
i
variables
the
information
concerning
which
of
the
various
alternatives
were
successful
convenient
facilities
for
multiple
input
output
streams
the
initiation
of
sequences
of
parse
requests
as
a
subroutine
and
parse
time
semantic
checks
are
also
included
aparel
has
proven
convenient
in
building
a
powerful
syntax
and
function
macro
system
an
algebraic
language
preprocessor
debugging
system
an
on
line
command
parser
a
translator
for
dataless
programming
and
as
a
general
string
manipulator
cacm
november
1969
balzer
r
m
farber
d
j
text
processing
string
processing
symbol
manipulation
pl
i
bnf
syntax
parser
translator
pattern
matching
4
12
4
13
4
20
4
22
4
29
ca691106
jb
february
15
1978
12
44
pm
1046
4
1824
1105
4
1824
1139
4
1824
1140
4
1824
1234
4
1824
1263
4
1824
1265
4
1824
1496
4
1824
1541
4
1824
1565
4
1824
1665
4
1824
1693
4
1824
1768
4
1824
1781
4
1824
1781
4
1824
1781
4
1824
1787
4
1824
1824
4
1824
1824
4
1824
1824
4
1824
1824
4
1824
1825
4
1824
1836
4
1824
1861
4
1824
1861
4
1824
2015
4
1824
2110
4
1824
2126
4
1824
2126
4
1824
2127
4
1824
2187
4
1824
2252
4
1824
2317
4
1824
2545
4
1824
2546
4
1824
464
4
1824
2698
4
1824
2733
4
1824
584
4
1824
631
4
1824
653
4
1824
680
4
1824
763
4
1824
795
4
1824
799
4
1824
945
4
1824
1358
5
1824
1614
5
1824
1781
5
1824
1824
5
1824
1824
5
1824
1824
5
1824
404
5
1824
</TEXT>
</DOC>
<DOC>
<DOCNO>1825</DOCNO>
<TEXT>
a
practical
method
for
constructing
lr
k
processors
a
practical
method
for
constructing
lr
k
processors
is
developed
these
processors
are
capable
of
recognizing
and
parsing
an
input
during
a
single
no
backup
scan
in
a
number
of
steps
equal
to
the
length
of
the
input
plus
the
number
of
steps
in
its
derivation
the
technique
presented
here
is
based
on
the
original
method
described
by
knuth
but
decreases
both
the
effort
required
to
construct
the
processor
and
the
size
of
the
processor
produced
this
procedure
involves
partitioning
the
given
grammar
into
a
number
of
smaller
parts
if
an
lr
k
processor
can
be
constructed
for
each
part
using
knuth
algorithm
and
if
certain
conditions
relating
these
individual
processors
are
satisfied
then
an
lr
k
processor
for
the
entire
grammar
can
be
constructed
for
them
using
this
procedure
an
lr
1
parser
for
algol
has
been
obtained
cacm
november
1969
korenjak
a
j
lr
k
grammar
syntactic
analysis
parser
deterministic
language
syntax
directed
compiler
language
processor
context
free
language
algol
4
12
5
2
5
23
ca691105
jb
february
15
1978
12
52
pm
1086
4
1825
1132
4
1825
1234
4
1825
1263
4
1825
1265
4
1825
1270
4
1825
1323
4
1825
1358
4
1825
1379
4
1825
1380
4
1825
1453
4
1825
1464
4
1825
1484
4
1825
1491
4
1825
1498
4
1825
1613
4
1825
1614
4
1825
1665
4
1825
1768
4
1825
1781
4
1825
1787
4
1825
1824
4
1825
1825
4
1825
1825
4
1825
1836
4
1825
1860
4
1825
1861
4
1825
2015
4
1825
2083
4
1825
2110
4
1825
2127
4
1825
2178
4
1825
2179
4
1825
2187
4
1825
2252
4
1825
2317
4
1825
2325
4
1825
2341
4
1825
2545
4
1825
2546
4
1825
2645
4
1825
2652
4
1825
2684
4
1825
2698
4
1825
2733
4
1825
2842
4
1825
2929
4
1825
2934
4
1825
3069
4
1825
669
4
1825
679
4
1825
691
4
1825
761
4
1825
949
4
1825
989
4
1825
1781
5
1825
1825
5
1825
1825
5
1825
1825
5
1825
2061
5
1825
2179
5
1825
3184
5
1825
1140
6
1825
1141
6
1825
1477
6
1825
1477
6
1825
1491
6
1825
1491
6
1825
1825
6
1825
1825
6
1825
2015
6
1825
2110
6
1825
3184
6
1825
773
6
1825
</TEXT>
</DOC>
<DOC>
<DOCNO>1826</DOCNO>
<TEXT>
a
lisp
garbage
collector
for
virtual
memory
computer
systems
in
this
paper
a
garbage
collection
algorithm
for
list
processing
systems
which
operate
within
very
large
virtual
memories
is
described
the
object
of
the
algorithm
is
more
the
compaction
of
active
storage
than
the
discovery
of
free
storage
because
free
storage
is
never
really
exhausted
the
decision
to
garbage
collect
is
not
easily
made
therefore
various
criteria
of
this
decision
are
discussed
cacm
november
1969
fenichel
r
r
yochelson
j
c
garbage
collector
virtual
memory
list
processing
storage
allocation
4
19
4
49
ca691104
jb
february
15
1978
12
57
pm
1024
4
1826
1051
4
1826
1102
4
1826
1132
4
1826
1390
4
1826
1486
4
1826
1549
4
1826
1706
4
1826
1708
4
1826
1781
4
1826
1826
4
1826
1826
4
1826
1860
4
1826
1878
4
1826
378
4
1826
2060
4
1826
2155
4
1826
2156
4
1826
2168
4
1826
2168
4
1826
2249
4
1826
2314
4
1826
2719
4
1826
2719
4
1826
2723
4
1826
2736
4
1826
2833
4
1826
2838
4
1826
2842
4
1826
2855
4
1826
2879
4
1826
3077
4
1826
3080
4
1826
3106
4
1826
627
4
1826
106
4
1826
210
5
1826
1626
5
1826
1826
5
1826
1826
5
1826
1826
5
1826
1972
5
1826
2156
5
1826
2168
5
1826
2438
5
1826
2723
5
1826
2736
5
1826
2833
5
1826
2855
5
1826
3074
5
1826
3112
5
1826
106
6
1826
1380
6
1826
1549
6
1826
1549
6
1826
1626
6
1826
1626
6
1826
1626
6
1826
1626
6
1826
1749
6
1826
1826
6
1826
1826
6
1826
1826
6
1826
1826
6
1826
1826
6
1826
1826
6
1826
1826
6
1826
1826
6
1826
1826
6
1826
1826
6
1826
210
6
1826
210
6
1826
210
6
1826
1853
6
1826
1853
6
1826
1853
6
1826
1878
6
1826
1972
6
1826
1972
6
1826
1972
6
1826
1972
6
1826
1972
6
1826
2314
6
1826
2438
6
1826
2513
6
1826
2651
6
1826
2723
6
1826
2723
6
1826
2736
6
1826
2736
6
1826
2766
6
1826
2833
6
1826
2833
6
1826
2838
6
1826
2998
6
1826
627
6
1826
731
6
1826
731
6
1826
731
6
1826
</TEXT>
</DOC>
<DOC>
<DOCNO>1827</DOCNO>
<TEXT>
performance
monitoring
in
a
time
sharing
system
a
software
measurement
facility
which
is
part
of
a
general
purpose
time
sharing
system
is
described
the
date
collection
facility
dcf
has
been
implemented
in
the
michigan
terminal
system
mts
for
the
system
360
model
67
it
exists
for
the
purpose
of
monitoring
operating
system
and
user
program
behavior
and
performance
the
overall
structure
of
mts
is
outlined
in
order
to
explain
the
implementation
of
the
dcf
events
in
the
system
are
identified
and
recorded
from
within
the
supervisor
and
dumped
to
magnetic
tape
by
an
auxiliary
program
for
off
line
processing
events
in
user
programs
which
are
unrelated
to
system
actions
are
recorded
with
a
supervisor
call
the
time
of
occurrence
of
each
event
is
accurately
recorded
and
data
items
are
further
identified
by
job
and
type
the
overhead
associated
with
data
collection
and
its
interference
with
normal
jobs
is
carefully
analyzed
and
both
are
shown
to
be
minimal
several
examples
are
given
of
information
obtained
with
the
facility
and
of
applications
in
which
it
has
been
useful
some
general
guidelines
are
offered
for
the
construction
of
future
monitoring
programs
cacm
november
1969
pinkerton
t
b
performance
monitoring
performance
measurement
program
behavior
performance
data
multiprogramming
performance
software
measurement
time
sharing
performance
system
evaluation
software
monitor
software
instrumentation
4
31
4
32
4
39
4
42
4
43
ca691103
jb
february
15
1978
1
07
pm
1827
5
1827
1827
5
1827
1827
5
1827
2667
5
1827
2668
5
1827
1604
6
1827
1604
6
1827
1728
6
1827
1728
6
1827
1761
6
1827
1827
6
1827
1827
6
1827
2677
6
1827
</TEXT>
</DOC>
<DOC>
<DOCNO>1828</DOCNO>
<TEXT>
synchronization
in
a
parallel
accessed
data
base
the
following
problem
is
considered
given
a
data
base
which
can
be
manipulated
simultaneously
by
more
than
one
process
what
are
the
rules
for
synchronization
which
will
maximize
the
amount
of
parallel
activity
allowed
it
is
assumed
that
the
data
base
can
be
represented
as
a
graph
an
example
of
such
a
data
base
is
a
hierarchy
of
directories
for
an
on
line
file
system
methods
for
synchronization
of
processes
are
examined
their
validity
is
discussed
and
their
performance
compared
cacm
november
1969
shoshani
a
bernstein
a
j
parallel
accessing
parallel
search
file
search
data
base
synchronization
locking
deadlock
3
73
3
74
4
32
ca691102
jb
february
15
1978
1
13
pm
1805
4
1828
1828
4
1828
1828
4
1828
1854
4
1828
1854
4
1828
1877
4
1828
1960
4
1828
2150
4
1828
2187
4
1828
2317
4
1828
2319
4
1828
2377
4
1828
2342
4
1828
2376
4
1828
2379
4
1828
2424
4
1828
2482
4
1828
2618
4
1828
2632
4
1828
2704
4
1828
2723
4
1828
2738
4
1828
2740
4
1828
2741
4
1828
2867
4
1828
3184
4
1828
1748
5
1828
1749
5
1828
1828
5
1828
1828
5
1828
1828
5
1828
</TEXT>
</DOC>
<DOC>
<DOCNO>1829</DOCNO>
<TEXT>
an
interactive
graphical
display
monitor
in
a
batch
processing
environment
with
remote
entry
a
graphic
monitor
program
is
described
it
was
developed
at
carnegie
mellon
university
for
the
cdc
g21
computer
which
is
a
general
purpose
batch
processing
system
with
remote
entry
the
existing
g21
system
and
the
graphics
hardware
are
described
the
graphic
monitor
is
a
resident
auxiliary
monitor
which
provides
comprehensive
managerial
capability
over
the
graphical
system
in
response
to
commands
from
the
human
user
it
also
will
respond
to
commands
from
a
user
program
through
a
similar
interface
where
routine
calls
take
the
place
of
manual
actions
thus
the
human
and
program
can
interact
on
a
symmetrical
and
equal
basis
through
the
medium
of
the
graphic
monitor
the
choice
made
in
designing
the
graphic
monitor
given
the
constraints
of
the
existing
hardware
and
computer
system
are
discussed
the
structure
of
the
monitor
program
and
the
human
and
program
interfaces
are
described
there
is
also
a
transient
swapping
version
with
a
small
resident
part
and
provision
for
swapped
used
submonitors
cacm
november
1969
bond
a
h
rightnour
j
graphic
monitor
man
machine
interaction
graphic
interface
graphic
in
batch
environment
design
of
graphical
system
4
30
4
31
4
39
4
41
ca691101
jb
february
15
1978
1
22
pm
1829
5
1829
1829
5
1829
1829
5
1829
2357
5
1829
1523
6
1829
1829
6
1829
2035
6
1829
</TEXT>
</DOC>
<DOC>
<DOCNO>1830</DOCNO>
<TEXT>
retrieval
times
for
a
packed
direct
access
inverted
file
cacm
october
1969
bayes
a
j
information
retrieval
direct
access
memory
data
base
inverted
list
3
70
4
41
ca691016
jb
february
15
1978
1
27
pm
1830
5
1830
1830
5
1830
1830
5
1830
</TEXT>
</DOC>
<DOC>
<DOCNO>1831</DOCNO>
<TEXT>
a
comment
on
optimal
tree
structures
cacm
october
1969
stanfel
l
e
information
retrieval
file
searching
tree
structures
double
chaining
3
70
3
73
3
74
ca691015
jb
february
15
1978
1
31
pm
1831
5
1831
1831
5
1831
1831
5
1831
2257
5
1831
2360
5
1831
849
6
1831
849
6
1831
1831
6
1831
1831
6
1831
1936
6
1831
1936
6
1831
2360
6
1831
</TEXT>
</DOC>
<DOC>
<DOCNO>1832</DOCNO>
<TEXT>
minimax
logarithmic
error
cacm
october
1969
dunham
c
b
logarithmic
error
transformed
rational
approximation
square
root
5
10
ca691014
jb
february
15
1978
1
38
pm
1832
4
1832
1999
4
1832
2159
4
1832
1832
5
1832
1832
5
1832
1832
5
1832
1932
5
1832
</TEXT>
</DOC>
<DOC>
<DOCNO>1833</DOCNO>
<TEXT>
an
ambiguity
in
the
description
of
algol
60
cacm
october
1969
herriot
j
g
ising
problem
zero
one
sequences
5
39
ca691013
jb
february
15
1978
1
40
pm
1833
5
1833
1833
5
1833
1833
5
1833
2066
5
1833
1833
6
1833
1842
6
1833
</TEXT>
</DOC>
<DOC>
<DOCNO>1834</DOCNO>
<TEXT>
an
axiomatic
basis
for
computer
programming
in
this
paper
an
attempt
is
made
to
explore
the
logical
foundations
of
computer
programming
by
use
of
techniques
which
were
first
applied
in
the
study
of
geometry
and
have
later
been
extended
to
other
branches
of
mathematics
this
involves
the
elucidation
of
sets
of
axioms
and
rules
of
inference
which
can
be
used
in
proofs
of
the
properties
of
computer
programs
examples
are
given
of
such
axioms
and
rules
and
a
formal
proof
of
a
simple
theorem
is
displayed
finally
it
is
argued
that
important
advantages
both
theoretical
and
practical
may
follow
from
a
pursuance
of
these
topics
cacm
october
1969
hoare
c
a
r
axiomatic
method
theory
of
programming
proofs
of
programs
formal
language
definition
programming
language
design
machine
independent
programming
program
documentation
4
0
4
21
4
22
5
20
5
21
5
23
5
24
ca691012
jb
february
15
1978
1
48
pm
1834
5
1834
1834
5
1834
1834
5
1834
2021
5
1834
2222
5
1834
2227
5
1834
2315
5
1834
2326
5
1834
2470
5
1834
2732
5
1834
2865
5
1834
2896
5
1834
2943
5
1834
3014
5
1834
3068
5
1834
3077
5
1834
3143
5
1834
196
6
1834
970
6
1834
1303
6
1834
1303
6
1834
1323
6
1834
1348
6
1834
1469
6
1834
1800
6
1834
1818
6
1834
210
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1834
6
1834
1987
6
1834
307
6
1834
2042
6
1834
2060
6
1834
2192
6
1834
2227
6
1834
2264
6
1834
2457
6
1834
2597
6
1834
2723
6
1834
2732
6
1834
2869
6
1834
2981
6
1834
3186
6
1834
728
6
1834
</TEXT>
</DOC>
<DOC>
<DOCNO>1835</DOCNO>
<TEXT>
the
iitran
programming
language
the
iitran
language
developed
to
be
used
by
students
and
its
important
important
features
are
described
iitran
is
a
procedure
oriented
language
with
a
one
level
block
structure
and
a
variety
of
data
types
several
novel
and
powerful
features
are
included
a
discussion
of
design
principles
to
be
followed
in
a
student
language
is
given
cacm
october
1969
dewar
r
b
k
hochsprung
r
r
languages
programming
languages
student
programming
systems
language
design
high
school
programs
college
courses
1
51
1
52
4
12
4
22
ca691011
jb
february
15
1978
1
54
pm
1835
5
1835
1835
5
1835
1835
5
1835
2971
5
1835
1835
6
1835
1974
6
1835
2534
6
1835
</TEXT>
</DOC>
<DOC>
<DOCNO>1836</DOCNO>
<TEXT>
a
new
method
for
determining
linear
precedence
functions
for
precedence
grammars
the
precedence
relations
of
a
precedence
grammar
can
be
precisely
described
by
a
two
dimensional
precedence
matrix
often
the
information
in
the
matrix
can
be
represented
more
concisely
by
a
pair
of
vectors
called
linear
precedence
functions
a
new
algorithm
is
presented
for
obtaining
the
linear
precedence
functions
when
given
the
precedence
matrix
this
algorithm
is
shown
to
possess
several
computational
advantages
cacm
october
1969
bell
j
r
boolean
matrices
syntax
precedence
grammar
context
free
parsing
transition
matrix
precedence
functions
4
12
ca691010
jb
february
15
1978
3
13
pm
1379
4
1836
1542
4
1836
1665
4
1836
1683
4
1836
1693
4
1836
1693
4
1836
1768
4
1836
1781
4
1836
1781
4
1836
1787
4
1836
1787
4
1836
1824
4
1836
1825
4
1836
1836
4
1836
1836
4
1836
1836
4
1836
1836
4
1836
1836
4
1836
1861
4
1836
1945
4
1836
1945
4
1836
2015
4
1836
2015
4
1836
2060
4
1836
2060
4
1836
2061
4
1836
2061
4
1836
2082
4
1836
2091
4
1836
2091
4
1836
2110
4
1836
2127
4
1836
2152
4
1836
2179
4
1836
2179
4
1836
2187
4
1836
2317
4
1836
2340
4
1836
2340
4
1836
2356
4
1836
2545
4
1836
2546
4
1836
2546
4
1836
2603
4
1836
2698
4
1836
2698
4
1836
2698
4
1836
2708
4
1836
2708
4
1836
2733
4
1836
2824
4
1836
2982
4
1836
2986
4
1836
3045
4
1836
3045
4
1836
3093
4
1836
1191
5
1836
1477
5
1836
1491
5
1836
1781
5
1836
1836
5
1836
1836
5
1836
1836
5
1836
2340
5
1836
2982
5
1836
2986
5
1836
577
5
1836
1191
6
1836
1491
6
1836
1491
6
1836
1491
6
1836
1683
6
1836
1683
6
1836
1836
6
1836
1836
6
1836
1836
6
1836
2179
6
1836
2340
6
1836
2340
6
1836
</TEXT>
</DOC>
<DOC>
<DOCNO>1837</DOCNO>
<TEXT>
an
algol
convolution
procedure
based
on
the
fast
fourier
transform
algorithm
345
c6
cacm
october
1969
singleton
r
c
fast
fourier
transform
complex
fourier
transform
multivariate
fourier
transform
fourier
series
harmonic
analysis
spectral
analysis
orthogonal
polynomials
orthogonal
transformation
convolution
auto
covariance
autocorrelation
cross
correlation
digital
filtering
permutation
3
15
3
83
5
12
5
14
ca691009
jb
february
15
1978
3
17
pm
1837
5
1837
1837
5
1837
1837
5
1837
</TEXT>
</DOC>
<DOC>
<DOCNO>1838</DOCNO>
<TEXT>
normal
curve
integral
algorithm
304
s15
cacm
october
1969
adams
a
g
normal
curve
integral
probability
special
functions
5
5
5
12
ca691008
jb
february
15
1978
3
19
pm
1838
4
1838
1760
5
1838
1838
5
1838
1838
5
1838
1838
5
1838
</TEXT>
</DOC>
<DOC>
<DOCNO>1839</DOCNO>
<TEXT>
singular
value
decomposition
of
a
complex
matrix
algorithm
358
f1
4
5
cacm
october
1969
businger
p
a
goulub
g
h
singular
values
matrix
decomposition
least
squares
solution
pseudoinverse
5
14
ca691007
jb
february
15
1978
3
22
pm
1839
5
1839
1839
5
1839
1839
5
1839
</TEXT>
</DOC>
<DOC>
<DOCNO>1840</DOCNO>
<TEXT>
an
efficient
prime
number
generator
algorithm
357
a1
cacm
october
1969
singleton
r
c
prime
numbers
factoring
number
theory
3
15
5
30
ca691006
jb
february
15
1978
3
23
pm
1840
5
1840
1840
5
1840
1840
5
1840
2927
5
1840
1537
6
1840
1539
6
1840
1538
6
1840
1840
6
1840
1841
6
1840
</TEXT>
</DOC>
<DOC>
<DOCNO>1841</DOCNO>
<TEXT>
a
prime
number
generator
using
the
treesort
principle
algorithm
356
a1
cacm
october
1969
singleton
r
c
prime
numbers
number
theory
sorting
3
15
5
30
5
31
ca691005
jb
february
15
1978
3
25
pm
1841
4
1841
1841
4
1841
1841
4
1841
1967
4
1841
2120
4
1841
2120
4
1841
2927
4
1841
2927
4
1841
1539
5
1841
1841
5
1841
1841
5
1841
1841
5
1841
1841
5
1841
377
5
1841
2927
5
1841
1537
6
1841
1539
6
1841
1539
6
1841
1538
6
1841
1840
6
1841
1841
6
1841
1841
6
1841
377
6
1841
</TEXT>
</DOC>
<DOC>
<DOCNO>1842</DOCNO>
<TEXT>
an
algorithm
for
generating
ising
configurations
algorithm
355
z
cacm
october
1969
simoes
j
m
s
ising
problem
zero
one
sequences
5
39
ca691004
jb
february
15
1978
3
27
pm
1842
5
1842
1842
5
1842
1842
5
1842
2066
5
1842
1833
6
1842
1842
6
1842
</TEXT>
</DOC>
<DOC>
<DOCNO>1843</DOCNO>
<TEXT>
the
choice
of
base
a
digital
computer
is
considered
whose
memory
words
are
composed
on
n
r
state
devices
plus
two
sign
bits
two
state
devices
the
choice
of
base
b
for
the
internal
representation
of
floating
point
numbers
on
such
a
computer
is
discussed
it
is
shown
that
in
a
certain
sense
b
r
is
best
cacm
october
1969
brown
w
s
richman
p
l
floating
point
accuracy
base
choice
number
representations
5
11
6
32
ca691003
jb
february
15
1978
3
33
pm
1783
4
1843
1843
4
1843
1843
4
1843
1634
5
1843
1783
5
1843
1843
5
1843
1843
5
1843
1843
5
1843
</TEXT>
</DOC>
<DOC>
<DOCNO>1844</DOCNO>
<TEXT>
a
modular
computer
sharing
system
an
alternative
approach
to
the
design
and
organization
of
a
general
purpose
interactive
multiterminal
computing
system
is
presented
the
system
organization
described
is
a
conceptually
simple
arrangement
of
a
bank
of
interchangeable
computers
each
of
which
is
a
memory
processor
pair
that
are
assigned
to
process
terminal
jobs
as
they
arrive
one
of
the
computers
serves
as
the
master
or
control
computer
and
supervises
the
collection
and
distribution
of
messages
from
and
to
the
remote
terminals
in
the
simplest
form
there
is
a
disk
drive
for
each
connected
terminal
a
crosspoint
switching
network
allows
any
such
disk
drive
to
be
connected
to
any
computer
thus
while
each
active
terminal
user
occupies
a
dedicated
disk
drive
he
may
share
the
computer
with
many
other
terminal
users
in
a
simple
manner
the
ratio
of
users
to
computers
is
dependent
on
both
the
size
and
power
of
the
machines
used
and
the
computation
requirements
of
the
particular
mix
of
users
this
system
organization
is
inherently
a
simpler
and
therefore
more
reliable
approach
to
time
sharing
computers
and
has
the
potential
of
a
highly
available
system
at
relatively
low
cost
economic
configurations
are
possible
for
a
range
of
systems
sizes
that
span
at
least
one
order
of
magnitude
finally
problem
programs
developed
by
remote
terminal
users
can
be
run
on
a
dedicated
batch
system
if
compatible
computers
are
used
cacm
october
1969
baskin
h
b
horowitz
e
b
tennison
r
d
rittenhouse
l
e
multiple
terminal
systems
terminal
oriented
systems
multiple
processor
systems
high
availability
conversational
systems
general
purpose
time
sharing
systems
real
time
response
system
modular
constructed
systems
modular
computer
sharing
systems
graphics
file
switch
intercomputer
communications
control
computer
problem
computer
roll
in
roll
out
6
21
ca691002
jb
february
15
1978
3
52
pm
1844
5
1844
1844
5
1844
1844
5
1844
</TEXT>
</DOC>
<DOC>
<DOCNO>1845</DOCNO>
<TEXT>
loader
standardization
for
overlay
programs
the
overlay
capability
is
described
for
four
of
the
third
generation
computer
systems
cdc
6000
ge
635
ibm
360
and
univac
1108
a
critique
of
the
first
three
systems
is
based
on
actual
experience
with
a
large
overlaid
trajectory
simulation
program
a
short
history
and
description
of
this
program
is
presented
a
standardization
of
minimum
capabilities
for
loaders
is
recommended
so
that
programs
which
must
operate
under
more
than
one
computer
system
may
be
easily
converted
and
maintained
a
proposal
that
overlay
software
incorporates
a
memory
occupation
specification
concept
instead
of
the
conditional
tree
structure
is
delineated
this
concept
provides
more
efficient
and
cost
effective
utilization
of
the
memory
as
well
as
increased
flexibility
in
program
structure
cacm
october
1969
lanzano
b
c
loader
overlay
partition
region
segmentation
linkage
linkage
editor
standardization
memory
utilization
memory
occupation
tree
structure
cdc
6000
ge
635
ibm
360
univac
1108
4
10
4
12
4
19
4
40
ca691001
jb
february
15
1978
4
09
pm
1845
4
1845
1900
4
1845
2083
4
1845
2154
4
1845
2270
4
1845
2693
4
1845
988
5
1845
1845
5
1845
1845
5
1845
1845
5
1845
2343
5
1845
1173
6
1845
1774
6
1845
1845
6
1845
</TEXT>
</DOC>
<DOC>
<DOCNO>1846</DOCNO>
<TEXT>
on
simulating
networks
of
parallel
processes
in
which
simultaneous
events
may
occur
some
of
the
problems
of
simulating
discrete
event
systems
particularly
computer
systems
on
a
conventional
digital
computer
are
dealt
with
the
systems
are
assumed
to
be
described
as
a
network
of
interconnected
sequential
processes
briefly
reviewed
are
the
common
techniques
used
to
handle
such
simulations
when
simultaneous
events
do
not
occur
can
be
ignored
or
can
be
handled
by
simple
priority
rules
following
this
the
problem
of
dealing
with
simultaneous
events
in
separate
processes
is
introduced
an
abstraction
of
this
problem
is
developed
which
admits
solution
for
a
majority
of
commonly
encountered
problems
the
technique
will
either
find
a
method
of
simulating
the
parallel
events
or
report
that
none
can
be
found
in
some
of
the
latter
cases
it
is
shown
to
be
possible
to
find
a
solution
by
extending
the
information
available
to
the
solution
technique
but
in
many
cases
the
technique
becomes
computationally
unfeasible
when
the
additional
information
is
provided
cacm
september
1969
parnas
d
l
simulation
parallel
processes
simultaneous
events
picture
processing
computer
system
simulation
3
19
3
24
4
24
5
9
6
9
ca690910
jb
february
15
1978
4
21
pm
1541
4
1846
1805
4
1846
1846
4
1846
1846
4
1846
1846
4
1846
1846
4
1846
1846
4
1846
1892
4
1846
2060
4
1846
2188
4
1846
2218
4
1846
2218
4
1846
2317
4
1846
2630
4
1846
2650
4
1846
3112
4
1846
1380
5
1846
1424
5
1846
1484
5
1846
1572
5
1846
1846
5
1846
1846
5
1846
1846
5
1846
576
5
1846
3064
5
1846
1846
6
1846
1939
6
1846
2742
6
1846
2767
6
1846
2936
6
1846
</TEXT>
</DOC>
<DOC>
<DOCNO>1847</DOCNO>
<TEXT>
an
algorithm
for
finding
a
fundamental
set
of
cycles
of
a
graph
a
fast
method
is
presented
for
finding
a
fundamental
set
of
cycles
for
an
undirected
finite
graph
a
spanning
tree
is
grown
and
the
vertices
examined
in
turn
unexamined
vertices
being
stored
in
a
pushdown
list
to
await
examination
one
stage
in
the
process
is
to
take
the
top
element
v
of
the
pushdown
list
and
examine
it
i
e
inspect
all
those
edges
v
z
of
the
graph
for
which
z
has
not
yet
been
examined
if
z
is
already
in
the
tree
a
fundamental
cycle
is
added
if
not
the
edge
v
z
is
placed
in
the
tree
there
is
exactly
one
such
stage
for
each
of
the
n
vertices
of
the
graph
for
large
n
the
store
required
in
creases
as
n
2
and
the
time
as
n
g
where
g
depends
on
the
type
of
graph
involved
g
is
bounded
below
by
2
and
above
by
3
and
it
is
shown
that
both
bounds
are
attained
in
terms
of
storage
our
algorithm
is
similar
to
that
of
gotlieb
and
corneil
and
superior
to
that
of
welch
in
terms
of
speed
it
is
similar
to
that
of
welch
and
superior
to
that
of
gotlieb
and
corneil
testsshow
our
algorithm
to
be
remarkably
efficient
g
2
on
random
graphs
cacm
september
1969
paton
k
fundamental
cycle
set
graph
algorithm
cycle
spanning
tree
5
32
ca690909
jb
february
15
1978
4
29
pm
1847
4
1847
1961
4
1847
2052
4
1847
1504
5
1847
1847
5
1847
1847
5
1847
1847
5
1847
1961
5
1847
2177
5
1847
2763
5
1847
1369
6
1847
1504
6
1847
1847
6
1847
1847
6
1847
1847
6
1847
</TEXT>
</DOC>
<DOC>
<DOCNO>1848</DOCNO>
<TEXT>
the
damped
taylor
series
method
for
minimizing
a
sum
of
squares
and
for
solving
systems
of
nonlinear
equations
algorithm
315
e4
c5
cacm
september
1969
silverman
g
solution
of
equations
least
squares
approximation
newton
method
5
13
5
14
5
15
ca690907
jb
february
15
1978
4
32
pm
1848
5
1848
1848
5
1848
1848
5
1848
</TEXT>
</DOC>
<DOC>
<DOCNO>1849</DOCNO>
<TEXT>
function
minimization
algorithm
251
e4
cacm
september
1969
hamilton
p
a
boothroyd
j
function
minimization
5
19
ca690906
jb
february
15
1978
4
38
pm
1849
5
1849
1849
5
1849
1849
5
1849
2190
5
1849
1372
6
1849
1849
6
1849
</TEXT>
</DOC>
<DOC>
<DOCNO>1850</DOCNO>
<TEXT>
generation
of
permutations
in
lexicographic
order
algorithm
323
g6
cacm
september
1969
leitch
i
m
permutations
direct
lexicographic
order
reverse
lexicographic
order
lexicographic
generation
5
39
ca690905
jb
february
15
1978
4
48
pm
1850
5
1850
1850
5
1850
1850
5
1850
</TEXT>
</DOC>
<DOC>
<DOCNO>1851</DOCNO>
<TEXT>
generator
of
spanning
trees
algorithms
354
h
cacm
september
1969
mcilroy
m
d
spanning
trees
trees
graphs
5
32
ca690904
jb
february
15
1978
4
50
pm
1851
5
1851
1851
5
1851
1851
5
1851
</TEXT>
</DOC>
<DOC>
<DOCNO>1852</DOCNO>
<TEXT>
a
base
for
a
mobile
programming
system
an
algorithm
for
a
macro
processor
which
has
been
used
as
the
base
of
an
implementation
by
bootstrapping
of
processors
for
programming
languages
is
described
this
algorithm
can
be
easily
implemented
on
contemporary
computing
machines
experience
with
programming
languages
whose
implementation
is
based
on
this
algorithm
indicates
that
such
a
language
can
be
transferred
to
a
new
machine
in
less
than
one
man
week
without
using
the
old
machine
cacm
september
1969
orgass
r
j
waite
w
m
bootstrapping
macro
processing
machine
independence
programming
languages
implementation
techniques
4
12
4
22
ca690903
jb
february
15
1978
4
54
pm
1530
4
1852
1781
4
1852
1852
4
1852
2034
4
1852
1565
5
1852
1852
5
1852
1852
5
1852
1852
5
1852
2034
5
1852
984
6
1852
1231
6
1852
1565
6
1852
1852
6
1852
1926
6
1852
1947
6
1852
</TEXT>
</DOC>
<DOC>
<DOCNO>1853</DOCNO>
<TEXT>
compact
list
representation
definition
garbage
collection
and
system
implementation
compact
lists
are
stored
sequentially
in
memory
rather
than
chained
with
pointers
since
this
is
not
always
convenient
the
swym
system
permits
a
list
to
be
chained
compact
or
any
combination
of
the
two
a
description
is
given
of
that
list
representation
and
the
operators
implemented
most
are
similar
to
those
of
lisp
1
5
the
system
garbage
collector
attempts
to
make
all
lists
compact
it
relocates
and
rearranges
all
of
list
storage
using
temporary
storage
this
unique
list
compacting
garbage
collection
algorithm
is
presented
in
detail
several
classes
of
the
macros
used
to
implement
the
system
are
described
finally
consideration
is
given
to
those
design
factors
essential
to
the
success
of
a
plex
processing
system
implementation
cacm
september
1969
hansen
w
j
data
structure
data
representation
list
structure
list
representation
list
compact
list
garbage
collection
relocation
storage
reclamation
macro
primitive
list
operations
plex
processing
plex
pointer
list
processing
system
lisp
free
storage
3
49
4
20
4
22
4
49
4
9
ca690902
jb
february
15
1978
5
01
pm
1853
4
1853
2003
4
1853
1710
5
1853
1853
5
1853
1853
5
1853
1853
5
1853
1972
5
1853
2249
5
1853
2736
5
1853
3074
5
1853
1626
6
1853
1626
6
1853
1708
6
1853
1826
6
1853
1826
6
1853
1826
6
1853
1853
6
1853
1853
6
1853
1853
6
1853
1853
6
1853
1972
6
1853
1972
6
1853
2723
6
1853
</TEXT>
</DOC>
<DOC>
<DOCNO>1854</DOCNO>
<TEXT>
on
multiprogramming
machine
coding
and
computer
organization
the
author
feels
that
the
interrupt
feature
which
is
available
in
most
modern
computers
is
a
potent
source
of
programming
pitfalls
and
errors
and
that
it
therefore
may
heavily
contribute
to
the
unreliability
of
programs
making
use
of
it
a
programming
scheme
is
presented
which
avoids
the
concept
of
the
interrupt
and
permits
the
specification
of
concurrent
or
pseudoconcurrent
activities
in
a
supposedly
more
perspicuous
manner
it
is
intended
to
serve
as
a
basis
for
the
construction
of
operating
systems
which
are
prime
examples
of
programs
with
concurrent
activities
the
scheme
includes
a
set
of
basic
instructions
for
the
generation
termination
and
synchronization
of
parallel
processes
a
set
of
routines
representing
these
instructions
and
thereby
simulating
a
hypothetical
machine
organization
has
been
implemented
and
test
on
the
ibm
system
360
two
programs
using
these
instructions
written
in
pl360
are
presented
cacm
september
1969
wirth
n
multiprogramming
parallelism
interrupt
input
output
computer
organization
file
handling
pl360
4
21
4
22
4
32
4
41
6
21
ca690901
jb
february
15
1978
5
14
pm
1380
4
1854
1458
4
1854
1523
4
1854
1552
4
1854
1603
4
1854
1693
4
1854
1698
4
1854
1747
4
1854
1748
4
1854
1781
4
1854
1805
4
1854
1828
4
1854
1828
4
1854
1854
4
1854
1854
4
1854
1854
4
1854
1854
4
1854
1860
4
1854
1877
4
1854
1877
4
1854
1960
4
1854
1960
4
1854
2060
4
1854
2150
4
1854
2187
4
1854
2317
4
1854
2319
4
1854
2377
4
1854
2377
4
1854
2378
4
1854
2342
4
1854
2376
4
1854
2379
4
1854
2424
4
1854
2482
4
1854
2497
4
1854
2558
4
1854
2618
4
1854
2625
4
1854
2632
4
1854
2632
4
1854
2704
4
1854
2723
4
1854
2738
4
1854
2740
4
1854
2741
4
1854
2840
4
1854
2867
4
1854
2941
4
1854
557
4
1854
3105
4
1854
3144
4
1854
3184
4
1854
1421
5
1854
1471
5
1854
1748
5
1854
1749
5
1854
1854
5
1854
1854
5
1854
1854
5
1854
1960
5
1854
1471
6
1854
1749
6
1854
1854
6
1854
</TEXT>
</DOC>
<DOC>
<DOCNO>1855</DOCNO>
<TEXT>
a
program
for
the
syntactic
analysis
of
english
sentences
a
program
is
described
which
produces
syntactic
analyses
of
english
sentences
with
respect
to
a
transformational
grammar
the
main
features
of
the
analyzer
are
that
it
uses
only
a
limited
dictionary
of
english
words
and
that
it
pursues
all
analysis
paths
simultaneously
while
processing
the
sentence
from
left
to
right
the
form
of
representation
used
for
the
dictionary
and
the
grammar
is
indicated
and
an
outline
account
is
given
of
the
analysis
procedure
techniques
for
keeping
the
size
of
the
analysis
record
within
reasonable
limits
and
for
avoiding
the
need
for
dynamic
application
of
certain
transformational
rules
are
described
a
number
of
examples
of
output
produced
by
the
program
are
given
the
output
includes
timing
information
cacm
august
1969
dewar
h
bratley
p
syntactic
analysis
language
processing
language
analysis
parsing
analysis
procedure
recognition
procedure
english
sentences
linguistics
psycholinguistics
transformational
grammar
limited
dictionary
predictive
analysis
3
42
3
36
ca690808
jb
february
15
1978
5
24
pm
1855
5
1855
1855
5
1855
1855
5
1855
</TEXT>
</DOC>
<DOC>
<DOCNO>1856</DOCNO>
<TEXT>
the
teachable
language
comprehender
a
simulation
program
and
theory
of
language
the
teachable
language
comprehender
tlc
is
a
program
designed
to
be
capable
of
being
taught
to
comprehend
english
text
when
text
which
the
program
has
not
seen
before
is
input
to
it
it
comprehends
that
text
by
correctly
relating
each
explicit
or
implicit
assertion
of
the
new
text
to
a
large
memory
this
memory
is
a
semantic
network
representing
factual
assertions
about
the
world
the
program
also
creates
copies
of
the
parts
of
its
memory
which
have
been
found
to
relate
to
the
new
text
adapting
and
combining
these
copies
to
represent
the
meaning
of
the
new
text
by
this
means
the
meaning
of
all
text
the
program
successfully
comprehends
is
encoded
into
the
same
format
as
that
of
the
memory
in
this
form
it
can
be
added
into
the
memory
both
factual
assertions
for
the
memory
and
the
capabilities
for
correctly
relating
text
to
the
memory
prior
content
are
to
be
taught
to
the
program
as
they
are
needed
tlc
presently
contains
a
relatively
small
number
of
examples
of
such
assertions
and
capabilities
but
within
the
system
notations
for
expressing
either
of
these
are
provided
thus
the
program
now
corresponds
to
a
general
process
for
comprehending
language
and
it
provides
a
methodology
for
adding
the
additional
information
this
process
requires
to
actually
comprehend
text
of
any
particular
kind
the
memory
structure
and
comprehension
process
of
tlc
allow
new
factual
assertions
and
capabilities
for
relating
text
to
such
stored
assertions
to
generalize
automatically
that
is
once
such
an
assertion
or
capability
is
put
into
the
system
it
becomes
available
to
help
comprehend
a
great
many
other
sentences
in
the
future
thus
the
addition
of
a
single
factual
assertion
or
linguistic
capability
will
often
provide
a
large
increment
in
tlc
effective
knowledge
of
the
world
and
in
its
overall
ability
to
comprehend
text
the
program
strategy
is
presented
as
a
general
theory
of
language
comprehension
cacm
august
1969
quillian
m
r
natural
language
processing
natural
language
comprehension
teachable
computer
program
psychological
simulation
human
memory
simulation
computer
linguistics
linguistic
performance
theory
3
36
3
42
3
62
3
65
3
74
ca690807
jb
february
15
1978
5
46
pm
1155
4
1856
1350
4
1856
1456
4
1856
1468
4
1856
1515
4
1856
1659
4
1856
1699
4
1856
1856
4
1856
1856
4
1856
1856
4
1856
2050
4
1856
2127
4
1856
1225
5
1856
1324
5
1856
1553
5
1856
1856
5
1856
1856
5
1856
1856
5
1856
2127
5
1856
2309
5
1856
2310
5
1856
2396
5
1856
1155
6
1856
1324
6
1856
1487
6
1856
1487
6
1856
1527
6
1856
1781
6
1856
1856
6
1856
1856
6
1856
1856
6
1856
1856
6
1856
2092
6
1856
2127
6
1856
2398
6
1856
</TEXT>
</DOC>
<DOC>
<DOCNO>1857</DOCNO>
<TEXT>
filon
quadrature
algorithm
d1
cacm
august
1969
chase
s
m
fosdick
l
d
quadrature
filon
quadrature
integration
filon
integration
fourier
coefficients
fourier
series
5
16
ca690806
jb
february
15
1978
5
52
pm
1857
4
1857
2393
4
1857
1858
5
1857
1857
5
1857
1857
5
1857
1857
5
1857
1268
6
1857
1857
6
1857
</TEXT>
</DOC>
<DOC>
<DOCNO>1858</DOCNO>
<TEXT>
an
algorithm
for
filon
quadrature
an
algorithm
for
filon
quadrature
is
described
considerable
attention
has
been
devoted
to
an
analysis
of
the
round
off
and
truncation
errors
the
algorithm
includes
an
automatic
error
control
feature
cacm
august
1969
chase
s
m
fosdick
l
d
quadrature
filon
quadrature
integration
filon
integration
fourier
coefficients
fourier
series
5
16
ca690805
jb
february
15
1978
5
55
pm
1858
4
1858
1858
4
1858
1268
5
1858
1858
5
1858
1858
5
1858
1858
5
1858
1857
5
1858
2393
5
1858
1858
6
1858
1858
6
1858
2071
6
1858
</TEXT>
</DOC>
<DOC>
<DOCNO>1859</DOCNO>
<TEXT>
error
bounds
for
periodic
quintic
splines
explicit
error
bounds
for
periodic
quintic
spline
interpolation
are
developed
the
first
third
derivative
of
the
periodic
spline
is
shown
to
be
a
sixth
fourth
order
approximation
at
the
mesh
points
to
the
first
third
derivative
of
the
function
being
interpolated
cacm
august
1969
hall
c
a
spline
interpolation
error
bounds
5
1
5
13
ca690804
jb
february
15
1978
5
58
pm
1859
5
1859
1859
5
1859
1859
5
1859
</TEXT>
</DOC>
<DOC>
<DOCNO>1860</DOCNO>
<TEXT>
an
algol
based
associative
language
a
high
level
programming
language
for
large
complex
associative
structures
has
been
designed
and
implemented
the
underlying
data
structure
has
been
implemented
using
a
hash
coding
technique
the
discussion
includes
a
comparison
with
other
work
and
examples
of
applications
of
the
language
cacm
august
1969
feldman
j
a
algol
associative
programming
language
data
structure
4
22
ca690803
jb
february
15
1978
6
02
pm
1051
4
1860
1086
4
1860
1132
4
1860
1234
4
1860
1263
4
1860
1265
4
1860
1270
4
1860
1323
4
1860
1358
4
1860
1379
4
1860
1380
4
1860
1380
4
1860
1396
4
1860
1453
4
1860
1464
4
1860
1484
4
1860
1491
4
1860
1498
4
1860
1503
4
1860
1552
4
1860
1552
4
1860
1613
4
1860
1614
4
1860
1626
4
1860
1665
4
1860
1676
4
1860
1682
4
1860
1693
4
1860
1708
4
1860
1708
4
1860
1728
4
1860
1767
4
1860
1781
4
1860
1781
4
1860
1781
4
1860
1781
4
1860
1781
4
1860
1781
4
1860
1787
4
1860
1825
4
1860
1826
4
1860
1854
4
1860
1860
4
1860
1860
4
1860
1860
4
1860
1860
4
1860
1860
4
1860
1860
4
1860
1860
4
1860
1860
4
1860
1860
4
1860
1860
4
1860
1945
4
1860
1957
4
1860
1973
4
1860
1973
4
1860
1988
4
1860
1992
4
1860
2018
4
1860
2018
4
1860
2032
4
1860
2033
4
1860
2033
4
1860
2060
4
1860
2083
4
1860
2091
4
1860
2107
4
1860
2107
4
1860
2109
4
1860
2109
4
1860
2155
4
1860
2155
4
1860
2156
4
1860
2162
4
1860
2168
4
1860
2178
4
1860
2179
4
1860
2203
4
1860
2203
4
1860
2249
4
1860
2251
4
1860
2251
4
1860
2252
4
1860
2252
4
1860
2299
4
1860
2314
4
1860
2325
4
1860
2341
4
1860
2359
4
1860
2524
4
1860
2543
4
1860
2543
4
1860
2546
4
1860
2552
4
1860
2559
4
1860
2573
4
1860
2645
4
1860
2652
4
1860
2684
4
1860
2719
4
1860
2736
4
1860
2770
4
1860
2833
4
1860
2842
4
1860
2929
4
1860
2934
4
1860
2991
4
1860
557
4
1860
3053
4
1860
3069
4
1860
669
4
1860
679
4
1860
691
4
1860
761
4
1860
949
4
1860
989
4
1860
1389
5
1860
1366
5
1860
1421
5
1860
1496
5
1860
1626
5
1860
1641
5
1860
1785
5
1860
1786
5
1860
1860
5
1860
1860
5
1860
1860
5
1860
1957
5
1860
378
5
1860
2151
5
1860
3103
5
1860
3148
5
1860
3184
5
1860
1389
6
1860
1653
6
1860
1747
6
1860
1860
6
1860
1860
6
1860
1860
6
1860
1860
6
1860
2817
6
1860
2865
6
1860
2877
6
1860
2939
6
1860
3073
6
1860
731
6
1860
</TEXT>
</DOC>
<DOC>
<DOCNO>1861</DOCNO>
<TEXT>
the
mad
definition
facility
one
of
the
first
definition
facilities
for
higher
level
languages
is
described
users
of
the
language
can
define
new
operators
and
or
data
types
into
the
mad
language
so
that
their
use
appears
as
if
they
were
predefined
information
is
given
on
how
one
writes
definitions
as
well
as
on
much
of
the
motivation
behind
the
form
in
which
definitions
are
written
some
conclusions
are
drawn
about
future
definitional
facilities
cacm
august
1969
arden
b
w
galler
b
a
graham
r
m
mad
definitions
operators
macros
higher
level
language
4
12
4
22
ca690802
jb
february
15
1978
6
07
pm
1134
4
1861
1179
4
1861
1665
4
1861
1693
4
1861
1768
4
1861
1781
4
1861
1787
4
1861
1824
4
1861
1824
4
1861
1825
4
1861
1836
4
1861
1861
4
1861
1861
4
1861
1861
4
1861
2015
4
1861
2110
4
1861
2126
4
1861
2127
4
1861
2187
4
1861
2317
4
1861
2545
4
1861
2698
4
1861
2733
4
1861
1614
5
1861
1781
5
1861
1861
5
1861
1861
5
1861
1861
5
1861
408
5
1861
</TEXT>
</DOC>
<DOC>
<DOCNO>1862</DOCNO>
<TEXT>
computing
capabilities
at
argentine
and
chilean
universities
the
author
reports
on
a
trip
to
universities
in
argentina
and
chile
during
november
1968
describing
university
conditions
and
computing
activities
as
elsewhere
these
universities
are
experiencing
student
discontent
with
the
status
quo
and
the
solutions
they
are
attempting
contrast
argentina
is
excluding
students
from
participating
in
university
government
chile
is
allowing
such
participation
university
computing
service
and
academic
activities
are
limited
the
number
of
computers
is
small
and
so
is
the
capacity
none
larger
than
an
ibm
360
40
with
some
exception
computing
science
academic
programs
are
rare
this
situation
is
by
no
means
attributable
to
those
responsible
for
computing
developments
who
strive
for
excellence
rather
the
system
is
hard
to
over
come
universities
especially
those
with
strong
european
traditions
adapt
slowly
to
new
academic
resources
and
disciplines
superimposed
are
the
severe
technological
and
economic
constraints
of
the
developing
nation
consequently
in
the
absence
of
conscious
government
emphasis
on
strengthening
computing
capabilities
future
progress
may
be
retarded
cacm
august
1969
finerman
a
university
education
computing
science
academic
programs
university
computing
centers
surveys
of
computing
centers
university
computing
capabilities
university
student
relationship
argentine
universities
chilean
universities
south
american
universities
developing
nations
1
52
2
0
2
45
ca690801
jb
february
15
1978
6
21
pm
1862
4
1862
1349
5
1862
1862
5
1862
1862
5
1862
1862
5
1862
</TEXT>
</DOC>
<DOC>
<DOCNO>1863</DOCNO>
<TEXT>
minit
algorithm
for
linear
programming
algorithm
333
h
cacm
july
1969
messham
d
k
linear
programming
dual
simplex
method
primal
problem
dual
problem
5
41
ca690717
jb
february
15
1978
6
23
pm
1863
5
1863
1863
5
1863
1863
5
1863
</TEXT>
</DOC>
<DOC>
<DOCNO>1864</DOCNO>
<TEXT>
generation
of
hilbert
derived
test
matrix
algorithm
274
f1
cacm
july
1969
boothroyd
j
test
matrix
hilbert
matrix
5
14
ca690716
jb
february
15
1978
6
25
pm
1864
5
1864
1864
5
1864
1864
5
1864
</TEXT>
</DOC>
<DOC>
<DOCNO>1865</DOCNO>
<TEXT>
algol
60
reference
language
editor
algorithm
268
r2
cacm
july
1969
sauer
g
symbol
manipulation
4
49
ca690715
jb
february
15
1978
6
26
pm
1865
5
1865
1865
5
1865
1865
5
1865
</TEXT>
</DOC>
<DOC>
<DOCNO>1866</DOCNO>
<TEXT>
characteristic
values
and
associated
solutions
of
mathieu
differential
equation
algorithm
352
s22
cacm
july
1969
clemm
d
s
mathieu
differential
equation
mathieu
function
characteristic
value
periodic
solution
radial
solution
5
12
ca690714
jb
february
15
1978
6
30
pm
1866
5
1866
1866
5
1866
1866
5
1866
</TEXT>
</DOC>
<DOC>
<DOCNO>1867</DOCNO>
<TEXT>
on
the
expected
lengths
of
sequences
generated
in
sorting
by
replacement
selecting
in
the
replacement
selecting
technique
of
sorting
one
is
interested
in
the
ratio
l
j
of
the
expected
length
of
the
j
th
sequence
generated
by
the
technique
to
the
number
of
memory
cells
used
using
complex
variable
theory
it
is
shown
that
l
j
2
and
that
asymptotically
the
average
interval
between
sign
changes
of
l
j
2
is
2
6662
cacm
july
1969
hooker
w
w
replacement
selecting
sorting
sequence
lengths
asymptotic
expected
length
recursion
relation
generating
function
meromorphic
function
3
74
5
31
ca690713
jb
february
15
1978
6
37
pm
1867
4
1867
2272
4
1867
1638
5
1867
1867
5
1867
1867
5
1867
1867
5
1867
</TEXT>
</DOC>
<DOC>
<DOCNO>1868</DOCNO>
<TEXT>
on
obtaining
correct
input
a
new
approach
most
information
put
into
machine
readable
form
whether
from
scientific
or
business
origins
is
still
keypunched
this
paper
is
addressed
toward
the
difficulty
of
obtaining
correctly
keypunched
and
key
verified
data
and
an
alternative
method
is
suggested
in
which
the
computer
itself
is
used
to
rule
out
the
possibility
of
errors
in
input
this
technique
is
explained
and
illustrated
by
reference
to
a
working
program
which
involves
essentially
two
phases
in
the
first
phase
errors
are
detected
by
the
machine
and
subsequently
in
the
second
phase
they
are
corrected
by
it
cacm
july
1969
kennedy
m
correct
data
correct
input
data
correction
keypunch
key
verifier
verifier
2
40
2
42
2
43
3
10
3
20
3
50
4
41
ca690712
jb
february
15
1978
6
43
pm
1868
5
1868
1868
5
1868
1868
5
1868
</TEXT>
</DOC>
<DOC>
<DOCNO>1869</DOCNO>
<TEXT>
block
structures
indirect
addressing
and
garbage
collection
programming
languages
have
included
explicit
or
implicit
block
structures
to
provide
a
naming
convenience
for
the
programmer
however
when
indirect
addressing
is
used
as
in
snobol
naming
constraints
may
be
introduced
two
modifications
to
snobol
are
described
resulting
in
two
desirable
consequences
1
naming
constraints
disappear
even
when
there
is
indirect
addressing
within
function
definitions
and
2
there
is
a
significant
saving
in
the
number
of
calls
to
the
garbage
collector
because
some
garbage
is
collected
at
little
expense
each
time
a
function
returns
to
its
calling
program
these
modifications
have
been
implemented
as
an
extension
to
a
snobol
dialect
cacm
july
1969
kain
r
y
block
structures
indirect
addressing
garbage
collection
local
names
snobol
4
22
ca690711
jb
february
15
1978
6
49
pm
1869
4
1869
1869
4
1869
2513
4
1869
2665
4
1869
2723
4
1869
2855
4
1869
3106
4
1869
1549
5
1869
1570
5
1869
1869
5
1869
1869
5
1869
1869
5
1869
2060
5
1869
2770
5
1869
1380
6
1869
1421
6
1869
1469
6
1869
1477
6
1869
1491
6
1869
1786
6
1869
210
6
1869
1869
6
1869
1869
6
1869
1973
6
1869
1992
6
1869
2018
6
1869
2109
6
1869
2110
6
1869
2673
6
1869
</TEXT>
</DOC>
<DOC>
<DOCNO>1870</DOCNO>
<TEXT>
some
techniques
for
using
pseudorandom
numbers
in
computer
simulation
an
algorithm
is
described
by
which
uniform
pseudorandom
integers
may
be
used
to
construct
binary
numbers
in
which
the
probability
that
each
bit
in
the
word
is
a
1
bit
and
can
assume
any
desired
parameter
value
techniques
for
making
use
of
such
numbers
in
simulation
programming
are
described
cacm
july
1969
donnelly
t
random
numbers
simulation
boolean
algebra
bit
manipulation
5
19
5
39
ca690710
jb
february
17
1978
8
54
am
1794
4
1870
1870
4
1870
2122
4
1870
1674
5
1870
1870
5
1870
1870
5
1870
1870
5
1870
</TEXT>
</DOC>
<DOC>
<DOCNO>1871</DOCNO>
<TEXT>
automatic
contour
map
some
methods
for
contour
mapping
by
means
of
a
digital
plotter
are
discussed
and
a
new
method
is
presented
that
is
simple
enough
to
be
implemented
by
programs
with
a
rather
small
number
of
instructions
about
120
fortran
iv
instructions
are
required
comparisons
with
some
methods
proposed
by
other
authors
are
also
performed
a
fortran
iv
program
implementing
the
proposed
method
is
available
at
the
istituto
di
elettrotecnica
ed
elettronica
politencnico
di
milano
cacm
july
1969
cottafava
g
lemoli
g
contour
map
level
lines
digital
plotting
function
scanning
3
10
3
13
3
14
3
16
3
20
3
24
ca690709
jb
february
17
1978
8
59
am
1871
5
1871
1871
5
1871
1871
5
1871
3062
5
1871
1871
6
1871
1925
6
1871
</TEXT>
</DOC>
<DOC>
<DOCNO>1872</DOCNO>
<TEXT>
chebyshev
interpolation
and
quadrature
formulas
of
very
high
degree
errata
cacm
july
1969
salzer
h
e
ca690708
jb
february
17
1978
9
01
am
1872
5
1872
1872
5
1872
1872
5
1872
2394
5
1872
1872
6
1872
1903
6
1872
</TEXT>
</DOC>
<DOC>
<DOCNO>1873</DOCNO>
<TEXT>
accelerating
lp
algorithms
it
is
shown
how
a
novel
method
for
computing
related
inner
products
can
accelerate
the
pricing
phase
of
lp
algorithms
other
lp
applications
are
indicated
cacm
july
1969
fox
b
l
linear
programming
revised
simplex
method
multiple
pricing
inner
product
5
19
5
41
ca690707
jb
february
17
19789
08
am
1873
5
1873
1873
5
1873
1873
5
1873
</TEXT>
</DOC>
<DOC>
<DOCNO>1874</DOCNO>
<TEXT>
generating
pseudorandom
numbers
on
a
two
complement
machine
such
as
the
ibm
360
the
familiar
multiplicative
congruential
generator
is
examined
in
the
context
of
the
type
of
two
complement
arithmetic
used
in
the
ibm
360
series
different
sequences
of
residues
are
considered
and
relationships
established
among
them
it
is
shown
that
a
sequence
of
positive
and
negative
residues
may
be
produced
more
simply
and
economically
than
with
the
conventional
approach
and
yet
have
twice
the
period
of
the
latter
without
loss
of
desirable
statistical
properties
another
easily
generated
sequence
involving
absolute
values
is
also
shown
to
have
twice
the
period
but
with
less
attractive
statistical
properties
the
statistical
properties
of
these
sequences
are
given
and
related
to
previously
established
criteria
cacm
july
1969
hemmerle
w
j
random
number
uniform
distribution
pseudo
random
number
random
number
generator
multiplicative
congruential
generator
power
residue
two
complement
arithmetic
ibm
360
arithmetic
3
15
5
5
6
32
ca690706
jb
february
17
1978
9
17
am
1874
5
1874
1874
5
1874
1874
5
1874
</TEXT>
</DOC>
<DOC>
<DOCNO>1875</DOCNO>
<TEXT>
polynomial
and
spline
approximation
by
quadratic
programming
the
problem
of
approximation
to
a
given
function
or
of
fitting
a
given
set
of
data
where
the
approximating
function
is
required
to
have
certain
of
its
derivations
of
specified
sign
over
the
whole
range
of
approximation
is
studied
two
approaches
are
presented
in
each
of
which
quadratic
programming
is
used
to
provide
both
the
constraints
on
the
derivatives
and
the
selection
of
the
function
which
yields
the
best
fit
the
first
is
a
modified
bernstein
polynomial
scheme
and
the
second
is
a
spline
fit
cacm
july
1969
amos
d
e
slater
m
l
constant
sign
derivatives
bernstein
polynomials
linear
concavity
constraints
quadratic
programming
splines
5
13
5
41
ca690705
jb
february
17
1978
9
22
am
1875
5
1875
1875
5
1875
1875
5
1875
</TEXT>
</DOC>
<DOC>
<DOCNO>1876</DOCNO>
<TEXT>
generation
of
test
matrices
having
certain
sign
patterns
and
prescribed
positive
spectra
a
class
of
orthogonal
transformations
is
presented
whose
members
transform
a
given
positive
diagonal
matrix
into
a
matrix
having
one
of
four
special
sign
patterns
cacm
july
1969
schneider
a
j
test
matrices
positive
matrices
sign
patterns
orthogonal
transformations
positive
eigenvalues
5
1
5
14
ca690704
jb
february
17
1978
9
26
am
1876
4
1876
2099
4
1876
1707
5
1876
1876
5
1876
1876
5
1876
1876
5
1876
</TEXT>
</DOC>
<DOC>
<DOCNO>1877</DOCNO>
<TEXT>
prevention
of
system
deadlocks
a
well
known
problem
in
the
design
of
operating
systems
is
the
selection
of
a
resource
allocation
policy
that
will
prevent
deadlock
deadlock
is
the
situation
in
which
resources
have
been
allocated
to
various
tasks
in
such
a
way
that
none
of
the
tasks
can
continue
the
various
published
solutions
have
been
somewhat
restrictive
either
they
do
not
handle
the
problem
in
sufficient
generality
or
they
suggest
policies
which
will
on
occasion
refuse
a
request
which
could
have
been
safely
granted
algorithms
are
presented
which
examine
a
request
in
the
light
of
the
current
allocation
of
resources
and
determine
whether
or
not
the
granting
of
the
request
will
introduce
the
possibility
of
a
deadlock
proofs
given
in
the
appendixes
show
that
the
conditions
imposed
by
the
algorithms
are
both
necessary
and
sufficient
to
prevent
deadlock
the
algorithms
have
been
successfully
used
in
the
the
system
cacm
july
1969
habermann
a
n
multiprogramming
time
sharing
scheduling
resource
allocation
3
72
4
32
6
20
ca690703
jb
february
17
1978
9
33
am
1458
4
1877
1523
4
1877
1603
4
1877
1698
4
1877
1747
4
1877
1748
4
1877
1828
4
1877
1854
4
1877
1854
4
1877
1877
4
1877
1877
4
1877
1960
4
1877
1960
4
1877
2150
4
1877
2317
4
1877
2319
4
1877
2377
4
1877
2377
4
1877
2378
4
1877
2342
4
1877
2376
4
1877
2379
4
1877
2424
4
1877
2482
4
1877
2497
4
1877
2558
4
1877
2618
4
1877
2625
4
1877
2632
4
1877
2632
4
1877
2704
4
1877
2723
4
1877
2738
4
1877
2740
4
1877
2741
4
1877
2840
4
1877
2867
4
1877
2941
4
1877
3105
4
1877
3144
4
1877
3184
4
1877
1471
5
1877
1749
5
1877
1877
5
1877
1877
5
1877
1877
5
1877
2228
5
1877
2280
5
1877
2379
5
1877
2482
5
1877
2740
5
1877
2851
5
1877
2920
5
1877
1198
6
1877
1338
6
1877
1749
6
1877
1749
6
1877
1749
6
1877
1877
6
1877
1877
6
1877
1877
6
1877
1877
6
1877
1877
6
1877
1877
6
1877
1877
6
1877
2080
6
1877
2150
6
1877
2228
6
1877
2228
6
1877
2228
6
1877
</TEXT>
</DOC>
<DOC>
<DOCNO>1878</DOCNO>
<TEXT>
recovery
of
reentrant
list
structures
in
slip
one
consequence
of
the
reference
count
based
space
recovery
system
employed
by
slip
is
that
reentrant
list
structures
are
not
recovered
even
when
explicitly
erased
lisp
like
garbage
collection
schemes
are
free
of
this
impediment
they
however
depend
on
being
able
to
find
and
mark
nodes
that
are
reachable
from
program
variables
by
tracing
all
descendants
from
program
variables
may
then
be
identified
and
collected
the
list
creating
function
list
of
slip
may
be
amended
to
mark
those
lists
for
which
the
programmer
wishes
to
assume
responsibility
given
this
modification
a
lisp
like
garbage
collector
that
recovers
abandoned
reentrant
list
structures
may
then
be
appended
to
the
slip
system
cacm
july
1969
weizenbaum
j
list
processing
slip
garbage
collection
4
22
4
40
ca690702
jb
february
17
1978
9
39
am
1024
4
1878
1024
4
1878
1051
4
1878
1051
4
1878
1098
4
1878
1102
4
1878
1132
4
1878
1214
4
1878
1380
4
1878
1388
4
1878
1390
4
1878
1393
4
1878
1485
4
1878
1486
4
1878
1487
4
1878
1549
4
1878
1549
4
1878
1570
4
1878
1706
4
1878
1826
4
1878
1878
4
1878
1878
4
1878
1946
4
1878
1957
4
1878
378
4
1878
2060
4
1878
2155
4
1878
2168
4
1878
2168
4
1878
2719
4
1878
2723
4
1878
2723
4
1878
2838
4
1878
2842
4
1878
2855
4
1878
2857
4
1878
2879
4
1878
3077
4
1878
3080
4
1878
3106
4
1878
3112
4
1878
627
4
1878
106
4
1878
210
5
1878
1878
5
1878
1878
5
1878
1878
5
1878
2023
5
1878
2168
5
1878
731
5
1878
106
6
1878
1626
6
1878
1826
6
1878
210
6
1878
1878
6
1878
1878
6
1878
731
6
1878
</TEXT>
</DOC>
<DOC>
<DOCNO>1879</DOCNO>
<TEXT>
a
note
on
storage
fragmentation
and
program
segmentation
the
main
purpose
of
this
paper
is
the
presentation
of
some
of
the
results
of
a
series
of
simulation
experiments
investigating
the
phenomenon
of
storage
fragmentation
two
different
types
of
storage
fragmentation
are
distinguished
1
external
fragmentation
namely
the
loss
in
storage
utilization
caused
by
the
inability
to
make
use
of
all
available
storage
after
it
has
been
fragmented
into
a
large
number
of
separate
blocks
and
2
internal
fragmentation
the
loss
of
utilization
caused
by
rounding
up
a
request
for
storage
rather
than
allocating
only
the
exact
number
of
words
required
the
most
striking
result
is
the
apparently
general
rule
that
rounding
up
requests
for
storage
to
reduce
the
number
of
different
sizes
of
blocks
coexisting
in
storage
causes
more
loss
of
storage
by
increased
internal
fragmentation
than
is
saved
by
decreased
external
fragmentation
described
also
are
a
method
of
segment
allocation
and
an
accompanying
technique
for
segment
addressing
which
take
advantage
of
the
above
result
evidence
is
presented
of
possible
advantages
of
the
method
over
conventional
paging
techniques
cacm
july
1969
randell
b
storage
allocation
storage
fragmentation
paging
segmentation
addressing
6
2
6
20
ca690701
jb
february
17
1978
9
46
am
1879
4
1879
1884
4
1879
1901
4
1879
2095
4
1879
2277
4
1879
2297
4
1879
2365
4
1879
1754
5
1879
1879
5
1879
1879
5
1879
1879
5
1879
2095
5
1879
2218
5
1879
2498
5
1879
2596
5
1879
2734
5
1879
2902
5
1879
2911
5
1879
3000
5
1879
1051
6
1879
1062
6
1879
1184
6
1879
1184
6
1879
1211
6
1879
1380
6
1879
1552
6
1879
1572
6
1879
1728
6
1879
1728
6
1879
1751
6
1879
1751
6
1879
1754
6
1879
1752
6
1879
1810
6
1879
1879
6
1879
1879
6
1879
1879
6
1879
1879
6
1879
1879
6
1879
1879
6
1879
1879
6
1879
1879
6
1879
273
6
1879
2095
6
1879
2095
6
1879
2095
6
1879
2435
6
1879
2435
6
1879
2435
6
1879
2498
6
1879
2596
6
1879
2734
6
1879
2734
6
1879
2747
6
1879
2768
6
1879
2773
6
1879
2864
6
1879
2983
6
1879
</TEXT>
</DOC>
<DOC>
<DOCNO>1880</DOCNO>
<TEXT>
chebyshev
solution
to
an
overdetermined
linear
system
algorithm
328
f4
cacm
june
1969
golub
g
h
chebyshev
solutions
over
determined
linear
systems
linear
equations
exchange
algorithm
5
13
5
14
5
41
ca690613
jb
february
17
1978
9
49
am
1880
5
1880
1880
5
1880
1880
5
1880
3054
5
1880
1175
6
1880
1880
6
1880
1919
6
1880
1969
6
1880
1980
6
1880
1997
6
1880
307
6
1880
308
6
1880
309
6
1880
2017
6
1880
2679
6
1880
776
6
1880
</TEXT>
</DOC>
<DOC>
<DOCNO>1881</DOCNO>
<TEXT>
transpose
vector
stored
array
algorithm
302
k2
cacm
june
1969
macleod
i
d
g
matrix
transposition
array
transposition
vector
stored
array
5
39
ca690612
jb
february
17
1978
9
51
am
1881
5
1881
1881
5
1881
1881
5
1881
</TEXT>
</DOC>
<DOC>
<DOCNO>1882</DOCNO>
<TEXT>
determination
of
the
square
root
of
a
positive
definite
matrix
algorithm
298
f1
cacm
june
1969
duke
b
j
matrix
symmetric
matrix
positive
definite
matrix
matrix
square
root
5
14
ca690611
jb
february
17
1978
9
53
am
1882
5
1882
1882
5
1882
1882
5
1882
</TEXT>
</DOC>
<DOC>
<DOCNO>1883</DOCNO>
<TEXT>
modified
romberg
quadrature
algorithm
d1
cacm
june
1969
fair
weather
g
numerical
integration
romberg
quadrature
trapezoid
values
rectangle
values
error
bound
5
16
ca690610
jb
february
17
1978
9
55
am
1352
4
1883
1356
4
1883
1883
4
1883
2040
4
1883
1241
5
1883
1883
5
1883
1883
5
1883
1883
5
1883
1982
5
1883
2355
5
1883
1
6
1883
1273
6
1883
1418
6
1883
1521
6
1883
1597
6
1883
1883
6
1883
1883
6
1883
324
6
1883
2040
6
1883
2350
6
1883
2354
6
1883
</TEXT>
</DOC>
<DOC>
<DOCNO>1884</DOCNO>
<TEXT>
an
anomaly
in
space
time
characteristics
of
certain
programs
running
in
a
paging
machine
the
running
time
of
programs
in
a
paging
machine
generally
increases
as
the
store
in
which
programs
are
constrained
to
run
decreases
experiments
however
have
revealed
cases
in
which
the
reverse
is
true
a
decrease
in
the
size
of
the
store
is
accompanied
by
a
decrease
in
running
time
an
informal
discussion
of
the
anomalous
behavior
is
given
and
for
the
case
of
the
fifo
replacement
algorithm
a
formal
treatment
is
presented
cacm
june
1969
belady
l
a
nelson
r
a
shedler
g
s
paging
machines
demand
paging
replacement
algorithm
4
30
ca690609
jb
february
17
1978
9
59
am
1879
4
1884
1884
4
1884
1901
4
1884
2095
4
1884
2277
4
1884
2297
4
1884
2365
4
1884
1754
5
1884
1884
5
1884
1884
5
1884
1884
5
1884
2022
5
1884
2085
5
1884
3006
5
1884
1751
6
1884
1751
6
1884
1884
6
1884
1884
6
1884
1884
6
1884
2374
6
1884
2373
6
1884
2595
6
1884
</TEXT>
</DOC>
<DOC>
<DOCNO>1885</DOCNO>
<TEXT>
a
computer
system
for
transformational
grammar
a
comprehensive
system
for
transformational
grammar
has
been
designed
and
implemented
on
the
ibm
360
67
computer
the
system
deals
with
the
transformational
model
of
syntax
along
the
lines
of
chomsky
aspects
of
the
theory
of
syntax
the
major
innovations
include
a
full
formal
description
of
the
syntax
of
a
transformational
grammar
a
directed
random
phrase
structure
generator
a
lexical
insertion
algorithm
an
extended
definition
of
analysis
and
a
simple
problem
oriented
programming
language
in
which
the
algorithm
for
application
of
transformations
can
be
expressed
in
this
paper
we
present
the
system
as
a
whole
first
discussing
the
general
attitudes
underlying
the
development
of
the
system
then
outlining
the
system
and
discussing
its
more
important
special
features
references
are
given
to
papers
which
consider
some
particular
aspect
of
the
system
in
detail
cacm
june
1969
friedman
j
transformational
grammar
natural
language
syntax
language
processing
language
analysis
sentence
generation
lexical
insertion
computational
linguistics
syntax
3
42
ca690608
jb
february
17
1978
10
36
am
1885
4
1885
2795
4
1885
1885
5
1885
1885
5
1885
1885
5
1885
1928
5
1885
</TEXT>
</DOC>
<DOC>
<DOCNO>1886</DOCNO>
<TEXT>
generation
of
optimal
code
for
expressions
via
factorization
given
a
set
of
expressions
which
are
to
be
compiled
methods
are
presented
for
increasing
the
efficiency
of
the
object
code
produced
by
first
factoring
the
expressions
i
e
finding
a
set
of
subexpressions
each
of
which
occurs
in
two
or
more
other
expressions
or
subexpressions
once
all
the
factors
have
been
ascertained
a
sequencing
procedure
is
applied
which
orders
the
factors
and
expressions
such
that
all
information
is
computed
in
the
correct
sequence
and
factors
need
be
retained
in
memory
a
minimal
amount
of
time
an
assignment
algorithm
is
then
executed
in
order
to
minimize
the
total
number
of
temporary
storage
cells
required
to
hold
the
results
of
evaluating
the
factors
in
order
to
make
these
techniques
computationally
feasible
heuristic
procedures
are
applied
and
hence
global
optimal
results
are
not
necessarily
generated
the
factorization
algorithms
are
also
applicable
to
the
problem
of
factoring
boolean
switching
expressions
and
of
factoring
polynomials
encountered
in
symbol
manipulating
systems
cacm
june
1969
breuer
m
a
factorization
algorithms
code
optimization
sequencing
of
operations
detection
of
common
subexpressions
factorization
of
boolean
expressions
4
12
6
1
ca690607jb
february
17
1978
10
57
am
1030
4
1886
1886
4
1886
1939
4
1886
1886
5
1886
1886
5
1886
1886
5
1886
2175
5
1886
678
5
1886
1551
6
1886
1613
6
1886
1886
6
1886
</TEXT>
</DOC>
<DOC>
<DOCNO>1887</DOCNO>
<TEXT>
a
recursive
relation
for
the
determinant
of
a
pentadiagonal
matrix
a
recursive
relation
relating
leading
principal
minors
is
developed
for
the
determinant
of
a
pentadiagonal
matrix
a
numerical
example
is
included
to
indicate
its
use
in
calculating
eigenvalues
cacm
june
1969
sweet
r
a
pentadiagonal
matrix
quindiagonal
matrix
quindiagonal
matrix
band
matrix
determinant
characteristic
polynomial
eigenvalues
5
14
ca690606
jb
february
17
1978
11
00
am
1887
5
1887
1887
5
1887
1887
5
1887
</TEXT>
</DOC>
<DOC>
<DOCNO>1888</DOCNO>
<TEXT>
spline
function
methods
for
nonlinear
boundary
value
problems
the
solution
of
the
nonlinear
differential
equation
y
f
x
y
y
with
two
point
boundary
conditions
is
approximated
by
a
quintic
or
cubic
spline
function
y
x
the
method
is
well
suited
to
nonuniform
mesh
size
and
dynamic
mesh
size
allocation
for
uniform
mesh
size
h
the
error
in
the
quintic
spline
y
x
is
o
h
4
with
typical
error
one
third
that
from
numerov
method
requiring
the
differential
equation
to
be
satisfied
at
the
mesh
points
results
in
a
set
of
difference
equations
which
are
block
tridiagonal
and
so
are
easily
solved
by
relaxation
or
other
standard
methods
cacm
june
1969
blue
j
l
boundary
value
problems
differential
equations
finite
differences
functional
approximation
iterative
methods
nonlinear
equations
spline
functions
5
13
5
15
5
17
ca690605
jb
february
17
1978
11
07
am
1888
5
1888
1888
5
1888
1888
5
1888
</TEXT>
</DOC>
<DOC>
<DOCNO>1889</DOCNO>
<TEXT>
introducing
computing
to
smaller
colleges
and
universities
a
progress
report
by
technical
means
that
are
now
routine
computer
service
for
smaller
colleges
and
universities
can
be
provided
by
remote
terminals
of
a
central
facility
access
however
is
not
enough
effective
organizational
and
educational
methodology
for
introducing
computing
at
such
institutions
must
also
be
developed
the
experience
of
two
years
with
a
statewide
network
involving
41
institutions
is
discussed
lessons
include
the
importance
of
a
separate
organization
representing
the
small
colleges
the
necessity
for
on
campus
training
for
the
institutions
the
need
for
some
special
programming
and
documentation
to
support
such
users
and
the
development
of
curriculum
by
evolutionary
means
cacm
june
1969
parker
jr
l
t
gallie
t
m
brooks
jr
f
p
ferrel
j
k
regional
network
introducing
computing
under
graduate
education
instructional
usage
academic
applications
curriculum
development
orientation
project
regional
center
consortium
remote
computing
1
50
1
52
1
59
2
49
ca690604
jb
february
17
1978
11
21
am
1889
5
1889
1889
5
1889
1889
5
1889
</TEXT>
</DOC>
<DOC>
<DOCNO>1890</DOCNO>
<TEXT>
simulation
of
traffic
flows
in
a
network
a
computer
simulation
program
which
deals
with
traffic
flows
in
the
network
of
a
large
area
is
described
each
road
is
segmented
into
blocks
of
several
ten
meter
lengths
and
is
represented
by
a
bidirectional
list
in
computer
memory
the
movement
of
cars
i
e
the
transfer
of
cars
from
one
block
to
the
next
is
expressed
by
a
proper
formula
this
formula
is
based
on
the
supposition
that
the
speed
of
cars
in
a
block
is
determined
only
by
the
density
of
cars
in
the
block
and
this
speed
versus
density
curve
is
empirically
given
the
numerical
values
this
simulation
scheme
has
its
excellent
point
in
that
it
makes
it
possible
to
trace
the
dynamic
behavior
of
traffic
flows
in
a
variety
of
situations
some
examples
of
which
are
given
for
an
actual
area
of
the
city
of
kyoto
japan
june
1969
sakai
t
nagao
m
traffic
simulation
traffic
flow
traffic
network
traffic
control
traffic
density
intersection
signal
setting
vehicle
road
network
list
structure
computer
simulation
3
57
3
23
ca690603
jb
february
17
1978
1
26
pm
1890
4
1890
1890
5
1890
1890
5
1890
1890
5
1890
757
5
1890
</TEXT>
</DOC>
<DOC>
<DOCNO>1891</DOCNO>
<TEXT>
three
dimensional
computer
display
a
stereographic
display
terminal
has
been
produced
using
the
raster
display
brad
recently
developed
at
brookhaven
the
system
uses
a
rotating
refresh
memory
to
feed
standard
television
monitors
to
produce
a
stereographic
display
the
computer
calculates
the
projected
video
images
of
an
object
viewed
from
two
separate
points
the
resulting
video
maps
are
stored
on
separate
refresh
bands
of
the
rotating
memory
the
two
output
signals
are
connected
to
separate
color
guns
of
a
color
television
monitor
thus
creating
a
superimposed
image
on
the
screen
optical
separation
is
achieved
by
viewing
the
image
through
color
filters
the
display
is
interactive
and
can
be
viewed
by
a
large
group
of
people
at
the
same
time
cacm
june
1969
ophir
d
shepherd
b
j
spinrad
r
j
computer
graphics
three
dimensional
display
swept
raster
display
interactive
stereographic
terminal
video
map
color
separation
2
0
4
49
6
35
ca690602
jb
february
17
1978
1
34
pm
1891
4
1891
2211
4
1891
2421
4
1891
2674
4
1891
2687
4
1891
1741
5
1891
1891
5
1891
1891
5
1891
1891
5
1891
</TEXT>
</DOC>
<DOC>
<DOCNO>1892</DOCNO>
<TEXT>
degree
of
multiprogramming
in
page
on
demand
systems
a
simple
stochastic
model
is
described
which
offers
a
base
for
understanding
the
relationship
between
the
number
of
programs
permitted
to
share
memory
the
degree
of
multiprogramming
drum
traffic
rates
and
central
processing
unit
utilization
in
page
on
demand
multiprogrammed
time
shared
computer
systems
the
model
preserves
as
a
key
feature
the
property
of
page
demand
statistics
which
implies
a
burst
of
page
demands
at
the
beginning
of
any
job
or
quantum
execution
the
model
a
markov
chain
is
analyzed
numerically
and
the
results
are
presented
graphically
for
a
wide
range
of
key
environment
descriptive
parameters
implications
of
the
results
to
time
shared
system
design
and
programming
are
discussed
and
a
calculation
of
the
optimal
degree
of
multiprogramming
for
a
wide
range
of
parameters
is
presented
graphically
cacm
june
1969
wallace
v
l
mason
d
l
page
on
demand
demand
paging
time
sharing
multiprogramming
markovian
computer
models
scheduling
strategies
operating
systems
memory
management
2
44
4
32
4
39
6
20
6
21
ca690601
jb
february
17
1978
1
43
pm
1751
4
1892
1805
4
1892
1846
4
1892
1892
4
1892
1892
4
1892
1892
4
1892
1892
4
1892
1892
4
1892
1901
4
1892
1924
4
1892
2068
4
1892
2085
4
1892
2095
4
1892
2095
4
1892
2128
4
1892
2188
4
1892
2218
4
1892
2218
4
1892
2218
4
1892
2218
4
1892
2277
4
1892
2297
4
1892
2317
4
1892
2319
4
1892
2329
4
1892
2358
4
1892
2373
4
1892
2374
4
1892
2380
4
1892
2434
4
1892
2499
4
1892
2501
4
1892
2526
4
1892
2582
4
1892
2667
4
1892
2668
4
1892
2669
4
1892
2741
4
1892
2828
4
1892
2862
4
1892
2863
4
1892
2863
4
1892
2881
4
1892
2928
4
1892
2996
4
1892
3006
4
1892
3067
4
1892
1526
5
1892
1572
5
1892
1728
5
1892
1751
5
1892
1752
5
1892
1892
5
1892
1892
5
1892
1892
5
1892
</TEXT>
</DOC>
<DOC>
<DOCNO>1893</DOCNO>
<TEXT>
roots
of
polynomials
by
a
root
squaring
and
resultant
routine
algorithm
340
c2
cacm
may
1969
noltemeier
a
root
finders
roots
of
polynomial
equations
polynomial
zeros
root
squaring
operations
graeffe
method
resultant
procedure
subresultant
procedure
testing
of
roots
acceptance
criteria
5
15
ca690517
jb
february
17
1978
2
29
pm
1893
5
1893
1893
5
1893
1893
5
1893
</TEXT>
</DOC>
<DOC>
<DOCNO>1894</DOCNO>
<TEXT>
normal
random
deviates
algorithm
334
g5
cacm
may
1969
knop
r
normal
deviates
normal
distribution
random
number
random
number
generator
simulation
probability
distribution
frequency
distribution
random
5
13
5
5
ca690516
jb
february
17
1978
2
31
pm
1894
5
1894
1894
5
1894
1894
5
1894
2057
5
1894
2349
5
1894
1600
6
1894
1648
6
1894
1716
6
1894
1794
6
1894
1894
6
1894
1894
6
1894
2043
6
1894
2055
6
1894
501
6
1894
613
6
1894
774
6
1894
</TEXT>
</DOC>
<DOC>
<DOCNO>1895</DOCNO>
<TEXT>
gaussian
quadrature
formulas
algorithm
331
d1
cacm
may
1969
hill
i
d
quadrature
gaussian
quadrature
numerical
integration
weight
function
orthogonal
polynomials
5
16
ca690514
jb
february
17
1978
3
13
pm
1895
5
1895
1895
5
1895
1895
5
1895
</TEXT>
</DOC>
<DOC>
<DOCNO>1896</DOCNO>
<TEXT>
regular
coulomb
wave
functions
algorithm
292
s22
cacm
may
1969
gautschi
w
coulomb
wave
functions
wave
functions
regular
coulomb
wave
functions
5
12
ca690513
jb
february
17
1978
3
15
pm
1896
5
1896
1896
5
1896
1896
5
1896
</TEXT>
</DOC>
<DOC>
<DOCNO>1897</DOCNO>
<TEXT>
coulomb
wave
functions
algorithm
300
s22
cacm
may
1969
kolbig
k
s
coulomb
wave
functions
wave
functions
5
12
ca690512
jb
february
17
1978
3
17
pm
1897
5
1897
1897
5
1897
1897
5
1897
</TEXT>
</DOC>
<DOC>
<DOCNO>1898</DOCNO>
<TEXT>
regular
coulomb
wave
functions
algorithm
292
s22
cacm
may
1969
kolbig
k
s
coulomb
wave
functions
wave
functions
regular
coulomb
wave
functions
5
12
ca690511
jb
february
17
1978
3
19
pm
1898
5
1898
1898
5
1898
1898
5
1898
</TEXT>
</DOC>
<DOC>
<DOCNO>1899</DOCNO>
<TEXT>
simplex
method
procedure
employing
lu
decomposition
algorithm
350
h
cacm
may
1969
bartels
r
h
golub
g
h
simplex
method
linear
programming
lu
decomposition
round
off
errors
computational
stability
5
41
ca690510
jb
february
17
1978
3
21
pm
1899
5
1899
1899
5
1899
1899
5
1899
</TEXT>
</DOC>
<DOC>
<DOCNO>1900</DOCNO>
<TEXT>
clarification
of
fortran
standards
initial
progress
in
1966
after
four
years
of
effort
fortran
became
the
first
programming
language
standardized
in
the
united
states
since
that
initial
achievement
study
and
application
of
the
standard
specifications
have
revealed
the
need
for
maintenance
of
the
standards
as
the
result
of
work
initiated
in
1967
an
initial
set
of
clarifying
interpretations
has
been
prepared
the
nature
of
the
maintenance
corrections
to
the
standard
specifications
and
completed
interpretations
are
reported
cacm
may
1969
usa
standard
fortran
basic
fortran
programming
language
standardization
language
standard
specification
language
standard
maintenance
language
standard
clarification
language
standard
interpretation
standardization
committee
1
2
2
0
2
19
2
2
2
3
4
0
4
12
4
19
4
20
4
22
4
29
4
43
5
23
5
9
6
9
ca690509
jb
february
17
1978
3
26
pm
1613
4
1900
1646
4
1900
1845
4
1900
1900
4
1900
1900
4
1900
1955
4
1900
2025
4
1900
2083
4
1900
2154
4
1900
2154
4
1900
2270
4
1900
2365
4
1900
2506
4
1900
2693
4
1900
3060
4
1900
987
5
1900
988
5
1900
1900
5
1900
1900
5
1900
1900
5
1900
2154
5
1900
2915
5
1900
3060
5
1900
987
6
1900
987
6
1900
988
6
1900
1502
6
1900
1900
6
1900
1900
6
1900
1900
6
1900
2154
6
1900
</TEXT>
</DOC>
<DOC>
<DOCNO>1901</DOCNO>
<TEXT>
dynamic
space
sharing
in
computer
systems
a
formalization
of
relationships
between
space
shading
program
behavior
and
processor
efficiency
in
computer
systems
is
presented
concepts
of
value
and
cost
of
space
allocation
per
task
are
defined
and
then
value
and
cost
are
combined
to
develop
a
single
parameter
termed
value
per
unit
cost
the
intent
is
to
illustrate
a
possible
analytic
approach
to
the
investigation
of
the
problems
of
space
sharing
and
to
demonstrate
the
method
on
sample
problems
cacm
may
1969
belady
l
a
kuehner
c
j
space
sharing
storage
allocation
memory
allocation
storage
management
memory
management
program
behavior
multiprogramming
computer
system
design
allocation
strategies
replacement
strategies
demand
paging
time
sharing
4
32
6
2
6
20
ca690508
jb
february
17
1978
3
31
pm
1713
4
1901
1713
4
1901
1879
4
1901
1884
4
1901
1892
4
1901
1901
4
1901
1901
4
1901
1901
4
1901
1901
4
1901
2085
4
1901
2095
4
1901
2095
4
1901
2218
4
1901
2277
4
1901
2277
4
1901
2297
4
1901
2319
4
1901
2329
4
1901
2358
4
1901
2365
4
1901
2373
4
1901
2380
4
1901
2434
4
1901
2499
4
1901
2501
4
1901
2582
4
1901
491
4
1901
491
4
1901
2669
4
1901
2828
4
1901
2863
4
1901
2881
4
1901
2928
4
1901
2996
4
1901
3006
4
1901
3067
4
1901
168
5
1901
185
5
1901
1751
5
1901
1754
5
1901
1901
5
1901
1901
5
1901
1901
5
1901
2374
5
1901
2481
5
1901
2669
5
1901
2863
5
1901
3016
5
1901
3052
5
1901
1728
6
1901
1728
6
1901
1751
6
1901
1751
6
1901
1901
6
1901
1901
6
1901
1901
6
1901
1901
6
1901
1901
6
1901
1901
6
1901
2017
6
1901
2358
6
1901
2373
6
1901
2741
6
1901
2863
6
1901
</TEXT>
</DOC>
<DOC>
<DOCNO>1902</DOCNO>
<TEXT>
an
automatic
grading
scheme
for
simple
programming
exercises
a
discussion
is
given
of
alterations
that
were
made
to
a
typical
university
operating
system
to
record
the
results
of
programming
exercises
in
three
different
languages
including
assembly
language
in
this
computer
controlled
grading
scheme
provision
is
made
for
testing
with
programmer
supplied
data
and
for
final
runs
with
system
supplied
data
exercises
run
under
the
scheme
may
be
mixed
with
other
programs
and
no
special
recognition
of
exercises
by
the
operators
is
necessary
cacm
may
1969
hext
j
b
winings
j
w
automatic
grading
program
programming
exercises
1
5
2
43
4
39
ca690507
jb
february
17
1978
3
35
pm
1270
4
1902
1413
4
1902
1902
4
1902
1902
4
1902
145
5
1902
1270
5
1902
1902
5
1902
1902
5
1902
1902
5
1902
</TEXT>
</DOC>
<DOC>
<DOCNO>1903</DOCNO>
<TEXT>
chebyshev
interpolation
and
quadrature
formulas
of
very
high
degree
cacm
may
1969
salzer
h
e
chebyshev
polynomials
chebyshev
interpolation
chebyshev
quadrature
chebyshev
points
chebyshev
zeros
interpolation
quadrature
definite
integrals
5
13
5
16
ca690506
jb
february
17
1978
3
42
pm
1903
5
1903
1903
5
1903
1903
5
1903
2394
5
1903
1872
6
1903
1903
6
1903
</TEXT>
</DOC>
<DOC>
<DOCNO>1904</DOCNO>
<TEXT>
rough
and
ready
error
estimates
in
gaussian
integration
of
analytic
functions
cacm
may
1969
rabinowitz
p
numerical
integration
analytic
functions
error
estimates
gaussian
integration
tabulated
error
coefficients
computable
error
coefficients
cauchy
integral
formula
chebyshev
polynomials
5
11
5
16
ca690505
jb
february
17
1978
3
44
pm
1904
5
1904
1904
5
1904
1904
5
1904
</TEXT>
</DOC>
<DOC>
<DOCNO>1905</DOCNO>
<TEXT>
the
simplex
method
of
linear
programming
using
lu
decomposition
standard
computer
implementations
of
dantzig
simplex
method
for
linear
programming
are
based
upon
forming
the
inverse
of
the
basic
matrix
and
updating
the
inverse
after
every
step
of
the
method
these
implementations
have
bad
round
off
error
properties
this
paper
gives
the
theoretical
background
for
an
implementation
which
is
based
upon
the
lu
decomposition
computed
with
row
interchanges
of
the
basic
matrix
the
implementation
is
slow
but
has
good
round
off
error
behavior
the
implementation
appears
as
cacm
algorithm
350
cacm
may
1969
bartels
r
h
goulub
g
h
simplex
method
linear
programming
lu
decomposition
round
off
errors
computational
stability
5
41
ca690504
jb
february
17
1978
3
49
pm
1905
4
1905
1744
5
1905
1905
5
1905
1905
5
1905
1905
5
1905
</TEXT>
</DOC>
<DOC>
<DOCNO>1906</DOCNO>
<TEXT>
automated
printed
circuit
routing
with
a
stepping
aperture
a
computer
program
for
routing
interconnections
on
a
two
sided
printed
circuit
board
with
a
regular
pattern
of
lines
pins
terminals
and
vias
feed
through
holes
is
described
in
this
program
each
interconnection
is
given
a
planned
routing
typically
down
from
the
upper
pin
through
a
via
and
horizontally
to
the
lower
pin
from
the
top
a
virtual
aperture
i
e
a
long
horizontal
slit
is
stepped
down
the
board
the
planned
routing
is
the
basis
for
rerouting
interconnections
within
the
aperture
to
resolve
conflicts
for
lines
and
vias
below
the
aperture
and
to
maximize
the
effective
line
usage
if
a
conflict
has
not
been
resolved
before
the
aperture
arrives
at
the
lower
pin
interconnections
are
deleted
to
resolve
the
conflict
extensions
of
this
technique
to
the
control
of
crosstalk
between
routed
interconnections
and
to
the
problem
of
obtaining
100
percent
interconnect
are
also
discussed
cacm
may
1969
lass
s
routing
printed
circuit
interconnections
aperture
stepping
aperture
computer
program
circuit
board
lines
vias
pins
3
24
6
30
ca690503
jb
february
17
1978
3
57
pm
1211
4
1906
1549
4
1906
1906
4
1906
2902
4
1906
1051
5
1906
1906
5
1906
1906
5
1906
1906
5
1906
</TEXT>
</DOC>
<DOC>
<DOCNO>1907</DOCNO>
<TEXT>
a
note
on
reliable
full
duplex
transmission
over
half
duplex
links
a
simple
procedure
for
achieving
reliable
full
duplex
transmission
over
half
duplex
links
is
proposed
the
scheme
is
compared
with
another
of
the
same
type
which
has
recently
been
described
in
the
literature
finally
some
comments
are
made
on
another
group
of
related
transmission
procedures
which
have
been
shown
to
be
unreliable
under
some
circumstances
cacm
may
1969
bartlett
k
a
scantlebury
r
a
data
transmission
error
correction
full
duplex
half
duplex
transmission
control
communications
3
81
ca690502
jb
february
17
1978
4
01
pm
1907
4
1907
1743
5
1907
1907
5
1907
1907
5
1907
1907
5
1907
</TEXT>
</DOC>
<DOC>
<DOCNO>1908</DOCNO>
<TEXT>
time
sharing
and
batch
processing
an
experimental
comparison
of
their
values
in
a
problem
solving
situation
an
experimental
comparison
of
problem
solving
using
time
sharing
and
batch
processing
computer
systems
conducted
at
mit
is
described
in
this
paper
this
study
is
the
first
known
attempt
to
evaluate
two
such
systems
for
what
may
well
be
the
predominant
user
population
within
the
next
decade
the
professionals
who
as
nonprogrammers
are
using
the
computer
as
an
aid
in
decision
making
and
problem
solving
rather
than
as
a
programming
end
in
itself
statistically
and
logically
significant
results
indicate
equal
cost
for
usage
of
the
two
computer
systems
however
a
much
higher
level
of
performance
is
attained
by
time
sharing
users
there
are
indications
that
significantly
lower
costs
would
have
resulted
if
the
time
sharing
users
had
stopped
work
when
they
reached
a
performance
level
equal
to
that
of
the
batch
users
the
users
speed
of
problem
solving
and
their
attitudes
made
time
sharing
the
more
favorable
system
cacm
may
1969
gold
m
m
time
sharing
vs
batch
processing
user
performance
man
machine
communications
cost
effectiveness
on
line
vs
off
line
performance
decision
making
performance
user
programmer
behavior
programming
experimental
empirical
studies
problem
solving
research
in
man
machine
communications
man
machine
symbiosis
2
11
2
40
3
36
3
51
3
80
ca690501
jb
february
17
1978
4
10
pm
1792
4
1908
1908
4
1908
1908
4
1908
1550
5
1908
1605
5
1908
1908
5
1908
1908
5
1908
1908
5
1908
2705
5
1908
2984
5
1908
1908
6
1908
1908
6
1908
3185
6
1908
</TEXT>
</DOC>
<DOC>
<DOCNO>1909</DOCNO>
<TEXT>
computation
of
jn
x
by
numerical
integration
it
is
shown
to
be
practical
to
compute
jn
x
by
numerical
integration
of
its
integral
representation
using
the
trapezoidal
rule
the
error
in
this
approximation
was
studied
empirically
cacm
april
1969
stroud
a
h
kohli
j
p
bessel
function
numerical
integration
trapezoidal
rule
5
11
5
12
5
16
ca690408
jb
february
17
1978
4
13
pm
1909
4
1909
1909
4
1909
1909
4
1909
1909
4
1909
2119
4
1909
134
5
1909
1023
5
1909
1284
5
1909
1316
5
1909
1909
5
1909
1909
5
1909
1909
5
1909
</TEXT>
</DOC>
<DOC>
<DOCNO>1910</DOCNO>
<TEXT>
an
algorithm
for
solving
a
special
class
of
tridiagonal
systems
of
linear
equations
an
algorithm
is
presented
for
solving
a
system
of
linear
equation
bu
k
where
b
is
tridiagonal
and
of
a
special
form
it
is
shown
that
this
algorithm
is
almost
twice
as
fast
as
the
gaussian
elimination
method
usually
suggested
for
solving
such
systems
in
addition
explicit
formulas
for
the
inverse
and
determinant
of
the
matrix
b
are
given
cacm
april
1969
rose
d
j
tridiagonal
gaussian
elimination
central
difference
5
14
5
17
ca690407
jb
february
17
1978
4
18
pm
1910
5
1910
1910
5
1910
1910
5
1910
</TEXT>
</DOC>
<DOC>
<DOCNO>1911</DOCNO>
<TEXT>
on
coordination
reduction
and
sentence
analysis
a
class
of
coordination
phenomena
in
natural
languages
is
considered
within
the
frame
work
of
transformational
theory
to
account
for
these
phenomena
it
is
proposed
that
certain
machinery
be
added
to
the
syntactic
component
of
a
transformational
grammar
this
machinery
includes
certain
rule
schemata
the
conditions
under
which
they
are
to
be
applied
and
conditions
determining
the
sequence
of
subtrees
on
which
they
are
to
be
performed
a
solution
to
the
syntactic
analysis
problem
for
this
class
of
grammars
is
outlined
precise
specification
of
both
the
generative
procedure
of
this
paper
and
its
inverse
is
given
in
the
form
of
lisp
function
definitions
cacm
april
1969
petrick
s
r
postal
p
m
rosenbaum
p
s
natural
languages
generative
grammar
transformational
theory
syntax
coordination
sentence
coordination
sentence
coordination
coordination
reduction
syntactic
analysis
grammar
testing
program
rule
testing
3
42
ca690406
jb
february
17
1978
4
25
pm
1911
5
1911
1911
5
1911
1911
5
1911
</TEXT>
</DOC>
<DOC>
<DOCNO>1912</DOCNO>
<TEXT>
simulation
of
outpatient
appointment
systems
an
experimental
computer
program
is
described
which
simulates
appointment
systems
employed
by
outpatient
departments
of
hospitals
both
major
kinds
of
appointment
systems
individual
and
block
can
be
simulated
the
purpose
of
the
simulator
is
to
enable
the
user
to
evaluate
the
effectiveness
of
alternative
appointment
systems
in
a
given
clinical
environment
cacm
april
1969
katz
j
h
simulation
scheduling
appointment
system
outpatient
department
medicine
health
management
science
operations
research
3
34
3
59
ca690405
jb
february
17
1978
4
32
pm
1805
4
1912
1912
4
1912
1518
5
1912
1912
5
1912
1912
5
1912
1912
5
1912
</TEXT>
</DOC>
<DOC>
<DOCNO>1913</DOCNO>
<TEXT>
polygamma
functions
with
arbitrary
precision
algorithm
349
s14
cacm
april
1969
schwachheim
g
polygamma
function
psi
function
digamma
function
trigamma
function
tetragamma
function
pentagamma
function
special
functions
5
12
ca690404
jb
february
17
1978
4
36
pm
1913
5
1913
1913
5
1913
1913
5
1913
</TEXT>
</DOC>
<DOC>
<DOCNO>1914</DOCNO>
<TEXT>
matrix
scaling
by
integer
programming
algorithm
348
f1
cacm
april
1969
klimpel
r
r
integer
programming
linear
algebra
mathematical
programming
matrix
condition
matrix
scaling
5
14
5
41
ca690403
jb
february
17
1978
4
38
pm
1914
5
1914
1914
5
1914
1914
5
1914
</TEXT>
</DOC>
<DOC>
<DOCNO>1915</DOCNO>
<TEXT>
an
algorithm
for
hidden
line
elimination
the
algorithm
presented
causes
the
elimination
of
hidden
lines
in
the
representation
of
a
perspective
view
of
concave
and
convex
plane
faced
objects
on
the
picture
plane
all
the
edges
of
the
objects
are
considered
sequentially
and
all
planes
which
hide
every
point
of
an
edge
are
found
the
computing
time
increases
roughly
as
the
square
of
the
number
of
edges
the
algorithm
takes
advantage
of
a
reduced
number
of
concave
points
and
automatically
recognizes
if
only
one
object
with
no
concave
points
is
considered
in
this
last
case
the
result
is
obtained
in
a
much
simpler
way
cacm
april
1969
galimberti
r
montanari
u
hidden
line
elimination
back
line
recognition
three
dimensional
representation
plane
faced
objects
perspective
view
machine
rendering
of
solids
automatic
drawing
displaying
techniques
computer
graphics
man
machine
interaction
man
machine
communication
computer
aided
design
4
40
4
41
4
49
ca690402
jb
february
17
1978
4
44
pm
1915
5
1915
1915
5
1915
1915
5
1915
2004
5
1915
2687
5
1915
2692
5
1915
1686
6
1915
1741
6
1915
1915
6
1915
1915
6
1915
1915
6
1915
2004
6
1915
</TEXT>
</DOC>
<DOC>
<DOCNO>1916</DOCNO>
<TEXT>
analysis
of
boolean
program
models
for
time
shared
paged
environments
directed
graphs
or
their
associated
matrices
are
frequently
used
to
represent
the
logical
structure
of
sequences
of
computer
instructions
such
techniques
are
used
and
in
addition
data
references
are
represented
in
a
nondirected
model
the
complete
structural
specification
of
a
program
is
represented
by
a
combined
model
a
transformation
of
the
combined
model
yields
a
new
model
in
which
additional
timing
information
is
also
contained
analysis
of
these
models
prior
to
execution
yields
information
valuable
in
determining
segmentation
of
instructions
and
data
for
a
time
shared
environment
as
well
as
for
initial
page
loading
during
execution
the
analysis
may
be
used
for
look
ahead
control
of
page
turning
cacm
april
1969
lowe
t
c
time
sharing
paging
segmentation
executive
compiler
monitor
program
model
4
39
6
21
ca690401
jb
february
17
1978
4
50
pm
1916
4
1916
1916
4
1916
1533
5
1916
1916
5
1916
1916
5
1916
1916
5
1916
2130
5
1916
666
5
1916
1916
6
1916
</TEXT>
</DOC>
<DOC>
<DOCNO>1917</DOCNO>
<TEXT>
an
algol
procedure
for
the
fast
fourier
transform
with
arbitrary
factors
algorithm
339
c6
cacm
march
1969
singleton
r
c
fast
fourier
transform
complex
fourier
transform
multivariate
fourier
transform
fourier
series
harmonic
analysis
spectral
analysis
orthogonal
polynomials
orthogonal
transformation
virtual
core
memory
permutation
3
15
3
83
5
12
5
14
ca690310
jb
february
20
1978
8
43
am
1917
5
1917
1917
5
1917
1917
5
1917
</TEXT>
</DOC>
<DOC>
<DOCNO>1918</DOCNO>
<TEXT>
distribution
of
indistinguishable
objects
into
distinguishable
slots
algorithm
329
g6
cacm
march
1969
gray
m
ca690309
jb
february
20
1978
8
46
am
1918
5
1918
1918
5
1918
1918
5
1918
</TEXT>
</DOC>
<DOC>
<DOCNO>1919</DOCNO>
<TEXT>
an
efficient
algorithm
for
sorting
with
minimal
storage
algorithm
347
m1
cacm
march
1969
singleton
r
c
sorting
minimal
storage
sorting
digital
computer
sorting
5
31
ca690308
jb
february
20
1978
8
48
am
1175
4
1919
1175
4
1919
1919
4
1919
1919
4
1919
1919
4
1919
1919
4
1919
1919
4
1919
1919
4
1919
1969
4
1919
1969
4
1919
1997
4
1919
2017
4
1919
2041
4
1919
2118
4
1919
2191
4
1919
2191
4
1919
2216
4
1919
2388
4
1919
2388
4
1919
2348
4
1919
2679
4
1919
2679
4
1919
2679
4
1919
2783
4
1919
2784
4
1919
3054
4
1919
3054
4
1919
3054
4
1919
3121
4
1919
3121
4
1919
852
4
1919
864
4
1919
864
4
1919
865
4
1919
1175
5
1919
1919
5
1919
1919
5
1919
1919
5
1919
308
5
1919
309
5
1919
2216
5
1919
74
5
1919
3054
5
1919
3187
5
1919
864
5
1919
864
6
1919
1175
6
1919
1880
6
1919
1919
6
1919
1919
6
1919
1969
6
1919
1969
6
1919
1980
6
1919
1997
6
1919
1997
6
1919
307
6
1919
308
6
1919
309
6
1919
2017
6
1919
2679
6
1919
776
6
1919
</TEXT>
</DOC>
<DOC>
<DOCNO>1920</DOCNO>
<TEXT>
f
test
probabilities
algorithm
346
s14
cacm
march
1969
morris
j
f
test
snedecor
f
statistic
fisher
test
distribution
function
5
5
ca690307
jb
february
20
1978
8
50
am
1157
4
1920
1779
4
1920
1920
4
1920
1920
4
1920
1944
4
1920
1987
4
1920
2548
4
1920
1778
5
1920
1920
5
1920
1920
5
1920
1920
5
1920
714
5
1920
</TEXT>
</DOC>
<DOC>
<DOCNO>1921</DOCNO>
<TEXT>
an
algol
convolution
procedure
based
on
the
fast
fourier
transform
algorithm
345
c6
cacm
march
1969
singleton
r
c
fast
fourier
transform
complex
fourier
transform
multivariate
fourier
transform
fourier
series
harmonic
analysis
spectral
analysis
orthogonal
polynomials
orthogonal
transformation
convolution
auto
covariance
autocorrelation
cross
correlation
digital
filtering
permutation
3
5
3
83
5
12
5
14
ca690306
jb
february
20
1978
8
54
am
1921
5
1921
1921
5
1921
1921
5
1921
</TEXT>
</DOC>
<DOC>
<DOCNO>1922</DOCNO>
<TEXT>
proposed
usa
standard
data
communication
control
procedures
for
the
usa
standarad
code
for
information
interchange
cacm
march
1969
data
communication
data
communication
control
procedures
data
communication
establishment
termination
procedures
data
communication
message
transfer
procedures
data
communication
error
control
procedures
data
communication
polling
selection
procedures
communication
communication
control
procedures
communication
establishment
termination
procedures
communication
message
transfer
procedures
communication
error
control
procedures
communication
polling
selection
procedures
link
link
control
procedures
link
establishment
termination
procedures
link
message
transfer
procedures
link
error
control
procedures
link
polling
selection
procedures
data
link
data
link
control
procedures
data
link
establishment
termination
procedures
data
link
message
transfer
procedures
data
link
error
control
procedures
data
link
polling
selection
procedures
3
81
4
49
6
39
ca690305
jb
february
20
1978
9
09
am
1922
5
1922
1922
5
1922
1922
5
1922
</TEXT>
</DOC>
<DOC>
<DOCNO>1923</DOCNO>
<TEXT>
pseudofiles
an
approach
to
system
interfaces
for
high
level
languages
using
basic
input
output
support
facilities
is
described
it
is
shown
that
this
technique
can
provide
potentially
inexpensive
methods
for
programs
to
communicate
with
deeply
embedded
facilities
such
as
command
language
processors
cacm
march
1969
rosin
r
f
operating
systems
interfaces
input
output
high
level
languages
command
language
4
22
4
30
4
31
4
41
ca690304
jb
february
20
1978
9
12
am
1923
5
1923
1923
5
1923
1923
5
1923
</TEXT>
</DOC>
<DOC>
<DOCNO>1924</DOCNO>
<TEXT>
organizing
matrices
and
matrix
operations
for
paged
memory
systems
matrix
representations
and
operations
are
examined
for
the
purpose
of
minimizing
the
page
faulting
occurring
in
a
paged
memory
system
it
is
shown
that
carefully
designed
matrix
algorithms
can
lead
to
enormous
savings
in
the
number
of
page
faults
occurring
when
only
a
small
part
of
the
total
matrix
can
be
in
main
memory
at
one
time
examination
of
addition
multiplication
and
inversion
algorithms
shows
that
a
partitioned
matrix
representation
i
e
one
submatrix
or
partition
per
page
in
most
cases
induced
fewer
page
faults
than
a
row
by
row
representation
the
number
of
page
pulls
required
by
these
matrix
manipulation
algorithms
is
also
studied
as
a
function
of
the
number
of
pages
of
main
memory
available
to
the
algorithm
cacm
march
1969
mckellar
a
c
coffman
jr
e
g
matrix
algorithms
array
processing
paging
algorithms
paged
memory
systems
virtual
memory
systems
array
storage
allocation
storage
allocation
4
12
4
39
5
14
ca690303
jb
february
20
1978
9
35
am
1892
4
1924
1924
4
1924
2095
4
1924
2218
4
1924
2297
4
1924
2374
4
1924
2526
4
1924
2667
4
1924
2668
4
1924
2862
4
1924
2863
4
1924
1728
5
1924
1924
5
1924
1924
5
1924
1924
5
1924
2365
5
1924
2582
5
1924
3152
5
1924
987
6
1924
1751
6
1924
1754
6
1924
1924
6
1924
1924
6
1924
1924
6
1924
2017
6
1924
2130
6
1924
2362
6
1924
2365
6
1924
</TEXT>
</DOC>
<DOC>
<DOCNO>1925</DOCNO>
<TEXT>
concepts
of
use
in
contour
map
processing
generalized
techniques
whose
use
can
simplify
the
solution
of
problems
relating
to
contour
maps
one
of
these
techniques
makes
use
of
the
topological
properties
of
contour
maps
the
topology
is
represented
by
a
graphical
structure
in
which
adjacent
contour
lines
appear
as
connected
nodes
another
generalized
technique
consists
of
utilizing
geometrical
properties
to
determine
the
characteristics
of
straight
lines
drawn
on
the
contour
map
both
of
these
techniques
have
been
applied
to
the
problem
of
locating
the
ground
track
of
an
aircraft
from
elevation
readings
obtained
during
a
flight
cacm
march
1969
morse
s
p
map
contour
map
contour
lines
topological
properties
geometrical
properties
graph
of
contour
map
navigation
3
1
ca690302
jb
february
20
1978
9
41
am
1925
5
1925
1925
5
1925
1925
5
1925
2287
5
1925
2547
5
1925
3062
5
1925
1326
6
1925
1871
6
1925
1925
6
1925
1925
6
1925
1925
6
1925
</TEXT>
</DOC>
<DOC>
<DOCNO>1926</DOCNO>
<TEXT>
description
of
format
a
text
processing
program
format
is
a
production
program
which
facilitates
the
editing
and
printing
of
finished
documents
directly
on
the
printer
of
a
relatively
small
64k
computer
system
it
features
good
performance
totally
free
form
input
very
flexible
formatting
capabilities
including
up
to
eight
columns
per
page
automatic
capitalization
aids
for
index
construction
and
a
minimum
of
nontext
items
it
is
written
entirely
in
fortran
iv
cacm
march
1969
berns
g
m
text
processing
indexing
printing
documentation
text
editing
formatting
frequency
dictionary
right
justification
vocabulary
3
74
3
75
3
9
ca690301
jb
february
20
1978
9
45
am
1926
5
1926
1926
5
1926
1926
5
1926
2034
5
1926
984
6
1926
1231
6
1926
1565
6
1926
1852
6
1926
1926
6
1926
1947
6
1926
</TEXT>
</DOC>
<DOC>
<DOCNO>1927</DOCNO>
<TEXT>
information
science
in
a
ph
computer
science
program
this
report
contains
recommendations
on
a
sample
course
curriculum
in
the
general
area
of
information
organization
and
information
system
design
in
a
ph
computer
science
program
the
subject
area
is
first
briefly
described
followed
by
a
listing
of
some
desirable
graduate
level
courses
suitable
bibliographies
are
appended
cacm
february
1969
salton
g
course
curriculum
graduate
courses
university
courses
computer
science
curriculum
information
science
information
organization
information
retrieval
data
retrieval
language
analysis
information
processing
1
52
3
42
3
70
ca690211
jb
february
20
1978
9
50
am
1720
4
1927
1927
4
1927
1927
4
1927
2147
4
1927
2163
4
1927
2345
4
1927
2478
4
1927
2594
4
1927
2852
4
1927
2899
4
1927
3003
4
1927
3130
4
1927
1659
5
1927
1771
5
1927
1927
5
1927
1927
5
1927
1927
5
1927
2163
5
1927
3003
5
1927
1659
6
1927
1678
6
1927
1720
6
1927
1771
6
1927
1927
6
1927
1927
6
1927
1945
6
1927
2097
6
1927
2147
6
1927
2163
6
1927
2181
6
1927
2187
6
1927
2329
6
1927
2345
6
1927
2367
6
1927
2407
6
1927
2478
6
1927
2479
6
1927
2480
6
1927
2538
6
1927
</TEXT>
</DOC>
<DOC>
<DOCNO>1928</DOCNO>
<TEXT>
exclusive
simulation
of
activity
in
digital
networks
a
technique
for
simulating
the
detailed
logic
networks
of
large
and
active
digital
systems
is
described
essential
objectives
sought
are
improved
ease
and
economy
in
model
generation
economy
in
execution
time
and
space
and
a
facility
for
handling
simultaneous
activities
the
main
results
obtained
are
a
clear
and
useful
separation
of
structural
and
behavioral
model
description
a
reduction
of
manual
tasks
in
converting
boolean
logic
into
a
structural
model
the
elimination
of
manual
processes
in
achieving
exclusive
simulation
of
activity
an
event
scheduling
technique
which
does
not
deteriorate
in
economy
as
the
event
queue
grows
in
length
and
a
simulation
procedure
which
deals
effectively
with
any
mixture
of
serial
and
simultaneous
activities
the
passage
of
time
is
simulated
in
a
precise
quantitative
fashion
and
systems
to
be
simulated
may
be
combinations
of
synchronous
and
asynchronous
logic
certain
aspects
of
the
techniques
described
may
be
used
for
the
simulation
of
network
structures
other
than
digital
networks
cacm
february
1969
ulrich
e
g
simulation
logical
simulation
digital
simulation
large
systems
simulation
network
structures
scheduling
queuing
simultaneous
activities
parallel
events
4
22
4
29
6
9
ca690210
jb
february
20
1978
9
58
am
1885
5
1928
1928
5
1928
1928
5
1928
1928
5
1928
2795
5
1928
1928
6
1928
1928
6
1928
1989
6
1928
2274
6
1928
</TEXT>
</DOC>
<DOC>
<DOCNO>1929</DOCNO>
<TEXT>
images
from
computers
and
microfilm
plotters
digital
computers
are
widely
used
for
the
processing
of
information
and
data
of
all
kinds
including
the
pictorial
information
contained
in
photographs
and
other
graphical
representations
efficient
conversion
facilities
for
putting
graphical
information
into
the
computer
and
retrieving
it
in
graphical
form
are
therefore
much
needed
one
of
the
most
commonly
employed
devices
for
obtaining
permanent
graphical
output
from
digital
computers
is
the
microfilm
plotter
regrettably
present
models
have
no
provision
for
producing
images
with
a
continuous
gray
scale
or
half
tones
in
this
note
several
programming
techniques
are
described
for
obtaining
half
tone
pictures
from
a
microfilm
plotter
under
the
control
of
a
digital
computer
illustrative
examples
of
several
methods
are
given
cacm
february
1969
schroeder
m
r
computer
images
half
tone
pictures
microfilm
plotters
processing
3
10
3
15
3
24
4
49
ca690209
jb
february
20
1978
10
06
am
1929
5
1929
1929
5
1929
1929
5
1929
2142
5
1929
1929
6
1929
2231
6
1929
</TEXT>
</DOC>
<DOC>
<DOCNO>1930</DOCNO>
<TEXT>
extremely
portable
random
number
generator
extremely
portable
subroutines
are
sometimes
needed
for
which
moderate
quality
and
efficiency
suffice
typically
this
occurs
for
library
functions
like
random
number
generation
and
in
core
sorting
which
are
not
entirely
universal
or
are
not
used
in
a
standardized
way
the
literature
on
random
number
generators
does
not
seem
to
contain
an
algorithm
that
meets
requirements
of
this
sort
an
extremely
portable
8
line
fortran
program
is
provided
which
based
on
an
important
paper
by
coveyou
and
macpherson
1967
sing
their
methods
fourier
analysis
is
applied
to
the
probability
function
for
the
consecutive
n
tuples
provided
by
our
generator
with
n
less
than
or
equal
to
4
while
the
small
modulus
which
must
be
used
to
maintain
portability
prevents
the
quality
of
the
generator
from
being
high
the
generator
compares
well
with
the
bounds
established
in
the
above
mentioned
paper
cacm
february
1969
kruskal
j
b
random
number
generators
random
numbers
random
number
analysis
random
generators
linear
sequential
generators
random
number
program
pseudo
random
numbers
4
49
5
19
5
5
ca690208
jb
february
20
1978
10
43
am
1930
5
1930
1930
5
1930
1930
5
1930
2115
5
1930
1691
6
1930
1930
6
1930
</TEXT>
</DOC>
<DOC>
<DOCNO>1931</DOCNO>
<TEXT>
interval
arithmetic
determinant
evaluation
and
its
use
in
testing
for
a
chebyshev
system
two
recent
papers
one
by
hansen
and
one
by
hansen
and
r
r
smith
have
shown
how
interval
arithmetic
i
can
be
used
effectively
to
bound
errors
in
matrix
computations
in
the
present
paper
a
method
proposed
by
hasen
and
r
r
smith
is
compared
with
straightforward
use
of
i
in
determinant
evaluation
computational
results
show
the
accuracy
and
running
times
that
can
be
expected
when
using
i
for
determinant
evaluation
an
application
using
i
determinants
in
a
program
to
test
a
set
of
functions
to
see
if
they
form
a
chebyshev
system
is
then
presented
cacm
february
1969
smith
l
b
interval
arithmetic
range
arithmetic
error
bounds
determinant
evaluation
chebyshev
system
mathematical
proof
by
computer
5
11
5
13
5
14
ca690207
jb
february
20
1978
10
49
am
1524
4
1931
1931
4
1931
1931
4
1931
1946
4
1931
2214
4
1931
2544
4
1931
1177
5
1931
1931
5
1931
1931
5
1931
1931
5
1931
311
5
1931
</TEXT>
</DOC>
<DOC>
<DOCNO>1932</DOCNO>
<TEXT>
the
logarithmic
error
and
newton
method
for
the
square
root
the
problem
of
obtaining
optimal
starting
values
for
the
calculation
of
the
square
root
using
newton
method
is
considered
it
has
been
pointed
out
elsewhere
that
if
relative
error
is
used
as
the
measure
of
goodness
of
fit
optimal
results
are
not
obtained
when
the
initial
approximation
is
a
best
fit
it
is
shown
here
that
if
instead
the
so
called
logarithmic
error
is
used
then
a
best
initial
fit
is
optimal
for
both
types
of
error
moreover
use
of
the
logarithmic
error
appears
to
simplify
the
problem
of
determining
the
optimal
initial
approximation
cacm
february
1969
king
r
f
phillips
d
l
square
root
newton
method
relative
error
logarithmic
error
best
fit
optimal
approximation
maximal
error
recurrence
relation
integer
root
error
curve
5
12
5
13
ca690206
jb
february
20
1978
10
55
am
1440
4
1932
1932
4
1932
1932
4
1932
2094
4
1932
2159
4
1932
962
5
1932
1566
5
1932
1832
5
1932
1932
5
1932
1932
5
1932
1932
5
1932
1999
5
1932
2159
5
1932
962
6
1932
1932
6
1932
1932
6
1932
1932
6
1932
</TEXT>
</DOC>
<DOC>
<DOCNO>1933</DOCNO>
<TEXT>
coding
the
lehmer
pseudo
random
number
generator
an
algorithm
and
coding
technique
is
presented
for
quick
evaluation
of
the
lehmer
pseudo
random
number
generator
modulo
2
31
1
a
prime
mersenne
number
with
produces
2
31
2
numbers
on
a
p
bit
greater
than
31
computer
the
computation
method
is
extendible
to
limited
problems
in
modular
arithmetic
prime
factorization
for
2
61
2
and
a
primitive
root
for
2
61
1
the
next
largest
prime
mersenne
number
are
given
for
possible
construction
of
a
pseudo
random
number
generator
of
increased
cycle
length
cacm
february
1969
payne
w
h
rabung
j
r
bogyo
t
p
pseudo
random
number
random
number
modular
arithmetic
uniform
probability
density
uniform
frequency
function
simulation
prime
factorization
primitive
roots
ca690205
jb
february
20
1978
11
07
am
1933
5
1933
1933
5
1933
1933
5
1933
</TEXT>
</DOC>
<DOC>
<DOCNO>1934</DOCNO>
<TEXT>
on
arithmetic
expressions
and
trees
a
description
is
given
of
how
a
tree
representing
the
evaluation
of
an
arithmetic
expression
can
be
drawn
in
such
a
way
that
the
number
of
accumulators
needed
for
the
computation
can
be
represented
in
a
straightforward
manner
this
representation
reduces
the
choice
of
the
best
order
of
computation
to
a
specific
problem
under
the
theory
of
graphs
an
algorithm
to
solve
this
problem
is
presented
cacm
february
1969
redziejowski
r
r
arithmetic
expression
compiler
design
graph
theory
programming
storage
minimization
topological
ordering
tree
4
12
5
32
ca690204
jb
february
20
1978
11
11
am
1807
4
1934
1934
4
1934
2175
4
1934
1551
5
1934
1934
5
1934
1934
5
1934
1934
5
1934
</TEXT>
</DOC>
<DOC>
<DOCNO>1935</DOCNO>
<TEXT>
randomized
binary
search
technique
a
mathematical
model
is
developed
for
the
mean
and
variance
of
the
number
of
trials
to
recover
a
given
document
in
a
randomly
received
list
of
files
the
search
method
described
is
binary
in
nature
and
offers
new
potential
for
information
retrieval
systems
cacm
february
1969
arora
s
r
dent
w
t
binary
pattern
file
examination
graph
theory
information
retrieval
mathematical
model
partitioning
probabilistic
method
random
sequencing
search
techniques
tree
structures
3
74
5
32
ca690203
jb
february
20
1978
11
15
am
1050
4
1935
1935
4
1935
1935
4
1935
1936
4
1935
2017
4
1935
2032
4
1935
2257
4
1935
2360
4
1935
2451
4
1935
2452
4
1935
1115
5
1935
1935
5
1935
1935
5
1935
1935
5
1935
2451
5
1935
2556
5
1935
2978
5
1935
849
5
1935
830
6
1935
849
6
1935
944
6
1935
1935
6
1935
1935
6
1935
1935
6
1935
1936
6
1935
1936
6
1935
2111
6
1935
</TEXT>
</DOC>
<DOC>
<DOCNO>1936</DOCNO>
<TEXT>
variable
length
tree
structures
having
minimum
average
search
time
sussenguth
suggests
in
a
paper
1963
that
a
file
should
be
organized
as
a
doubly
chained
tree
structure
if
it
is
necessary
both
to
search
and
to
update
frequently
such
a
structure
provides
a
compromise
between
the
fast
search
slow
update
characteristics
of
binary
searching
and
the
slow
search
fast
update
characteristics
of
serial
searching
his
method
however
contains
the
limiting
restriction
that
all
terminal
nodes
lie
on
the
same
level
of
the
tree
this
paper
considers
the
effect
of
relaxing
this
restriction
first
trees
which
have
the
property
that
a
priori
the
filial
set
of
each
node
is
well
defined
are
studied
it
is
proved
that
coding
the
nodes
within
each
filial
set
with
respect
to
the
number
of
terminal
nodes
reachable
from
each
is
necessary
and
sufficient
to
guarantee
minimum
average
search
time
then
the
more
general
case
that
is
where
the
entire
structure
of
the
tree
is
changeable
is
treated
a
procedure
is
developed
for
constructing
a
tree
with
a
minimum
average
search
time
a
simple
closed
expression
for
this
minimum
average
search
time
is
obtained
as
a
function
of
the
number
of
terminal
nodes
the
storage
capacity
required
to
implement
the
doubly
chained
tree
structure
on
a
digital
computer
is
also
determined
finally
the
total
cost
of
the
structure
using
sussenguth
cost
criterion
is
computed
it
is
shown
that
significant
improvements
in
both
the
average
search
time
and
the
total
cost
can
be
obtained
by
relaxing
sussenguth
restriction
that
all
terminal
nodes
lie
on
the
same
level
of
the
tree
cacm
february
1969
patt
y
n
information
retrieval
file
searching
tree
structures
double
chaining
3
70
3
73
3
74
ca690202
jb
february
20
1978
11
25
am
1050
4
1936
1935
4
1936
1936
4
1936
2017
4
1936
2032
4
1936
2257
4
1936
2360
4
1936
2451
4
1936
2452
4
1936
1936
5
1936
1936
5
1936
1936
5
1936
2257
5
1936
2360
5
1936
2451
5
1936
2452
5
1936
2556
5
1936
2765
5
1936
849
5
1936
830
6
1936
849
6
1936
849
6
1936
849
6
1936
849
6
1936
944
6
1936
1831
6
1936
1831
6
1936
1935
6
1936
1935
6
1936
1936
6
1936
1936
6
1936
1936
6
1936
1936
6
1936
1936
6
1936
1936
6
1936
1976
6
1936
1976
6
1936
2046
6
1936
2111
6
1936
2198
6
1936
2360
6
1936
2451
6
1936
2452
6
1936
616
6
1936
</TEXT>
</DOC>
<DOC>
<DOCNO>1937</DOCNO>
<TEXT>
codas
a
data
display
system
codas
a
customer
oriented
data
system
is
a
user
oriented
data
retrieval
and
display
system
the
command
language
of
the
system
provides
the
user
with
an
easy
means
for
specifying
data
retrieval
and
display
requests
data
is
displayed
as
tables
and
graphs
produced
in
a
format
ready
for
publication
in
this
paper
the
statements
of
the
request
language
and
the
general
system
design
are
described
cacm
february
1969
day
r
h
mansfield
m
k
ellis
m
e
data
display
information
retrieval
graphic
display
command
languages
report
program
generation
management
data
processing
3
50
3
51
3
59
3
70
3
75
3
79
4
20
4
29
ca690201
jb
february
20
1978
11
32
am
1937
5
1937
1937
5
1937
1937
5
1937
2002
5
1937
1767
6
1937
1937
6
1937
</TEXT>
</DOC>
<DOC>
<DOCNO>1938</DOCNO>
<TEXT>
some
criteria
for
time
sharing
system
performance
time
sharing
systems
as
defined
in
this
article
are
those
multiaccess
systems
which
permit
a
terminal
user
to
utilize
essentially
the
full
resources
of
the
system
while
sharing
its
time
with
other
terminal
users
it
is
each
terminal
user
ability
to
utilize
the
full
resources
of
the
system
that
makes
quantitative
evaluation
of
time
sharing
systems
particularly
difficult
six
criteria
are
described
which
have
been
successfully
used
to
perform
first
level
quantitative
time
sharing
system
performance
evaluation
cacm
january
1969
stimler
s
time
sharing
performance
criteria
time
sharing
system
operation
time
sharing
performance
analysis
2
40
4
30
4
32
6
20
ca690111
jb
february
20
1978
11
37
am
1938
5
1938
1938
5
1938
1938
5
1938
2219
5
1938
2344
5
1938
1938
6
1938
1938
6
1938
</TEXT>
</DOC>
<DOC>
<DOCNO>1939</DOCNO>
<TEXT>
directed
random
generation
of
sentences
the
problem
of
producing
sentences
of
a
transformational
grammar
by
using
a
random
generator
to
create
phrase
structure
trees
for
input
to
the
lexical
insertion
and
transformational
phases
is
discussed
a
purely
random
generator
will
produce
base
trees
which
will
be
blocked
by
the
transformations
and
which
are
frequently
too
long
to
be
of
practical
interest
a
solution
is
offered
in
the
form
of
a
computer
program
which
allows
the
user
to
constrain
and
direct
the
generation
by
the
simple
but
powerful
device
of
restricted
subtrees
the
program
is
a
directed
random
generator
which
accepts
as
input
a
subtree
with
restrictions
and
produces
around
it
a
tree
which
satisfies
the
restrictions
and
is
ready
for
the
next
phase
of
the
grammar
the
underlying
linguistic
model
is
that
at
noam
chomsky
as
presented
in
aspects
of
the
theory
of
syntax
the
program
is
written
in
fortran
iv
for
the
ibm
360
67
and
is
part
of
a
unified
computer
system
for
transformational
grammar
it
is
currently
being
used
with
several
partial
grammars
of
english
cacm
january
1969
friedman
j
transformational
grammar
natural
language
syntax
language
processing
sentence
generation
computational
linguistics
syntax
3
42
ca690110
jb
february
20
1978
11
44
am
1030
4
1939
1261
4
1939
1886
4
1939
1939
4
1939
1939
4
1939
1030
5
1939
1939
5
1939
1939
5
1939
1939
5
1939
2767
5
1939
3064
5
1939
678
5
1939
1846
6
1939
1939
6
1939
1939
6
1939
2742
6
1939
2767
6
1939
2936
6
1939
</TEXT>
</DOC>
<DOC>
<DOCNO>1940</DOCNO>
<TEXT>
calculation
of
a
polynomial
and
its
derivative
values
by
horner
scheme
algorithm
337
c1
cacm
january
1969
smith
o
k
function
evaluation
polynomial
evaluation
algol
procedure
horner
scheme
4
22
5
12
ca690109
jb
february
20
1978
11
46
am
1940
5
1940
1940
5
1940
1940
5
1940
</TEXT>
</DOC>
<DOC>
<DOCNO>1941</DOCNO>
<TEXT>
f
distribution
algorithm
322
s14
cacm
january
1969
field
j
b
f
fisher
f
distribution
students
t
distribution
5
5
ca690108
jb
february
20
1978
11
48
am
1941
5
1941
1941
5
1941
1941
5
1941
</TEXT>
</DOC>
<DOC>
<DOCNO>1942</DOCNO>
<TEXT>
finding
a
solution
of
n
functional
equations
in
n
unknowns
algorithm
314
c5
cacm
january
1969
vandergraft
j
mesztenyi
c
functional
equations
interpolation
nonlinear
equations
secant
method
5
13
5
15
ca690107
jb
february
20
1978
11
50
am
1942
5
1942
1942
5
1942
1942
5
1942
</TEXT>
</DOC>
<DOC>
<DOCNO>1943</DOCNO>
<TEXT>
complete
elliptic
integrals
algorithm
165
s21
cacm
january
1969
farkas
i
special
functions
complete
elliptic
integral
of
the
first
kind
complete
elliptic
integral
of
the
second
kind
5
12
ca690106
jb
february
20
1978
11
54
am
1943
5
1943
1943
5
1943
1943
5
1943
</TEXT>
</DOC>
<DOC>
<DOCNO>1944</DOCNO>
<TEXT>
student
t
distribution
algorithm
344
s14
cacm
january
1969
levine
d
a
student
t
distribution
t
test
small
sample
statistics
distribution
function
5
12
5
5
ca690105
jb
february
20
1978
11
56
am
1157
4
1944
1779
4
1944
1920
4
1944
1944
4
1944
1944
4
1944
1987
4
1944
1987
4
1944
2548
4
1944
1779
5
1944
1944
5
1944
1944
5
1944
1944
5
1944
1987
5
1944
714
5
1944
1561
6
1944
1581
6
1944
1779
6
1944
1944
6
1944
714
6
1944
</TEXT>
</DOC>
<DOC>
<DOCNO>1945</DOCNO>
<TEXT>
the
role
of
programming
in
a
ph
computer
science
program
in
this
general
paper
the
role
of
programming
in
advanced
graduate
training
is
discussed
subject
matter
related
to
programming
as
well
as
programming
per
se
is
considered
the
importance
and
application
of
formalism
are
considered
and
also
the
need
for
good
empirical
experimentation
a
brief
outline
for
a
sequence
of
courses
is
included
and
subject
headings
that
have
been
obtained
from
an
extensive
bibliography
are
given
a
bibliography
of
programming
references
is
included
cacm
january
1969
arden
b
w
graduate
level
programming
graduate
programs
course
content
course
sequence
graduate
curriculum
programming
research
topics
programming
bibliography
1
3
1
52
4
0
ca690104
jb
february
20
1978
12
00
pm
1068
4
1945
1084
4
1945
1102
4
1945
1142
4
1945
1215
4
1945
1225
4
1945
1225
4
1945
1247
4
1945
1263
4
1945
1350
4
1945
1350
4
1945
1350
4
1945
1379
4
1945
1379
4
1945
1396
4
1945
1396
4
1945
1399
4
1945
1400
4
1945
1453
4
1945
1496
4
1945
1530
4
1945
1531
4
1945
1542
4
1945
1551
4
1945
1553
4
1945
1565
4
1945
1570
4
1945
1612
4
1945
1625
4
1945
1646
4
1945
1659
4
1945
1683
4
1945
1683
4
1945
1693
4
1945
1693
4
1945
1703
4
1945
1705
4
1945
1767
4
1945
1768
4
1945
1768
4
1945
1781
4
1945
1781
4
1945
1781
4
1945
1781
4
1945
1781
4
1945
1781
4
1945
1781
4
1945
1781
4
1945
1781
4
1945
1781
4
1945
1781
4
1945
1787
4
1945
1787
4
1945
1787
4
1945
1787
4
1945
1807
4
1945
1836
4
1945
1836
4
1945
1860
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1945
4
1945
1947
4
1945
1988
4
1945
2015
4
1945
2034
4
1945
2036
4
1945
2060
4
1945
2060
4
1945
2061
4
1945
2061
4
1945
2061
4
1945
2082
4
1945
2091
4
1945
2091
4
1945
2110
4
1945
2126
4
1945
2127
4
1945
2152
4
1945
2179
4
1945
2179
4
1945
2252
4
1945
2314
4
1945
2341
4
1945
2340
4
1945
2356
4
1945
2396
4
1945
2546
4
1945
2546
4
1945
2603
4
1945
2603
4
1945
2650
4
1945
2698
4
1945
2698
4
1945
2698
4
1945
2708
4
1945
2708
4
1945
2708
4
1945
2730
4
1945
2824
4
1945
2982
4
1945
2986
4
1945
3045
4
1945
3045
4
1945
3093
4
1945
3093
4
1945
3094
4
1945
691
4
1945
762
4
1945
949
4
1945
949
4
1945
914
5
1945
915
5
1945
917
5
1945
984
5
1945
989
5
1945
990
5
1945
1012
5
1945
1084
5
1945
1098
5
1945
1122
5
1945
1138
5
1945
1139
5
1945
1141
5
1945
1200
5
1945
1223
5
1945
1265
5
1945
1336
5
1945
1396
5
1945
1455
5
1945
1477
5
1945
1487
5
1945
1491
5
1945
1496
5
1945
1945
5
1945
1945
5
1945
1945
5
1945
483
5
1945
584
5
1945
3003
5
1945
669
5
1945
680
5
1945
763
5
1945
823
5
1945
1659
6
1945
1678
6
1945
1927
6
1945
1945
6
1945
2097
6
1945
2147
6
1945
2163
6
1945
2187
6
1945
2329
6
1945
2345
6
1945
2367
6
1945
2407
6
1945
2478
6
1945
2479
6
1945
2480
6
1945
2538
6
1945
</TEXT>
</DOC>
<DOC>
<DOCNO>1946</DOCNO>
<TEXT>
computing
polynomial
resultants
bezout
determinant
vs
collins
reduced
p
algorithm
algorithms
for
computing
the
resultant
of
two
polynomials
in
several
variables
a
key
repetitive
step
of
computation
in
solving
systems
of
polynomial
equations
by
elimination
are
studied
determining
the
best
algorithm
for
computer
implementation
depends
upon
the
extent
to
which
extraneous
factors
are
introduced
the
extent
of
propagation
of
errors
caused
by
truncation
of
real
coefficients
memory
requirements
and
computing
speed
preliminary
considerations
narrow
the
choice
of
the
best
algorithm
to
bezout
determinant
and
collins
reduced
polynomial
remainder
sequence
p
r
s
algorithm
detailed
tests
performed
on
sample
problems
conclusively
show
that
bezout
determinant
is
superior
in
all
respects
except
for
univariate
polynomials
in
which
case
collins
reduced
p
r
s
algorithm
is
somewhat
faster
in
particular
bezout
determinant
proves
to
be
strikingly
superior
in
numerical
accuracy
displaying
excellent
stability
with
regard
to
round
off
errors
results
of
tests
are
reported
in
detail
cacm
january
1969
ku
s
y
adler
r
j
resultant
algorithm
g
c
d
algorithm
polynomial
resultant
elimination
bezout
determinant
sylvester
determinant
reduced
p
r
s
algorithm
euclidean
algorithm
multivariate
polynomial
equations
4
40
5
10
5
15
5
41
ca690103
jb
february
20
1978
12
10
pm
1024
4
1946
1051
4
1946
1098
4
1946
1214
4
1946
1380
4
1946
1388
4
1946
1393
4
1946
1396
4
1946
1396
4
1946
1485
4
1946
1487
4
1946
1549
4
1946
1570
4
1946
1878
4
1946
1931
4
1946
1946
4
1946
1946
4
1946
1946
4
1946
1946
4
1946
1946
4
1946
1946
4
1946
1946
4
1946
1946
4
1946
1957
4
1946
2167
4
1946
2168
4
1946
2723
4
1946
2857
4
1946
2857
4
1946
3112
4
1946
902
5
1946
1093
5
1946
1177
5
1946
1393
5
1946
1387
5
1946
1946
5
1946
1946
5
1946
1946
5
1946
360
5
1946
731
5
1946
878
5
1946
</TEXT>
</DOC>
<DOC>
<DOCNO>1947</DOCNO>
<TEXT>
object
code
optimization
methods
of
analyzing
the
control
flow
and
data
flow
of
programs
during
compilation
are
applied
to
transforming
the
program
to
improve
object
time
efficiency
dominance
relationships
indicating
which
statements
are
necessarily
executed
before
others
are
used
to
do
global
common
expression
elimination
and
loop
identification
implementation
of
these
and
other
optimizations
in
os
360
fortran
h
are
described
cacm
january
1969
lowry
e
s
medlock
c
w
compilers
data
flow
analysis
dominance
efficiency
fortran
graph
theory
loop
structure
machine
instructions
object
code
optimization
redundancy
elimination
register
assignment
system
360
4
12
5
24
5
32
ca690102
jb
february
20
1978
12
15
pm
1139
4
1947
1613
4
1947
1625
4
1947
1781
4
1947
1807
4
1947
1807
4
1947
1945
4
1947
1947
4
1947
1947
4
1947
1947
4
1947
1947
4
1947
556
4
1947
799
4
1947
1134
5
1947
1223
5
1947
1248
5
1947
1807
5
1947
1947
5
1947
1947
5
1947
1947
5
1947
399
5
1947
2034
5
1947
2290
5
1947
2579
5
1947
2923
5
1947
2945
5
1947
984
6
1947
1223
6
1947
1231
6
1947
1248
6
1947
1535
6
1947
1551
6
1947
1565
6
1947
1807
6
1947
1807
6
1947
1852
6
1947
1926
6
1947
1947
6
1947
1947
6
1947
1947
6
1947
1947
6
1947
1947
6
1947
1947
6
1947
2704
6
1947
2870
6
1947
</TEXT>
</DOC>
<DOC>
<DOCNO>1948</DOCNO>
<TEXT>
computers
in
group
theory
a
survey
computers
are
being
applied
to
an
increasingly
diverse
range
of
problems
in
group
theory
the
most
important
areas
of
application
at
present
are
coset
enumeration
subgroup
lattices
automorphism
groups
of
finite
groups
character
tables
and
commutator
calculus
group
theory
programs
range
from
simple
combinatorial
or
numerical
programs
to
large
symbol
manipulation
systems
in
this
survey
the
more
important
algorithms
in
use
are
described
and
contrasted
and
results
which
have
been
obtained
using
existing
programs
are
indicated
an
extensive
bibliography
is
included
cacm
january
1969
cannon
j
j
group
theory
coset
enumeration
subgroup
lattices
automorphism
groups
character
tables
commutator
calculus
topology
crystallography
permutation
groups
abelian
groups
discrete
mathematics
non
numerical
programming
symbol
manipulation
survey
1
3
3
15
5
39
ca690101
jb
february
20
1978
1
27
pm
1567
4
1948
1948
4
1948
1948
4
1948
1391
5
1948
1559
5
1948
1948
5
1948
1948
5
1948
1948
5
1948
</TEXT>
</DOC>
<DOC>
<DOCNO>1949</DOCNO>
<TEXT>
finiteness
assumptions
and
intellectual
isolation
of
computer
scientists
cacm
december
1970
wagner
r
a
algol
vs
fortran
finiteness
assumptions
intellectual
isolation
integer
variable
range
memory
finiteness
finite
word
size
2
2
4
22
5
23
ca701215
jb
february
9
1978
2
38
pm
249
4
1949
254
4
1949
272
4
1949
1102
4
1949
1109
4
1949
1140
4
1949
1188
4
1949
1306
4
1949
1464
4
1949
1491
4
1949
1767
4
1949
1781
4
1949
1787
4
1949
1949
4
1949
1949
4
1949
321
4
1949
2059
4
1949
2126
4
1949
435
4
1949
437
4
1949
463
4
1949
483
4
1949
491
4
1949
2732
4
1949
560
4
1949
583
4
1949
3073
4
1949
627
4
1949
631
4
1949
632
4
1949
642
4
1949
644
4
1949
653
4
1949
680
4
1949
761
4
1949
762
4
1949
763
4
1949
123
4
1949
140
4
1949
919
4
1949
989
4
1949
196
5
1949
946
5
1949
1949
5
1949
1949
5
1949
1949
5
1949
</TEXT>
</DOC>
<DOC>
<DOCNO>1950</DOCNO>
<TEXT>
efficient
handling
of
binary
data
cacm
december
1970
raduchel
w
j
binary
variables
dummy
variables
bit
strings
cross
tabulations
4
9
ca701214
jb
february
9
1978
2
40
pm
1950
5
1950
1950
5
1950
1950
5
1950
</TEXT>
</DOC>
<DOC>
<DOCNO>1951</DOCNO>
<TEXT>
estimates
of
distributions
of
random
variables
for
certain
computer
communications
traffic
models
a
study
of
multiaccess
computer
communications
has
characterized
the
distributions
underlying
an
elementary
model
of
the
user
computer
interactive
process
the
model
used
is
elementary
in
the
sense
that
many
of
the
random
variables
that
generally
are
of
interest
in
computer
communications
studies
can
be
decomposed
into
the
elements
of
this
model
data
were
examined
from
four
operational
multiaccess
systems
and
the
model
is
shown
to
be
robust
that
is
each
of
the
variables
of
the
model
has
the
same
distribution
independent
of
which
of
the
four
systems
is
being
examined
it
is
shown
that
the
gamma
distribution
can
be
used
to
describe
the
discrete
variables
approximations
to
the
gamma
distribution
by
the
exponential
distribution
are
discussed
for
the
systems
studied
cacm
december
1970
fuchs
e
jackson
p
e
computer
communications
time
sharing
operating
systems
optimization
models
3
80
3
81
6
20
ca701212
jb
february
9
1978
2
46
pm
1533
4
1951
1604
4
1951
1951
4
1951
1951
4
1951
2373
4
1951
2667
4
1951
2668
4
1951
1410
5
1951
1604
5
1951
1951
5
1951
1951
5
1951
1951
5
1951
2373
5
1951
2894
5
1951
1410
6
1951
1751
6
1951
1810
6
1951
1951
6
1951
1951
6
1951
2016
6
1951
2374
6
1951
</TEXT>
</DOC>
<DOC>
<DOCNO>1952</DOCNO>
<TEXT>
index
by
subject
to
algorithms
1970
cacm
december
1970
ca701211
jb
february
9
1978
2
50
pm
1952
5
1952
1952
5
1952
1952
5
1952
</TEXT>
</DOC>
<DOC>
<DOCNO>1953</DOCNO>
<TEXT>
exponential
integral
ei
x
algorithms
385
s13
cacm
december
1970
redish
k
a
ansi
fortran
standard
4
0
4
22
ca701210
jb
february
9
1978
3
04
pm
1953
5
1953
1953
5
1953
1953
5
1953
</TEXT>
</DOC>
<DOC>
<DOCNO>1954</DOCNO>
<TEXT>
eigenvalues
and
eigenvectors
of
a
real
symmetric
matrix
algorithm
384
f2
cacm
december
1970
stewart
g
w
real
symmetric
matrix
eigenvalues
eigenvectors
qr
algorithm
5
14
ca701209
jb
february
9
1978
3
08
pm
1954
5
1954
1954
5
1954
1954
5
1954
</TEXT>
</DOC>
<DOC>
<DOCNO>1955</DOCNO>
<TEXT>
characteristic
values
and
associated
solutions
of
mathieu
differential
equation
algorithm
352
s22
cacm
december
1970
sale
a
h
j
mathieu
differential
equation
mathieu
function
characteristic
value
periodic
solution
radial
solution
5
12
ca701208
jb
february
9
19783
10
pm
1613
4
1955
1646
4
1955
1900
4
1955
1955
4
1955
2025
4
1955
2154
4
1955
2365
4
1955
2506
4
1955
3060
4
1955
987
5
1955
1955
5
1955
1955
5
1955
1955
5
1955
2653
5
1955
2654
5
1955
1955
6
1955
1955
6
1955
</TEXT>
</DOC>
<DOC>
<DOCNO>1956</DOCNO>
<TEXT>
optimum
merging
from
mass
storage
an
algorithm
is
displayed
which
yields
the
merge
orders
such
that
the
total
read
time
defined
to
be
the
sum
of
seek
time
plus
data
transfer
time
is
minimized
for
a
sort
using
mass
storage
the
analysis
is
parameterized
in
terms
of
the
ratio
of
seek
time
to
the
time
it
takes
to
fill
available
core
with
records
and
the
file
size
in
units
of
core
lengths
and
thus
it
can
be
applied
to
any
conventional
cpu
mass
storage
combination
an
explicit
formula
for
total
read
time
is
derived
in
terms
of
the
parameters
which
correlates
very
well
with
the
total
read
time
calculated
using
the
optimum
merge
orders
yielded
by
the
algorithm
the
formula
involves
the
roots
of
a
simple
transcendental
equation
a
short
table
of
these
roots
is
included
numerical
results
are
graphically
displayed
for
a
wide
range
of
the
parameters
it
is
found
that
the
normalized
read
time
for
optimum
merging
on
a
given
hardware
configuration
is
proportional
to
the
file
length
times
the
logarithm
of
the
file
length
cacm
december
1970
black
n
a
sorting
merging
optimum
merging
mass
storage
sort
timing
drum
merging
access
time
3
37
4
49
5
31
ca701207
jb
february
9
1978
3
18
pm
1956
4
1956
2017
4
1956
1956
5
1956
1956
5
1956
1956
5
1956
854
5
1956
</TEXT>
</DOC>
<DOC>
<DOCNO>1957</DOCNO>
<TEXT>
the
list
set
generator
a
construct
for
evaluating
set
expressions
the
list
set
generator
is
defined
and
algorithms
for
its
use
are
given
the
list
set
generator
is
a
construct
which
may
be
added
to
a
list
processing
system
or
any
system
that
handles
sets
it
efficiently
generates
the
set
which
results
from
any
expression
involving
sets
and
set
operators
the
efficiency
derives
from
evaluating
the
expression
as
a
whole
and
in
parallel
rather
than
evaluating
subexpressions
and
then
using
those
sets
to
arrive
at
the
final
result
cacm
december
1970
shapiro
s
c
set
manipulating
list
processing
set
generation
sets
lists
file
processing
3
73
3
74
4
22
ca701206
jb
february
9
1978
3
23
pm
1024
4
1957
1051
4
1957
1098
4
1957
1214
4
1957
1380
4
1957
1388
4
1957
1393
4
1957
1485
4
1957
1487
4
1957
1549
4
1957
1570
4
1957
1860
4
1957
1878
4
1957
1946
4
1957
1957
4
1957
1957
4
1957
1957
4
1957
2155
4
1957
2151
4
1957
2162
4
1957
2168
4
1957
2723
4
1957
2857
4
1957
3103
4
1957
3112
4
1957
3148
4
1957
1389
5
1957
1860
5
1957
1957
5
1957
1957
5
1957
1957
5
1957
731
5
1957
</TEXT>
</DOC>
<DOC>
<DOCNO>1958</DOCNO>
<TEXT>
improving
round
off
in
runge
kutta
computations
with
gill
method
a
runge
kutta
gill
scheme
in
common
use
is
based
on
an
incomplete
adaptation
for
floating
point
operations
of
gill
method
an
improved
version
reduces
round
off
error
significantly
in
this
note
the
heart
of
the
scheme
is
presented
in
fortran
language
it
is
then
shown
how
an
improved
version
of
the
method
can
be
obtained
with
the
addition
of
two
fortran
statements
the
two
version
is
a
significant
improvement
a
numerical
example
comparing
the
two
is
included
cacm
december
1970
thompson
r
j
runge
kutta
methods
ordinary
differential
equations
round
off
error
error
analysis
5
11
5
17
ca701205
jb
february
9
1978
3
40
pm
1958
5
1958
1958
5
1958
1958
5
1958
</TEXT>
</DOC>
<DOC>
<DOCNO>1959</DOCNO>
<TEXT>
an
interrupt
based
organization
for
management
information
systems
a
programming
structure
language
constructs
and
a
supervisory
system
organization
are
proposed
for
the
design
and
coding
of
large
shared
data
base
systems
the
bases
for
this
organization
are
a
generalized
interrupt
structure
and
the
newly
introduced
concept
of
file
tagging
which
is
the
process
of
associating
program
structures
and
interrupt
generating
conditions
with
items
in
the
data
base
an
algorithm
for
resolving
conflicts
which
arise
in
scheduling
the
interrupt
processing
routines
is
presented
dpl
a
programming
language
and
supervisory
system
in
which
these
concepts
are
implemented
is
used
to
illustrated
the
new
organization
which
is
proposed
for
management
information
systems
cacm
december
1970
morgan
h
l
management
information
systems
integrated
data
processing
supervisors
interrupts
monitoring
systems
supervisory
systems
interrupt
scheduling
parallel
processing
3
51
4
22
4
32
ca701204
jb
february
9
1978
3
46
pm
1959
4
1959
1135
5
1959
1959
5
1959
1959
5
1959
1959
5
1959
2182
5
1959
2534
5
1959
830
6
1959
1787
6
1959
1959
6
1959
1959
6
1959
1973
6
1959
2111
6
1959
2182
6
1959
799
6
1959
</TEXT>
</DOC>
<DOC>
<DOCNO>1960</DOCNO>
<TEXT>
process
management
and
resource
sharing
in
the
multiaccess
system
esope
the
main
design
principles
of
the
multiaccess
system
esope
are
described
emphasis
is
placed
on
basic
ideas
underlying
the
design
rather
than
on
implementation
details
the
main
features
of
the
system
include
the
ability
given
to
any
user
to
schedule
his
own
parallel
processes
using
system
primitive
operations
the
file
memory
relationship
and
the
allocation
scheduling
policy
which
dynamically
takes
into
account
recent
information
about
user
behavior
cacm
december
1970
betourne
c
boulenger
j
ferrie
j
kaiser
c
krakowiak
s
mossiere
j
time
sharing
multiprogramming
process
scheduling
resource
allocation
4
32
ca701203
jb
february
9
1978
4
02
pm
1458
4
1960
1523
4
1960
1603
4
1960
1698
4
1960
1747
4
1960
1748
4
1960
1828
4
1960
1854
4
1960
1854
4
1960
1877
4
1960
1877
4
1960
1960
4
1960
1960
4
1960
1960
4
1960
2150
4
1960
2317
4
1960
2319
4
1960
2377
4
1960
2377
4
1960
2378
4
1960
2342
4
1960
2376
4
1960
2379
4
1960
2424
4
1960
2482
4
1960
2497
4
1960
2558
4
1960
2618
4
1960
2625
4
1960
2632
4
1960
2632
4
1960
2704
4
1960
2723
4
1960
2738
4
1960
2740
4
1960
2741
4
1960
2840
4
1960
2867
4
1960
2941
4
1960
3105
4
1960
3144
4
1960
3184
4
1960
1471
5
1960
1749
5
1960
1854
5
1960
1960
5
1960
1960
5
1960
1960
5
1960
2376
5
1960
1198
6
1960
1749
6
1960
1960
6
1960
</TEXT>
</DOC>
<DOC>
<DOCNO>1961</DOCNO>
<TEXT>
an
efficient
search
algorithm
to
find
the
elementary
circuits
of
a
graph
a
theoretically
most
efficient
search
algorithm
is
presented
which
uses
an
exhaustive
search
to
find
all
of
the
elementary
circuits
of
a
graph
the
algorithm
can
be
easily
modified
to
find
all
of
the
elementary
circuits
with
a
particular
attribute
such
as
length
a
rigorous
proof
of
the
algorithm
is
given
as
well
as
an
example
of
its
application
empirical
bounds
are
presented
relating
the
speed
of
the
algorithm
to
the
number
of
vertices
and
the
number
of
arcs
the
speed
is
also
related
to
the
number
of
circuits
in
the
graph
to
give
a
relation
between
speed
and
complexity
extensions
to
undirected
and
s
graphs
are
discussed
cacm
december
1970
tiernan
j
c
algorithm
graph
theory
circuit
search
algorithm
path
search
algorithm
searching
3
74
5
32
ca701202
jb
february
9
1978
4
12
pm
1847
4
1961
1961
4
1961
1961
4
1961
1961
4
1961
2052
4
1961
2177
4
1961
2763
4
1961
1369
5
1961
1504
5
1961
1847
5
1961
1961
5
1961
1961
5
1961
1961
5
1961
2430
5
1961
1961
6
1961
</TEXT>
</DOC>
<DOC>
<DOCNO>1962</DOCNO>
<TEXT>
groove
a
program
to
compose
store
and
edit
functions
of
time
a
program
which
makes
possible
creating
storing
reproducing
and
editing
functions
of
time
is
described
the
functions
are
typical
of
those
generated
by
human
beings
multiple
functions
up
to
14
are
produced
for
long
periods
of
time
up
to
several
hours
at
sufficiently
high
sampling
rates
to
describe
fast
human
reactions
up
to
200
samples
per
second
the
functions
can
be
used
for
a
variety
of
purposes
such
as
the
control
of
machine
tools
or
sound
synthesizers
or
anything
a
person
normally
controls
the
program
operates
on
a
small
computer
ddp
224
functions
are
stored
on
a
disk
file
functions
may
be
created
by
real
time
human
inputs
to
the
computer
which
can
interact
with
already
stored
functions
and
computed
functions
real
time
feedback
from
the
process
being
controlled
is
an
important
link
in
the
system
the
environment
for
effective
man
machine
interaction
has
been
carefully
nurtured
cacm
december
1970
mathews
m
v
moore
f
r
computer
music
music
real
time
control
digital
control
time
functions
interactive
software
hybrid
systems
conductor
program
3
44
3
8
7
3
ca701201
jb
february
9
1978
4
19
pm
1962
5
1962
1962
5
1962
1962
5
1962
</TEXT>
</DOC>
<DOC>
<DOCNO>1963</DOCNO>
<TEXT>
condition
numbers
of
pei
matrices
cacm
november
1970
rokne
j
matrices
condition
numbers
pei
matrices
eigenvectors
eigenvalues
5
14
ca701116
jb
february
9
1978
4
21
pm
1963
4
1963
1963
4
1963
1963
4
1963
909
5
1963
1963
5
1963
1963
5
1963
1963
5
1963
475
5
1963
750
5
1963
</TEXT>
</DOC>
<DOC>
<DOCNO>1964</DOCNO>
<TEXT>
comment
on
the
working
set
model
for
program
behavior
cacm
november
1970
bernstein
a
demand
paging
working
set
paging
rate
multiprogramming
4
30
4
32
ca701115
jb
february
9
1978
4
23
pm
1964
5
1964
1964
5
1964
1964
5
1964
</TEXT>
</DOC>
<DOC>
<DOCNO>1965</DOCNO>
<TEXT>
correction
to
logical
arithmetic
on
computers
with
two
complement
binary
arithmetic
cacm
november
1970
ehrman
j
r
binary
arithmetic
unsigned
operand
arithmetic
maximum
significance
arithmetic
full
precision
arithmetic
3
15
5
11
ca701114
jb
february
9
1978
4
25
pm
1965
4
1965
2200
4
1965
1718
5
1965
1965
5
1965
1965
5
1965
1965
5
1965
</TEXT>
</DOC>
<DOC>
<DOCNO>1966</DOCNO>
<TEXT>
a
generalized
method
for
generating
argument
function
values
cacm
november
1970
wilson
w
j
mapping
function
decision
hierarchy
table
look
up
4
9
5
39
ca701113
jb
february
9
1978
4
26
pm
1966
5
1966
1966
5
1966
1966
5
1966
</TEXT>
</DOC>
<DOC>
<DOCNO>1967</DOCNO>
<TEXT>
an
improved
algorithm
to
produce
complex
primes
algorithm
401
a1
cacm
november
1970
bratley
p
number
theory
prime
numbers
complex
numbers
5
39
ca701112
jb
february
9
1978
4
28
pm
1841
4
1967
1967
4
1967
1967
4
1967
2120
4
1967
2927
4
1967
1539
5
1967
1967
5
1967
1967
5
1967
1967
5
1967
2120
5
1967
</TEXT>
</DOC>
<DOC>
<DOCNO>1968</DOCNO>
<TEXT>
eigenvalues
and
eigenvectors
of
a
real
general
matrix
algorithm
343
f1
cacm
november
1970
knight
w
mersereau
w
eigenvalues
eigenvectors
latent
roots
householder
method
qr
algorithm
inverse
iteration
5
14
ca701111
jb
february
9
1978
4
30
pm
1968
4
1968
1968
4
1968
2099
4
1968
2335
4
1968
1662
5
1968
1968
5
1968
1968
5
1968
1968
5
1968
2099
5
1968
</TEXT>
</DOC>
<DOC>
<DOCNO>1969</DOCNO>
<TEXT>
increasing
the
efficiency
of
quicksort
algorithm
402
m1
cacm
november
1970
van
emden
m
h
sorting
quicksort
5
31
3
73
5
6
4
49
ca701110
jb
february
9
1978
4
32
pm
1175
4
1969
1919
4
1969
1919
4
1969
1969
4
1969
1969
4
1969
1997
4
1969
2118
4
1969
2191
4
1969
2388
4
1969
2348
4
1969
2679
4
1969
2679
4
1969
3054
4
1969
3054
4
1969
3121
4
1969
1175
5
1969
1969
5
1969
1969
5
1969
1969
5
1969
1997
5
1969
308
5
1969
2216
5
1969
2679
5
1969
3054
5
1969
864
6
1969
970
6
1969
1175
6
1969
1175
6
1969
1190
6
1969
1228
6
1969
1880
6
1969
1919
6
1969
1919
6
1969
1969
6
1969
1969
6
1969
1969
6
1969
1969
6
1969
1980
6
1969
1997
6
1969
1997
6
1969
1997
6
1969
307
6
1969
308
6
1969
308
6
1969
308
6
1969
309
6
1969
2017
6
1969
2042
6
1969
2679
6
1969
3187
6
1969
507
6
1969
716
6
1969
776
6
1969
783
6
1969
</TEXT>
</DOC>
<DOC>
<DOCNO>1970</DOCNO>
<TEXT>
unrecorded
magnetic
tape
for
information
interchange
9
track
200
and
800
cpi
nrzi
and
1600
cpi
pe
proposed
american
national
standard
cacm
november
1970
input
output
magnetic
tape
information
interchange
measurement
instrumentation
phase
encoded
recording
2
49
6
35
ca701108
jb
february
9
1978
4
42
pm
1970
5
1970
1970
5
1970
1970
5
1970
</TEXT>
</DOC>
<DOC>
<DOCNO>1971</DOCNO>
<TEXT>
recorded
magnetic
tape
for
information
interchange
1600
cpi
phase
encoded
proposed
american
national
standard
cacm
november
1970
input
output
magnetic
tape
information
interchange
measurement
instrumentation
phase
encoded
recording
2
49
6
35
ca701107
jb
february
9
1978
4
49
pm
1971
5
1971
1971
5
1971
1971
5
1971
</TEXT>
</DOC>
<DOC>
<DOCNO>1972</DOCNO>
<TEXT>
a
nonrecursive
list
compacting
algorithm
a
simple
nonrecursive
list
structure
compacting
scheme
or
garbage
collector
suitable
for
both
compact
and
lisp
like
list
structures
is
presented
the
algorithm
avoids
the
need
for
recursion
by
using
the
partial
structure
as
it
is
built
up
to
keep
track
of
those
lists
that
have
been
copied
cacm
november
1970
cheney
c
j
list
compacting
garbage
collection
compact
list
lisp
4
19
4
49
ca701106
jb
february
9
1978
4
54
pm
1972
4
1972
1972
4
1972
2156
4
1972
2168
4
1972
2249
4
1972
2438
4
1972
2723
4
1972
2736
4
1972
2736
4
1972
2833
4
1972
2855
4
1972
3074
4
1972
3074
4
1972
3112
4
1972
1826
5
1972
1853
5
1972
1972
5
1972
1972
5
1972
1972
5
1972
2156
5
1972
2361
5
1972
2513
5
1972
2736
5
1972
2855
5
1972
3074
5
1972
3106
5
1972
3112
5
1972
106
6
1972
1380
6
1972
1549
6
1972
1549
6
1972
1549
6
1972
1626
6
1972
1626
6
1972
1826
6
1972
1826
6
1972
1826
6
1972
1826
6
1972
1826
6
1972
210
6
1972
210
6
1972
1853
6
1972
1853
6
1972
1972
6
1972
1972
6
1972
1972
6
1972
1972
6
1972
1972
6
1972
1972
6
1972
1972
6
1972
1972
6
1972
2438
6
1972
2513
6
1972
2665
6
1972
2723
6
1972
2723
6
1972
2736
6
1972
2766
6
1972
2766
6
1972
2833
6
1972
2833
6
1972
2838
6
1972
2855
6
1972
2954
6
1972
2998
6
1972
2998
6
1972
731
6
1972
</TEXT>
</DOC>
<DOC>
<DOCNO>1973</DOCNO>
<TEXT>
the
linear
quotient
hash
code
a
new
method
of
hash
coding
is
presented
and
is
shown
to
possess
desirable
attributes
specifically
the
algorithm
is
simple
efficient
and
exhaustive
while
needing
little
time
per
probe
and
using
few
probes
per
lookup
performance
data
and
implementation
hints
are
also
given
cacm
november
1970
bell
j
r
kaman
c
h
hashing
hash
code
scatter
storage
calculated
address
search
table
lookup
symbol
table
keys
3
74
4
9
ca701105
jb
february
10
1978
8
33
am
1676
4
1973
1682
4
1973
1728
4
1973
1860
4
1973
1860
4
1973
1973
4
1973
1973
4
1973
1973
4
1973
1973
4
1973
1992
4
1973
1992
4
1973
2018
4
1973
2018
4
1973
2018
4
1973
2032
4
1973
2033
4
1973
2033
4
1973
2107
4
1973
2107
4
1973
2109
4
1973
2109
4
1973
2138
4
1973
2203
4
1973
2203
4
1973
2203
4
1973
2203
4
1973
2251
4
1973
2251
4
1973
2251
4
1973
2251
4
1973
2359
4
1973
2524
4
1973
2530
4
1973
2537
4
1973
2543
4
1973
2543
4
1973
2543
4
1973
2543
4
1973
2552
4
1973
2559
4
1973
2559
4
1973
2573
4
1973
2573
4
1973
2770
4
1973
2770
4
1973
2974
4
1973
2991
4
1973
2991
4
1973
3053
4
1973
3053
4
1973
3053
4
1973
3083
4
1973
1785
5
1973
1786
5
1973
1973
5
1973
1973
5
1973
1973
5
1973
2107
5
1973
2109
5
1973
2251
5
1973
2534
5
1973
2543
5
1973
2559
5
1973
2770
5
1973
3053
5
1973
3083
5
1973
830
6
1973
1328
6
1973
1329
6
1973
1785
6
1973
1785
6
1973
1785
6
1973
1785
6
1973
1786
6
1973
1786
6
1973
1786
6
1973
1787
6
1973
1869
6
1973
1959
6
1973
1973
6
1973
1973
6
1973
1973
6
1973
1973
6
1973
1973
6
1973
1973
6
1973
1973
6
1973
1992
6
1973
1992
6
1973
332
6
1973
2018
6
1973
2018
6
1973
2107
6
1973
2107
6
1973
2107
6
1973
2107
6
1973
2107
6
1973
2109
6
1973
2109
6
1973
2109
6
1973
2109
6
1973
2111
6
1973
2182
6
1973
2412
6
1973
2543
6
1973
2543
6
1973
2552
6
1973
2673
6
1973
2673
6
1973
2707
6
1973
2770
6
1973
799
6
1973
</TEXT>
</DOC>
<DOC>
<DOCNO>1974</DOCNO>
<TEXT>
neater2
a
pl
i
source
statement
reformatter
neater2
accepts
a
pl
i
source
program
and
operates
on
it
to
produce
a
reformatted
version
when
in
the
logical
mode
neater2
indicates
the
logical
structure
of
the
source
program
in
the
indentation
pattern
of
its
output
logic
errors
discovered
through
neater2
logical
analysis
are
discovered
much
more
economically
than
is
possible
through
compilation
and
trial
runs
a
number
of
options
are
available
to
give
the
user
full
control
over
the
output
format
and
to
maximize
the
utility
of
neater2
as
an
aid
during
the
early
stages
of
development
of
a
pl
i
source
deck
one
option
usage
causes
neater2
to
insert
into
each
logical
unit
of
coding
a
statement
which
will
case
the
number
of
times
each
one
is
executed
to
be
recorded
during
execution
this
feature
is
expected
to
provide
a
major
aid
in
optimization
of
pl
i
programs
cacm
november
1970
conrow
k
smith
r
g
logical
analysis
of
pl
i
source
reformatting
of
pl
i
source
documentation
aid
execution
time
usage
data
1
52
4
12
4
19
4
42
ca701104
jb
february
10
1978
8
40
am
1974
5
1974
1974
5
1974
1974
5
1974
2971
5
1974
1835
6
1974
1974
6
1974
2534
6
1974
</TEXT>
</DOC>
<DOC>
<DOCNO>1975</DOCNO>
<TEXT>
a
multiple
precision
division
algorithm
a
generalized
division
algorithm
for
use
with
positive
integral
operands
is
presented
depending
upon
the
algebraic
relationship
of
the
first
two
ciphers
of
the
divisor
one
or
at
most
two
adjustments
to
the
original
divisor
and
dividend
must
be
performed
before
the
division
operation
can
be
initiated
the
uniqueness
of
this
method
will
cause
each
trial
cipher
in
the
quotient
to
be
either
equal
to
or
one
greater
than
its
final
replacement
cacm
november
1970
mifsud
c
j
multiple
precision
division
adjustment
generalize
3
15
4
0
5
1
ca701103
jb
february
10
1978
8
45
am
1258
4
1975
1292
4
1975
1497
4
1975
1497
4
1975
1593
4
1975
1975
4
1975
1975
4
1975
1975
4
1975
2605
4
1975
1026
5
1975
1292
5
1975
1497
5
1975
1975
5
1975
1975
5
1975
1975
5
1975
2432
5
1975
1975
6
1975
</TEXT>
</DOC>
<DOC>
<DOCNO>1976</DOCNO>
<TEXT>
multi
attribute
retrieval
with
combined
indexes
in
this
paper
a
file
organization
scheme
designed
to
replace
the
use
of
the
popular
secondary
index
filing
scheme
or
inverted
files
on
secondary
key
fields
is
described
through
the
use
of
redundancy
and
storing
keys
or
access
numbers
of
the
records
that
satisfy
different
combinations
of
secondary
index
values
in
buckets
it
is
possible
to
retrieve
all
keys
satisfying
any
input
query
derived
from
a
subset
of
fields
by
a
single
access
to
an
index
file
although
each
bucket
may
be
used
for
many
combinations
of
values
and
a
combination
of
buckets
may
be
required
for
a
given
query
the
method
which
in
its
degenerate
case
becomes
the
conventional
secondary
index
filing
scheme
works
similarly
but
has
the
following
advantages
1
the
elimination
of
multiple
accesses
in
many
cases
2
the
elimination
of
false
drops
3
the
elimination
of
computer
time
to
perform
intersection
of
key
sets
each
qualified
for
one
secondary
index
field
only
and
4
the
avoidance
of
long
strings
of
keys
when
an
index
field
appearing
in
a
query
has
very
few
possible
values
redundancy
in
some
cases
is
the
same
as
the
secondary
indexing
method
in
the
general
case
trade
off
between
the
number
of
accesses
for
query
and
redundancy
exists
cacm
november
1970
lum
v
y
file
organization
secondary
index
files
inverted
files
information
retrieval
data
management
access
method
secondary
keys
storage
with
buckets
rapid
retrieval
balanced
filing
scheme
elimination
of
false
drops
combining
indexes
query
multi
attribute
retrieval
3
73
3
74
3
79
ca701102
jb
february
10
1978
9
00
am
1976
4
1976
1271
5
1976
1976
5
1976
1976
5
1976
1976
5
1976
2140
5
1976
2452
5
1976
2765
5
1976
2901
5
1976
3134
5
1976
849
6
1976
1936
6
1976
1936
6
1976
1976
6
1976
1976
6
1976
1976
6
1976
1976
6
1976
1976
6
1976
2046
6
1976
2046
6
1976
2160
6
1976
2198
6
1976
2451
6
1976
2452
6
1976
2524
6
1976
2715
6
1976
2990
6
1976
616
6
1976
</TEXT>
</DOC>
<DOC>
<DOCNO>1977</DOCNO>
<TEXT>
an
interactive
display
for
approximation
by
linear
programming
an
interactive
program
with
a
graphical
display
has
been
developed
for
the
approximation
of
data
by
means
of
a
linear
combination
of
functions
including
splines
selected
by
the
user
the
coefficients
of
the
approximation
are
determined
by
linear
programming
so
as
to
minimize
the
error
in
either
the
l1
or
l
infinity
norm
auxiliary
conditions
such
as
monotonicity
or
convexity
of
the
approximation
can
also
be
imposed
this
interactive
system
is
described
and
several
examples
of
its
use
are
given
cacm
november
1970
lafata
p
rosen
j
b
approximation
data
fitting
functional
approximation
linear
programming
interactive
graphical
display
spline
functions
5
13
5
41
ca701101
jb
february
10
1978
9
06
am
1977
5
1977
1977
5
1977
1977
5
1977
2604
5
1977
1977
6
1977
</TEXT>
</DOC>
<DOC>
<DOCNO>1978</DOCNO>
<TEXT>
the
use
of
interactive
graphics
to
solve
numerical
problems
with
the
advent
of
on
line
time
sharing
computer
systems
and
graphic
terminals
we
have
available
a
new
dimension
in
numerical
problem
solving
capabilities
rather
than
simply
use
the
new
power
to
achieve
fast
turnaround
we
can
develop
interactive
routines
which
are
easy
to
use
and
also
take
advantage
of
the
insight
and
visual
capabilities
of
the
human
problem
solver
several
on
line
systems
for
general
purpose
mathematical
problem
solving
have
already
been
implemented
as
well
as
some
special
purpose
systems
for
solving
problems
in
a
particular
area
such
as
ordinary
differential
equations
the
advantage
of
restricting
the
problem
area
is
that
the
interface
with
a
user
can
be
greatly
simplified
in
this
paper
we
discuss
some
of
the
advantages
accrued
by
such
systems
and
design
considerations
for
interactive
routines
furthermore
an
implementation
of
an
on
line
least
squares
data
fitting
program
peg
is
presented
with
results
obtained
from
empirical
data
in
conclusion
area
for
future
work
in
this
field
are
discussed
cacm
october
1970
smith
l
b
interactive
graphics
computer
graphics
graphics
least
squares
data
fitting
interactive
computing
on
line
mathematics
1
3
3
1
5
13
5
5
ca701012
jb
february
10
1978
9
14
am
1978
4
1978
1978
4
1978
1978
4
1978
1307
5
1978
1589
5
1978
1813
5
1978
1978
5
1978
1978
5
1978
1978
5
1978
</TEXT>
</DOC>
<DOC>
<DOCNO>1979</DOCNO>
<TEXT>
numerical
inversion
of
laplace
transforms
algorithm
368
d5
cacm
october
1970
stehfest
h
laplace
transform
inversion
integral
transformations
integral
equations
5
15
5
18
ca701011
jb
february
10
1978
9
16
am
1979
5
1979
1979
5
1979
1979
5
1979
</TEXT>
</DOC>
<DOC>
<DOCNO>1980</DOCNO>
<TEXT>
an
efficient
algorithm
for
sorting
with
minimal
storage
algorithm
347
m1
cacm
october
1970
peto
r
sorting
ranking
minimal
storage
sorting
digital
computer
sorting
5
31
ca701010
jb
february
10
1978
9
19
am
1980
5
1980
1980
5
1980
1980
5
1980
3054
5
1980
1175
6
1980
1880
6
1980
1919
6
1980
1969
6
1980
1980
6
1980
1997
6
1980
307
6
1980
308
6
1980
309
6
1980
2017
6
1980
2679
6
1980
776
6
1980
</TEXT>
</DOC>
<DOC>
<DOCNO>1981</DOCNO>
<TEXT>
normal
curve
integral
algorithm
304
s15
cacm
october
1970
holmgren
b
normal
curve
integral
probability
special
functions
5
12
5
5
ca701009
jb
february
10
1978
9
20
am
1981
5
1981
1981
5
1981
1981
5
1981
</TEXT>
</DOC>
<DOC>
<DOCNO>1982</DOCNO>
<TEXT>
modified
havie
integration
algorithm
400
d1
cacm
october
1970
wallick
g
c
numerical
integration
havie
integration
romberg
quadrature
modified
romberg
quadrature
trapezoid
values
rectangle
values
5
16
ca701008
jb
february
10
1978
9
22
am
205
4
1982
210
4
1982
214
4
1982
1352
4
1982
1352
4
1982
1982
4
1982
1982
4
1982
1982
4
1982
1982
4
1982
398
4
1982
2040
4
1982
2040
4
1982
2355
4
1982
642
4
1982
669
4
1982
100
4
1982
123
4
1982
164
4
1982
1
5
1982
1273
5
1982
1883
5
1982
1982
5
1982
1982
5
1982
1982
5
1982
324
5
1982
2415
5
1982
1040
6
1982
1982
6
1982
2074
6
1982
</TEXT>
</DOC>
<DOC>
<DOCNO>1983</DOCNO>
<TEXT>
spanning
tree
h
algorithm
399
cacm
october
1970
seppanen
j
j
graph
tree
spanning
tree
5
32
ca701007
jb
february
10
1978
9
24
am
1983
5
1983
1983
5
1983
1983
5
1983
</TEXT>
</DOC>
<DOC>
<DOCNO>1984</DOCNO>
<TEXT>
tableless
date
conversion
z
algorithm
398
cacm
october
1970
stone
r
a
date
calendar
5
9
ca701006
jb
february
10
1978
9
25
am
1984
5
1984
1984
5
1984
1984
5
1984
</TEXT>
</DOC>
<DOC>
<DOCNO>1985</DOCNO>
<TEXT>
an
integer
programming
problem
h
algorithm
397
cacm
october
1970
chang
s
k
gill
a
integer
programming
change
making
problem
5
41
ca701005
jb
february
10
1978
9
28
am
1985
5
1985
1985
5
1985
1985
5
1985
</TEXT>
</DOC>
<DOC>
<DOCNO>1986</DOCNO>
<TEXT>
student
t
quantiles
s14
algorithm
396
cacm
october
1970
hill
g
w
student
t
statistic
quantile
asymptotic
approximation
5
12
5
5
ca701004
jb
february
10
1978
9
29
am
1986
4
1986
2315
4
1986
1986
5
1986
1986
5
1986
1986
5
1986
1987
5
1986
</TEXT>
</DOC>
<DOC>
<DOCNO>1987</DOCNO>
<TEXT>
student
t
distribution
s14
algorithm
395
cacm
october
1970
hill
g
w
student
t
statistic
distribution
function
approximation
asymptotic
expansion
5
12
5
5
ca701003
jb
february
10
1978
9
31
am
1157
4
1987
1779
4
1987
1920
4
1987
1944
4
1987
1944
4
1987
1987
4
1987
1987
4
1987
1987
4
1987
1987
4
1987
1987
4
1987
2427
4
1987
2548
4
1987
1561
5
1987
1581
5
1987
1779
5
1987
1944
5
1987
1986
5
1987
1987
5
1987
1987
5
1987
1987
5
1987
2315
5
1987
714
5
1987
1348
6
1987
1834
6
1987
1987
6
1987
1987
6
1987
728
6
1987
</TEXT>
</DOC>
<DOC>
<DOCNO>1988</DOCNO>
<TEXT>
a
formalism
for
translator
interactions
a
formalism
is
presented
for
describing
the
actions
of
processors
for
programming
languages
compilers
interpreters
assemblers
and
their
interactions
in
complex
systems
such
as
compiler
compilers
or
extendible
languages
the
formalism
here
might
be
used
to
define
and
answer
such
a
question
as
can
one
do
bootstrapping
using
a
meta
compiler
whose
metaphase
is
interpretive
in
addition
an
algorithm
is
presented
for
deciding
whether
or
not
a
given
system
can
be
produced
from
a
given
set
of
component
processors
cacm
october
1970
earley
j
translator
compiler
interpreter
bootstrapping
language
processor
compiler
compiler
4
1
5
29
ca701002
jb
february
10
1978
9
36
am
1159
4
1988
1396
4
1988
1767
4
1988
1781
4
1988
1781
4
1988
1781
4
1988
1787
4
1988
1860
4
1988
1945
4
1988
1988
4
1988
1988
4
1988
1988
4
1988
1988
4
1988
381
4
1988
2252
4
1988
1496
5
1988
1988
5
1988
1988
5
1988
1988
5
1988
381
5
1988
11
5
1988
14
5
1988
</TEXT>
</DOC>
<DOC>
<DOCNO>1989</DOCNO>
<TEXT>
transition
network
grammars
for
natural
language
analysis
the
use
of
augmented
transition
network
grammars
for
the
analysis
of
natural
language
sentences
is
described
structure
building
actions
associated
with
the
arcs
of
the
grammar
network
allow
for
the
reordering
restructuring
and
copying
of
constituents
necessary
to
produce
deep
structure
representations
of
the
type
normally
obtained
from
a
transformational
analysis
and
conditions
on
the
arcs
allow
for
a
powerful
selectivity
which
can
rule
out
meaningless
analyses
and
take
advantage
of
semantic
information
to
guide
the
parsing
the
advantage
of
this
model
for
natural
language
analysis
are
discussed
in
detail
and
illustrated
by
examples
an
implementation
of
an
experimental
parsing
system
for
transition
network
grammars
is
briefly
described
cacm
october
1970
woods
w
a
computational
linguistics
grammars
grammar
models
linguistics
natural
language
analysis
parsing
semantic
interpretation
transition
network
grammars
transformational
grammars
3
42
4
12
ca701001
jb
february
10
1978
9
43
am
1323
4
1989
1358
4
1989
1380
4
1989
1665
4
1989
1781
4
1989
1787
4
1989
1989
4
1989
1989
4
1989
2060
4
1989
2112
4
1989
2179
4
1989
2534
4
1989
2541
4
1989
2698
4
1989
2698
4
1989
2733
4
1989
2820
4
1989
2921
4
1989
3073
4
1989
3155
4
1989
3154
4
1989
1989
5
1989
1989
5
1989
1989
5
1989
2110
5
1989
2581
5
1989
2739
5
1989
2795
5
1989
2921
5
1989
3087
5
1989
799
5
1989
1928
6
1989
1989
6
1989
1989
6
1989
1989
6
1989
1989
6
1989
1989
6
1989
2046
6
1989
2110
6
1989
2274
6
1989
</TEXT>
</DOC>
<DOC>
<DOCNO>1990</DOCNO>
<TEXT>
numerical
constants
algorithm
cacm
september
1970
dunham
c
b
numerical
algorithm
numerical
constants
5
10
ca700915
jb
february
10
1978
9
48
am
1990
5
1990
1990
5
1990
1990
5
1990
</TEXT>
</DOC>
<DOC>
<DOCNO>1991</DOCNO>
<TEXT>
on
the
number
of
automorphisms
of
a
singly
generated
automaton
cacm
september
1970
bavel
z
automata
finite
automata
singly
generated
automata
automorphisms
generators
length
of
state
minimal
length
generators
orbit
5
22
ca700914
jb
february
10
1978
9
54
am
1991
5
1991
1991
5
1991
1991
5
1991
</TEXT>
</DOC>
<DOC>
<DOCNO>1992</DOCNO>
<TEXT>
comment
on
bell
quadratic
quotient
method
for
hash
code
searching
cacm
september
1970
lamport
l
hashing
hash
code
scatter
storage
calculated
address
clustering
search
symbol
table
keys
table
look
up
3
74
4
9
ca700913
jb
february
10
1978
9
56
am
1860
4
1992
1973
4
1992
1973
4
1992
1992
4
1992
1992
4
1992
2018
4
1992
2033
4
1992
2107
4
1992
2109
4
1992
2138
4
1992
2203
4
1992
2203
4
1992
2251
4
1992
2251
4
1992
2530
4
1992
2537
4
1992
2543
4
1992
2543
4
1992
2559
4
1992
2573
4
1992
2573
4
1992
2770
4
1992
2991
4
1992
3053
4
1992
3083
4
1992
1786
5
1992
1992
5
1992
1992
5
1992
1992
5
1992
2107
5
1992
2770
5
1992
3053
5
1992
1329
6
1992
1785
6
1992
1786
6
1992
1869
6
1992
1973
6
1992
1973
6
1992
1992
6
1992
1992
6
1992
2018
6
1992
2107
6
1992
2109
6
1992
2109
6
1992
2412
6
1992
2543
6
1992
2673
6
1992
2673
6
1992
2707
6
1992
2770
6
1992
</TEXT>
</DOC>
<DOC>
<DOCNO>1993</DOCNO>
<TEXT>
regular
coulomb
wave
functions
algorithm
292
s22
cacm
september
1970
cody
w
j
paciorek
k
a
coulomb
wave
functions
wave
functions
regular
coulomb
wave
functions
5
12
ca700912
jb
february
10
1978
10
03
am
1993
5
1993
1993
5
1993
1993
5
1993
</TEXT>
</DOC>
<DOC>
<DOCNO>1994</DOCNO>
<TEXT>
decision
table
translation
h
algorithm
394
cacm
september
1970
dial
r
b
decision
table
decision
table
translation
4
19
ca700911
jb
february
10
1978
10
05
am
1354
4
1994
1488
4
1994
1994
4
1994
2053
4
1994
2220
4
1994
2273
4
1994
1237
5
1994
1994
5
1994
1994
5
1994
1994
5
1994
</TEXT>
</DOC>
<DOC>
<DOCNO>1995</DOCNO>
<TEXT>
special
series
summation
with
arbitrary
precision
c6
algorithm
393
cacm
september
1970
abdali
s
k
function
evaluation
series
summation
approximation
5
12
5
13
ca700910
jb
february
10
1978
10
06
am
1995
5
1995
1995
5
1995
1995
5
1995
</TEXT>
</DOC>
<DOC>
<DOCNO>1996</DOCNO>
<TEXT>
systems
of
hyperbolic
pde
d3
algorithm
392
cacm
september
1970
smith
r
r
mccall
d
hyperbolic
p
d
e
characteristic
extrapolation
second
order
p
d
e
quasilinear
p
d
e
5
17
ca700909
jb
february
10
1978
10
08
am
1996
5
1996
1996
5
1996
1996
5
1996
</TEXT>
</DOC>
<DOC>
<DOCNO>1997</DOCNO>
<TEXT>
increasing
the
efficiency
of
quicksort
a
method
is
presented
for
the
analysis
of
various
generalizations
of
quicksort
the
average
asymptotic
number
of
comparisons
needed
is
shown
to
be
an
log
2
n
a
formula
is
derived
expressing
a
in
terms
of
the
probability
distribution
of
the
bound
of
a
partition
this
formula
assumes
a
particularly
simple
form
for
a
generalization
already
considered
by
hoare
namely
choice
of
the
bound
as
median
of
a
random
sample
the
main
contribution
of
this
paper
is
another
generalization
of
quicksort
which
uses
a
bounding
interval
instead
of
a
single
element
as
bound
this
generalization
turns
out
to
be
easy
to
implement
in
a
computer
program
a
numerical
approximation
shows
that
a
1
140
for
this
version
of
quicksort
compared
with
1
386
for
the
original
this
implies
a
decrease
in
number
of
comparisons
of
18
percent
actual
tests
showed
about
15
percent
saving
in
computing
time
cacm
september
1970
van
emden
m
h
sorting
quicksort
information
content
entropy
distribution
of
median
3
73
4
49
5
31
5
6
ca700908
jb
february
10
1978
10
15
am
1175
4
1997
1919
4
1997
1969
4
1997
1997
4
1997
1997
4
1997
2191
4
1997
2216
4
1997
2388
4
1997
2679
4
1997
2679
4
1997
3054
4
1997
3054
4
1997
3121
4
1997
1969
5
1997
1997
5
1997
1997
5
1997
1997
5
1997
308
5
1997
2216
5
1997
2679
5
1997
3054
5
1997
864
6
1997
970
6
1997
1175
6
1997
1175
6
1997
1190
6
1997
1228
6
1997
1880
6
1997
1919
6
1997
1919
6
1997
1969
6
1997
1969
6
1997
1969
6
1997
1980
6
1997
1997
6
1997
1997
6
1997
1997
6
1997
307
6
1997
308
6
1997
308
6
1997
309
6
1997
2017
6
1997
2042
6
1997
2679
6
1997
3187
6
1997
507
6
1997
716
6
1997
776
6
1997
783
6
1997
</TEXT>
</DOC>
<DOC>
<DOCNO>1998</DOCNO>
<TEXT>
complex
matrix
inversion
versus
real
a
comparison
of
complex
matrix
with
real
matrix
inversion
is
made
it
is
shown
that
the
complex
inversion
can
be
up
to
twice
as
fast
as
the
real
inversion
further
the
rounding
error
bound
for
complex
inversion
is
about
one
eighth
that
of
real
for
gaussian
elimination
using
extended
inner
product
accumulation
the
bound
is
half
of
the
real
system
cacm
september
1970
ehrlich
l
w
complex
matrix
inversion
matrix
inversion
inversion
rounding
errors
rounding
error
bound
error
bounds
complex
rounding
error
bounds
5
14
5
11
5
10
ca700907
jb
february
10
1978
10
19
am
1998
5
1998
1998
5
1998
1998
5
1998
</TEXT>
</DOC>
<DOC>
<DOCNO>1999</DOCNO>
<TEXT>
optimal
starting
approximations
for
generating
square
root
for
slow
or
no
divide
on
machine
with
slow
or
no
division
it
is
preferable
to
use
an
iterative
scheme
for
the
square
root
different
from
the
classical
heron
scheme
the
problem
of
optimal
initial
approximants
is
considered
and
some
optimal
polynomial
initial
approximations
are
tabulated
cacm
september
1970
wilson
m
w
square
root
newton
raphson
iteration
optimal
approximants
5
13
ca700906
jb
february
10
1978
1
33
pm
1832
4
1999
1999
4
1999
2159
4
1999
1932
5
1999
1999
5
1999
1999
5
1999
1999
5
1999
</TEXT>
</DOC>
<DOC>
<DOCNO>2000</DOCNO>
<TEXT>
a
variation
of
the
goodman
lance
method
for
the
solution
of
two
point
boundary
value
problems
a
recently
published
method
for
the
interpolative
solution
of
nonlinear
equations
is
improved
and
applied
to
give
a
significant
variation
of
the
goodman
lance
method
for
the
solution
of
two
point
boundary
value
problems
the
resulting
method
applies
in
particular
to
the
numerical
solution
of
optimal
control
problems
in
the
euler
lagrange
formulation
quantitative
estimates
are
presented
which
indicate
that
the
variation
is
nearly
twice
as
fast
on
some
problems
in
the
latter
context
cacm
september
1970
kimble
g
w
goodman
lance
boundary
value
problems
newton
method
nonlinear
equations
optimal
control
optimization
ordinary
differential
equations
secant
method
interpolative
solution
orthogonal
matrices
3
21
5
15
5
17
ca700905
jb
february
10
1978
1
39
pm
2000
5
2000
2000
5
2000
2000
5
2000
</TEXT>
</DOC>
<DOC>
<DOCNO>2001</DOCNO>
<TEXT>
integrating
square
roots
differential
equation
of
the
y
2
f
y
are
difficult
to
integrate
numerically
because
of
the
singularity
at
points
where
f
y
vanishes
a
simple
trick
removes
the
singularity
cacm
september
1970
moler
c
b
solomon
l
p
quadrature
differential
equations
5
16
5
17
ca700904
jb
february
10
1978
1
42
pm
2001
5
2001
2001
5
2001
2001
5
2001
</TEXT>
</DOC>
<DOC>
<DOCNO>2002</DOCNO>
<TEXT>
amesplot
a
higher
level
data
plotting
software
system
amesplot
is
an
extensible
software
system
designed
to
make
the
display
of
data
as
simple
painless
and
neat
as
possible
the
system
described
is
hardware
independent
and
has
been
implemented
on
a
variety
of
installations
of
different
manufacturers
having
diverse
configurations
the
elements
common
to
all
types
of
data
plots
are
outlined
and
the
way
in
which
these
elements
may
be
combined
into
a
system
based
on
simple
modules
is
demonstrated
these
modules
are
specified
independently
and
are
independent
of
the
axis
systems
or
other
attributes
of
the
plot
this
enables
plots
of
any
complexity
to
be
constructed
by
adding
or
replacing
modules
the
basic
syntax
of
amesplot
is
outlined
and
a
brief
description
is
given
of
its
current
utility
software
consisting
of
macros
to
produce
self
scaled
plots
formal
tablets
of
text
interspersed
with
subplots
map
coastlines
and
3
d
plots
the
system
was
formulate
d
in
a
way
such
that
the
user
could
supply
the
minimum
of
information
and
it
should
be
fully
integrable
with
user
program
written
in
most
conventional
higher
languages
the
functions
of
positioning
locating
and
scaling
in
the
layout
of
multiple
subplots
of
axes
labels
and
all
other
elements
of
the
plot
are
handled
automatically
by
the
software
system
unless
the
user
specifies
otherwise
the
structuring
of
plots
from
multiple
independent
self
contained
subplots
is
described
transformation
projection
scaling
rotation
or
shifting
of
entire
plots
or
subplots
by
the
action
of
one
or
more
simple
modules
is
possible
the
user
may
interact
freely
with
amesplot
at
three
levels
enabling
him
to
construct
his
own
data
markers
alphabetic
characters
and
transformations
and
to
produce
a
variety
of
artistic
and
other
effects
cacm
september
1970
hirschsoln
i
computer
graphics
data
potting
data
display
syntax
hardware
independent
software
display
device
independent
software
plot
elements
self
scaled
plots
user
interaction
tablet
organization
map
display
projection
4
13
4
29
4
49
4
9
ca700903
jb
february
10
1978
2
08
pm
2003
4
2002
2002
4
2002
2002
4
2002
2152
4
2002
1767
5
2002
1937
5
2002
2002
5
2002
2002
5
2002
2002
5
2002
</TEXT>
</DOC>
<DOC>
<DOCNO>2003</DOCNO>
<TEXT>
an
interactive
software
system
for
computers
aided
design
an
application
to
circuit
project
the
characteristics
of
an
interactive
software
system
intended
to
constitute
an
interface
between
designer
and
computer
during
various
steps
of
the
design
process
are
presented
the
main
emphasis
is
given
to
the
description
of
the
features
of
the
two
high
level
user
oriented
languages
operating
at
different
levels
on
which
the
interaction
is
based
the
first
one
is
imol
an
interactive
monitor
language
which
is
designed
to
perform
the
overall
and
control
functions
of
the
software
system
its
design
criteria
provide
the
user
with
commands
which
are
both
simple
and
efficient
in
order
to
perform
all
the
functions
needed
in
computer
aided
circuit
design
the
second
one
is
coif
a
circuit
oriented
graphic
language
which
is
designed
to
describe
generate
and
manipulate
graphic
problem
specifications
it
is
an
extension
of
fortran
with
graphic
type
variables
so
that
the
designer
who
is
familiar
with
fortran
need
not
learn
a
new
language
the
application
to
computer
aided
circuit
design
is
in
particular
examined
on
the
other
hand
the
adopted
design
criteria
provide
sufficient
generality
to
extend
the
use
of
the
two
languages
to
different
computer
assisted
applications
cacm
september
1970
bracchi
g
somalvico
m
interaction
graphics
computer
graphics
computer
aided
design
circuit
design
software
system
software
organization
language
monitor
language
graphic
language
extended
fortran
3
24
3
25
4
13
4
22
4
3
ca700902
jb
february
10
1978
2
20
pm
1853
4
2003
2003
4
2003
2003
4
2003
2003
4
2003
2002
4
2003
2152
4
2003
1710
5
2003
1767
5
2003
2003
5
2003
2003
5
2003
2003
5
2003
2105
5
2003
2230
5
2003
2003
6
2003
</TEXT>
</DOC>
<DOC>
<DOCNO>2004</DOCNO>
<TEXT>
a
procedure
for
generation
of
three
dimensional
half
toned
computer
graphics
presentations
a
description
is
given
of
an
algorithm
for
producing
computer
generated
half
tone
presentations
of
three
dimensional
polygonal
surface
structures
this
algorithm
achieves
a
significant
increase
in
speed
of
computation
over
the
warnock
algorithm
developed
at
the
university
of
utah
and
implemented
also
on
the
coordinated
science
laboratory
cdc
1604
computer
system
at
the
university
of
illinois
the
history
leading
to
the
algorithm
development
and
then
the
algorithm
itself
are
described
results
are
presented
and
are
compared
with
computer
runs
achieved
by
the
warnock
approach
an
extension
of
the
procedure
to
variable
position
illumination
sources
is
also
given
cacm
september
1970
bouknight
w
j
half
tone
computer
graphics
line
scan
image
processing
hidden
surface
polygonal
surface
structure
presentations
4
9
ca700901
jb
february
10
1978
2
27
pm
2004
4
2004
2004
4
2004
2687
4
2004
2692
4
2004
1686
5
2004
1915
5
2004
2004
5
2004
2004
5
2004
2004
5
2004
2674
5
2004
2687
5
2004
2828
5
2004
1741
6
2004
1741
6
2004
1751
6
2004
1915
6
2004
2004
6
2004
2004
6
2004
2004
6
2004
2421
6
2004
2687
6
2004
2751
6
2004
2841
6
2004
</TEXT>
</DOC>
<DOC>
<DOCNO>2005</DOCNO>
<TEXT>
proposed
revision
of
american
national
standard
x3
21
1967
rectangular
holes
in
twelve
row
punched
cards
cacm
august
1970
tabulating
card
hollerith
card
keypunch
information
processing
6
35
ca700816
jb
february
10
1978
2
48
pm
2005
5
2005
2005
5
2005
2005
5
2005
</TEXT>
</DOC>
<DOC>
<DOCNO>2006</DOCNO>
<TEXT>
proposed
american
national
standard
cacm
august
1970
kerpelman
c
state
identifiers
state
abbreviation
states
of
the
united
states
data
elements
data
codes
numeric
codes
geopolitical
subdivisions
geographic
codes
3
35
3
57
ca700815
jb
february
10
1978
3
10
pm
2006
5
2006
2006
5
2006
2006
5
2006
</TEXT>
</DOC>
<DOC>
<DOCNO>2007</DOCNO>
<TEXT>
algorithms
policy
revised
august
1970
cacm
august
1970
ca700814
jb
february
10
1978
3
12
pm
2007
5
2007
2007
5
2007
2007
5
2007
</TEXT>
</DOC>
<DOC>
<DOCNO>2008</DOCNO>
<TEXT>
gaussian
quadrature
formulas
algorithm
331
d1
cacm
august
1970
wise
jr
w
r
quadrature
gaussian
quadrature
numerical
integration
weight
function
orthogonal
polynomials
newton
method
successive
deflation
5
16
ca700813
jb
february
10
1978
3
15
pm
2008
5
2008
2008
5
2008
2008
5
2008
</TEXT>
</DOC>
<DOC>
<DOCNO>2009</DOCNO>
<TEXT>
simpson
rule
for
multiple
integration
algorithm
233
d1
cacm
august
1970
proll
l
g
numerical
integration
multiple
integration
simpson
rule
5
16
ca700812
jb
february
10
1978
3
17
pm
2009
5
2009
2009
5
2009
2009
5
2009
</TEXT>
</DOC>
<DOC>
<DOCNO>2010</DOCNO>
<TEXT>
unitary
symmetric
polynomials
z
algorithm
391
cacm
august
1970
mckay
j
symmetric
polynomials
unitary
symmetric
polynomials
5
11
5
30
5
5
ca700811
jb
february
10
1978
3
19
pm
2010
5
2010
2010
5
2010
2010
5
2010
</TEXT>
</DOC>
<DOC>
<DOCNO>2011</DOCNO>
<TEXT>
sequency
ordered
walsh
functions
s22
algorithm
390
cacm
august
1970
hubner
h
walsh
functions
sequency
ordered
walsh
functions
5
12
5
13
ca700810
jb
february
10
1978
3
20
pm
2011
4
2011
2011
5
2011
2011
5
2011
2011
5
2011
2012
5
2011
</TEXT>
</DOC>
<DOC>
<DOCNO>2012</DOCNO>
<TEXT>
binary
ordered
walsh
functions
s22
algorithm
389
cacm
august
1970
hubner
h
walsh
functions
binary
ordered
walsh
functions
5
12
5
13
ca700809
jb
february
10
1978
3
22
pm
2012
4
2012
2011
5
2012
2012
5
2012
2012
5
2012
2012
5
2012
2013
5
2012
2012
6
2012
</TEXT>
</DOC>
<DOC>
<DOCNO>2013</DOCNO>
<TEXT>
rademacher
function
s22
algorithm
388
cacm
august
1970
hubner
h
rademacher
function
5
12
5
13
ca700808
jb
february
10
1978
3
23
pm
2012
5
2013
2013
5
2013
2013
5
2013
2013
5
2013
2013
6
2013
</TEXT>
</DOC>
<DOC>
<DOCNO>2014</DOCNO>
<TEXT>
function
minimization
and
linear
search
e4
algorithm
387
cacm
august
1970
fielding
k
function
minimization
relative
minimum
quasi
newton
method
5
15
ca700807
jb
february
10
1978
3
30
pm
2014
5
2014
2014
5
2014
2014
5
2014
</TEXT>
</DOC>
<DOC>
<DOCNO>2015</DOCNO>
<TEXT>
a
technique
for
generating
almost
optimal
floyd
evans
productions
for
precedence
grammars
a
technique
is
developed
for
generating
almost
optimal
floyd
evans
productions
given
a
precedence
grammar
a
graph
formulation
is
used
for
the
problem
of
merging
productions
the
productions
generated
correspond
to
the
minimum
cost
inverse
arborescence
of
that
graph
the
validity
of
the
technique
is
demonstrated
for
weak
precedence
grammars
defined
here
but
the
productions
mechanically
generated
for
any
precedence
grammar
can
often
be
modified
in
such
a
way
that
correct
almost
optimal
parsers
are
obtained
cacm
august
1970
ichbiah
j
d
morse
s
p
translator
writing
systems
syntactic
analysis
floyd
evans
productions
precedence
grammars
translator
optimization
merger
algorithm
minimum
cost
inverse
arborescence
graph
theory
4
12
5
23
5
32
ca700806
jb
february
10
19783
38
pm
1379
4
2015
1665
4
2015
1693
4
2015
1768
4
2015
1781
4
2015
1787
4
2015
1824
4
2015
1825
4
2015
1836
4
2015
1836
4
2015
1861
4
2015
1945
4
2015
2015
4
2015
2015
4
2015
2060
4
2015
2061
4
2015
2091
4
2015
2110
4
2015
2127
4
2015
2179
4
2015
2187
4
2015
2317
4
2015
2545
4
2015
2546
4
2015
2698
4
2015
2698
4
2015
2708
4
2015
2733
4
2015
3045
4
2015
1477
5
2015
1781
5
2015
2015
5
2015
2015
5
2015
2015
5
2015
2179
5
2015
2423
5
2015
1337
6
2015
1477
6
2015
1491
6
2015
1825
6
2015
2015
6
2015
2015
6
2015
2110
6
2015
3184
6
2015
</TEXT>
</DOC>
<DOC>
<DOCNO>2016</DOCNO>
<TEXT>
the
instrumentation
of
multics
an
array
of
measuring
tools
devised
to
aid
in
the
implementation
of
a
prototype
computer
utility
is
discussed
these
tools
include
special
hardware
clocks
and
data
channels
general
purpose
programmed
probing
and
recording
tools
and
specialized
measurement
facilities
some
particular
measurements
of
interest
in
a
system
which
combines
demand
paging
with
multiprogramming
are
described
in
detail
where
appropriate
insight
into
effectiveness
or
lack
there
of
of
individual
tools
is
provided
cacm
august
1970
gintell
j
w
saltzer
j
h
instrumentation
performance
measurement
multiprogramming
systems
measuring
tools
system
analysis
multics
metering
event
tracing
demand
paging
script
driven
measurement
2
44
4
32
4
39
4
42
ca700805
jb
february
10
1978
3
43
pm
2016
5
2016
2016
5
2016
2016
5
2016
2193
5
2016
2319
5
2016
2894
5
2016
1408
6
2016
1719
6
2016
1749
6
2016
1751
6
2016
1951
6
2016
2016
6
2016
2016
6
2016
2016
6
2016
2017
6
2016
2080
6
2016
2188
6
2016
2203
6
2016
2204
6
2016
3186
6
2016
</TEXT>
</DOC>
<DOC>
<DOCNO>2017</DOCNO>
<TEXT>
sorting
in
a
paging
environment
this
sorting
study
was
part
of
an
extensive
measurement
project
undertaken
on
the
m44
44x
an
experimental
paging
system
which
was
conceived
and
implemented
at
ibm
research
in
order
to
explore
the
virtual
machine
concept
the
study
was
concerned
with
the
implementation
of
sorting
procedures
in
the
context
of
the
dynamic
paging
environment
characteristic
of
virtual
memory
machines
descriptions
of
the
experimental
sort
programs
and
analysis
of
the
performance
measurement
results
obtained
for
them
are
presented
the
insight
gained
from
the
experimental
effort
is
used
to
arrive
at
a
set
of
broad
guidelines
for
writing
sort
programs
for
a
paging
environment
cacm
august
1970
brawn
b
s
gustavson
g
mankin
e
s
sorting
merging
virtual
machines
paging
systems
dynamic
storage
allocation
measurement
of
systems
program
behavior
performance
evaluation
memory
management
4
32
4
49
4
9
5
31
ca700804
jb
february
10
1978
3
51
pm
1050
4
2017
1117
4
2017
1117
4
2017
1175
4
2017
1919
4
2017
1935
4
2017
1936
4
2017
1956
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2017
4
2017
2032
4
2017
2041
4
2017
2146
4
2017
2146
4
2017
2146
4
2017
2216
4
2017
2257
4
2017
2360
4
2017
2451
4
2017
2452
4
2017
677
4
2017
851
4
2017
851
4
2017
860
4
2017
861
4
2017
2017
5
2017
2017
5
2017
2017
5
2017
2319
5
2017
2582
5
2017
2669
5
2017
3054
5
2017
849
5
2017
850
5
2017
851
5
2017
852
5
2017
853
5
2017
854
5
2017
855
5
2017
856
5
2017
858
5
2017
857
5
2017
859
5
2017
860
5
2017
862
5
2017
863
5
2017
864
5
2017
865
5
2017
861
5
2017
866
5
2017
1175
6
2017
1408
6
2017
1719
6
2017
1749
6
2017
1751
6
2017
1751
6
2017
1751
6
2017
1880
6
2017
1901
6
2017
1919
6
2017
1924
6
2017
1969
6
2017
1980
6
2017
1997
6
2017
307
6
2017
308
6
2017
309
6
2017
2016
6
2017
2017
6
2017
2017
6
2017
2017
6
2017
2017
6
2017
2080
6
2017
2130
6
2017
2188
6
2017
2203
6
2017
2204
6
2017
2358
6
2017
2679
6
2017
776
6
2017
</TEXT>
</DOC>
<DOC>
<DOCNO>2018</DOCNO>
<TEXT>
full
table
quadratic
searching
for
scatter
storage
the
quadratic
residue
search
method
for
hash
tables
avoids
much
of
the
clustering
experienced
with
a
linear
search
method
the
simple
quadratic
search
only
accesses
half
the
table
it
has
been
shown
that
when
the
length
of
the
table
is
a
prime
of
the
form
4n
3
where
n
is
an
integer
the
whole
table
may
be
accessed
by
two
quadratic
searches
plus
a
separate
access
for
the
original
entry
point
a
search
method
is
presented
which
is
computationally
simple
has
all
the
advantages
of
the
quadratic
search
and
yet
accesses
all
the
table
in
one
sweep
cacm
august
1970
day
a
c
quadratic
residue
search
method
hash
tables
scatter
storage
dictionary
look
up
quadratic
search
searching
hashing
hash
code
clustering
collisions
3
7
3
73
3
74
ca700803
jb
february
10
1978
3
57
pm
1676
4
2018
1682
4
2018
1728
4
2018
1860
4
2018
1860
4
2018
1973
4
2018
1973
4
2018
1973
4
2018
1992
4
2018
2018
4
2018
2018
4
2018
2018
4
2018
2032
4
2018
2033
4
2018
2033
4
2018
2107
4
2018
2107
4
2018
2109
4
2018
2109
4
2018
2203
4
2018
2203
4
2018
2203
4
2018
2251
4
2018
2251
4
2018
2251
4
2018
2359
4
2018
2524
4
2018
2543
4
2018
2543
4
2018
2543
4
2018
2552
4
2018
2559
4
2018
2573
4
2018
2770
4
2018
2770
4
2018
2974
4
2018
2991
4
2018
3053
4
2018
3053
4
2018
1785
5
2018
1786
5
2018
2018
5
2018
2018
5
2018
2018
5
2018
2109
5
2018
2251
5
2018
2573
5
2018
2770
5
2018
1785
6
2018
1786
6
2018
1786
6
2018
1786
6
2018
1869
6
2018
1973
6
2018
1973
6
2018
1992
6
2018
2018
6
2018
2018
6
2018
2018
6
2018
2107
6
2018
2107
6
2018
2109
6
2018
2109
6
2018
2673
6
2018
</TEXT>
</DOC>
<DOC>
<DOCNO>2019</DOCNO>
<TEXT>
normalization
techniques
for
hand
printed
numerals
family
of
pattern
standardization
techniques
based
on
geometrical
projection
is
applied
to
a
file
of
digitized
hand
printed
numerals
obtained
from
sales
clerks
the
principle
involves
transforming
a
quadrilateral
specified
in
terms
of
the
convex
hull
of
each
pattern
into
a
square
the
amount
of
overlap
within
each
class
of
characters
versus
the
amount
between
classes
is
used
to
evaluate
the
degree
of
normalization
achieved
with
respect
to
other
published
methods
including
size
and
shear
normalization
through
moments
cacm
august
1970
nagy
g
tuong
n
pattern
recognition
character
recognition
normalization
projective
transformation
central
projection
hand
printed
characters
handwriting
linear
transformation
size
normalization
mapping
pattern
preprocessor
3
63
5
14
ca700802
jb
february
10
1978
4
03
pm
2019
5
2019
2019
5
2019
2019
5
2019
</TEXT>
</DOC>
<DOC>
<DOCNO>2020</DOCNO>
<TEXT>
the
allocation
of
computer
resources
is
pricing
the
answer
the
widespread
use
of
complex
third
generation
computing
systems
has
led
to
a
much
broader
concern
about
the
means
by
which
the
resources
of
these
systems
are
allocated
among
the
user
community
one
means
that
is
suggested
more
and
more
frequently
is
a
pricing
procedure
in
this
paper
the
manner
in
which
one
would
like
to
allocate
computing
resources
is
considered
and
then
the
extent
to
which
a
pricing
mechanism
fits
this
mold
is
discussed
inasmuch
as
pricing
must
serve
as
a
rationing
mechanism
at
times
consideration
is
given
to
the
means
by
which
prices
can
be
adjusted
flexibly
in
order
to
make
a
dynamic
allocation
of
resources
consideration
is
also
given
to
the
means
by
which
users
can
be
insulated
from
the
harmful
effects
of
frequent
price
fluctuations
although
the
subject
of
pricing
has
been
given
a
lot
of
attention
recently
a
number
of
misconceptions
persist
about
its
purpose
and
its
operation
an
attempt
is
made
to
clarify
some
of
these
misunderstandings
and
to
highlight
the
advantages
and
disadvantages
and
to
highlight
the
advantages
and
disadvantages
of
pricing
two
illustrative
pricing
systems
are
also
discussed
in
order
to
demonstrate
the
applicability
of
pricing
in
quite
different
environments
cacm
august
1970
nielsen
n
r
allocation
mechanisms
charging
computer
pricing
costing
flexible
pricing
pricing
priority
charges
resource
allocation
user
motivation
1
3
2
4
ca700801
jb
february
10
1978
4
13
pm
2020
4
2020
1735
5
2020
2020
5
2020
2020
5
2020
2020
5
2020
2479
5
2020
2020
6
2020
</TEXT>
</DOC>
<DOC>
<DOCNO>2021</DOCNO>
<TEXT>
a
comment
on
axiomatic
approaches
to
programming
cacm
july
1970
hunt
b
axiomatic
method
proofs
of
programs
homomorphic
structure
in
programming
4
0
4
21
4
22
5
20
5
21
5
23
5
24
ca700716
jb
february
10
1978
4
15
pm
2021
4
2021
2222
4
2021
2227
4
2021
2315
4
2021
2326
4
2021
2470
4
2021
2732
4
2021
2865
4
2021
2896
4
2021
2943
4
2021
3014
4
2021
3068
4
2021
3077
4
2021
3143
4
2021
1834
5
2021
2021
5
2021
2021
5
2021
2021
5
2021
</TEXT>
</DOC>
<DOC>
<DOCNO>2022</DOCNO>
<TEXT>
note
on
an
anomaly
in
paging
cacm
july
1970
pomeranz
j
e
paging
machines
demand
paging
replacement
algorithm
4
30
ca700715
jb
february
10
1978
4
17
pm
2022
4
2022
2085
4
2022
3006
4
2022
1884
5
2022
2022
5
2022
2022
5
2022
2022
5
2022
</TEXT>
</DOC>
<DOC>
<DOCNO>2023</DOCNO>
<TEXT>
a
note
on
data
base
deadlocks
cacm
july
1970
baecker
h
d
data
base
synchronization
locking
deadlock
reference
count
3
73
ca700714
jb
february
10
1978
4
18
pm
1050
4
2023
1393
4
2023
1549
4
2023
2023
4
2023
2023
4
2023
2168
4
2023
3112
4
2023
627
4
2023
106
5
2023
1878
5
2023
2023
5
2023
2023
5
2023
2023
5
2023
</TEXT>
</DOC>
<DOC>
<DOCNO>2024</DOCNO>
<TEXT>
comments
on
a
paper
by
lowe
cacm
july
1970
sattley
k
millstein
r
automatic
segmentation
program
connectivity
5
24
5
32
ca700713
jb
february
10
1978
4
20
pm
2024
5
2024
2024
5
2024
2024
5
2024
</TEXT>
</DOC>
<DOC>
<DOCNO>2025</DOCNO>
<TEXT>
student
t
distribution
jacobi
polynomials
modified
romberg
quadrature
factorial
analysis
of
variance
algorithms
332
344
351
359
cacm
july
1970
sale
a
h
j
fortran
standards
4
0
4
22
ca700712
jb
february
10
1978
4
26
pm
1613
4
2025
1646
4
2025
1900
4
2025
1955
4
2025
2025
4
2025
2154
4
2025
2365
4
2025
2506
4
2025
3060
4
2025
987
5
2025
2025
5
2025
2025
5
2025
2025
5
2025
</TEXT>
</DOC>
<DOC>
<DOCNO>2026</DOCNO>
<TEXT>
exponential
integral
algorithm
385
s13
cacm
july
1970
ng
e
w
ca700711
jb
february
10
1978
4
27
pm
2026
5
2026
2026
5
2026
2026
5
2026
</TEXT>
</DOC>
<DOC>
<DOCNO>2027</DOCNO>
<TEXT>
ricatti
bessel
functions
of
first
and
second
kind
algorithm
22
s17
cacm
july
1970
bray
t
ricatti
bessel
functions
bessel
functions
of
fractional
order
spherical
bessel
functions
5
12
ca700710
jb
february
10
1978
4
29
pm
2027
5
2027
2027
5
2027
2027
5
2027
</TEXT>
</DOC>
<DOC>
<DOCNO>2028</DOCNO>
<TEXT>
greatest
common
divisor
of
n
integers
and
multipliers
a1
algorithm
386
cacm
july
1970
bradley
g
h
greatest
common
divisor
euclidean
algorithm
number
theory
diophantine
equations
3
15
5
10
ca700709
jb
february
10
1978
4
31
pm
2028
4
2028
2521
4
2028
3099
4
2028
2028
5
2028
2028
5
2028
2028
5
2028
2031
5
2028
2521
5
2028
2028
6
2028
2031
6
2028
3135
6
2028
</TEXT>
</DOC>
<DOC>
<DOCNO>2029</DOCNO>
<TEXT>
exponential
integral
s13
algorithm
385
cacm
july
1970
paciorek
k
a
exponential
integral
special
functions
rational
chebyshev
approximation
5
12
ca700708
jb
february
10
1978
4
34
pm
2029
5
2029
2029
5
2029
2029
5
2029
</TEXT>
</DOC>
<DOC>
<DOCNO>2030</DOCNO>
<TEXT>
context
sensitive
parsing
this
paper
presents
a
canonical
form
for
context
sensitive
derivations
and
a
parsing
algorithm
which
finds
each
context
sensitive
analysis
once
and
only
once
the
amount
of
memory
required
by
the
algorithm
is
essentially
no
more
than
the
required
to
store
a
single
complete
derivation
in
addition
a
modified
version
of
the
basic
algorithm
is
presented
which
blocks
infinite
analyses
for
grammars
which
contain
loops
the
algorithm
is
also
compared
with
several
previous
parsers
for
context
sensitive
grammars
and
general
rewriting
systems
and
the
difference
between
the
two
types
of
analyses
is
discussed
the
algorithm
appears
to
be
complementary
to
an
algorithm
by
s
kuno
in
several
respects
including
the
space
time
trade
off
and
the
degree
of
context
dependence
involved
cacm
july
1970
woods
w
a
context
sensitive
grammars
context
sensitive
parsing
formal
grammars
formal
language
theory
parsing
parsing
algorithms
recognition
algorithms
3
42
5
22
5
23
ca700707
jb
february
10
1978
4
43
pm
2030
5
2030
2030
5
2030
2030
5
2030
</TEXT>
</DOC>
<DOC>
<DOCNO>2031</DOCNO>
<TEXT>
algorithm
and
bound
for
the
greatest
common
divisor
of
n
integers
a
new
version
of
the
euclidean
algorithm
for
finding
the
greatest
common
divisor
of
n
integers
a
i
and
multipliers
x
i
such
that
gcd
x
1
a
1
x
n
a
n
is
presented
the
number
of
arithmetic
operations
and
the
number
of
storage
locations
are
linear
in
n
a
theorem
of
lame
that
gives
a
bound
for
the
number
of
iterations
of
the
euclidean
algorithm
for
two
integers
is
extended
to
the
case
of
n
integers
an
algorithm
to
construct
a
minimal
set
of
multipliers
is
presented
a
fortran
program
for
the
algorithm
appears
as
comm
acm
algorithm
386
cacm
july
1970
bradley
g
h
greatest
common
divisor
euclidean
algorithm
number
theory
diophantine
equations
3
15
5
10
ca700706
jb
february
13
1978
8
45
am
2031
4
2031
2031
4
2031
1022
5
2031
2028
5
2031
2031
5
2031
2031
5
2031
2031
5
2031
2521
5
2031
450
5
2031
3099
5
2031
1313
6
2031
2028
6
2031
2031
6
2031
2031
6
2031
2031
6
2031
3135
6
2031
</TEXT>
</DOC>
<DOC>
<DOCNO>2032</DOCNO>
<TEXT>
file
structures
using
hashing
functions
a
general
method
of
file
structuring
is
proposed
which
uses
a
hashing
function
to
define
tree
structure
two
types
of
such
trees
are
examined
and
their
relation
to
trees
studied
in
the
past
is
explainedesults
for
the
probability
distributions
of
path
lengths
are
derived
and
illustrated
cacm
july
1970
coffman
jr
e
g
eve
j
data
structures
tree
structures
file
structures
scatter
tables
hashing
functions
information
retrieval
3
70
3
74
ca700705
jb
february
13
1978
8
49
am
1050
4
2032
1676
4
2032
1682
4
2032
1728
4
2032
1860
4
2032
1935
4
2032
1936
4
2032
1973
4
2032
2017
4
2032
2018
4
2032
2032
4
2032
2032
4
2032
2033
4
2032
2107
4
2032
2109
4
2032
2203
4
2032
2251
4
2032
2257
4
2032
2360
4
2032
2359
4
2032
2451
4
2032
2452
4
2032
2524
4
2032
2543
4
2032
2552
4
2032
2559
4
2032
2991
4
2032
3053
4
2032
1785
5
2032
2032
5
2032
2032
5
2032
2032
5
2032
849
5
2032
</TEXT>
</DOC>
<DOC>
<DOCNO>2033</DOCNO>
<TEXT>
space
time
trade
offs
in
hash
coding
with
allowable
errors
in
this
paper
trade
offs
among
certain
computational
factors
a
given
set
of
messages
two
new
hash
coding
methods
are
examined
and
compared
with
a
particular
conventional
hash
coding
method
the
computational
factors
considered
are
the
size
of
the
hash
area
space
the
time
required
to
identify
a
message
as
a
nonmember
of
the
given
set
reject
time
and
an
allowable
error
frequency
the
new
methods
are
intended
to
reduce
the
amount
of
space
required
to
contain
the
hash
coded
information
from
that
associated
with
conventional
methods
the
reduction
in
space
is
accomplished
by
exploiting
the
possibility
that
a
small
fraction
of
errors
of
commission
may
be
tolerable
in
some
applications
in
particular
applications
in
which
a
large
amount
of
data
is
involved
and
a
core
resident
hash
area
is
consequently
not
feasible
using
conventional
methods
in
such
applications
it
is
envisaged
that
overall
performance
could
be
improved
by
using
a
smaller
core
resident
hash
area
in
conjunction
with
the
new
methods
and
when
necessary
by
using
some
secondary
and
perhaps
time
consuming
test
to
catch
the
small
fraction
of
errors
associated
with
new
methods
an
example
is
discussed
which
illustrates
possible
areas
of
application
for
the
new
methods
analysis
of
the
paradigm
problem
demonstrates
that
allowing
a
small
number
of
test
messages
to
be
falsely
identified
as
members
of
the
given
set
will
permit
a
much
smaller
hash
area
to
be
used
without
increasing
reject
time
cacm
july
1970
bloom
b
h
hash
coding
hash
addressing
scatter
storage
searching
storage
layout
retrieval
trade
offs
retrieval
efficiency
storage
efficiency
3
73
3
74
3
79
ca700704
jb
february
13
1978
9
18
am
1676
4
2033
1682
4
2033
1728
4
2033
1860
4
2033
1860
4
2033
1973
4
2033
1973
4
2033
1992
4
2033
2018
4
2033
2018
4
2033
2032
4
2033
2033
4
2033
2033
4
2033
2033
4
2033
2107
4
2033
2107
4
2033
2109
4
2033
2109
4
2033
2203
4
2033
2203
4
2033
2251
4
2033
2251
4
2033
2359
4
2033
2524
4
2033
2543
4
2033
2543
4
2033
2552
4
2033
2559
4
2033
2573
4
2033
2770
4
2033
2991
4
2033
3053
4
2033
1314
5
2033
1785
5
2033
1786
5
2033
2033
5
2033
2033
5
2033
2033
5
2033
3001
5
2033
2033
6
2033
2139
6
2033
</TEXT>
</DOC>
<DOC>
<DOCNO>2034</DOCNO>
<TEXT>
the
mobile
programming
system
stage2
stage2
is
the
second
level
of
a
bootstrap
sequence
which
is
easily
implemented
on
any
computer
it
is
a
flexible
provided
by
stage2
are
summarized
and
the
implementation
techniques
which
have
made
it
possible
to
have
stage2
running
on
a
new
machine
with
less
than
one
man
week
of
effort
are
discussed
the
approach
has
been
successful
on
over
15
machines
of
widely
varying
characteristics
cacm
july
1970
waite
w
m
bootstrapping
macro
processing
machine
independence
programming
languages
implementation
techniques
4
12
4
22
ca700703
jb
february
13
1978
9
24
am
1160
4
2034
1530
4
2034
1705
4
2034
1781
4
2034
1807
4
2034
1852
4
2034
1945
4
2034
2034
4
2034
2034
4
2034
2034
4
2034
2034
4
2034
2034
4
2034
2034
4
2034
2290
4
2034
2579
4
2034
2923
4
2034
2945
4
2034
984
5
2034
1231
5
2034
1565
5
2034
1852
5
2034
1926
5
2034
1947
5
2034
2034
5
2034
2034
5
2034
2034
5
2034
</TEXT>
</DOC>
<DOC>
<DOCNO>2035</DOCNO>
<TEXT>
conversational
access
to
a
2048
word
machine
lap6
is
an
on
line
system
running
on
a
2048
word
linc
which
provides
full
facilities
for
text
editing
automatic
filing
and
file
maintenance
and
program
preparation
and
assembly
it
focuses
on
the
preparation
and
editing
of
continuously
displayed
23
040
character
text
strings
manuscripts
which
can
be
positioned
anywhere
by
the
user
and
edited
by
simply
adding
and
deleting
lines
as
though
working
directly
on
an
elastic
scroll
other
features
are
available
through
a
uniform
command
set
which
itself
can
be
augmented
by
the
user
the
machine
although
small
aids
program
design
by
providing
display
scope
and
premarked
randomly
addressable
linc
tapes
as
standard
items
in
an
environment
similar
to
that
of
a
sophisticated
terminal
the
tapes
are
logically
similar
to
a
disk
priority
was
given
to
the
design
of
efficient
tape
algorithms
to
minimize
the
limitations
of
the
small
memory
techniques
developed
for
handling
scroll
editing
filing
and
the
layered
system
structure
are
outlined
lap6
is
used
by
about
2000
people
in
11
countries
its
design
was
strongly
influenced
by
performance
criteria
established
in
interviews
held
with
linc
users
themselves
during
the
specification
period
cacm
july
1970
wilkes
m
a
conversational
computer
access
display
editing
display
oriented
system
filing
algorithms
lap6
layering
linc
man
machine
communication
on
line
editing
on
line
efficiency
on
line
environment
scroll
editing
small
machine
system
tape
filing
tape
oriented
system
text
editing
3
73
4
10
4
11
4
19
4
22
4
30
4
40
4
41
ca700702
jb
february
13
1978
9
35
am
2035
5
2035
2035
5
2035
2035
5
2035
2357
5
2035
1523
6
2035
1829
6
2035
2035
6
2035
</TEXT>
</DOC>
<DOC>
<DOCNO>2036</DOCNO>
<TEXT>
an
interactive
command
generating
facility
a
facility
to
permit
conversationally
controlled
tasks
to
be
executed
in
a
noninteractive
environment
is
proposed
a
means
by
which
programs
can
generate
interactive
time
sharing
commands
and
receive
the
corresponding
output
response
is
presented
the
commands
will
be
invoked
as
if
they
had
been
typed
at
a
console
keyboard
it
is
argued
that
this
facility
will
help
overcome
some
of
the
current
limitations
in
man
computer
communication
a
set
of
functions
to
accomplish
the
above
which
could
be
embedded
into
any
string
processing
language
is
suggested
and
necessary
information
pertinent
to
implementation
of
the
facility
on
existing
time
sharing
systems
is
given
cacm
july
1970
grant
c
a
time
sharing
command
languages
pseudo
teletype
interaction
conditional
job
control
operating
systems
3
80
3
81
4
29
4
39
ca700701
jb
february
13
1978
9
43
am
1530
4
2036
1531
4
2036
1565
4
2036
1703
4
2036
1945
4
2036
2036
4
2036
1455
5
2036
2036
5
2036
2036
5
2036
2036
5
2036
</TEXT>
</DOC>
<DOC>
<DOCNO>2037</DOCNO>
<TEXT>
permutations
of
a
set
with
repetitions
algorithm
383
g6
cacm
june
1970
chase
p
j
permutations
and
combinations
permutations
5
39
ca700618
jb
february
13
1978
9
45
am
2037
5
2037
2037
5
2037
2037
5
2037
</TEXT>
</DOC>
<DOC>
<DOCNO>2038</DOCNO>
<TEXT>
combinations
of
m
out
of
n
objects
algorithm
382
g6
cacm
june
1970
chase
p
j
permutations
and
combinations
permutations
5
39
ca700617
jb
february
13
1978
9
59
am
2038
5
2038
2038
5
2038
2038
5
2038
</TEXT>
</DOC>
<DOC>
<DOCNO>2039</DOCNO>
<TEXT>
permanent
function
of
a
square
matrix
i
and
ii
algorithm
361
g6
cacm
june
1970
shriver
b
eberlein
p
j
dixon
r
d
matrix
permanent
determinant
5
30
ca700616
jb
february
13
1978
10
01
am
2039
5
2039
2039
5
2039
2039
5
2039
</TEXT>
</DOC>
<DOC>
<DOCNO>2040</DOCNO>
<TEXT>
modified
romberg
quadrature
algorithm
351
d1
cacm
june
1970
wallick
g
c
numerical
integration
romberg
quadrature
modified
romberg
quadrature
trapezoid
values
rectangle
values
5
16
ca700615
jb
february
13
1978
10
27
am
1040
4
2040
1352
4
2040
1352
4
2040
1352
4
2040
1352
4
2040
1356
4
2040
1883
4
2040
1982
4
2040
1982
4
2040
2040
4
2040
2040
4
2040
2040
4
2040
2040
4
2040
2040
4
2040
2040
4
2040
1241
5
2040
1273
5
2040
1352
5
2040
1356
5
2040
324
5
2040
2040
5
2040
2040
5
2040
2040
5
2040
2355
5
2040
621
5
2040
1418
6
2040
1521
6
2040
1597
6
2040
1883
6
2040
2040
6
2040
2350
6
2040
2354
6
2040
</TEXT>
</DOC>
<DOC>
<DOCNO>2041</DOCNO>
<TEXT>
shellsort
algorithm
201
m1
cacm
june
1970
chandler
j
p
harrison
w
c
sorting
minimal
storage
sorting
digital
computer
sorting
5
31
ca700614
jb
february
13
1978
10
29
am
1175
4
2041
1919
4
2041
2017
4
2041
2041
4
2041
2216
4
2041
2041
5
2041
2041
5
2041
2041
5
2041
864
5
2041
</TEXT>
</DOC>
<DOC>
<DOCNO>2042</DOCNO>
<TEXT>
treesort
3
algorithm
245
m1
the
certification
of
an
algorithm
can
take
the
form
of
a
proof
that
the
algorithm
is
correct
as
an
illustrative
but
practical
example
algorithm
245
treesort
3
for
sorting
an
array
is
proved
correct
cacm
june
1970
london
r
l
proof
of
algorithms
debugging
certification
metatheory
sorting
in
place
sorting
4
42
4
49
5
24
5
31
ca700613
jb
february
13
1978
10
32
am
2042
4
2042
2042
4
2042
2222
4
2042
2356
4
2042
2679
4
2042
2679
4
2042
2844
4
2042
2972
4
2042
970
5
2042
1228
5
2042
2042
5
2042
2042
5
2042
2042
5
2042
2222
5
2042
2679
5
2042
970
6
2042
970
6
2042
1175
6
2042
1190
6
2042
1228
6
2042
1800
6
2042
1818
6
2042
1834
6
2042
1969
6
2042
1997
6
2042
308
6
2042
2042
6
2042
2042
6
2042
3187
6
2042
507
6
2042
716
6
2042
783
6
2042
</TEXT>
</DOC>
<DOC>
<DOCNO>2043</DOCNO>
<TEXT>
eigenvalues
and
eigenvectors
of
a
real
symmetric
matrix
f2
algorithm
384
cacm
june
1970
stewart
g
w
real
symmetric
matrix
eigenvalues
eigenvectors
qr
algorithm
5
14
ca700612
jb
february
13
1978
10
34
am
2043
5
2043
2043
5
2043
2043
5
2043
2349
5
2043
1648
6
2043
1716
6
2043
1794
6
2043
1894
6
2043
2043
6
2043
501
6
2043
613
6
2043
774
6
2043
</TEXT>
</DOC>
<DOC>
<DOCNO>2044</DOCNO>
<TEXT>
permutations
of
a
set
with
repetitions
algorithm
383
g6
cacm
june
1970
chase
p
j
permutations
and
combinations
permutations
5
39
ca700611
jb
february
13
1978
10
36
am
2044
4
2044
2044
4
2044
2044
4
2044
2044
4
2044
2189
4
2044
2417
4
2044
2505
4
2044
2874
4
2044
2908
4
2044
996
5
2044
1558
5
2044
2044
5
2044
2044
5
2044
2044
5
2044
2230
5
2044
521
5
2044
</TEXT>
</DOC>
<DOC>
<DOCNO>2045</DOCNO>
<TEXT>
combinations
of
m
out
of
n
objects
algorithm
382
g6
cacm
june
1970
chase
p
j
permutations
and
combinations
permutations
5
39
ca700610
jb
february
13
1978
10
38
am
2045
5
2045
2045
5
2045
2045
5
2045
2466
5
2045
2834
5
2045
3115
5
2045
907
6
2045
969
6
2045
2045
6
2045
2045
6
2045
2045
6
2045
2417
6
2045
2417
6
2045
2466
6
2045
2466
6
2045
2884
6
2045
579
6
2045
785
6
2045
</TEXT>
</DOC>
<DOC>
<DOCNO>2046</DOCNO>
<TEXT>
a
relational
model
of
data
for
large
shared
data
banks
future
users
of
large
data
banks
must
be
protected
from
having
to
know
how
the
data
is
organized
in
the
machine
the
internal
representation
a
prompting
service
which
supplies
such
information
is
not
a
satisfactory
solution
activities
of
users
at
terminals
and
most
application
programs
should
remain
unaffected
when
the
internal
representation
of
data
is
changed
and
even
when
some
aspects
of
the
external
representation
are
changed
change
in
data
representation
will
often
be
needed
as
a
result
of
changes
in
query
update
and
report
traffic
and
natural
growth
in
the
types
of
stored
information
existing
noninferential
formatted
data
systems
provide
users
with
tree
structured
files
or
slightly
more
general
network
models
of
the
data
in
section
1
inadequacies
of
these
models
are
discussed
a
model
based
on
n
ary
relations
a
normal
form
for
data
base
relations
and
the
concept
of
a
universal
form
for
data
base
relations
and
the
concept
of
a
universal
data
sublanguage
are
introduced
in
section
2
certain
operations
on
relations
other
than
logical
inference
are
discussed
and
applied
to
the
problems
of
redundancy
and
consistency
in
the
user
model
cacm
june
1970
codd
e
f
data
bank
data
base
data
structure
data
organization
hierarchies
of
data
networks
of
data
relations
derivability
redundancy
consistency
composition
join
retrieval
language
predicate
calculus
security
data
integrity
3
70
3
73
3
75
4
20
4
22
4
29
ca700609
jb
february
13
1978
10
57
am
2046
4
2046
2710
4
2046
1515
5
2046
2046
5
2046
2046
5
2046
2046
5
2046
2155
5
2046
2406
5
2046
2710
5
2046
2715
5
2046
2716
5
2046
2717
5
2046
2718
5
2046
2765
5
2046
2817
5
2046
2888
5
2046
2901
5
2046
2957
5
2046
2959
5
2046
2965
5
2046
3087
5
2046
3154
5
2046
1389
6
2046
1515
6
2046
210
6
2046
1936
6
2046
1976
6
2046
1976
6
2046
1989
6
2046
378
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2046
6
2046
2060
6
2046
2110
6
2046
2406
6
2046
2451
6
2046
2451
6
2046
2452
6
2046
2715
6
2046
2715
6
2046
2715
6
2046
3133
6
2046
616
6
2046
616
6
2046
616
6
2046
</TEXT>
</DOC>
<DOC>
<DOCNO>2047</DOCNO>
<TEXT>
incorporating
origin
shifts
into
the
qr
algorithm
for
symmetric
tridiagonal
matrices
the
qr
iteration
for
the
eigenvalues
of
a
symmetric
tridiagonal
matrix
can
be
accelerated
by
incorporating
a
sequence
of
origin
shifts
the
origin
shift
may
be
either
subtracted
directly
from
the
diagonal
elements
of
the
matrix
or
incorporated
by
means
of
an
implicit
algorithm
both
methods
have
drawbacks
the
direct
method
can
unnecessarily
degrade
small
eigenvalues
while
the
implicit
method
can
effectively
loose
the
shift
and
thereby
retard
the
convergence
this
paper
presents
a
new
method
which
has
neither
drawback
cacm
june
1970
stewart
g
w
eigenvalues
eigenvectors
qr
method
origin
shifts
symmetric
tridiagonal
matrix
5
14
ca700608
jb
february
13
1978
11
02
am
2047
5
2047
2047
5
2047
2047
5
2047
</TEXT>
</DOC>
<DOC>
<DOCNO>2048</DOCNO>
<TEXT>
comparison
of
several
adaptive
newton
cotes
quadrature
routines
in
evaluating
definite
integrals
with
peaked
integrands
this
report
compares
the
performance
of
five
different
adaptive
quadrature
schemes
based
on
newton
cotes
2n
1
point
rules
n
1
2
3
4
5
in
approximating
the
set
of
definite
integrals
integral
1
x
2
p
2
dx
with
relative
accuracy
e
cacm
june
1970
hillstrom
k
e
adaptive
newton
cotes
quadrature
quadrature
scheme
comparison
definite
integral
evaluation
adaptive
numerical
in
tegration
newton
cotes
integration
peaked
integrand
integration
quadrature
efficiently
plot
new
cotes
rules
applications
newton
cotes
rules
modifications
5
10
5
16
ca700607
jb
february
13
1978
11
08
am
1352
4
2048
1352
4
2048
1352
4
2048
2048
4
2048
2048
4
2048
2048
4
2048
2074
4
2048
2074
4
2048
2074
4
2048
2093
4
2048
2093
4
2048
2550
4
2048
2048
5
2048
2048
5
2048
2048
5
2048
429
5
2048
786
5
2048
834
5
2048
</TEXT>
</DOC>
<DOC>
<DOCNO>2049</DOCNO>
<TEXT>
accurate
floating
point
summation
this
paper
describes
an
alternate
method
for
summing
a
set
of
floating
point
numbers
comparison
of
the
error
bound
for
this
method
with
that
of
the
standard
summation
method
shows
that
it
is
considerably
less
sensitive
to
propagation
of
round
off
error
cacm
june
1970
linz
p
summation
floating
point
addition
round
off
error
round
off
propagation
5
11
ca700606
jb
february
13
1978
11
36
am
2049
5
2049
2049
5
2049
2049
5
2049
2183
5
2049
2282
5
2049
1328
6
2049
2049
6
2049
2049
6
2049
</TEXT>
</DOC>
<DOC>
<DOCNO>2050</DOCNO>
<TEXT>
automatic
parsing
for
content
analysis
although
automatic
syntactic
and
semantic
analysis
is
not
yet
possible
for
all
of
an
unrestricted
natural
language
text
some
applications
of
which
content
analysis
is
one
do
not
have
such
a
stringent
coverage
requirement
preliminary
studies
show
that
the
harvard
syntactic
analyzer
can
produce
correct
and
unambiguous
identification
of
the
subject
and
object
of
certain
verbs
for
approximately
half
of
the
relevant
occurrences
this
provides
a
degree
of
coverage
for
content
analysis
variables
which
compares
favorably
to
manual
methods
in
variables
which
compares
favorably
to
manual
methods
in
which
only
a
sample
of
the
total
available
text
is
normally
processed
cacm
june
1970
damerau
f
j
content
analysis
parsing
syntactic
analysis
natural
language
processing
information
retrieval
language
analysis
text
processing
3
42
3
71
ca700605
jb
february
13
1978
11
43
am
1350
4
2050
1659
4
2050
1856
4
2050
2050
4
2050
1225
5
2050
2050
5
2050
2050
5
2050
2050
5
2050
</TEXT>
</DOC>
<DOC>
<DOCNO>2051</DOCNO>
<TEXT>
a
pl
i
program
to
assist
the
comparative
linguist
a
practical
pl
i
program
is
described
which
can
assist
comparative
linguists
to
determine
the
regular
sound
correspondences
between
genetically
related
languages
the
investigator
must
arrange
data
for
input
by
aligning
pairs
of
suspected
cognates
the
program
tabulates
the
correspondences
and
uses
list
processing
techniques
to
sort
and
count
them
each
pair
of
words
is
then
assigned
a
relative
value
that
is
a
function
of
the
total
frequency
in
the
data
of
each
correspondence
found
in
that
pair
of
words
the
output
is
a
list
of
all
correspondence
types
with
their
frequency
of
occurrence
in
the
data
and
a
separate
listing
of
each
correspondence
with
all
word
pairs
showing
that
correspondence
unless
their
relative
value
is
below
an
arbitrarily
chosen
cutoff
point
the
article
explains
the
usefulness
as
well
as
the
limitations
of
the
programs
and
illustrates
its
use
with
a
small
portion
of
hypothetical
data
cacm
june
1970
frantz
d
g
comparative
linguistics
natural
language
processing
comparative
method
historical
linguistics
diachronic
linguistics
genetic
relationship
sound
change
sound
correspondence
regular
correspondence
list
processing
3
42
ca700604
jb
february
13
1978
11
51
am
2051
5
2051
2051
5
2051
2051
5
2051
</TEXT>
</DOC>
<DOC>
<DOCNO>2052</DOCNO>
<TEXT>
scheduling
to
reduce
conflict
in
meetings
conflicts
in
scheduling
can
be
treated
as
defining
an
undirected
linear
graph
independently
of
the
relation
of
the
activities
in
conflict
to
additional
constraints
of
time
and
space
each
connected
component
of
such
a
graph
which
can
be
found
by
an
algorithm
described
by
gotlieb
and
corneil
corresponds
to
a
set
of
events
that
must
be
scheduled
at
different
times
cacm
june
1970
grimes
j
e
allocation
conflict
matrix
connected
component
scheduling
spanning
tree
undirected
linear
graph
1
90
3
51
3
59
5
32
ca700603
jb
february
13
1978
11
55
am
1609
4
2052
1847
4
2052
1961
4
2052
2052
4
2052
2052
4
2052
2052
4
2052
2052
4
2052
2209
4
2052
1008
5
2052
1013
5
2052
1504
5
2052
1540
5
2052
2052
5
2052
2052
5
2052
2052
5
2052
</TEXT>
</DOC>
<DOC>
<DOCNO>2053</DOCNO>
<TEXT>
on
the
conversion
of
decision
tables
to
computer
programs
the
use
of
execution
time
diagnostics
in
pinpointing
ambiguities
in
decision
tables
is
discussed
it
is
pointed
out
that
any
attempt
at
resolving
ambiguities
at
compile
time
will
in
general
be
impossible
it
is
shown
that
as
a
consequence
tree
methods
of
converting
decision
tables
to
programs
are
inadequate
in
regard
to
ambiguity
detection
two
algorithms
for
programming
decision
tables
whose
merits
are
simplicity
of
implementation
and
detection
of
ambiguities
at
execution
time
are
presented
the
first
algorithm
is
for
limited
entry
decision
tables
and
clarifies
the
importance
of
proper
coding
of
the
information
in
the
decision
table
the
second
algorithm
programs
a
mixed
entry
decision
table
directly
without
going
through
the
intermediate
step
of
conversion
to
a
limited
entry
form
thereby
resulting
in
storage
economy
a
comparison
of
the
algorithms
and
others
proposed
in
the
literature
is
made
some
features
of
a
decision
table
to
fortran
iv
translator
for
the
ibm
7044
developed
by
the
authors
are
given
cacm
june
1970
muthukrishnan
c
r
rajaraman
v
decision
tables
diagnostic
aids
system
analysis
business
applications
3
50
3
59
4
19
4
29
4
49
ca700602
jb
february
13
1978
12
03
pm
1354
4
2053
1354
4
2053
1354
4
2053
1488
4
2053
1488
4
2053
1684
4
2053
1994
4
2053
2053
4
2053
2053
4
2053
2053
4
2053
2053
4
2053
2053
4
2053
2220
4
2053
2220
4
2053
2220
4
2053
2220
4
2053
2273
4
2053
2273
4
2053
2273
4
2053
2273
4
2053
2453
4
2053
2453
4
2053
2517
4
2053
2518
4
2053
2598
4
2053
2616
4
2053
2726
4
2053
2726
4
2053
2726
4
2053
2856
4
2053
2856
4
2053
2856
4
2053
3034
4
2053
3113
4
2053
1172
5
2053
1237
5
2053
1327
5
2053
1354
5
2053
1684
5
2053
2053
5
2053
2053
5
2053
2053
5
2053
2221
5
2053
2273
5
2053
2453
5
2053
2517
5
2053
2856
5
2053
3034
5
2053
1172
6
2053
1172
6
2053
1172
6
2053
1237
6
2053
1327
6
2053
1327
6
2053
1354
6
2053
1354
6
2053
1354
6
2053
1684
6
2053
1684
6
2053
1683
6
2053
2053
6
2053
2053
6
2053
2053
6
2053
2053
6
2053
2053
6
2053
2053
6
2053
2220
6
2053
2220
6
2053
2220
6
2053
2221
6
2053
2453
6
2053
2517
6
2053
2598
6
2053
753
6
2053
</TEXT>
</DOC>
<DOC>
<DOCNO>2054</DOCNO>
<TEXT>
on
the
feasibility
of
voice
input
to
an
on
line
computer
processing
system
an
on
line
digital
computer
processing
system
is
considered
in
which
an
ordinary
telephone
is
the
complete
terminal
device
input
to
the
computer
being
provided
as
a
sequence
of
spoken
words
and
output
to
the
user
being
audio
responses
from
the
machine
the
feasibility
of
implementing
such
a
system
with
a
fortran
like
algebraic
compiler
as
the
object
processor
is
considered
details
of
a
specific
word
recognition
program
are
given
this
technique
depends
on
three
simplifying
restrictions
namely
a
small
vocabulary
set
known
speakers
and
a
moment
of
silence
between
each
input
word
experimental
results
are
presented
giving
error
rates
for
different
experimental
conditions
as
well
as
the
machine
resources
required
to
accommodate
several
users
at
a
time
the
results
show
that
at
this
time
it
is
both
economically
and
logically
feasible
to
handle
at
least
40
users
at
a
time
with
an
ibm
360
65
computer
cacm
june
1970
elder
h
a
speech
recognition
word
recognition
pattern
matching
pattern
recognition
time
sharing
remote
access
voice
input
speech
input
telephone
input
output
acoustic
signal
spoken
word
input
talking
to
computers
man
machine
interaction
3
63
3
81
4
32
4
41
6
35
ca700601
jb
february
13
1978
12
12
pm
2054
4
2054
1544
5
2054
2054
5
2054
2054
5
2054
2054
5
2054
</TEXT>
</DOC>
<DOC>
<DOCNO>2055</DOCNO>
<TEXT>
subroutine
to
perform
in
situ
transposition
of
a
rectangular
matrix
algorithm
380
cacm
may
1970
lachenmaier
r
rectangular
matrix
transpose
5
14
ca700511
jb
february
13
1978
1
14
pm
2055
5
2055
2055
5
2055
2055
5
2055
2057
5
2055
2392
5
2055
1600
6
2055
1600
6
2055
1894
6
2055
2055
6
2055
2055
6
2055
</TEXT>
</DOC>
<DOC>
<DOCNO>2056</DOCNO>
<TEXT>
gomory
algorithm
263a
h
cacm
may
1970
proll
l
g
linear
programming
integer
variables
dual
method
5
41
ca700510
jb
february
13
1978
1
17
pm
2056
5
2056
2056
5
2056
2056
5
2056
</TEXT>
</DOC>
<DOC>
<DOCNO>2057</DOCNO>
<TEXT>
random
vectors
uniform
in
solid
angle
algorithm
381
g5
cacm
may
1970
knop
r
e
random
number
random
vector
random
number
generator
probability
distribution
frequency
distribution
simulation
monte
carlo
5
5
ca700509
jb
february
13
1978
1
19
pm
2057
4
2057
2057
4
2057
2057
4
2057
2058
4
2057
2349
4
2057
2392
4
2057
2392
4
2057
2416
4
2057
1600
5
2057
1894
5
2057
2055
5
2057
2057
5
2057
2057
5
2057
2057
5
2057
</TEXT>
</DOC>
<DOC>
<DOCNO>2058</DOCNO>
<TEXT>
in
situ
transposition
of
a
rectangular
matrix
algorithm
380
f1
cacm
may
1970
laflin
s
brebner
m
a
rectangular
matrix
transpose
5
14
ca700508
jb
february
13
1978
1
21
pm
2057
4
2058
2058
4
2058
2392
4
2058
2416
4
2058
1600
5
2058
2058
5
2058
2058
5
2058
2058
5
2058
2416
5
2058
1600
6
2058
2058
6
2058
</TEXT>
</DOC>
<DOC>
<DOCNO>2059</DOCNO>
<TEXT>
a
language
for
treating
graphs
a
language
for
the
representation
of
graph
is
described
and
the
formulation
of
graph
operations
such
as
node
and
or
link
deletion
or
insertion
union
intersection
comparison
and
traversal
of
graphs
is
given
graphs
are
represented
by
linked
lists
the
language
is
syntactically
defined
as
an
extension
to
algol
60
and
it
is
translated
into
algol
by
means
of
a
syntax
driven
compiler
application
areas
for
this
language
are
operation
research
network
problems
control
theory
traffic
problems
etc
cacm
may
1970
crespi
reghizzi
s
morpurgo
r
graphs
oriented
nonoriented
multiple
colored
graph
language
extended
algol
operator
precedence
syntax
driven
compiler
operation
research
network
traffic
3
2
3
5
4
2
5
3
ca700507
jb
february
13
1978
1
31
pm
249
4
2059
254
4
2059
272
4
2059
1102
4
2059
1109
4
2059
1140
4
2059
1188
4
2059
1306
4
2059
1464
4
2059
1491
4
2059
1767
4
2059
1781
4
2059
1787
4
2059
1949
4
2059
321
4
2059
2059
4
2059
2126
4
2059
435
4
2059
437
4
2059
463
4
2059
483
4
2059
491
4
2059
2732
4
2059
560
4
2059
583
4
2059
3073
4
2059
627
4
2059
631
4
2059
632
4
2059
642
4
2059
644
4
2059
653
4
2059
680
4
2059
761
4
2059
762
4
2059
763
4
2059
123
4
2059
140
4
2059
919
4
2059
989
4
2059
196
5
2059
2059
5
2059
2059
5
2059
2059
5
2059
2178
5
2059
1303
6
2059
1323
6
2059
2059
6
2059
2127
6
2059
3184
6
2059
</TEXT>
</DOC>
<DOC>
<DOCNO>2060</DOCNO>
<TEXT>
gedanken
a
simple
typeless
language
based
on
the
principle
of
completeness
and
the
reference
concept
gedanken
is
an
experimental
programming
language
with
the
following
characteristics
1
any
value
which
is
permitted
in
some
context
of
the
language
is
permissible
in
any
other
meaningful
context
in
particular
functions
and
labels
are
permissible
results
of
functions
and
values
of
variables
2
assignment
and
indirect
addressing
are
formalized
by
introducing
values
called
reference
which
in
turn
possess
other
values
the
assignment
operation
always
affects
the
relation
between
some
reference
and
its
value
3
all
compound
data
structures
are
treated
as
functions
4
type
declarations
are
not
permitted
the
functional
approach
to
data
structures
and
the
use
of
references
insure
that
any
process
which
accepts
some
data
structure
will
accept
any
logically
equivalent
structure
regardless
of
its
internal
representation
more
generally
any
data
structure
may
be
implicit
i
e
it
may
be
specified
by
giving
an
arbitrary
algorithm
for
computing
or
accessing
its
components
the
existence
of
label
variables
permits
the
construction
of
coroutines
quasi
parallel
processes
and
other
unorthodox
control
mechanisms
a
variety
of
programming
examples
illustrates
the
generality
of
the
language
limitations
and
possible
extensions
are
discussed
briefly
cacm
may
1970
reynolds
j
c
programming
language
data
structure
reference
assignment
coroutine
quasi
parallel
process
typeless
language
applicative
language
lambda
calculus
list
processing
nondeterministic
algorithm
4
20
4
22
5
23
5
24
ca700506
jb
february
13
1978
1
43
pm
1024
4
2060
1051
4
2060
1102
4
2060
1132
4
2060
1379
4
2060
1380
4
2060
1390
4
2060
1486
4
2060
1541
4
2060
1542
4
2060
1549
4
2060
1552
4
2060
1683
4
2060
1693
4
2060
1693
4
2060
1693
4
2060
1706
4
2060
1781
4
2060
1781
4
2060
1781
4
2060
1787
4
2060
1826
4
2060
1836
4
2060
1836
4
2060
1846
4
2060
1854
4
2060
1860
4
2060
1878
4
2060
1945
4
2060
1945
4
2060
1989
4
2060
378
4
2060
2015
4
2060
2060
4
2060
2060
4
2060
2060
4
2060
2060
4
2060
2060
4
2060
2060
4
2060
2060
4
2060
2060
4
2060
2061
4
2060
2061
4
2060
2082
4
2060
2091
4
2060
2091
4
2060
2155
4
2060
2152
4
2060
2168
4
2060
2179
4
2060
2179
4
2060
2179
4
2060
2218
4
2060
2294
4
2060
2340
4
2060
2356
4
2060
2470
4
2060
2546
4
2060
2546
4
2060
2603
4
2060
2698
4
2060
2698
4
2060
2698
4
2060
2708
4
2060
2708
4
2060
2719
4
2060
2723
4
2060
2770
4
2060
2824
4
2060
2838
4
2060
2842
4
2060
2855
4
2060
2879
4
2060
2921
4
2060
2982
4
2060
2986
4
2060
557
4
2060
3045
4
2060
3045
4
2060
3077
4
2060
3080
4
2060
3093
4
2060
3106
4
2060
3112
4
2060
3124
4
2060
3154
4
2060
627
4
2060
106
4
2060
210
5
2060
1380
5
2060
1421
5
2060
1469
5
2060
1477
5
2060
1491
5
2060
1869
5
2060
2060
5
2060
2060
5
2060
2060
5
2060
2110
5
2060
2155
5
2060
2294
5
2060
2558
5
2060
2842
5
2060
3077
5
2060
3150
5
2060
1389
6
2060
1469
6
2060
1471
6
2060
210
6
2060
210
6
2060
210
6
2060
1834
6
2060
378
6
2060
2046
6
2060
2060
6
2060
2060
6
2060
2060
6
2060
2060
6
2060
2060
6
2060
2060
6
2060
2148
6
2060
2192
6
2060
2457
6
2060
2704
6
2060
2842
6
2060
2939
6
2060
2940
6
2060
2941
6
2060
2943
6
2060
3073
6
2060
3148
6
2060
3184
6
2060
</TEXT>
</DOC>
<DOC>
<DOCNO>2061</DOCNO>
<TEXT>
an
algorithm
for
the
construction
of
bounded
context
parsers
an
algorithm
is
described
which
accepts
an
arbitrary
context
free
grammar
and
constructs
a
bounded
context
parser
for
it
whenever
such
a
parser
exists
in
the
first
part
of
the
paper
the
definition
of
a
context
free
grammar
and
the
working
of
a
bounded
context
parser
are
recalled
the
notion
of
reduction
class
for
a
context
free
grammar
is
then
introduced
and
its
connection
with
the
structure
of
a
bounded
context
parser
is
indicated
next
pushdown
automata
which
generate
the
different
reduction
classes
of
a
context
free
grammar
are
defined
finally
the
algorithm
is
described
it
essentially
carries
out
an
exhaustive
study
of
all
possible
runs
of
the
pushdown
automata
generating
the
reduction
classes
in
the
second
part
the
utility
of
the
algorithm
is
discuss
ed
in
the
light
of
the
experience
gained
from
its
use
in
compiler
design
the
algorithm
is
claimed
to
be
particularly
useful
in
the
simultaneous
design
of
a
language
and
a
compiler
for
it
cacm
may
1970
loeckx
j
bounded
context
parsing
bounded
context
syntactic
analysis
parser
construction
syntactical
analyzer
construction
generators
compiler
compilers
compiler
writing
systems
translator
writing
systems
metacompilers
context
free
grammars
formal
languages
pushdown
automata
4
12
5
22
5
23
ca700505
jb
february
13
1978
1
58
pm
1379
4
2061
1491
4
2061
1496
4
2061
1542
4
2061
1683
4
2061
1683
4
2061
1693
4
2061
1693
4
2061
1768
4
2061
1781
4
2061
1781
4
2061
1781
4
2061
1787
4
2061
1787
4
2061
1836
4
2061
1836
4
2061
1945
4
2061
1945
4
2061
1945
4
2061
2015
4
2061
2060
4
2061
2060
4
2061
2061
4
2061
2061
4
2061
2061
4
2061
2061
4
2061
2061
4
2061
2061
4
2061
2082
4
2061
2091
4
2061
2091
4
2061
2152
4
2061
2179
4
2061
2179
4
2061
2179
4
2061
2340
4
2061
2356
4
2061
2546
4
2061
2546
4
2061
2603
4
2061
2698
4
2061
2698
4
2061
2708
4
2061
2708
4
2061
2824
4
2061
2982
4
2061
2986
4
2061
3045
4
2061
3045
4
2061
3093
4
2061
1140
5
2061
1141
5
2061
1477
5
2061
1491
5
2061
1825
5
2061
2061
5
2061
2061
5
2061
2061
5
2061
773
5
2061
</TEXT>
</DOC>
<DOC>
<DOCNO>2062</DOCNO>
<TEXT>
the
application
of
sequential
sampling
to
simulation
an
example
inventory
model
four
different
sequential
sampling
procedures
are
applied
to
the
analysis
of
data
generated
by
a
computer
simulation
experiment
with
a
multi
item
inventory
model
for
each
procedure
the
cost
of
computer
time
required
to
achieve
given
levels
of
statistical
precision
is
calculated
also
the
cost
of
computer
time
using
comparable
fixed
sample
size
methods
is
calculated
the
computer
costs
of
fixed
sample
size
procedures
versus
sequential
sampling
procedures
are
compared
cacm
may
1970
sasser
w
e
burdick
d
s
graham
d
a
naylor
t
h
simulation
inventory
models
sequential
sampling
models
experimental
design
3
31
3
50
3
54
5
5
ca700504
jb
february
13
1978
2
11
pm
2062
5
2062
2062
5
2062
2062
5
2062
</TEXT>
</DOC>
<DOC>
<DOCNO>2063</DOCNO>
<TEXT>
translation
equations
errata
cacm
may
1970
vere
s
ca700503
jb
february
13
1978
2
12
pm
2063
5
2063
2063
5
2063
2063
5
2063
</TEXT>
</DOC>
<DOC>
<DOCNO>2064</DOCNO>
<TEXT>
operations
on
generalized
arrays
with
the
genie
compiler
operations
on
vectors
matrices
and
higher
dimensional
storage
arrays
are
standard
features
of
most
compilers
today
the
elements
of
such
structures
are
usually
restricted
to
be
scalars
for
many
sophisticated
applications
this
restriction
can
impose
cumbersome
data
representations
an
efficient
system
has
been
devised
and
implemented
which
allows
the
elements
of
multidimensional
arrays
to
themselves
be
multidimensional
arrays
this
system
was
developed
from
a
storage
structure
in
which
the
location
length
and
content
of
each
array
is
described
by
a
codeword
which
can
be
interpreted
by
the
system
code
words
may
describe
arrays
containing
more
codewords
thus
providing
all
needed
descriptive
information
for
hyperstructures
of
any
form
cacm
may
1970
sitton
g
a
multidimensional
arrays
matrix
operations
storage
control
subscripting
compilers
4
12
4
29
ca700502
jb
february
13
1978
2
18
pm
2064
4
2064
1677
5
2064
2064
5
2064
2064
5
2064
2064
5
2064
</TEXT>
</DOC>
<DOC>
<DOCNO>2065</DOCNO>
<TEXT>
a
programming
system
for
the
on
line
analysis
of
biomedical
images
a
preliminary
description
of
the
software
for
a
computer
display
system
is
given
with
special
emphasis
on
the
man
machine
interaction
this
system
is
intended
for
a
wide
variety
of
biomedical
applications
as
an
example
the
methods
are
applied
to
the
karyotyping
of
chromosomes
the
system
is
separated
into
four
programming
tasks
picture
transformations
file
maintenance
picture
structuring
and
display
management
picture
structuring
is
considered
as
the
vehicle
for
man
machine
communication
a
prototype
data
format
for
pictures
called
a
picture
form
is
developed
structure
operators
are
defined
which
manipulate
picture
forms
to
produce
new
pictures
forms
many
of
the
ideas
are
taken
from
the
symbolic
mathematical
laboratory
at
mit
conceived
by
marvin
minsky
cacm
may
1970
hodes
l
image
processing
biomedical
image
processing
on
line
image
processing
semiautomatic
image
processing
data
structure
structure
operators
picture
processing
biomedical
picture
processing
on
line
picture
processing
semiautomatic
picture
processing
semiautomatic
karyotyping
karyotyping
list
processing
picture
processing
3
12
3
34
3
63
4
39
6
29
ca700501
jb
february
13
1978
2
27
pm
2065
5
2065
2065
5
2065
2065
5
2065
</TEXT>
</DOC>
<DOC>
<DOCNO>2066</DOCNO>
<TEXT>
an
algol
construction
for
procedures
as
parameters
of
procedures
cacm
april
1970
knight
k
r
algol
procedures
parameters
side
effects
4
22
ca700418
jb
february
13
1978
2
30
pm
2066
4
2066
2066
4
2066
1833
5
2066
1842
5
2066
2066
5
2066
2066
5
2066
2066
5
2066
</TEXT>
</DOC>
<DOC>
<DOCNO>2067</DOCNO>
<TEXT>
comment
on
lawler
multilevel
boolean
minimization
cacm
april
1970
devries
r
c
multilevel
logic
design
generalized
prime
implicants
minimal
forms
minimization
incompletely
specified
functions
6
1
ca700417
jb
february
13
1978
2
32
pm
2067
5
2067
2067
5
2067
2067
5
2067
</TEXT>
</DOC>
<DOC>
<DOCNO>2068</DOCNO>
<TEXT>
comment
on
multiprogramming
under
a
page
on
demand
strategy
cacm
april
1970
smith
j
l
multiprogramming
paging
modeling
4
32
ca700416
jb
february
13
1978
2
34
pm
1892
4
2068
2068
4
2068
2741
4
2068
1526
5
2068
2068
5
2068
2068
5
2068
2068
5
2068
</TEXT>
</DOC>
<DOC>
<DOCNO>2069</DOCNO>
<TEXT>
comments
on
a
paper
by
wallace
and
mason
cacm
april
1970
heess
jr
w
f
page
on
demand
demand
paging
time
sharing
multiprogramming
markovian
computer
models
scheduling
strategies
operating
systems
memory
management
2
44
4
32
4
39
6
20
6
21
ca700415
jb
february
13
1978
2
36
pm
2069
5
2069
2069
5
2069
2069
5
2069
</TEXT>
</DOC>
<DOC>
<DOCNO>2070</DOCNO>
<TEXT>
a
formal
system
for
information
retrieval
from
files
cacm
april
1970
hsiao
d
harary
f
ca700414
jb
february
13
1978
2
37
pm
2070
5
2070
2070
5
2070
2070
5
2070
</TEXT>
</DOC>
<DOC>
<DOCNO>2071</DOCNO>
<TEXT>
filon
quadrature
algorithm
353
d1
cacm
april
1970
fosdick
l
d
einarsson
bo
quadrature
filon
quadrature
integration
filon
integration
fourier
coefficients
fourier
series
5
16
ca700413
jb
february
13
1978
2
40
pm
2071
5
2071
2071
5
2071
2071
5
2071
2393
5
2071
1858
6
2071
2071
6
2071
</TEXT>
</DOC>
<DOC>
<DOCNO>2072</DOCNO>
<TEXT>
modified
romberg
quadrature
algorithm
351
d1
cacm
april
1970
cook
n
d
numerical
integration
romberg
quadrature
trapezoid
values
rectangle
values
error
bound
5
16
ca700412
jb
february
13
1978
2
42
pm
2072
5
2072
2072
5
2072
2072
5
2072
</TEXT>
</DOC>
<DOC>
<DOCNO>2073</DOCNO>
<TEXT>
solution
of
linear
programs
in
0
1
variables
by
implicit
enumeration
algorithm
341
h
cacm
april
1970
guignard
m
m
linear
programming
zero
one
variables
partial
enumeration
5
41
ca700411
jb
february
13
1978
2
43
pm
2073
5
2073
2073
5
2073
2073
5
2073
</TEXT>
</DOC>
<DOC>
<DOCNO>2074</DOCNO>
<TEXT>
sqank
algorithm
379
d1
cacm
april
1970
lyness
j
n
numerical
integration
integration
rule
adaptive
integration
automatic
integration
simpson
rule
numerical
quadrature
quadrature
quadrature
rule
adaptive
quadrature
automatic
quadrature
round
off
error
control
5
16
ca700410
jb
february
13
1978
2
46
pm
1352
4
2074
1352
4
2074
1352
4
2074
1352
4
2074
2048
4
2074
2048
4
2074
2048
4
2074
2074
4
2074
2074
4
2074
2074
4
2074
2074
4
2074
2093
4
2074
2093
4
2074
2093
4
2074
2550
4
2074
2074
5
2074
2074
5
2074
2074
5
2074
2415
5
2074
2550
5
2074
429
5
2074
786
5
2074
834
5
2074
872
5
2074
1040
6
2074
1573
6
2074
1982
6
2074
2074
6
2074
2074
6
2074
429
6
2074
</TEXT>
</DOC>
<DOC>
<DOCNO>2075</DOCNO>
<TEXT>
discretized
newton
like
method
for
solving
a
system
of
simultaneous
nonlinear
equations
algorithm
378
c5
cacm
april
1970
pankiewicz
w
newton
method
nonlinear
equations
interpolating
polynomials
5
15
5
13
ca700409
jb
february
13
1978
2
48
pm
2075
4
2075
2075
5
2075
2075
5
2075
2075
5
2075
472
5
2075
3011
5
2075
2075
6
2075
2302
6
2075
2345
6
2075
2485
6
2075
</TEXT>
</DOC>
<DOC>
<DOCNO>2076</DOCNO>
<TEXT>
cubic
splines
on
uniform
meshes
a
very
simple
procedure
is
presented
for
constructing
cubic
splines
periodic
or
nonperiodic
on
uniform
meshes
arcs
of
two
cubics
suffice
to
construct
a
basis
of
cardinal
splines
an
algorithm
is
given
which
requires
only
minimal
storage
and
computation
and
permits
easy
trade
off
of
one
against
the
other
cacm
april
1970
nilson
e
n
simple
spline
representation
cardinal
splines
uniform
mesh
splines
5
13
ca700408
jb
february
13
1978
2
51
pm
2076
5
2076
2076
5
2076
2076
5
2076
</TEXT>
</DOC>
<DOC>
<DOCNO>2077</DOCNO>
<TEXT>
the
cyclical
majority
problem
the
problem
of
the
cyclical
majority
is
presented
and
some
new
simulated
results
for
3
4
5
40
issues
ad
3
5
7
37
judges
are
reported
cacm
april
1970
pomeranz
j
e
weil
jr
r
l
arrow
paradox
cyclical
majority
simulation
voter
paradox
voting
paradox
3
31
3
35
ca700407
jb
february
13
1978
2
58
pm
2077
5
2077
2077
5
2077
2077
5
2077
</TEXT>
</DOC>
<DOC>
<DOCNO>2078</DOCNO>
<TEXT>
representations
for
space
planning
problems
involving
the
arrangement
of
objects
in
two
or
three
space
where
the
objective
function
primarily
consists
of
derivatives
of
the
distance
between
objects
or
their
arrangement
are
called
space
planning
problems
the
representational
requirements
for
this
problem
area
are
defined
and
compared
with
current
computer
graphic
languages
four
alternative
data
structures
that
allow
automated
space
planning
are
described
and
compared
cacm
april
1970
eastman
c
m
automated
design
data
structures
computer
graphics
computer
aided
design
engineering
design
architectural
design
robots
3
20
3
2
2
3
26
3
41
3
63
ca700406
jb
february
13
1978
3
03
pm
2078
5
2078
2078
5
2078
2078
5
2078
2389
5
2078
2078
6
2078
</TEXT>
</DOC>
<DOC>
<DOCNO>2079</DOCNO>
<TEXT>
on
multiprogramming
machine
coding
and
computer
organization
cacm
april
1970
wirth
n
ca700405
jb
february
13
1978
3
05
pm
2079
5
2079
2079
5
2079
2079
5
2079
</TEXT>
</DOC>
<DOC>
<DOCNO>2080</DOCNO>
<TEXT>
the
nucleus
of
a
multiprogramming
system
this
paper
describes
the
philosophy
and
structure
of
a
multiprogramming
system
that
can
be
extended
with
a
hierarchy
of
operating
systems
to
suit
diverse
requirements
of
program
scheduling
and
resource
allocation
the
system
nucleus
simulates
an
environment
in
which
program
execution
and
input
output
are
handled
uniformly
as
parallel
cooperating
process
es
a
fundamental
set
of
primitives
allows
the
dynamic
creation
and
control
of
a
hierarchy
of
processes
as
well
as
the
communication
among
them
cacm
april
1970
hansen
p
b
multiprogramming
operating
systems
parallel
processes
process
concept
process
communication
message
buffering
process
hierarchy
process
creation
process
removal
4
30
4
31
4
32
4
41
ca700404
jb
february
13
1978
3
10
pm
1657
4
2080
2080
4
2080
2357
4
2080
2536
4
2080
1523
5
2080
2080
5
2080
2080
5
2080
2080
5
2080
2319
5
2080
2320
5
2080
2378
5
2080
2632
5
2080
2738
5
2080
2740
5
2080
2868
5
2080
3127
5
2080
1408
6
2080
1471
6
2080
1471
6
2080
1719
6
2080
1749
6
2080
1749
6
2080
1749
6
2080
1749
6
2080
1751
6
2080
1877
6
2080
2016
6
2080
2017
6
2080
2080
6
2080
2080
6
2080
2080
6
2080
2080
6
2080
2080
6
2080
2080
6
2080
2080
6
2080
2080
6
2080
2150
6
2080
2188
6
2080
2203
6
2080
2204
6
2080
2247
6
2080
2277
6
2080
2356
6
2080
2377
6
2080
2380
6
2080
2558
6
2080
2625
6
2080
2632
6
2080
2777
6
2080
</TEXT>
</DOC>
<DOC>
<DOCNO>2081</DOCNO>
<TEXT>
some
complete
calculi
for
matrices
a
matrix
calculus
is
introduced
with
the
intention
of
developing
data
structures
suitable
for
a
high
level
algorithmic
language
for
mathematical
programming
the
paper
investigates
how
the
special
structure
of
matrices
can
be
described
and
utilized
for
efficient
computing
by
saving
memory
space
and
superfluous
operations
sequences
of
matrices
and
sequences
of
sequences
of
matrices
are
considered
and
matrix
operators
areext
ended
to
sequence
operators
and
cumulative
operators
algorithms
are
given
which
use
symbol
manipulation
of
matrix
expressions
so
as
to
find
the
forms
best
suited
for
computation
these
forms
are
called
normal
forms
several
completeness
results
are
obtained
in
the
sense
that
for
each
expression
an
equivalent
expression
in
normal
form
can
be
found
within
a
specified
calculus
cacm
april
1970
bayer
r
witzgall
c
complete
calculus
data
structures
linear
programming
matrix
matrix
concatenation
matrix
sequences
programming
languages
sequence
operations
symbol
manipulation
4
12
4
22
5
14
5
41
ca700403
jb
february
13
1978
3
18
pm
2081
5
2081
2081
5
2081
2081
5
2081
2253
5
2081
2254
5
2081
2081
6
2081
2081
6
2081
437
6
2081
</TEXT>
</DOC>
<DOC>
<DOCNO>2082</DOCNO>
<TEXT>
syntax
directed
documentation
for
pl
360
the
language
pl
360
together
with
its
phrase
structure
grammar
is
used
as
a
concrete
basis
for
illustrating
an
idea
called
syntax
directed
documentation
this
idea
is
1
to
use
the
phrase
structure
of
a
program
to
define
the
structure
of
a
formal
documentation
for
that
program
2
to
use
the
syntactic
types
and
identifiers
in
the
resulting
structure
to
trigger
the
automatic
formation
of
questions
to
the
programmer
whose
answers
will
become
part
of
that
documentation
and
3
to
provide
automatic
storage
and
retrieval
facilities
so
that
other
programmers
who
want
to
understand
or
modify
the
program
can
access
the
resulting
documentation
which
is
cross
indexed
in
various
ways
by
syntactic
types
and
objects
a
small
pl
360
program
already
found
in
the
literature
is
worked
out
as
an
example
cacm
april
1970
mills
h
d
documentation
syntax
analysis
pl
360
enforced
documentation
indexed
documentation
automatic
interrogation
phase
structured
grammar
syntax
directed
documentation
syntax
processing
3
59
3
79
4
19
4
43
ca700402
jb
february
13
1978
3
28
pm
1542
4
2082
1683
4
2082
1693
4
2082
1781
4
2082
1787
4
2082
1836
4
2082
1945
4
2082
2060
4
2082
2061
4
2082
2082
4
2082
2082
4
2082
2091
4
2082
2152
4
2082
2179
4
2082
2340
4
2082
2356
4
2082
2546
4
2082
2603
4
2082
2698
4
2082
2708
4
2082
2824
4
2082
2982
4
2082
2986
4
2082
3045
4
2082
3093
4
2082
1491
5
2082
2082
5
2082
2082
5
2082
2082
5
2082
2314
5
2082
518
5
2082
1098
6
2082
1626
6
2082
2082
6
2082
2148
6
2082
</TEXT>
</DOC>
<DOC>
<DOCNO>2083</DOCNO>
<TEXT>
creation
and
control
of
internal
data
bases
under
a
fortran
programming
environment
a
method
is
described
for
the
definition
of
a
user
common
structure
and
the
automatic
generation
of
the
necessary
common
dimension
equivalence
and
type
declarations
for
each
of
the
user
routines
the
definition
for
the
common
is
contained
in
an
easy
to
modify
form
thus
allowing
the
control
of
general
communications
of
data
between
routines
the
described
system
has
been
implemented
on
the
ibm
7094
cdc
6000
series
and
the
ibm
360
the
method
has
proved
to
be
invaluable
for
the
definition
and
control
of
common
in
many
large
scale
programs
cacm
april
1970
desalvio
a
j
purdy
j
g
rau
j
data
base
fortran
common
common
equivalencing
subroutine
communication
data
communication
3
73
4
12
4
43
ca700401
jb
february
13
1978
3
34
pm
1086
4
2083
1132
4
2083
1234
4
2083
1263
4
2083
1265
4
2083
1270
4
2083
1323
4
2083
1358
4
2083
1379
4
2083
1380
4
2083
1453
4
2083
1464
4
2083
1484
4
2083
1491
4
2083
1498
4
2083
1613
4
2083
1614
4
2083
1781
4
2083
1825
4
2083
1845
4
2083
1860
4
2083
1900
4
2083
2083
4
2083
2083
4
2083
2154
4
2083
2178
4
2083
2179
4
2083
2252
4
2083
2270
4
2083
2325
4
2083
2341
4
2083
2546
4
2083
2645
4
2083
2652
4
2083
2684
4
2083
2693
4
2083
2842
4
2083
2929
4
2083
2934
4
2083
3069
4
2083
669
4
2083
679
4
2083
691
4
2083
761
4
2083
949
4
2083
989
4
2083
988
5
2083
2083
5
2083
2083
5
2083
2083
5
2083
3184
5
2083
</TEXT>
</DOC>
<DOC>
<DOCNO>2084</DOCNO>
<TEXT>
a
note
on
the
complement
of
inherently
ambiguous
context
free
languages
cacm
march
1970
maurer
h
a
ambiguity
inherent
ambiguity
complement
context
free
language
chomsky
language
phrase
structure
language
production
system
type
2
language
bounded
language
5
22
5
24
ca700314
jb
february
13
1978
3
37
pm
2084
5
2084
2084
5
2084
2084
5
2084
</TEXT>
</DOC>
<DOC>
<DOCNO>2085</DOCNO>
<TEXT>
comment
on
a
paging
anomaly
cacm
march
1970
dempster
j
r
h
paging
machines
demand
paging
replacement
algorithm
4
30
ca700313
jb
february
13
1978
3
39
pm
1892
4
2085
1901
4
2085
2022
4
2085
2085
4
2085
2085
4
2085
2095
4
2085
2218
4
2085
2277
4
2085
2319
4
2085
2329
4
2085
2358
4
2085
2373
4
2085
2380
4
2085
2434
4
2085
2499
4
2085
2501
4
2085
2582
4
2085
2669
4
2085
2828
4
2085
2863
4
2085
2881
4
2085
2928
4
2085
2996
4
2085
3006
4
2085
3006
4
2085
3067
4
2085
1751
5
2085
1884
5
2085
2085
5
2085
2085
5
2085
2085
5
2085
</TEXT>
</DOC>
<DOC>
<DOCNO>2086</DOCNO>
<TEXT>
another
method
of
converting
from
hexadecimal
to
decimal
cacm
march
1970
kailas
m
v
binary
decimal
conversion
computer
arithmetic
categories
ca700312
jb
february
13
1978
3
41
pm
2086
5
2086
2086
5
2086
2086
5
2086
</TEXT>
</DOC>
<DOC>
<DOCNO>2087</DOCNO>
<TEXT>
a
number
system
for
the
permutations
cacm
march
1970
pager
d
permutation
ordering
number
number
system
p
number
combinatorial
4
49
5
39
ca700311
jb
february
13
1978
3
42
pm
2087
4
2087
2189
4
2087
3188
4
2087
1594
5
2087
2087
5
2087
2087
5
2087
2087
5
2087
2189
5
2087
1594
6
2087
2087
6
2087
3191
6
2087
521
6
2087
</TEXT>
</DOC>
<DOC>
<DOCNO>2088</DOCNO>
<TEXT>
netflow
algorithm
336
h
cacm
march
1970
bray
t
a
witzgall
c
capacitated
network
linear
programming
minimum
cost
flow
network
flow
out
of
kilter
5
32
5
41
ca700310
jb
february
13
1978
3
44
pm
2088
5
2088
2088
5
2088
2088
5
2088
</TEXT>
</DOC>
<DOC>
<DOCNO>2089</DOCNO>
<TEXT>
prime
number
algorithm
310
a1
cacm
march
1970
rapp
d
g
scott
l
d
prime
numbers
generator
5
0
ca700309
jb
february
13
1978
3
45
pm
2089
5
2089
2089
5
2089
2089
5
2089
</TEXT>
</DOC>
<DOC>
<DOCNO>2090</DOCNO>
<TEXT>
symbolic
expansion
of
algebraic
expressions
algorithm
377
r2
cacm
march
1970
levine
m
j
algebra
symbolic
algebra
symbolic
multiplication
algebraic
distribution
algebraic
multiplication
distribution
algorithm
multiplication
algorithm
product
algorithm
polynomial
distribution
polynomial
expansion
3
10
3
17
3
20
4
13
4
90
ca700308
jb
february
13
1978
3
49
pm
2090
5
2090
2090
5
2090
2090
5
2090
</TEXT>
</DOC>
<DOC>
<DOCNO>2091</DOCNO>
<TEXT>
pdel
a
language
for
partial
differential
equations
conventional
computer
methods
available
to
solve
continuous
system
problems
characterized
by
partial
differential
equations
are
very
time
consuming
and
cumbersome
a
convenient
easy
to
learn
and
to
use
high
level
problem
oriented
language
to
solve
and
study
partial
differential
equation
problems
has
been
designed
a
practical
translator
for
the
language
has
also
been
designed
and
a
working
version
of
it
has
been
constructed
for
a
significant
portion
of
the
language
this
partial
differential
equation
language
pdel
is
outlined
and
the
highlights
of
the
translator
are
briefly
summarized
cacm
march
1970
cardenas
a
f
karplus
w
j
problem
oriented
or
digital
simulation
language
partial
differential
equations
translator
pl
1
preprocessor
pl
1
finite
difference
algorithms
3
1
3
2
4
22
5
17
ca700307
jb
february
13
1978
4
18
pm
1379
4
2091
1503
4
2091
1542
4
2091
1683
4
2091
1693
4
2091
1693
4
2091
1781
4
2091
1781
4
2091
1781
4
2091
1787
4
2091
1836
4
2091
1836
4
2091
1860
4
2091
1945
4
2091
1945
4
2091
2015
4
2091
2060
4
2091
2060
4
2091
2061
4
2091
2061
4
2091
2082
4
2091
2091
4
2091
2091
4
2091
2091
4
2091
2152
4
2091
2179
4
2091
2179
4
2091
2340
4
2091
2356
4
2091
2546
4
2091
2546
4
2091
2603
4
2091
2698
4
2091
2698
4
2091
2708
4
2091
2708
4
2091
2824
4
2091
2982
4
2091
2986
4
2091
3045
4
2091
3045
4
2091
3093
4
2091
1366
5
2091
1477
5
2091
1491
5
2091
2091
5
2091
2091
5
2091
2091
5
2091
</TEXT>
</DOC>
<DOC>
<DOCNO>2092</DOCNO>
<TEXT>
a
deductive
question
answer
for
natural
language
inference
the
question
answering
aspects
of
the
protosynthex
iii
pro
totype
language
processing
system
are
described
and
exemplified
in
detail
the
system
is
written
in
lisp
1
5
and
operates
on
the
q
32
time
sharing
system
the
system
data
structures
and
their
semantic
organization
the
deductive
question
answering
formalism
of
relational
properties
and
complex
relation
forming
operators
and
the
question
answering
procedures
which
employ
these
features
in
their
operation
are
all
described
and
illustrated
examples
of
the
system
performance
and
of
the
limitations
of
its
question
answering
capability
are
presented
and
discussed
it
is
shown
that
the
use
of
semantic
information
in
deductive
question
answering
greatly
facilitates
the
process
and
that
a
top
down
procedure
which
works
from
question
to
answer
enables
effective
use
to
be
made
of
this
information
it
is
concluded
that
the
development
of
protosynthex
iii
into
a
practically
useful
system
to
work
with
large
data
bases
is
possible
but
will
require
changes
in
both
the
data
structures
and
the
algorithms
used
for
question
answering
cacm
march
1970
schwarcz
r
m
burger
j
f
simmons
r
f
question
answering
natural
language
protosynthex
iii
lisp
semantics
artificial
intelligence
computational
linguistics
language
processing
fact
retrieval
3
42
3
61
ca700306
jb
february
13
1978
4
30
pm
2092
4
2092
2127
4
2092
1527
5
2092
2092
5
2092
2092
5
2092
2092
5
2092
2396
5
2092
1487
6
2092
1856
6
2092
2092
6
2092
2127
6
2092
</TEXT>
</DOC>
<DOC>
<DOCNO>2093</DOCNO>
<TEXT>
a
comparison
of
error
improvement
estimates
for
adaptive
trapezoid
integration
various
simple
choices
of
error
improvement
estimates
for
the
trapezoid
rule
are
studied
to
demonstrate
a
comparison
procedure
which
is
relatively
independent
of
the
profusion
of
adaptive
search
and
stopping
strategies
comparisons
are
based
on
x
r
the
inclusion
of
the
noninteger
powers
makes
this
more
realistic
than
the
usual
polynomial
based
comparison
behavior
near
the
singularity
was
found
to
be
the
dominant
factor
and
a
new
estimate
based
on
a
constant
curvature
assumption
and
parametric
differences
was
considered
slightly
better
than
the
other
choices
considered
cacm
march
1970
schweikert
d
g
adaptive
integration
error
improvement
estimate
trapezoid
rule
nonpolynomial
error
criteria
5
16
ca700305
jb
february
13
1978
4
47
pm
1352
4
2093
1352
4
2093
1352
4
2093
1352
4
2093
2048
4
2093
2048
4
2093
2074
4
2093
2074
4
2093
2074
4
2093
2093
4
2093
2093
4
2093
2093
4
2093
2093
4
2093
2093
4
2093
2093
4
2093
2550
4
2093
2550
4
2093
1092
5
2093
1298
5
2093
1573
5
2093
2093
5
2093
2093
5
2093
2093
5
2093
429
5
2093
834
5
2093
872
5
2093
</TEXT>
</DOC>
<DOC>
<DOCNO>2094</DOCNO>
<TEXT>
on
an
algorithm
for
nonlinear
minimax
approximation
certain
nonlinear
minimax
approximation
problems
are
characterize
d
by
properties
which
permit
the
application
of
special
algorithms
mainly
based
on
the
exchange
algorithms
of
remes
1934
1935
for
their
solution
in
this
paper
the
application
to
problems
of
this
type
of
a
general
nonlinear
algorithm
due
to
osborne
and
watson
1969
is
considered
examples
are
given
to
illustrate
that
this
algorithm
can
give
satisfactory
results
and
in
particular
can
successfully
solve
problems
which
lead
to
difficulties
with
the
more
conventional
specialist
method
cacm
march
1970
watson
g
a
minimax
approximation
nonlinear
approximation
linear
programming
5
13
5
41
ca700304
jb
february
13
1978
4
52
pm
1932
4
2094
2094
4
2094
1566
5
2094
2094
5
2094
2094
5
2094
2094
5
2094
2352
5
2094
2353
5
2094
2094
6
2094
2094
6
2094
</TEXT>
</DOC>
<DOC>
<DOCNO>2095</DOCNO>
<TEXT>
measurements
of
segment
size
distributions
of
segment
sizes
measured
under
routine
operating
con
ditions
on
a
computer
system
which
utilizes
variable
sized
segments
the
burroughs
b5500
are
discussed
the
most
striking
feature
of
the
measurements
is
the
large
number
of
small
segments
about
60
percent
of
the
segments
in
use
contain
less
than
40
words
although
the
results
are
certainly
not
installation
independent
and
although
they
are
particularly
influenced
by
features
of
the
b5500
algol
system
they
should
be
relevant
to
the
design
of
new
computer
systems
especially
with
respect
to
the
organization
of
paging
schemes
cacm
march
1970
batson
a
ju
s
wood
d
c
storage
allocation
segmentation
segment
sizes
page
sizes
paging
resource
allocation
memory
allocation
core
utilization
4
32
6
2
6
34
6
9
ca700303
jb
february
13
1978
4
58
pm
1879
4
2095
1884
4
2095
1892
4
2095
1892
4
2095
1901
4
2095
1901
4
2095
1924
4
2095
2085
4
2095
2095
4
2095
2095
4
2095
2095
4
2095
2095
4
2095
2218
4
2095
2218
4
2095
2218
4
2095
2277
4
2095
2277
4
2095
2297
4
2095
2297
4
2095
2319
4
2095
2329
4
2095
2358
4
2095
2365
4
2095
2373
4
2095
2374
4
2095
2380
4
2095
2434
4
2095
2499
4
2095
2498
4
2095
2501
4
2095
2526
4
2095
2582
4
2095
2596
4
2095
2667
4
2095
2668
4
2095
2669
4
2095
2734
4
2095
2828
4
2095
2862
4
2095
2863
4
2095
2863
4
2095
2881
4
2095
2902
4
2095
2911
4
2095
2928
4
2095
2996
4
2095
3000
4
2095
3006
4
2095
3067
4
2095
1728
5
2095
1751
5
2095
1754
5
2095
1879
5
2095
2095
5
2095
2095
5
2095
2095
5
2095
2218
5
2095
2734
5
2095
3000
5
2095
1380
6
2095
1572
6
2095
1728
6
2095
1751
6
2095
1752
6
2095
1810
6
2095
1879
6
2095
1879
6
2095
1879
6
2095
2095
6
2095
2095
6
2095
2095
6
2095
2864
6
2095
</TEXT>
</DOC>
<DOC>
<DOCNO>2096</DOCNO>
<TEXT>
experiments
with
the
m
n
tree
searching
program
the
m
n
procedure
is
an
improvement
to
the
mini
max
backing
up
procedure
widely
used
in
computer
program
for
game
playing
and
other
purposes
it
is
based
on
the
principle
that
it
is
desirable
to
have
many
options
when
making
decisions
in
the
face
of
uncertainty
the
mini
max
procedure
assigns
to
a
max
min
node
the
value
of
the
highest
lowest
valued
successor
to
that
node
the
m
n
procedure
assigns
to
a
max
min
node
some
function
of
the
m
n
highest
lowest
valued
successors
an
m
n
procedure
was
written
in
lisp
to
play
the
game
of
kalah
and
it
was
demonstrated
that
the
m
n
procedure
is
significantly
superior
to
the
mini
max
procedure
the
statistical
significance
of
important
conclusions
is
given
since
information
on
statistical
significance
has
often
been
lacking
in
papers
on
computer
experiments
in
the
artificial
intelligence
field
these
experiments
can
perhaps
serve
as
a
model
for
future
work
cacm
march
1970
slagle
j
r
dixon
j
k
artificial
intelligence
heuristic
program
tree
searching
lisp
kalah
game
playing
decision
theory
mini
max
backing
up
procedure
backing
up
procedures
3
60
3
64
3
66
ca700302
jb
february
14
1978
8
34
am
1515
4
2096
2096
4
2096
2127
4
2096
2210
4
2096
1155
5
2096
2096
5
2096
2096
5
2096
2096
5
2096
2215
5
2096
2096
6
2096
</TEXT>
</DOC>
<DOC>
<DOCNO>2097</DOCNO>
<TEXT>
a
program
to
teach
programming
the
teach
system
was
developed
at
mit
to
ease
the
cost
and
improve
the
results
of
elementary
instruction
in
programming
to
the
student
teach
offers
loosely
guided
experience
with
a
conversational
language
which
was
designed
with
teaching
in
mind
faculty
involvement
is
minimal
a
term
of
experience
with
teach
is
discussed
pedagogically
the
system
appears
to
be
successful
straightforward
reimplementation
will
make
it
economically
successful
as
well
similar
programs
of
profound
tutorial
skill
will
appear
only
as
the
results
of
extended
research
the
outlines
of
his
research
are
beginning
to
become
clear
cacm
march
1970
fenichel
r
r
weizenbaum
j
yochelson
j
c
elementary
programming
computer
assisted
learning
uncl
teach
1
52
ca700301
jb
february
14
1978
8
42
am
2097
5
2097
2097
5
2097
2097
5
2097
2153
5
2097
3003
5
2097
1659
6
2097
1678
6
2097
1927
6
2097
1945
6
2097
2097
6
2097
2097
6
2097
2147
6
2097
2163
6
2097
2187
6
2097
2329
6
2097
2345
6
2097
2367
6
2097
2407
6
2097
2478
6
2097
2479
6
2097
2480
6
2097
2538
6
2097
</TEXT>
</DOC>
<DOC>
<DOCNO>2098</DOCNO>
<TEXT>
t
test
probabilities
algorithm
321
student
t
distribution
algorithm
344
cacm
february
1970
hill
g
w
loughhead
m
t
test
student
t
statistic
distribution
function
approximation
5
12
5
5
ca700217
jb
february
14
1978
8
45
am
2098
5
2098
2098
5
2098
2098
5
2098
</TEXT>
</DOC>
<DOC>
<DOCNO>2099</DOCNO>
<TEXT>
eigenvalues
and
eigen
vectors
of
a
real
general
matrix
algorithm
343
f
cacm
february
1970
knoble
h
d
norm
characteristic
equation
degenerate
eigen
system
diagonalizable
matrix
defective
matrix
5
14
ca700216
jb
february
14
1978
9
43
am
1876
4
2099
1968
4
2099
2099
4
2099
2099
4
2099
2335
4
2099
1662
5
2099
1707
5
2099
1968
5
2099
2099
5
2099
2099
5
2099
2099
5
2099
1662
6
2099
2099
6
2099
</TEXT>
</DOC>
<DOC>
<DOCNO>2100</DOCNO>
<TEXT>
ortho
algorithm
127
f5
cacm
february
1970
barrodale
i
orthogonalization
approximation
5
13
5
17
5
5
ca700215
jb
february
14
1978
9
45
am
2100
5
2100
2100
5
2100
2100
5
2100
</TEXT>
</DOC>
<DOC>
<DOCNO>2101</DOCNO>
<TEXT>
least
squares
fit
by
f
x
acos
bx
c
algorithm
376
e2
cacm
february
1970
spath
h
nonlinear
least
squares
fit
5
15
ca700214
jb
february
14
1978
9
47
am
2101
4
2101
2102
4
2101
1639
5
2101
2101
5
2101
2101
5
2101
2101
5
2101
</TEXT>
</DOC>
<DOC>
<DOCNO>2102</DOCNO>
<TEXT>
fitting
data
to
one
exponential
algorithm
375
e2
cacm
february
1970
spath
h
nonlinear
least
squares
fit
5
15
ca700213
jb
february
14
1978
9
49
pm
2101
4
2102
2102
4
2102
1639
5
2102
2102
5
2102
2102
5
2102
2102
5
2102
</TEXT>
</DOC>
<DOC>
<DOCNO>2103</DOCNO>
<TEXT>
restricted
partition
generator
algorithm
374
a1
cacm
february
1970
white
j
s
partitions
restricted
partitions
sums
of
integers
restricted
sums
5
39
ca700212
jb
february
14
1978
9
49
am
2103
4
2103
1218
5
2103
2103
5
2103
2103
5
2103
2103
5
2103
</TEXT>
</DOC>
<DOC>
<DOCNO>2104</DOCNO>
<TEXT>
number
of
doubly
restricted
partitions
algorithm
373
a1
cacm
february
1970
white
j
s
partitions
restricted
partitions
sums
of
integers
restricted
sums
5
39
ca700211
jb
february
14
1978
9
52
am
2104
4
2104
2489
4
2104
1219
5
2104
2104
5
2104
2104
5
2104
2104
5
2104
2489
5
2104
1219
6
2104
2104
6
2104
</TEXT>
</DOC>
<DOC>
<DOCNO>2105</DOCNO>
<TEXT>
an
interactive
computer
system
using
graphical
flowchart
input
an
interactive
computer
system
operational
on
a
graphical
computer
terminal
is
described
this
system
was
designed
to
demonstrate
a
method
of
programming
by
computer
interpretation
of
a
flowchart
the
user
draws
a
description
of
a
sampled
data
system
and
specifies
description
is
transmitted
to
a
large
scale
computer
the
design
is
simulated
and
a
graphic
representation
of
the
processed
signal
is
returned
to
the
scope
a
successful
design
may
require
numerous
modifications
of
the
original
design
a
graphical
interactive
system
provides
an
environment
to
perform
this
iterative
process
efficiently
and
effectively
cacm
february
1970
robins
m
f
beyer
j
d
simulation
program
graphical
input
output
sampled
data
systems
3
20
3
24
ca700210
jb
february
14
1978
9
57
am
2003
5
2105
2105
5
2105
2105
5
2105
2105
5
2105
1710
6
2105
1767
6
2105
2105
6
2105
</TEXT>
</DOC>
<DOC>
<DOCNO>2106</DOCNO>
<TEXT>
computer
education
in
a
graduate
school
of
management
several
years
of
experience
have
led
to
the
belief
that
the
creative
design
and
evaluation
of
management
information
systems
requires
a
thorough
understanding
of
the
related
computer
technology
concepts
such
as
paging
and
priority
interrupt
systems
can
best
be
explained
at
the
machine
language
level
any
machine
used
for
exposition
should
fulfill
several
criteria
it
should
1
raise
as
few
spurious
issues
as
possible
2
allow
without
undue
effort
the
solution
of
interesting
problems
3
be
capable
of
exposing
all
outstanding
issues
of
significance
capable
of
exposing
all
outstanding
issues
of
significance
within
the
chosen
machine
4
be
seful
for
pursuing
issues
in
great
depth
when
appropriate
5
not
be
committed
to
the
equipment
provided
by
any
manufacturer
6
be
able
to
provide
the
student
with
diagnostic
aids
to
a
great
depth
7
allow
the
student
ready
access
to
the
machine
8
be
capable
of
extension
to
expose
new
issues
as
they
come
along
we
have
constructed
a
simulated
machine
and
its
associated
software
which
meets
these
criteria
this
system
called
the
prism
system
is
documented
by
a
primer
and
a
reference
manual
cacm
february
1970
ness
d
n
green
r
s
martin
w
a
moulton
g
a
education
simulation
machine
language
management
information
systems
interpreters
1
52
3
51
4
13
4
21
ca700209
jb
february
14
1978
10
15
am
2106
5
2106
2106
5
2106
2106
5
2106
</TEXT>
</DOC>
<DOC>
<DOCNO>2107</DOCNO>
<TEXT>
the
quadratic
quotient
method
a
hash
code
eliminating
secondary
clustering
secondary
clustering
as
a
cause
of
hash
code
inefficiency
is
discussed
and
a
new
hashing
method
based
on
its
elimination
is
presented
comparisons
with
previous
methods
are
made
both
analytically
and
empirically
cacm
february
1970
bell
j
r
hashing
hash
code
scatter
storage
calculated
address
clustering
search
symbol
table
collisions
keys
table
look
up
3
74
4
9
ca700208
jb
february
14
1978
10
18
am
1676
4
2107
1682
4
2107
1728
4
2107
1860
4
2107
1860
4
2107
1973
4
2107
1973
4
2107
1992
4
2107
2018
4
2107
2018
4
2107
2032
4
2107
2033
4
2107
2033
4
2107
2107
4
2107
2107
4
2107
2109
4
2107
2109
4
2107
2203
4
2107
2203
4
2107
2251
4
2107
2251
4
2107
2359
4
2107
2524
4
2107
2543
4
2107
2543
4
2107
2552
4
2107
2559
4
2107
2573
4
2107
2770
4
2107
2991
4
2107
3053
4
2107
1785
5
2107
1786
5
2107
1973
5
2107
1992
5
2107
2107
5
2107
2107
5
2107
2107
5
2107
2138
5
2107
2203
5
2107
2251
5
2107
2530
5
2107
2537
5
2107
2543
5
2107
2559
5
2107
2573
5
2107
2991
5
2107
3053
5
2107
3083
5
2107
911
6
2107
1328
6
2107
1329
6
2107
1785
6
2107
1785
6
2107
1785
6
2107
1785
6
2107
1785
6
2107
1785
6
2107
1785
6
2107
1786
6
2107
1786
6
2107
1786
6
2107
1786
6
2107
1786
6
2107
1786
6
2107
1973
6
2107
1973
6
2107
1973
6
2107
1973
6
2107
1973
6
2107
1992
6
2107
332
6
2107
2018
6
2107
2018
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2107
6
2107
2109
6
2107
2109
6
2107
2109
6
2107
2109
6
2107
2109
6
2107
2203
6
2107
2412
6
2107
2530
6
2107
2537
6
2107
2543
6
2107
2543
6
2107
2552
6
2107
2673
6
2107
2707
6
2107
2770
6
2107
492
6
2107
</TEXT>
</DOC>
<DOC>
<DOCNO>2108</DOCNO>
<TEXT>
a
variation
on
sorting
by
address
calculation
the
principles
of
address
calculation
and
merging
are
combined
to
yield
an
efficient
sorting
technique
detailed
flowcharts
of
the
most
important
program
steps
are
included
the
characteristics
of
the
proposed
sort
are
discussed
cacm
february
1970
jones
b
sorting
address
calculation
merging
order
sequence
creation
4
49
5
31
ca700207
jb
february
14
1978
10
24
am
2108
5
2108
2108
5
2108
2108
5
2108
</TEXT>
</DOC>
<DOC>
<DOCNO>2109</DOCNO>
<TEXT>
the
use
of
quadratic
residue
research
a
quadratic
residue
search
method
has
previously
been
suggested
to
avoid
the
clustering
usually
encountered
when
hash
address
collisions
occur
and
linear
search
methods
are
used
the
search
size
because
of
the
property
of
quadratic
residues
is
limited
to
one
half
of
the
storage
table
it
is
shown
that
for
some
classes
of
prime
numbers
the
complement
of
the
set
of
quadratic
residues
can
easily
be
determined
and
hence
the
entire
table
of
size
p
where
p
is
that
prime
number
can
be
searched
cacm
february
1970
radke
c
e
quadratic
residue
search
method
hash
addressing
address
clustering
scatter
storage
file
searching
file
addressing
hash
coding
quadratic
search
random
search
storage
layout
searching
3
7
3
73
3
74
ca700206
jb
february
14
1978
10
30
am
1676
4
2109
1682
4
2109
1728
4
2109
1860
4
2109
1860
4
2109
1973
4
2109
1973
4
2109
1992
4
2109
2018
4
2109
2018
4
2109
2032
4
2109
2033
4
2109
2033
4
2109
2107
4
2109
2107
4
2109
2109
4
2109
2109
4
2109
2203
4
2109
2203
4
2109
2251
4
2109
2251
4
2109
2359
4
2109
2524
4
2109
2543
4
2109
2543
4
2109
2552
4
2109
2559
4
2109
2573
4
2109
2770
4
2109
2991
4
2109
3053
4
2109
1785
5
2109
1786
5
2109
1973
5
2109
2018
5
2109
2109
5
2109
2109
5
2109
2109
5
2109
2203
5
2109
2251
5
2109
2543
5
2109
2770
5
2109
2974
5
2109
3053
5
2109
911
6
2109
1329
6
2109
1785
6
2109
1785
6
2109
1785
6
2109
1785
6
2109
1785
6
2109
1785
6
2109
1786
6
2109
1786
6
2109
1786
6
2109
1786
6
2109
1786
6
2109
1786
6
2109
1869
6
2109
1973
6
2109
1973
6
2109
1973
6
2109
1973
6
2109
1992
6
2109
1992
6
2109
332
6
2109
2018
6
2109
2018
6
2109
2107
6
2109
2107
6
2109
2107
6
2109
2107
6
2109
2107
6
2109
2109
6
2109
2109
6
2109
2109
6
2109
2109
6
2109
2109
6
2109
2109
6
2109
2109
6
2109
2109
6
2109
2251
6
2109
2412
6
2109
2543
6
2109
2673
6
2109
2673
6
2109
2707
6
2109
2770
6
2109
492
6
2109
</TEXT>
</DOC>
<DOC>
<DOCNO>2110</DOCNO>
<TEXT>
an
efficient
context
free
parsing
algorithm
a
parsing
algorithm
which
seems
to
be
the
most
efficient
general
context
free
algorithm
known
is
described
it
is
similar
to
both
knuth
lr
k
algorithm
and
the
familiar
top
down
algorithm
it
has
a
time
bound
proportional
to
n
3
where
n
is
the
length
of
the
string
being
parsed
in
general
it
has
a
n
2
bound
for
unambiguous
grammars
and
it
runs
in
linear
time
on
a
large
class
of
grammars
which
seems
to
include
most
practical
context
free
programming
language
grammars
in
an
empirical
comparison
it
appears
to
be
superior
to
the
top
down
and
bottom
up
algorithms
studied
by
griffiths
and
petrick
cacm
february
1970
earley
j
syntax
analysis
parsing
context
free
grammar
compilers
computational
complexity
4
12
5
22
5
23
ca700205
jb
february
14
1978
10
35
am
1350
4
2110
1399
4
2110
1659
4
2110
1665
4
2110
1768
4
2110
1768
4
2110
1781
4
2110
1787
4
2110
1824
4
2110
1825
4
2110
1836
4
2110
1861
4
2110
1945
4
2110
2015
4
2110
2110
4
2110
2110
4
2110
2127
4
2110
2187
4
2110
2317
4
2110
2545
4
2110
2698
4
2110
2733
4
2110
3094
4
2110
1265
5
2110
1781
5
2110
1989
5
2110
2060
5
2110
2110
5
2110
2110
5
2110
2110
5
2110
2179
5
2110
2698
5
2110
2921
5
2110
3154
5
2110
1380
6
2110
1421
6
2110
1469
6
2110
1477
6
2110
1477
6
2110
1477
6
2110
1491
6
2110
1491
6
2110
1491
6
2110
1781
6
2110
1825
6
2110
210
6
2110
1869
6
2110
1989
6
2110
2015
6
2110
2046
6
2110
2110
6
2110
2110
6
2110
2110
6
2110
2110
6
2110
2110
6
2110
2110
6
2110
2556
6
2110
3133
6
2110
3184
6
2110
680
6
2110
799
6
2110
799
6
2110
</TEXT>
</DOC>
<DOC>
<DOCNO>2111</DOCNO>
<TEXT>
spelling
correction
in
systems
programs
several
specialized
techniques
are
shown
for
efficiently
incorporating
spelling
correction
algorithms
in
to
compilers
and
operating
systems
these
include
the
use
of
syntax
and
semantics
information
the
organization
of
restricted
keyword
and
symbol
tables
and
the
consideration
of
a
limited
class
of
spelling
errors
sample
360
coding
for
performing
spelling
correction
is
presented
by
using
systems
which
perform
spelling
correction
the
number
of
debugging
runs
per
program
has
been
decreased
saving
both
programmer
and
machine
time
cacm
february
1970
morgan
h
l
spelling
correction
error
correction
debugging
compilers
operating
systems
diagnostics
error
detection
misspelling
lexical
analysis
systems
programming
4
42
4
12
3
0
3
79
ca700204
jb
february
14
1978
10
40
am
1112
4
2111
1179
4
2111
1288
4
2111
1544
4
2111
1592
4
2111
1592
4
2111
1646
4
2111
2111
4
2111
2111
4
2111
2111
4
2111
2111
4
2111
2339
4
2111
2339
4
2111
2339
4
2111
2534
4
2111
2556
4
2111
440
4
2111
2650
4
2111
1112
5
2111
1592
5
2111
2111
5
2111
2111
5
2111
2111
5
2111
2534
5
2111
2556
5
2111
2650
5
2111
2708
5
2111
2887
5
2111
619
5
2111
830
5
2111
830
6
2111
830
6
2111
830
6
2111
1477
6
2111
1491
6
2111
1646
6
2111
1787
6
2111
1787
6
2111
1935
6
2111
1936
6
2111
1959
6
2111
1973
6
2111
2111
6
2111
2111
6
2111
2111
6
2111
2111
6
2111
2111
6
2111
2182
6
2111
2534
6
2111
2556
6
2111
576
6
2111
680
6
2111
680
6
2111
799
6
2111
</TEXT>
</DOC>
<DOC>
<DOCNO>2112</DOCNO>
<TEXT>
translation
equations
input
limited
transduction
expressions
or
translation
equations
are
used
to
describe
the
syntax
and
left
context
sensitive
semantics
for
context
free
languages
a
formal
procedure
is
given
for
deriving
from
a
set
of
translation
equations
the
specifications
for
a
pushdown
translator
the
translator
consists
of
mealy
form
finite
state
automata
interacting
by
means
of
a
pushdown
stack
within
the
framework
described
string
recognition
and
parsing
may
be
treated
as
special
cases
of
the
translation
problem
cacm
february
1970
vere
s
automata
turing
machines
regular
expression
transduction
expression
context
free
languages
translation
recognizers
parsing
meta
compilers
pushdown
transducer
syntax
directed
compilers
finite
state
automata
4
10
4
12
4
20
5
22
ca700203
jb
february
14
1978
10
49
am
1323
4
2112
1358
4
2112
1380
4
2112
1665
4
2112
1781
4
2112
1787
4
2112
1989
4
2112
2112
4
2112
2534
4
2112
2541
4
2112
2698
4
2112
2733
4
2112
2820
4
2112
3073
4
2112
3155
4
2112
2112
5
2112
2112
5
2112
2112
5
2112
799
5
2112
</TEXT>
</DOC>
<DOC>
<DOCNO>2113</DOCNO>
<TEXT>
the
multistore
parser
for
hierarchical
syntactic
structures
a
syntactic
parser
is
described
for
hierarchical
concatenation
patterns
that
are
presented
to
the
analyzer
in
the
form
of
linear
strings
particular
emphasis
is
given
to
the
system
of
significant
addresses
by
means
of
which
processing
times
for
large
scale
matching
procedures
can
be
substantially
reduced
the
description
makes
frequent
use
of
examples
taken
from
the
fully
operational
implementation
of
the
parser
in
an
experimental
english
sentence
analyzer
by
structuring
an
area
of
the
computer
central
core
storage
in
such
a
way
that
the
individual
locations
of
bytes
and
bits
come
to
represent
the
data
involved
in
the
matching
procedure
the
shifting
of
information
is
reduced
to
a
minimum
and
the
searching
of
lists
is
eliminated
altogether
the
matches
are
traced
by
means
of
binary
masks
and
the
state
of
single
bits
determines
the
operational
flow
of
the
procedure
the
method
could
be
implemented
with
any
interpretive
grammar
provided
it
can
be
expressed
by
the
functional
classification
of
the
items
composing
the
input
hierarchical
structures
cacm
february
1970
von
glasersfeld
e
parsing
syntactic
analysis
natural
language
analysis
linguistic
data
processing
computational
linguistics
correlational
grammar
structure
recognition
pattern
recognition
matching
procedures
tree
structure
interpretation
machine
translation
automatic
abstracting
3
42
3
49
3
63
3
70
3
71
ca700202
jb
february
14
1978
12
57
pm
2113
5
2113
2113
5
2113
2113
5
2113
</TEXT>
</DOC>
<DOC>
<DOCNO>2114</DOCNO>
<TEXT>
a
formal
system
for
information
retrieval
from
files
a
generalized
file
structure
is
provided
by
which
the
concepts
of
keyword
index
record
file
directory
file
structure
directory
decoding
and
record
retrieval
are
defined
and
from
which
some
of
the
frequently
used
file
structures
such
as
inverted
files
index
sequential
files
and
multilist
files
are
derived
two
algorithms
which
retrieve
records
from
the
generalized
file
structure
are
presented
cacm
february
1970
hsiao
d
attribute
value
pair
index
keyword
record
record
address
k
pointer
k
list
file
directory
generalized
file
structure
inverted
file
index
sequential
file
multilist
file
description
file
search
directory
search
serial
processing
of
lists
prime
keyword
parallel
processing
of
lists
3
70
3
73
3
74
ca700201
jb
february
14
1978
1
04
pm
2114
5
2114
2114
5
2114
2114
5
2114
2160
5
2114
2688
5
2114
2114
6
2114
2114
6
2114
</TEXT>
</DOC>
<DOC>
<DOCNO>2115</DOCNO>
<TEXT>
fortran
tausworthe
pseudorandom
number
generator
cacm
january
1970
payne
w
h
random
numbers
pseudorandom
numbers
shift
register
sequences
5
5
ca700116
jb
february
14
1978
1
06
pm
2115
4
2115
2115
4
2115
2122
4
2115
1691
5
2115
1930
5
2115
2115
5
2115
2115
5
2115
2115
5
2115
</TEXT>
</DOC>
<DOC>
<DOCNO>2116</DOCNO>
<TEXT>
interchange
rolls
of
perforated
tape
for
information
interchange
proposed
american
national
standard
cacm
january
1970
interchange
rolls
perforated
tape
tape
information
interchange
directional
markers
leaders
trailers
roll
up
tape
9
track
paper
tape
dimensions
3
70
6
33
6
34
6
35
6
36
ca700115
jb
february
14
1978
1
14
pm
2116
5
2116
2116
5
2116
2116
5
2116
</TEXT>
</DOC>
<DOC>
<DOCNO>2117</DOCNO>
<TEXT>
representation
for
calen
dar
date
for
machine
to
machine
data
interchange
proposed
american
national
standard
cacm
january
1970
calendar
date
machine
to
machine
interchange
month
year
day
representation
coded
3
70
3
73
3
74
3
9
ca700114
jb
february
14
1978
1
42
pm
2117
5
2117
2117
5
2117
2117
5
2117
</TEXT>
</DOC>
<DOC>
<DOCNO>2118</DOCNO>
<TEXT>
an
efficient
algorithm
for
sorting
with
minimal
storage
algorithm
347
m1
cacm
january
1970
griffin
r
redish
k
a
sorting
minimal
storage
sorting
digital
computer
sorting
5
31
ca700113
jb
february
14
1978
1
43
pm
1919
4
2118
1969
4
2118
2118
4
2118
2348
4
2118
2679
4
2118
3054
4
2118
1175
5
2118
2118
5
2118
2118
5
2118
2118
5
2118
</TEXT>
</DOC>
<DOC>
<DOCNO>2119</DOCNO>
<TEXT>
derivatives
algorithm
282
s22
cacm
january
1970
gautschi
w
klein
b
j
recursive
computation
successive
derivatives
error
control
5
11
5
12
ca700112
jb
february
14
1978
1
45
pm
1909
4
2119
2119
4
2119
2119
4
2119
2149
4
2119
1023
5
2119
2119
5
2119
2119
5
2119
2119
5
2119
2129
5
2119
2404
5
2119
2119
6
2119
</TEXT>
</DOC>
<DOC>
<DOCNO>2120</DOCNO>
<TEXT>
an
algorithm
to
produce
complex
primes
csieve
algorithm
372
a1
cacm
january
1970
dunham
k
b
primes
complex
numbers
5
39
ca700111
jb
february
14
1978
1
47
pm
1841
4
2120
1841
4
2120
1967
4
2120
2120
4
2120
2120
4
2120
2120
4
2120
2927
4
2120
2927
4
2120
1537
5
2120
1539
5
2120
1967
5
2120
377
5
2120
2120
5
2120
2120
5
2120
2120
5
2120
1539
6
2120
2120
6
2120
</TEXT>
</DOC>
<DOC>
<DOCNO>2121</DOCNO>
<TEXT>
partitions
in
natural
order
algorithm
371
a1
cacm
january
1970
mckay
j
k
s
partitions
number
theory
5
39
ca700110
jb
february
14
1978
1
48
pm
2121
5
2121
2121
5
2121
2121
5
2121
</TEXT>
</DOC>
<DOC>
<DOCNO>2122</DOCNO>
<TEXT>
general
random
number
generator
algorithm
370
g5
cacm
january
1970
butler
e
l
random
number
generator
probability
density
function
transformation
cumulative
density
function
5
13
5
5
ca700109
jb
february
14
1978
1
50
pm
1794
4
2122
1870
4
2122
2115
4
2122
2122
4
2122
2122
4
2122
1674
5
2122
1691
5
2122
2122
5
2122
2122
5
2122
2122
5
2122
</TEXT>
</DOC>
<DOC>
<DOCNO>2123</DOCNO>
<TEXT>
generator
of
random
numbers
satisfying
the
poisson
distribution
algorithm
369
g5
cacm
january
1970
schaffer
h
e
poisson
distribution
random
number
generator
5
5
ca700108
jb
february
14
1978
1
53
pm
2123
4
2123
1663
5
2123
2123
5
2123
2123
5
2123
2123
5
2123
</TEXT>
</DOC>
<DOC>
<DOCNO>2124</DOCNO>
<TEXT>
numerical
inversion
of
laplace
transforms
algorithm
368
d5
cacm
january
1970
stehfest
h
laplace
transform
inversion
integral
transformations
integral
equations
5
15
5
18
ca700107
jb
february
14
1978
1
55
pm
2124
5
2124
2124
5
2124
2124
5
2124
2591
5
2124
2124
6
2124
</TEXT>
</DOC>
<DOC>
<DOCNO>2125</DOCNO>
<TEXT>
a
note
on
minimal
length
polygonal
approximation
to
a
digitized
contour
a
method
for
extracting
a
smooth
polygonal
contour
from
a
digitized
image
is
illustrated
the
ordered
sequence
of
contour
points
and
the
connection
graph
of
the
image
are
first
obtained
by
a
modified
ledley
algorithm
in
one
image
scan
a
minimal
perimeter
polygon
subjected
to
specified
constraints
is
then
chosen
as
the
approximating
contour
the
determination
of
the
minimal
polygon
can
be
reduced
to
a
nonlinear
programming
problem
solved
by
an
algorithm
which
takes
into
account
the
weak
bonds
between
variables
some
examples
are
presented
and
the
corresponding
computing
times
are
listed
cacm
january
1970
montanari
u
digitized
image
connection
tree
minimal
polygon
optimal
approximation
nonlinear
programming
3
63
5
13
5
17
ca700106
jb
february
14
1978
2
00
pm
2125
5
2125
2125
5
2125
2125
5
2125
2987
5
2125
1326
6
2125
1630
6
2125
2125
6
2125
2547
6
2125
2633
6
2125
421
6
2125
524
6
2125
</TEXT>
</DOC>
<DOC>
<DOCNO>2126</DOCNO>
<TEXT>
experience
with
an
extensible
language
an
operational
extensible
language
system
is
described
the
system
and
its
base
language
are
appraised
with
respect
to
efficiency
flexibility
and
utility
for
different
categories
of
users
cacm
january
1970
irons
e
t
programming
languages
extensible
compiler
bootstrapping
ambiguity
4
12
4
22
ca700105
jb
february
14
1978
2
02
pm
249
4
2126
254
4
2126
272
4
2126
1046
4
2126
1102
4
2126
1105
4
2126
1109
4
2126
1139
4
2126
1140
4
2126
1140
4
2126
1188
4
2126
1234
4
2126
1263
4
2126
1265
4
2126
1306
4
2126
1464
4
2126
1491
4
2126
1496
4
2126
1693
4
2126
1767
4
2126
1781
4
2126
1781
4
2126
1781
4
2126
1787
4
2126
1824
4
2126
1824
4
2126
1861
4
2126
1945
4
2126
1949
4
2126
321
4
2126
2059
4
2126
2126
4
2126
2126
4
2126
2126
4
2126
2126
4
2126
2126
4
2126
2317
4
2126
2546
4
2126
435
4
2126
437
4
2126
463
4
2126
464
4
2126
483
4
2126
491
4
2126
2732
4
2126
560
4
2126
583
4
2126
584
4
2126
3073
4
2126
627
4
2126
631
4
2126
631
4
2126
632
4
2126
642
4
2126
644
4
2126
653
4
2126
653
4
2126
680
4
2126
680
4
2126
691
4
2126
761
4
2126
762
4
2126
763
4
2126
763
4
2126
795
4
2126
799
4
2126
123
4
2126
140
4
2126
919
4
2126
945
4
2126
989
4
2126
196
5
2126
1614
5
2126
1693
5
2126
2126
5
2126
2126
5
2126
2126
5
2126
2317
5
2126
2546
5
2126
404
5
2126
823
5
2126
1198
6
2126
1477
6
2126
1491
6
2126
1572
6
2126
1693
6
2126
1749
6
2126
1753
6
2126
1781
6
2126
2126
6
2126
2126
6
2126
2148
6
2126
404
6
2126
3184
6
2126
</TEXT>
</DOC>
<DOC>
<DOCNO>2127</DOCNO>
<TEXT>
natural
language
question
answering
systems
1969
recent
experiments
in
programming
natural
language
question
answering
systems
are
reviewed
to
summarize
the
methods
that
have
been
developed
for
syntactic
semantic
and
logical
analysis
of
english
strings
it
is
concluded
that
at
least
minimally
effective
techniques
have
been
devised
for
answering
questions
from
natural
language
subsets
in
small
scale
experimental
systems
and
that
a
useful
paradigm
has
evolved
to
guide
research
efforts
in
the
field
current
approaches
to
semantic
analysis
and
logical
inference
are
seen
to
be
effective
beginnings
but
of
questionable
generality
with
respect
either
to
subtle
aspects
of
meaning
or
to
applications
over
large
subsets
of
english
generalizing
from
current
small
scale
experiments
to
language
processing
systems
based
on
dictionaries
with
thousands
of
entries
with
correspondingly
large
grammars
and
semantic
systems
may
entail
a
new
order
of
complexity
and
require
the
invention
and
development
of
entirely
different
approaches
to
semantic
analysis
and
questions
answering
cacm
january
1970
simmons
r
f
question
answering
natural
language
artificial
intelligence
language
processing
fact
retrieval
semantics
3
6
3
64
3
7
3
74
ca700104
jb
february
14
1978
2
10
pm
1155
4
2127
1400
4
2127
1456
4
2127
1468
4
2127
1515
4
2127
1515
4
2127
1553
4
2127
1665
4
2127
1699
4
2127
1768
4
2127
1787
4
2127
1824
4
2127
1825
4
2127
1836
4
2127
1856
4
2127
1861
4
2127
1945
4
2127
2015
4
2127
2096
4
2127
2092
4
2127
2110
4
2127
2127
4
2127
2127
4
2127
2127
4
2127
2127
4
2127
2127
4
2127
2127
4
2127
2187
4
2127
2210
4
2127
2309
4
2127
2310
4
2127
2317
4
2127
2396
4
2127
2396
4
2127
2545
4
2127
2698
4
2127
2730
4
2127
2733
4
2127
1155
5
2127
1324
5
2127
1487
5
2127
1527
5
2127
1781
5
2127
1856
5
2127
2127
5
2127
2127
5
2127
2127
5
2127
2178
5
2127
2396
5
2127
2561
5
2127
1303
6
2127
1323
6
2127
1487
6
2127
1856
6
2127
2059
6
2127
2092
6
2127
2127
6
2127
2127
6
2127
2127
6
2127
3184
6
2127
</TEXT>
</DOC>
<DOC>
<DOCNO>2128</DOCNO>
<TEXT>
a
processor
allocation
method
for
time
sharing
a
scheduling
algorithm
is
proposed
which
is
intended
to
minimize
changes
of
tasks
on
processors
and
thereby
reduce
over
head
the
algorithm
also
has
application
to
more
general
resource
allocation
problems
it
is
implemented
by
means
of
a
method
for
efficiently
handling
dynamically
changing
segmented
lists
cacm
january
1970
mullery
a
p
driscoll
g
c
time
sharing
resource
allocation
scheduling
algorithms
monitors
dynamic
allocation
processor
allocation
multiprogramming
multiprocessing
time
slicing
scheduling
conversational
systems
interactive
systems
3
80
4
30
4
31
4
32
6
33
ca700103
jb
february
14
1978
2
15
pm
1751
4
2128
1892
4
2128
2128
4
2128
2218
4
2128
1752
5
2128
2128
5
2128
2128
5
2128
2128
5
2128
</TEXT>
</DOC>
<DOC>
<DOCNO>2129</DOCNO>
<TEXT>
recursive
computation
of
certain
derivatives
a
study
of
error
propagation
a
brief
study
is
made
of
the
propagation
of
errors
in
linear
first
order
difference
equations
the
recursive
computation
of
successive
derivatives
of
e
x
x
and
cos
x
x
is
considered
as
an
illustration
cacm
january
1970
gautschi
w
recursive
computation
successive
derivatives
error
propagation
5
11
5
12
ca700102
jb
february
14
1978
2
18
pm
2129
4
2129
1449
5
2129
2119
5
2129
2129
5
2129
2129
5
2129
2129
5
2129
2149
5
2129
1023
6
2129
2129
6
2129
2129
6
2129
</TEXT>
</DOC>
<DOC>
<DOCNO>2130</DOCNO>
<TEXT>
automatic
segmentation
of
cyclic
program
structures
based
on
connectivity
and
processor
timing
time
shared
multiprogrammed
and
overlayed
batch
systems
frequently
require
segmentation
of
computer
programs
into
discrete
portions
these
program
portions
are
transferred
between
executable
and
peripheral
storage
whenever
necessary
segmentation
of
program
s
in
a
manner
that
reduces
the
frequency
of
such
transfers
is
the
subject
of
this
paper
segmentation
techniques
proposed
by
c
v
ramamoorthy
are
subject
to
limitations
that
arise
when
the
preferred
segment
size
is
not
compatible
with
the
physical
restrictions
imposed
by
the
available
computing
equipment
a
generalization
of
ramamoorthy
suggestions
is
made
in
order
to
allow
their
application
when
circumstances
are
other
than
ideal
cacm
january
1970
lowe
t
c
automatic
segmentation
cyclic
program
structures
loops
paging
multiprogramming
loaders
assemblers
compilers
time
sharing
program
connectivity
4
19
5
24
5
32
ca700101
jb
february
14
1978
2
20
pm
2130
4
2130
1916
5
2130
2130
5
2130
2130
5
2130
2130
5
2130
2582
5
2130
1751
6
2130
1924
6
2130
2017
6
2130
2130
6
2130
</TEXT>
</DOC>
<DOC>
<DOCNO>2131</DOCNO>
<TEXT>
rapid
computation
of
weights
of
interpolatory
quadrature
rules
d1
algorithm
417
cacm
december
1971
gustafson
s
divided
differences
5
16
ca711212
jb
february
2
1978
9
33
am
2131
4
2131
2132
4
2131
2131
5
2131
2131
5
2131
2131
5
2131
2135
5
2131
2131
6
2131
2132
6
2131
</TEXT>
</DOC>
<DOC>
<DOCNO>2132</DOCNO>
<TEXT>
rapid
computation
of
coefficients
of
interpolation
formulas
e1
algorithm
416
cacm
december
1971
gustafson
s
divided
differences
newton
interpolation
formula
5
13
ca711211
jb
february
2
1978
9
36
am
2131
4
2132
2132
4
2132
2135
5
2132
2132
5
2132
2132
5
2132
2132
5
2132
2131
6
2132
2132
6
2132
</TEXT>
</DOC>
<DOC>
<DOCNO>2133</DOCNO>
<TEXT>
algorithm
for
the
assignment
problem
rectangular
matrices
h
algorithm
415
cacm
december
1971
bourgeois
f
lassalle
j
c
operations
research
optimization
theory
assignment
problem
rectangular
matrices
5
39
5
40
ca711210
jb
february
2
1978
9
38
am
2133
4
2133
2133
4
2133
2134
4
2133
124
5
2133
2133
5
2133
2133
5
2133
2133
5
2133
2134
5
2133
</TEXT>
</DOC>
<DOC>
<DOCNO>2134</DOCNO>
<TEXT>
an
extension
of
the
munkres
algorithm
for
the
assignment
problem
to
rectangular
matrices
the
assignment
problem
together
with
munkres
proposed
algorithm
for
its
solution
in
square
matrices
is
presented
first
then
the
authors
develop
an
extension
of
this
algorithm
which
permits
a
solution
for
rectangular
matrices
timing
results
obtained
by
using
an
adapted
version
of
silver
algol
procedure
are
discussed
and
a
relation
between
solution
time
and
problem
size
is
given
cacm
december
1971
bourgeois
f
lassalle
j
operations
research
optimization
theory
assignment
problem
rectangular
matrices
algorithm
5
39
5
40
ca711209
jb
february
2
1978
9
46
am
2133
4
2134
2134
4
2134
124
5
2134
2133
5
2134
2134
5
2134
2134
5
2134
2134
5
2134
124
6
2134
2134
6
2134
</TEXT>
</DOC>
<DOC>
<DOCNO>2135</DOCNO>
<TEXT>
rapid
computation
of
general
interpolation
formulas
and
mechanical
quadrature
rules
let
f
have
n
continuous
on
a
closed
interval
a
b
and
let
l
be
a
linear
functional
the
attempt
is
made
to
approximate
l
f
with
l
q
where
q
is
a
polynomial
approximating
f
algorithms
are
developed
for
rapid
computation
of
l
q
for
a
wide
class
of
selections
of
q
which
includes
the
lagrangian
and
hermitian
rules
as
special
cases
cacm
december
1971
gustafson
s
linear
functionals
divided
differences
newton
interpolation
formula
5
13
5
16
ca711208
jb
february
2
1978
9
49
am
2135
4
2135
2135
4
2135
2131
5
2135
2135
5
2135
2135
5
2135
2135
5
2135
2132
5
2135
2135
6
2135
2135
6
2135
</TEXT>
</DOC>
<DOC>
<DOCNO>2136</DOCNO>
<TEXT>
a
note
on
a
modification
of
nordsieck
method
using
an
off
step
point
cacm
december
1971
blumberg
j
w
foulk
c
r
ordinary
differential
equations
multi
step
methods
predictor
corrector
round
off
error
nordsieck
method
gragg
stetter
modification
5
11
5
16
5
17
ca711207
jb
february
2
1978
9
52
am
2136
5
2136
2136
5
2136
2136
5
2136
</TEXT>
</DOC>
<DOC>
<DOCNO>2137</DOCNO>
<TEXT>
new
lisp
techniques
for
a
paging
environment
the
system
described
herein
employs
the
block
concept
and
that
of
global
and
local
variables
in
addition
to
the
methods
applied
in
most
lisp
systems
also
a
new
means
of
list
representation
is
used
local
sequential
for
lists
created
during
compilation
and
block
level
sequential
for
those
created
dynamically
a
new
garbage
collection
algorithm
has
been
introduced
to
make
lists
as
compact
as
possible
partial
garbage
collection
is
performed
after
each
block
exit
instead
of
total
garbage
collection
when
storage
is
exhausted
the
algorithm
does
not
use
the
customary
flagging
procedure
this
combination
of
features
has
eliminated
the
need
for
a
free
list
and
effectively
minimizes
the
number
of
pages
used
at
any
moment
cacm
december
1971
rochfeld
a
lisp
list
processing
paging
virtual
memory
garbage
collection
core
fragmentation
compact
list
structures
block
segment
4
12
4
22
4
32
ca711206
jb
february
2
1978
10
01
am
1073
4
2137
2137
4
2137
2276
4
2137
1153
5
2137
2137
5
2137
2137
5
2137
2137
5
2137
</TEXT>
</DOC>
<DOC>
<DOCNO>2138</DOCNO>
<TEXT>
bliss
a
language
for
systems
programming
a
language
bliss
is
described
this
language
is
designed
so
as
to
be
especially
suitable
for
use
in
writing
production
software
systems
for
a
specific
machine
the
pdp
10
compilers
operating
systems
etc
prime
design
goals
of
the
design
are
the
ability
to
produce
highly
efficient
object
code
to
allow
access
to
all
relevant
hardware
features
of
the
host
machine
and
to
provide
a
rational
means
by
which
to
cope
with
the
evolutionary
nature
of
systems
programs
a
major
feature
which
contributes
to
the
realization
of
these
goals
is
a
mechanism
permitting
the
definition
of
the
representation
of
all
data
structures
in
terms
of
the
access
algorithm
for
elements
of
the
structure
cacm
december
1971
wulf
w
a
russell
d
b
programming
languages
implementation
language
systems
programming
data
structures
4
12
4
21
4
22
ca711205
jb
february
2
1978
10
09
am
1973
4
2138
1992
4
2138
2138
4
2138
2203
4
2138
2251
4
2138
2530
4
2138
2537
4
2138
2543
4
2138
2559
4
2138
2573
4
2138
2991
4
2138
3053
4
2138
3083
4
2138
2107
5
2138
2138
5
2138
2138
5
2138
2138
5
2138
2411
5
2138
2709
5
2138
2889
5
2138
2937
5
2138
2989
5
2138
3005
5
2138
3025
5
2138
3101
5
2138
1069
6
2138
1425
6
2138
2138
6
2138
2138
6
2138
2138
6
2138
2138
6
2138
2138
6
2138
2138
6
2138
2138
6
2138
2138
6
2138
2193
6
2138
2204
6
2138
2326
6
2138
2388
6
2138
2438
6
2138
2456
6
2138
2455
6
2138
2477
6
2138
2989
6
2138
3185
6
2138
</TEXT>
</DOC>
<DOC>
<DOCNO>2139</DOCNO>
<TEXT>
implementation
of
the
substring
test
by
hashing
a
technique
is
described
for
implementing
the
test
which
determines
if
one
string
is
a
substring
of
another
when
there
is
low
probability
that
the
test
will
be
satisfied
it
is
shown
how
the
operation
can
be
speeded
up
considerably
if
it
is
preceded
by
a
test
on
appropriately
chosen
hash
codes
of
the
strings
cacm
december
1971
harrison
m
c
substring
hashing
subset
signature
information
compression
information
retrieval
searching
3
74
5
30
5
6
ca711204
jb
february
2
1978
10
14
am
2139
5
2139
2139
5
2139
2139
5
2139
2532
5
2139
2631
5
2139
2746
5
2139
3001
5
2139
1665
6
2139
1739
6
2139
2033
6
2139
2139
6
2139
2139
6
2139
2139
6
2139
2139
6
2139
2532
6
2139
2545
6
2139
2786
6
2139
</TEXT>
</DOC>
<DOC>
<DOCNO>2140</DOCNO>
<TEXT>
retrieval
update
speed
tradeoffs
using
combined
indices
in
a
paper
in
the
november
1970
communications
of
the
acm
v
y
lum
introduced
a
technique
of
file
indexing
named
combined
indices
this
technique
permitted
decreased
retrieval
time
at
the
cost
of
increased
storage
space
this
paper
examines
combined
indices
under
conditions
of
file
usage
with
different
fractions
of
retrieval
and
update
tradeoff
curves
are
developed
to
show
minimal
cost
of
file
usage
by
grouping
various
partially
combined
indices
cacm
december
1971
mullin
j
k
file
organization
combined
index
files
inverted
files
information
retrieval
query
multi
attribute
retrieval
file
update
3
73
3
74
3
79
ca711203
jb
february
2
1978
10
18
am
2140
4
2140
2452
4
2140
2765
4
2140
2901
4
2140
3134
4
2140
1976
5
2140
2140
5
2140
2140
5
2140
2140
5
2140
</TEXT>
</DOC>
<DOC>
<DOCNO>2141</DOCNO>
<TEXT>
algorithmic
selection
of
the
best
method
for
compressing
map
data
strings
the
best
of
a
dozen
different
methods
for
compressing
map
data
is
illustrated
the
choices
are
generated
by
encoding
data
strings
sequence
of
like
codes
by
three
methods
and
in
four
directions
relationships
are
developed
between
compression
alternatives
to
avoid
comparing
all
of
them
the
technique
has
been
used
to
compress
data
from
forest
resource
maps
but
is
widely
applicable
to
map
and
photographic
data
reduction
cacm
december
1971
amidon
e
l
akin
g
s
data
compression
map
storage
information
retrieval
input
output
run
coding
data
reduction
3
71
3
74
ca711202
jb
february
2
1978
10
23
am
2141
5
2141
2141
5
2141
2141
5
2141
</TEXT>
</DOC>
<DOC>
<DOCNO>2142</DOCNO>
<TEXT>
reconstruction
of
pictures
from
their
projections
there
are
situations
in
the
natural
sciences
and
medicine
e
g
in
electron
microscopy
and
x
ray
photography
in
which
it
is
desirable
to
estimate
the
gray
levels
of
a
digital
picture
at
the
individual
points
from
the
sums
of
the
gray
levels
along
straight
lines
projections
at
a
few
angles
usually
in
such
situations
the
picture
is
far
from
determined
and
the
problem
is
to
find
the
most
representative
picture
three
algorithms
are
described
all
using
monte
carlo
methods
which
were
designed
to
solve
this
problem
the
algorithms
are
applicable
in
a
large
and
varied
number
of
fields
the
most
important
uses
may
be
the
reconstruction
of
possibly
asymmetric
particles
from
electron
micrographs
and
three
dimensional
x
ray
analysis
cacm
december
1971
gordon
r
herman
g
t
approximation
biomedical
image
processing
efficient
encoding
image
processing
linear
programming
mathematical
programming
monte
carlo
techniques
optimization
picture
compression
picture
description
picture
processing
stereology
x
ray
analysis
3
12
3
13
3
15
3
17
3
63
5
41
5
6
ca711201
jb
february
2
1978
10
32
am
2142
4
2142
2142
4
2142
2529
4
2142
1929
5
2142
2142
5
2142
2142
5
2142
2142
5
2142
2231
5
2142
</TEXT>
</DOC>
<DOC>
<DOCNO>2143</DOCNO>
<TEXT>
chebyshev
approximation
of
continuous
functions
by
a
chebyshev
system
of
functions
e2
algorithm
414
cacm
november
1971
bolub
g
h
smith
l
b
approximation
chebyshev
approximation
remex
algorithm
5
13
ca711106
jb
february
2
1978
10
35
am
2143
4
2143
1734
5
2143
2143
5
2143
2143
5
2143
2143
5
2143
</TEXT>
</DOC>
<DOC>
<DOCNO>2144</DOCNO>
<TEXT>
on
accurate
floating
point
summation
the
accumulation
of
floating
point
sums
is
considered
on
a
computer
which
performs
t
digit
base
b
floating
point
addition
with
exponents
in
the
range
m
to
m
an
algorithm
is
given
for
accurately
summing
n
t
digit
floating
point
numbers
each
of
these
n
numbers
is
split
into
q
parts
forming
qn
t
digit
floating
point
numbers
each
of
these
is
then
added
to
the
appropriate
one
of
n
auxiliary
t
digit
accumulators
finally
the
accumulators
are
added
together
to
yield
the
computed
sum
in
all
qn
n
1
t
digit
floating
point
additions
are
performed
under
usual
conditions
the
relative
error
in
the
computed
sum
is
at
most
t
1
v
b
1
t
for
some
v
further
with
an
additional
q
n
1
t
digit
additions
the
computed
sum
can
be
corrected
to
full
t
digit
accuracy
for
example
for
the
ibm
360
b
16
t
14
m
63
m
64
typical
values
for
q
and
n
are
q
2
and
n
32
in
this
case
becomes
n
32
768
and
we
have
t
1
v
b
1
t
4x16
13
cacm
november
1971
malcolm
m
a
floating
point
summation
error
analysis
5
11
5
19
ca711105
jb
february
2
1978
10
48
am
1328
4
2144
1333
4
2144
2144
4
2144
1052
5
2144
2144
5
2144
2144
5
2144
2144
5
2144
</TEXT>
</DOC>
<DOC>
<DOCNO>2145</DOCNO>
<TEXT>
automation
of
etching
pattern
layout
help
heuristic
etching
pattern
layout
program
is
an
application
program
developed
to
computerize
the
tedious
and
error
prone
although
vitally
important
wiring
design
of
printed
circuit
boards
help
helps
automate
a
design
stage
one
step
closer
to
production
than
logical
design
it
can
be
used
to
design
wiring
patterns
of
two
layer
circuit
boards
on
which
ics
in
dual
in
line
packages
as
well
as
discrete
components
such
as
transistors
and
resistors
have
been
placed
help
employs
two
methods
of
wiring
one
is
the
heuristic
method
which
simulates
human
approaches
to
wiring
design
and
the
other
is
the
theoretically
interesting
but
time
consuming
method
of
maze
running
based
on
the
lee
algorithm
help
performs
more
than
90
percent
of
required
wiring
by
the
heuristic
path
with
respect
to
a
performance
function
for
each
point
to
point
and
point
to
line
connection
it
can
bring
the
number
of
successful
wiring
connections
very
close
to
100
percent
cacm
november
1971
aramaki
i
kawabata
t
kazuhiko
a
heuristic
etching
pattern
layout
wiring
design
of
printed
circuit
board
maze
running
lee
algorithm
3
24
3
66
4
9
6
9
ca711104
jb
february
2
1978
10
58
am
2145
5
2145
2145
5
2145
2145
5
2145
</TEXT>
</DOC>
<DOC>
<DOCNO>2146</DOCNO>
<TEXT>
optimizing
the
polyphase
sort
various
dispersion
algorithms
for
the
polyphase
sorting
procedure
are
examinedhe
optimum
algorithm
based
on
minimizing
the
total
number
of
unit
strings
read
is
displayed
the
logic
of
this
algorithm
is
rather
complicated
hence
several
other
new
dispersion
algorithms
with
more
straightforward
logic
are
presented
of
the
simple
dispersion
algorithms
discussed
the
horizontal
is
best
it
does
approximately
one
fourth
to
one
and
one
half
percent
less
reading
and
writing
than
most
algorithms
in
use
today
an
additional
two
and
one
fourth
to
three
percent
improvement
can
be
achieved
by
utilizing
the
modified
optimum
algorithm
this
algorithm
is
relatively
straightforward
but
it
requires
a
fairly
close
estimate
of
the
total
number
of
unit
strings
before
the
dispersion
begins
cacm
november
1971
shell
d
l
sorting
polyphase
sorting
dispersion
algorithms
optimum
dispersion
algorithm
repetition
operator
5
31
ca711103
jb
february
2
1978
11
39
am
1117
4
2146
1117
4
2146
2017
4
2146
2017
4
2146
2017
4
2146
2146
4
2146
2146
4
2146
2146
4
2146
2146
4
2146
479
4
2146
677
4
2146
860
4
2146
861
4
2146
862
4
2146
863
4
2146
299
5
2146
2146
5
2146
2146
5
2146
2146
5
2146
862
5
2146
863
5
2146
861
5
2146
</TEXT>
</DOC>
<DOC>
<DOCNO>2147</DOCNO>
<TEXT>
using
computers
in
higher
education
past
recommendations
status
and
needs
data
from
a
survey
conducted
with
national
science
foundation
support
which
was
published
in
december
1970
is
reviewed
and
it
is
pointed
out
that
with
regard
to
computers
in
higher
education
national
goals
stated
in
the
rosser
and
pierce
reports
have
not
been
attained
quality
was
lacking
in
hardware
or
courses
in
nearly
half
of
the
associate
and
bachelor
degree
programs
in
data
processing
computer
science
etc
offered
in
1966
67
a
plea
is
made
for
continuing
studies
on
status
and
goals
for
computing
in
higher
education
improvement
of
degree
programs
and
a
national
testing
laboratory
for
educational
technology
cacm
november
1971
hamblen
j
w
higher
education
computers
degree
programs
national
goals
testing
laboratory
educational
technology
1
50
1
52
1
53
2
45
3
51
ca711102
jb
february
2
1978
11
44
am
1720
4
2147
1927
4
2147
2147
4
2147
2163
4
2147
2345
4
2147
2478
4
2147
2594
4
2147
2852
4
2147
2899
4
2147
3130
4
2147
1771
5
2147
2147
5
2147
2147
5
2147
2147
5
2147
3003
5
2147
1659
6
2147
1678
6
2147
1927
6
2147
1945
6
2147
2097
6
2147
2147
6
2147
2163
6
2147
2187
6
2147
2329
6
2147
2345
6
2147
2367
6
2147
2407
6
2147
2478
6
2147
2479
6
2147
2480
6
2147
2538
6
2147
</TEXT>
</DOC>
<DOC>
<DOCNO>2148</DOCNO>
<TEXT>
the
composition
of
semantics
in
algol
68
the
main
features
of
algol
68
are
explained
from
a
semantic
point
of
view
it
is
shown
how
the
language
permits
the
composition
of
values
and
actions
i
e
ultimately
programs
from
a
minimum
set
of
primitives
with
a
few
fundamental
recursive
rules
of
composition
the
associated
syntax
is
briefly
reviewed
an
attempt
has
been
made
to
obtain
a
structured
and
simple
introduction
to
both
algol
68
and
its
orthogonal
design
cacm
november
1971
branquart
p
lewi
j
sintzoff
m
wodon
p
l
programming
primitives
programming
languages
algol
semantics
recursive
composition
design
of
programming
languages
data
structures
1
3
4
2
4
22
5
23
5
24
ca711101
jb
february
2
1978
11
49
am
2148
5
2148
2148
5
2148
2148
5
2148
2314
5
2148
2317
5
2148
2842
5
2148
1098
6
2148
1198
6
2148
1572
6
2148
1626
6
2148
1693
6
2148
1749
6
2148
1753
6
2148
1781
6
2148
210
6
2148
2060
6
2148
2082
6
2148
2126
6
2148
2148
6
2148
2148
6
2148
2148
6
2148
2192
6
2148
3184
6
2148
</TEXT>
</DOC>
<DOC>
<DOCNO>2149</DOCNO>
<TEXT>
entcaf
and
entcre
evaluation
of
normalized
taylor
coefficients
of
an
analytic
function
c5
algorithm
413
cacm
october
1971
lyness
j
n
taylor
coefficients
taylor
series
cauchy
integral
numerical
integration
numerical
differentiation
interpolation
complex
variable
complex
arithmetic
fast
fourier
transform
5
12
5
13
5
16
ca711007
jb
february
2
1978
11
53
am
2119
4
2149
2149
4
2149
2129
5
2149
2149
5
2149
2149
5
2149
2149
5
2149
</TEXT>
</DOC>
<DOC>
<DOCNO>2150</DOCNO>
<TEXT>
concurrent
control
with
readers
and
writers
the
problem
of
the
mutual
exclusion
of
several
independent
processes
from
simultaneous
access
to
a
critical
section
is
discussed
for
the
case
where
there
are
two
distinct
classes
of
processes
known
as
readers
and
writers
the
readers
may
share
the
section
with
each
other
but
the
writers
must
have
exclusive
access
two
solutions
are
presented
one
of
the
case
where
we
wish
minimum
delay
for
the
readers
the
other
for
the
case
where
we
wish
writing
to
take
place
as
early
as
possible
cacm
october
1971
courois
p
j
heymans
f
parnas
d
l
mutual
exclusion
critical
section
shared
access
to
resources
4
30
4
32
ca711006
jb
february
2
1978
11
58
am
1781
4
2150
1828
4
2150
1854
4
2150
1877
4
2150
1960
4
2150
2150
4
2150
2150
4
2150
2150
4
2150
2228
4
2150
2228
4
2150
2256
4
2150
2256
4
2150
2317
4
2150
2317
4
2150
2319
4
2150
2377
4
2150
2342
4
2150
2342
4
2150
2342
4
2150
2376
4
2150
2376
4
2150
2379
4
2150
2424
4
2150
2482
4
2150
2618
4
2150
2618
4
2150
2618
4
2150
2632
4
2150
2704
4
2150
2723
4
2150
2738
4
2150
2740
4
2150
2741
4
2150
2867
4
2150
3184
4
2150
3184
4
2150
1198
5
2150
1338
5
2150
1749
5
2150
2150
5
2150
2150
5
2150
2150
5
2150
2320
5
2150
2597
5
2150
2777
5
2150
2851
5
2150
2895
5
2150
2912
5
2150
2946
5
2150
3128
5
2150
1877
6
2150
2080
6
2150
2150
6
2150
2150
6
2150
2150
6
2150
2150
6
2150
2150
6
2150
2150
6
2150
2150
6
2150
2150
6
2150
2320
6
2150
2376
6
2150
2436
6
2150
2597
6
2150
2618
6
2150
2865
6
2150
2866
6
2150
2866
6
2150
2870
6
2150
2912
6
2150
3082
6
2150
</TEXT>
</DOC>
<DOC>
<DOCNO>2151</DOCNO>
<TEXT>
user
program
measurement
in
a
time
shared
environment
a
general
discussion
of
the
measurement
of
software
systems
is
followed
by
a
description
of
a
hardware
and
software
scheme
for
measuring
user
programs
in
a
time
shared
environment
the
tx
2
computer
at
mit
lincoln
laboratory
was
used
for
the
implementation
of
such
a
system
and
the
characteristics
of
this
implementation
are
reported
a
scenario
showing
the
system
in
use
is
presented
finally
it
is
shown
how
other
time
sharing
systems
may
provide
similar
measuring
facilities
cacm
october
1971
nemeth
a
g
rovner
p
d
operating
systems
multiprogramming
systems
time
sharing
systems
software
measurement
user
program
measurement
measurement
technology
tx
2
computer
virtual
computers
performance
improvement
4
30
4
32
4
42
4
43
ca711005
jb
february
2
1978
1
05
pm
1957
4
2151
2151
4
2151
2151
4
2151
2151
4
2151
2318
4
2151
3103
4
2151
3148
4
2151
1653
5
2151
1747
5
2151
1860
5
2151
2151
5
2151
2151
5
2151
2151
5
2151
2719
5
2151
2967
5
2151
1626
6
2151
210
6
2151
2151
6
2151
2151
6
2151
2167
6
2151
2210
6
2151
2645
6
2151
2657
6
2151
</TEXT>
</DOC>
<DOC>
<DOCNO>2152</DOCNO>
<TEXT>
display
procedures
although
the
use
of
structured
display
files
is
widespread
in
interactive
computer
graphics
these
structures
present
a
number
of
problems
which
tend
to
restrict
their
generality
and
usefulness
this
paper
discusses
some
of
these
problems
and
suggests
an
alternative
approach
to
display
system
design
which
avoids
the
use
of
structured
display
files
this
technique
employs
display
procedures
to
generate
information
for
display
by
including
transformations
within
calls
to
these
procedures
it
is
possible
both
to
simplify
the
specification
of
pictures
and
to
speed
up
their
generation
display
procedures
permit
picture
elements
to
be
defined
conditionally
and
also
facilitate
the
processing
of
inputs
from
pointing
devices
the
paper
is
illustrated
by
examples
from
aversion
of
the
euler
language
in
which
display
procedures
were
implemented
cacm
october
1971
newman
w
m
computer
graphics
programming
languages
display
files
4
20
4
41
ca711004
jb
february
2
1978
1
11
pm
1542
4
2152
1683
4
2152
1693
4
2152
1781
4
2152
1787
4
2152
1836
4
2152
1945
4
2152
2003
4
2152
2002
4
2152
2060
4
2152
2061
4
2152
2082
4
2152
2091
4
2152
2152
4
2152
2152
4
2152
2179
4
2152
2340
4
2152
2356
4
2152
2546
4
2152
2603
4
2152
2698
4
2152
2708
4
2152
2824
4
2152
2982
4
2152
2986
4
2152
3045
4
2152
3093
4
2152
1491
5
2152
1767
5
2152
2152
5
2152
2152
5
2152
2152
5
2152
</TEXT>
</DOC>
<DOC>
<DOCNO>2153</DOCNO>
<TEXT>
experiments
with
an
automated
instructional
system
for
numerical
methods
a
computer
system
was
developed
at
purdue
university
to
teach
portions
of
an
undergraduate
course
in
numerical
methods
each
instructional
unit
or
lesson
is
divided
into
three
modes
of
instruction
which
allow
the
student
to
press
from
a
computer
controlled
presentation
to
a
student
controlled
investigation
the
system
is
designed
as
a
classroom
independent
course
of
study
and
has
been
used
for
two
semesters
by
students
in
lieu
of
conventional
classroom
instruction
initial
measures
of
effectiveness
student
acceptance
and
operational
cost
are
the
result
of
testing
the
system
independent
of
instructor
intervention
the
system
is
operational
on
a
cdc
6500
with
teletype
terminals
cacm
october
1971
oldehoeft
a
e
conte
s
d
computer
assisted
instruction
numerical
methods
cai
instructional
systems
1
52
3
62
5
10
ca711003
jb
february
2
1978
1
22
pm
2153
4
2153
3003
4
2153
2097
5
2153
2153
5
2153
2153
5
2153
2153
5
2153
</TEXT>
</DOC>
<DOC>
<DOCNO>2154</DOCNO>
<TEXT>
clarification
of
fortran
standards
second
report
in
1966
after
four
years
of
effort
fortran
became
the
first
programming
language
standardized
in
the
united
states
since
that
initial
achievement
study
and
application
of
the
standard
specifications
have
revealed
the
need
for
maintenance
of
the
standards
as
the
result
of
work
initiated
in
1967
an
initial
set
of
clarifying
interpretations
was
prepared
and
this
clarification
was
published
in
communications
of
the
acm
in
may
1969
that
work
has
continued
and
has
resulted
in
the
preparation
of
this
second
set
of
clarifying
interpretations
the
nature
of
the
maintenance
and
the
new
set
of
corrections
to
and
interpretations
of
the
standard
specifications
are
reported
cacm
october
1971
ansi
subcommittee
x3j3
american
national
standard
fortran
basic
fortran
programming
language
standardization
language
standard
specification
language
standard
maintenance
language
standard
clarification
language
standard
interpretation
standardization
committee
1
2
2
0
2
19
2
2
2
3
4
0
4
12
4
19
4
20
4
22
4
29
4
43
5
23
5
9
6
9
ca711002
jb
february
2
1978
1
30
pm
1613
4
2154
1646
4
2154
1845
4
2154
1900
4
2154
1900
4
2154
1955
4
2154
2025
4
2154
2083
4
2154
2154
4
2154
2154
4
2154
2154
4
2154
2270
4
2154
2365
4
2154
2506
4
2154
2693
4
2154
2915
4
2154
3060
4
2154
3060
4
2154
987
5
2154
988
5
2154
1900
5
2154
2154
5
2154
2154
5
2154
2154
5
2154
3060
5
2154
987
6
2154
1900
6
2154
2154
6
2154
</TEXT>
</DOC>
<DOC>
<DOCNO>2155</DOCNO>
<TEXT>
toward
an
understanding
of
data
structures
this
paper
presents
a
notation
and
formalism
for
describing
the
semantics
of
data
structures
this
is
based
on
directed
graphs
with
named
edges
and
transformations
on
these
graphs
in
addition
an
implementation
facility
is
described
which
could
be
part
of
a
programming
language
which
allows
a
programmer
who
has
expressed
the
semantics
of
an
algorithm
in
terms
of
the
graphs
to
then
specify
the
implementation
of
some
of
his
data
structures
in
order
to
gain
efficiency
cacm
october
1971
earley
j
data
structures
graph
implementation
semantic
formalism
programming
language
4
22
4
9
5
24
ca711001
jb
february
2
1978
1
35
pm
1024
4
2155
1051
4
2155
1051
4
2155
1102
4
2155
1132
4
2155
1390
4
2155
1486
4
2155
1549
4
2155
1552
4
2155
1665
4
2155
1706
4
2155
1826
4
2155
1860
4
2155
1860
4
2155
1878
4
2155
1957
4
2155
378
4
2155
2060
4
2155
2155
4
2155
2155
4
2155
2155
4
2155
2155
4
2155
2155
4
2155
2162
4
2155
2168
4
2155
2294
4
2155
2406
4
2155
2558
4
2155
2710
4
2155
2715
4
2155
2716
4
2155
2717
4
2155
2718
4
2155
2719
4
2155
2723
4
2155
2765
4
2155
2817
4
2155
2838
4
2155
2842
4
2155
2842
4
2155
2855
4
2155
2879
4
2155
2888
4
2155
2901
4
2155
2957
4
2155
2959
4
2155
2965
4
2155
3077
4
2155
3077
4
2155
3080
4
2155
3087
4
2155
3106
4
2155
3150
4
2155
3154
4
2155
627
4
2155
106
4
2155
210
5
2155
1389
5
2155
378
5
2155
2046
5
2155
2060
5
2155
2155
5
2155
2155
5
2155
2155
5
2155
2252
5
2155
2594
5
2155
1358
6
2155
1496
6
2155
1771
6
2155
2155
6
2155
2155
6
2155
2204
6
2155
3184
6
2155
3186
6
2155
</TEXT>
</DOC>
<DOC>
<DOCNO>2156</DOCNO>
<TEXT>
comment
on
cheney
list
compaction
algorithm
cacm
september
1971
fenichel
r
r
lisp
garbage
collector
virtual
memory
list
processing
storage
allocation
4
19
4
49
ca710908
jb
february
2
1978
1
36
pm
1708
4
2156
1781
4
2156
1826
4
2156
1860
4
2156
1972
4
2156
2156
4
2156
2156
4
2156
2156
4
2156
2168
4
2156
2168
4
2156
2249
4
2156
2314
4
2156
2361
4
2156
2438
4
2156
2513
4
2156
2719
4
2156
2723
4
2156
2736
4
2156
2736
4
2156
2736
4
2156
2833
4
2156
2833
4
2156
2855
4
2156
2855
4
2156
3074
4
2156
3074
4
2156
3106
4
2156
3112
4
2156
3112
4
2156
1626
5
2156
1826
5
2156
1972
5
2156
2156
5
2156
2156
5
2156
2156
5
2156
</TEXT>
</DOC>
<DOC>
<DOCNO>2157</DOCNO>
<TEXT>
average
binary
search
length
for
dense
ordered
lists
cacm
september
1971
flores
i
madpis
g
searching
binary
searching
record
retrieval
3
74
ca710907
jb
february
2
1978
1
42
pm
2157
5
2157
2157
5
2157
2157
5
2157
2293
5
2157
2157
6
2157
</TEXT>
</DOC>
<DOC>
<DOCNO>2158</DOCNO>
<TEXT>
a
stopping
criterion
for
the
newton
raphson
method
in
implicit
multistep
integration
algorithms
for
nonlinear
systems
of
ordinary
differential
equations
cacm
september
1971
liniger
w
ordinary
differential
equations
linear
multistep
formulas
newton
raphson
method
stopping
criterion
5
11
5
15
5
17
ca710906
jb
february
2
1978
2
13
pm
2158
5
2158
2158
5
2158
2158
5
2158
</TEXT>
</DOC>
<DOC>
<DOCNO>2159</DOCNO>
<TEXT>
a
note
on
best
one
sided
approximations
cacm
september
1971
phillips
d
l
best
approximation
one
sided
approximation
logarithmic
error
relative
error
5
11
5
13
ca710905
jb
february
2
1978
2
15
pm
1440
4
2159
1832
4
2159
1932
4
2159
1999
4
2159
2159
4
2159
2159
4
2159
962
5
2159
1932
5
2159
2159
5
2159
2159
5
2159
2159
5
2159
</TEXT>
</DOC>
<DOC>
<DOCNO>2160</DOCNO>
<TEXT>
canonical
structure
in
attribute
based
file
organization
a
new
file
structure
for
attribute
based
retrieval
is
proposed
in
this
paper
it
allows
queries
involving
arbitrary
boolean
functions
of
the
attribute
value
pairs
to
be
processed
without
taking
intersections
of
lists
the
structure
is
highly
dependent
on
the
way
in
which
the
file
is
to
be
used
and
is
uniquely
determined
by
the
specification
of
the
allowed
queries
thus
for
example
the
structure
for
retrieval
on
the
basis
of
ranges
of
values
of
a
given
attribute
would
be
very
different
from
one
where
only
retrieval
on
the
basis
of
a
single
value
is
permitted
the
file
organization
being
proposed
is
based
on
the
atoms
of
a
boolean
algebra
generated
by
the
queries
the
desirable
properties
claimed
for
this
structure
are
proved
and
file
maintenance
questions
are
discussed
cacm
september
1971
wong
e
chiang
t
c
address
calculation
atoms
of
boolean
algebra
attributes
boolean
functions
boolean
queries
file
organization
information
retrieval
inverted
file
key
words
multilist
queries
searches
3
70
3
73
3
74
ca710904
jb
february
2
1978
2
22
pm
2160
4
2160
2688
4
2160
2114
5
2160
2160
5
2160
2160
5
2160
2160
5
2160
3134
5
2160
1976
6
2160
2160
6
2160
2524
6
2160
2990
6
2160
</TEXT>
</DOC>
<DOC>
<DOCNO>2161</DOCNO>
<TEXT>
an
algorithm
for
the
blocks
and
cutnodes
of
a
graph
corrigendum
cacm
september
1971
paton
k
ca710903
jb
february
2
1978
2
24
pm
2161
5
2161
2161
5
2161
2161
5
2161
</TEXT>
</DOC>
<DOC>
<DOCNO>2162</DOCNO>
<TEXT>
an
efficient
bit
table
technique
for
dynamic
storage
allocation
of
2
n
word
blocks
an
efficient
bit
table
technique
for
dynamic
storage
allocation
of
2
n
word
blocks
which
requires
a
minimized
amount
of
memory
for
bookkeeping
purposes
is
described
the
technique
has
been
tested
in
an
implementation
of
the
list
processing
language
l
6
a
number
of
ideas
incorporated
in
the
processor
are
also
described
cacm
september
1971
isoda
s
goto
e
bit
table
dynamic
storage
allocation
buddy
system
l
6
list
processing
free
storage
3
89
4
12
4
9
ca710902
jb
february
2
1978
2
33
pm
1389
4
2162
1552
4
2162
1860
4
2162
1957
4
2162
2155
4
2162
2162
4
2162
2162
4
2162
2435
4
2162
2596
4
2162
2768
4
2162
2845
4
2162
2902
4
2162
2955
4
2162
1184
5
2162
1389
5
2162
2162
5
2162
2162
5
2162
2162
5
2162
</TEXT>
</DOC>
<DOC>
<DOCNO>2163</DOCNO>
<TEXT>
education
related
to
the
use
of
computers
in
organizations
the
acm
curriculum
committee
on
computer
education
for
management
has
been
carrying
out
a
study
on
curriculum
development
in
management
information
systems
education
in
colleges
and
universities
under
a
grant
from
the
national
science
foundation
this
position
paper
provides
a
framework
for
the
study
preliminary
conclusions
are
presented
on
the
need
for
education
in
administrative
information
systems
and
appropriate
college
curricula
and
courses
are
suggested
also
the
role
of
professional
societies
and
organizations
using
computers
is
discussed
and
the
plans
of
the
committee
are
outlined
the
initial
approach
of
the
committee
has
been
to
describe
the
education
necessary
for
the
effective
use
of
computers
in
organizations
to
classify
the
positions
for
which
education
is
required
and
to
survey
educational
programs
now
available
cacm
september
1971
teichroew
d
education
information
analysis
systems
design
business
data
processing
1
52
3
51
ca710901
jb
february
2
1978
2
40
pm
1720
4
2163
1927
4
2163
2147
4
2163
2163
4
2163
2163
4
2163
2163
4
2163
2163
4
2163
2345
4
2163
2345
4
2163
2407
4
2163
2478
4
2163
2594
4
2163
2852
4
2163
2899
4
2163
3003
4
2163
3130
4
2163
1720
5
2163
1771
5
2163
1927
5
2163
2163
5
2163
2163
5
2163
2163
5
2163
2181
5
2163
2407
5
2163
3003
5
2163
1659
6
2163
1678
6
2163
1927
6
2163
1945
6
2163
2097
6
2163
2147
6
2163
2163
6
2163
2163
6
2163
2181
6
2163
2187
6
2163
2329
6
2163
2345
6
2163
2345
6
2163
2367
6
2163
2407
6
2163
2478
6
2163
2479
6
2163
2480
6
2163
2538
6
2163
</TEXT>
</DOC>
<DOC>
<DOCNO>2164</DOCNO>
<TEXT>
symbolic
integration
the
stormy
decade
three
approaches
to
symbolic
integration
in
the
1960
are
described
the
first
from
artificial
intelligence
led
to
slagle
saint
and
to
a
large
degree
to
moses
sin
the
second
from
algebraic
manipulation
led
to
manove
implementation
and
to
horowitz
and
tobey
reexamination
of
the
hermite
algorithm
for
integrating
rational
functions
the
third
from
mathematics
led
to
richardson
proof
of
the
unsolvability
of
the
problem
for
a
class
of
functions
and
for
risch
decision
procedure
for
the
elementary
functionseneralizations
of
risch
algorithm
to
a
class
of
special
functions
and
programs
for
solving
differential
equations
and
for
finding
the
definite
integral
are
also
described
cacm
august
1971
moses
j
integration
symbolic
integration
definite
integrals
rational
functions
3
1
3
2
3
6
4
9
5
2
5
9
ca710808
jb
february
2
1978
2
48
pm
2164
4
2164
2170
4
2164
2323
4
2164
2719
4
2164
2167
5
2164
2164
5
2164
2164
5
2164
2164
5
2164
2323
5
2164
2164
6
2164
2167
6
2164
2170
6
2164
</TEXT>
</DOC>
<DOC>
<DOCNO>2165</DOCNO>
<TEXT>
general
relativity
and
the
application
of
algebraic
manipulative
systems
the
paper
describes
some
applications
of
symbolic
algebra
systems
to
problems
of
general
relativity
including
the
derivation
of
the
field
equations
the
petrov
classification
of
a
metric
and
the
solution
of
the
field
equations
in
the
presence
of
matter
in
a
simple
case
attention
is
drawn
to
the
strictly
algebraic
difficulties
encountered
in
this
work
cacm
august
1971
barton
d
fitch
j
p
symbolic
mathematics
nonnumerical
mathematics
general
relativity
algebraic
manipulation
equation
manipulation
1
3
3
11
5
10
ca710807
jb
february
2
1978
2
53
pm
2165
5
2165
2165
5
2165
2165
5
2165
2170
5
2165
3071
5
2165
2165
6
2165
2165
6
2165
2167
6
2165
2166
6
2165
</TEXT>
</DOC>
<DOC>
<DOCNO>2166</DOCNO>
<TEXT>
automated
algebraic
manipulation
in
celestial
mechanics
in
this
paper
we
consider
some
of
the
applications
of
automated
algebraic
manipulation
which
have
been
made
in
celestial
mechanics
particular
attention
is
paid
to
the
use
of
poisson
series
and
a
typical
problem
in
perturbation
theory
is
described
the
requirements
of
processors
for
use
in
celestial
mechanics
are
considered
and
compared
with
those
for
general
manipulation
packages
some
future
directions
for
research
using
these
systems
are
briefly
outlined
to
illustrate
the
relative
simplicity
of
the
algorithm
required
in
celestial
mechanics
a
typical
integration
problem
is
considered
in
an
appendix
cacm
august
1971
jefferys
w
h
series
manipulation
automated
algebra
celestial
mechanics
5
10
5
13
5
17
ca710806
jb
february
2
1978
3
31
pm
2166
5
2166
2166
5
2166
2166
5
2166
2170
5
2166
2165
6
2166
2167
6
2166
2166
6
2166
</TEXT>
</DOC>
<DOC>
<DOCNO>2167</DOCNO>
<TEXT>
algebraic
simplification
a
guide
for
the
perplexed
algebraic
simplification
is
examined
first
from
the
point
of
view
of
a
user
who
needs
to
comprehend
a
large
expression
and
second
from
the
point
of
view
of
a
designer
who
wants
to
construct
a
useful
and
efficient
system
first
we
describe
various
techniques
akin
to
substitution
these
techniques
can
be
used
to
decrease
thesize
of
an
expression
and
make
it
more
intelligible
to
a
user
then
we
delineate
the
spectrum
of
approaches
to
the
design
of
automatic
simplification
capabilities
in
an
algebraic
manipulation
system
systems
are
divided
into
five
types
each
type
provides
different
facilities
for
the
manipulation
and
simplification
of
expressions
finally
we
discuss
some
of
the
theoretical
results
related
to
algebraic
simplification
we
describe
several
positive
results
about
the
existence
of
powerful
simplification
algorithms
and
the
number
theoretic
conjectures
on
which
they
rely
results
about
the
nonexistence
of
algorithms
for
certain
classes
of
expressions
are
included
cacm
august
1971
moses
j
algebraic
manipulation
algebraic
simplification
canonical
simplification
3
1
3
2
3
6
4
9
5
2
5
9
ca710805
jb
february
2
1978
3
42
pm
1396
4
2167
1396
4
2167
1946
4
2167
2167
4
2167
2167
4
2167
2167
4
2167
2167
4
2167
2857
4
2167
2956
4
2167
1379
5
2167
1393
5
2167
1392
5
2167
2167
5
2167
2167
5
2167
2167
5
2167
2164
5
2167
2169
5
2167
2170
5
2167
2323
5
2167
2719
5
2167
1626
6
2167
210
6
2167
2151
6
2167
2164
6
2167
2165
6
2167
2167
6
2167
2167
6
2167
2167
6
2167
2167
6
2167
2166
6
2167
2170
6
2167
2210
6
2167
2645
6
2167
2657
6
2167
</TEXT>
</DOC>
<DOC>
<DOCNO>2168</DOCNO>
<TEXT>
list
tracing
in
systems
allowing
multiple
cell
types
list
processing
systems
have
each
allowed
the
use
of
only
a
single
size
and
configuration
of
list
cell
in
this
paper
a
system
is
described
which
allows
the
use
of
arbitrarily
many
different
sizes
and
configurations
of
list
cells
possibly
not
specified
until
run
time
cacm
august
1971
fenichel
r
r
list
processing
storage
allocation
lisp
slip
based
storage
pointers
4
49
ca710804
jb
february
2
1978
3
45
pm
1024
4
2168
1024
4
2168
1051
4
2168
1051
4
2168
1098
4
2168
1102
4
2168
1132
4
2168
1214
4
2168
1380
4
2168
1388
4
2168
1390
4
2168
1393
4
2168
1485
4
2168
1486
4
2168
1487
4
2168
1549
4
2168
1549
4
2168
1570
4
2168
1706
4
2168
1708
4
2168
1781
4
2168
1826
4
2168
1826
4
2168
1860
4
2168
1878
4
2168
1878
4
2168
1946
4
2168
1957
4
2168
1972
4
2168
378
4
2168
2023
4
2168
2060
4
2168
2155
4
2168
2156
4
2168
2156
4
2168
2168
4
2168
2168
4
2168
2168
4
2168
2168
4
2168
2168
4
2168
2249
4
2168
2314
4
2168
2438
4
2168
2719
4
2168
2719
4
2168
2723
4
2168
2723
4
2168
2723
4
2168
2736
4
2168
2736
4
2168
2833
4
2168
2833
4
2168
2838
4
2168
2842
4
2168
2855
4
2168
2855
4
2168
2857
4
2168
2879
4
2168
3074
4
2168
3077
4
2168
3080
4
2168
3106
4
2168
3112
4
2168
3112
4
2168
627
4
2168
106
4
2168
210
5
2168
1626
5
2168
1826
5
2168
1878
5
2168
2168
5
2168
2168
5
2168
2168
5
2168
731
5
2168
</TEXT>
</DOC>
<DOC>
<DOCNO>2169</DOCNO>
<TEXT>
the
altran
system
for
rational
function
manipulation
a
survey
altran
is
a
complete
system
for
symbolic
computation
with
rational
functions
in
several
variables
with
integer
coefficients
it
has
been
designed
and
implemented
to
handle
large
problems
with
ease
and
efficiency
considerable
effort
has
been
spent
to
ensure
a
minimum
amount
of
machine
dependence
in
the
implementation
thus
permitting
the
system
to
be
installed
quickly
and
easily
on
a
variety
of
computing
machines
in
this
paper
a
brief
description
of
the
language
run
time
data
structures
and
implementation
is
given
cacm
august
1971
hall
jr
a
d
symbolic
algebra
rational
function
manipulation
polynomial
manipulation
interpreters
translators
4
13
4
29
ca710803
jb
february
2
1978
4
17
pm
2167
5
2169
2169
5
2169
2169
5
2169
2169
5
2169
1379
6
2169
1392
6
2169
1393
6
2169
2169
6
2169
</TEXT>
</DOC>
<DOC>
<DOCNO>2170</DOCNO>
<TEXT>
applications
of
symbol
manipulation
in
theoretical
physics
this
paper
surveys
the
applications
of
symbolic
computation
techniques
to
problems
in
theoretical
physics
particular
emphasis
is
placed
on
applications
in
quantum
electrodynamics
where
the
most
activity
has
occurred
cacm
august
1971
hearn
a
c
symbol
manipulation
algebraic
simplification
computational
physics
quantum
electrodynamics
3
17
4
22
ca710802
jb
february
2
1978
4
21
pm
2164
4
2170
2170
4
2170
2170
4
2170
2170
4
2170
2323
4
2170
2719
4
2170
3071
4
2170
2167
5
2170
2165
5
2170
2166
5
2170
2170
5
2170
2170
5
2170
2170
5
2170
2323
5
2170
2164
6
2170
2167
6
2170
2170
6
2170
</TEXT>
</DOC>
<DOC>
<DOCNO>2171</DOCNO>
<TEXT>
solution
of
simultaneous
nonlinear
equations
cacm
july
1971
raduchel
w
j
nonlinear
equations
5
15
ca710711
jb
february
2
1978
4
31
pm
2171
5
2171
2171
5
2171
2171
5
2171
</TEXT>
</DOC>
<DOC>
<DOCNO>2172</DOCNO>
<TEXT>
graph
plotter
j6
algorithm
412
cacm
july
1971
cermak
j
plot
graph
line
printer
plot
4
41
ca710710
jb
february
2
1978
4
32
pm
2172
5
2172
2172
5
2172
2172
5
2172
</TEXT>
</DOC>
<DOC>
<DOCNO>2173</DOCNO>
<TEXT>
three
procedures
for
the
stable
marriage
problem
h
algorithm
411
cacm
july
1971
mcvitie
d
g
wilson
l
b
assignment
problems
assignment
procedures
combinatorics
discrete
mathematics
operations
research
stable
marriage
problem
university
entrance
5
30
ca710709
jb
february
2
1978
4
35
pm
2173
5
2173
2173
5
2173
2173
5
2173
2174
5
2173
2173
6
2173
</TEXT>
</DOC>
<DOC>
<DOCNO>2174</DOCNO>
<TEXT>
the
stable
marriage
problem
the
original
work
of
gale
and
shapley
on
an
assignment
method
using
the
stable
marriage
criterion
has
been
extended
to
find
all
the
stable
marriage
assignments
the
algorithm
derived
for
finding
all
the
stable
marriage
assignments
is
proved
to
satisfy
all
the
conditions
of
the
problem
algorithm
411
applies
to
this
paper
cacm
july
1971
mcvitie
d
g
wilson
l
b
assignment
problems
assignment
procedures
combinatorics
discrete
mathematics
operational
research
stable
marriage
problem
university
entrance
5
30
ca710708
jb
february
2
1978
4
40
pm
2174
4
2174
2173
5
2174
2174
5
2174
2174
5
2174
2174
5
2174
</TEXT>
</DOC>
<DOC>
<DOCNO>2175</DOCNO>
<TEXT>
subexpression
ordering
in
the
execution
of
arithmetic
expressions
an
arithmetic
expression
can
often
be
broken
down
into
its
component
subexpressions
depending
on
the
hardware
environment
in
which
the
expression
is
to
be
executed
these
subexpressions
can
be
evaluated
in
serials
in
parallel
or
in
a
combination
of
these
modes
this
paper
shows
that
expression
execution
time
can
be
minimized
only
if
consideration
is
given
to
the
ordering
of
the
subexpressions
in
particular
subexpressions
should
be
executed
in
order
of
decreasing
memory
and
processor
time
requirements
this
observation
is
valid
for
configurations
ranging
from
a
uniprocessor
with
an
unbuffered
main
memory
to
multiprocessor
with
a
cache
buffer
memory
if
the
number
of
subexpressions
which
can
be
executed
in
parallel
exceeds
the
number
of
available
processors
then
execution
of
some
of
these
subexpressions
must
be
postponed
a
procedure
is
given
which
combines
this
requirement
with
the
earlier
ordering
considerations
to
provide
an
optimal
execution
sequence
cacm
july
1971
ramamoorthy
c
v
gonzalez
m
j
parallel
processing
cache
arithmetic
expressions
subexpression
ordering
computational
trees
compilers
4
12
4
32
ca710707
jb
february
2
1978
4
49
pm
1781
4
2175
1807
4
2175
1934
4
2175
2175
4
2175
2175
4
2175
2175
4
2175
1551
5
2175
1613
5
2175
1886
5
2175
2175
5
2175
2175
5
2175
2175
5
2175
2413
5
2175
2175
6
2175
</TEXT>
</DOC>
<DOC>
<DOCNO>2176</DOCNO>
<TEXT>
buffer
allocation
in
merge
sorting
a
fixed
buffer
allocation
for
merge
sorting
is
presented
here
which
minimizes
the
number
of
input
output
operations
for
a
given
order
of
merge
when
sorting
on
movable
arm
disks
the
number
of
seeks
is
equal
to
the
number
of
input
output
operations
and
the
seek
time
usually
controls
the
sort
time
first
some
standard
terminology
is
introduced
then
the
input
buffer
allocation
method
is
described
followed
by
an
analysis
of
the
improvement
to
be
expected
over
more
conventional
allocation
this
analysis
makes
use
of
a
particular
distribution
function
an
analysis
of
a
completely
different
distribution
is
given
which
yields
similar
results
this
suggests
that
the
results
do
not
depend
on
a
particular
distribution
function
an
optimum
output
buffer
size
is
also
determined
it
is
concluded
that
this
buffering
allocation
can
significantly
reduce
the
time
of
merge
sorting
on
movable
arm
disks
when
the
input
data
are
not
random
and
that
this
output
buffer
allocation
should
be
used
whether
the
data
is
random
or
not
cacm
july
1971
ferguson
d
e
file
item
string
merge
sort
seek
time
gamma
distribution
function
4
41
5
31
ca710706
jb
february
3
1978
8
41
am
1638
4
2176
2176
4
2176
2272
4
2176
2176
5
2176
2176
5
2176
2176
5
2176
677
5
2176
</TEXT>
</DOC>
<DOC>
<DOCNO>2177</DOCNO>
<TEXT>
an
algorithm
for
the
blocks
and
cutnodes
of
a
graph
an
efficient
method
is
presented
for
finding
blocks
and
cutnodes
of
an
arbitrary
undirected
graph
the
graph
may
be
represented
either
i
as
an
ordered
list
of
edges
or
ii
as
a
packed
adjacency
matrix
if
w
denotes
the
word
length
of
the
machine
employed
the
storage
in
machine
words
required
for
a
graph
with
n
nodes
and
m
edges
increases
essentially
as
2
m
n
in
case
i
or
n
2
win
case
ii
a
spanning
tree
with
labeled
edges
is
grown
two
edges
finally
bearing
different
labels
if
and
only
if
they
belong
to
different
blocks
for
both
representations
the
time
required
to
analyze
a
graph
on
n
nodes
increases
as
n
g
where
g
depends
on
the
type
of
graph
1
g
2
and
both
bounds
are
attained
values
of
g
are
derived
for
each
of
several
suitable
families
of
test
graphs
generated
by
an
extension
of
the
web
grammar
approach
the
algorithm
is
compared
in
detail
with
that
proposed
by
read
for
which
1
g
3
cacm
july
1971
paton
k
algorithm
block
block
cutpoint
tree
cutnode
fundamental
cycle
set
graph
lobe
lobe
decomposition
graph
separable
spanning
tree
web
grammar
5
32
ca710705
jb
february
3
1978
8
58
am
1961
4
2177
2177
4
2177
2763
4
2177
1847
5
2177
2177
5
2177
2177
5
2177
2177
5
2177
2490
5
2177
2177
6
2177
</TEXT>
</DOC>
<DOC>
<DOCNO>2178</DOCNO>
<TEXT>
a
language
extension
for
graph
processing
and
its
formal
semantics
a
simple
programming
language
extension
graspe
for
processing
directed
graphs
is
defined
graspe
consists
of
a
type
of
directed
graph
data
structure
and
a
set
of
primitive
operations
for
manipulating
these
structures
graspe
may
be
most
easily
implemented
by
embedding
it
in
a
host
language
emphasis
is
placed
both
on
graspe
itself
and
on
its
method
of
definition
commonly
the
definition
of
a
language
involves
definition
of
the
syntactic
elements
and
explanation
of
the
meaning
to
be
assigned
them
the
semantics
the
definition
of
graspe
here
is
solely
in
terms
of
its
semantics
that
is
the
data
structures
and
operations
are
defined
precisely
but
without
assignment
of
a
particular
syntactic
representation
only
when
the
language
is
implemented
is
assignment
of
an
explicit
syntax
necessary
an
example
of
an
implementation
of
graspe
embedded
in
lisp
is
given
as
an
illustration
the
advantages
and
disadvantages
of
the
definition
of
a
language
in
terms
of
its
semantics
are
discussed
cacm
july
1971
pratt
t
w
friedman
d
p
graph
processing
programming
language
formal
semantics
directed
graph
lisp
network
data
structure
flowchart
syntax
language
definition
4
20
4
22
5
23
5
24
5
32
ca710704
jb
february
3
1978
9
24
am
1086
4
2178
1132
4
2178
1234
4
2178
1263
4
2178
1265
4
2178
1270
4
2178
1323
4
2178
1358
4
2178
1379
4
2178
1380
4
2178
1453
4
2178
1464
4
2178
1469
4
2178
1484
4
2178
1486
4
2178
1491
4
2178
1491
4
2178
1498
4
2178
1613
4
2178
1614
4
2178
1781
4
2178
1781
4
2178
1781
4
2178
1825
4
2178
1860
4
2178
2083
4
2178
2178
4
2178
2178
4
2178
2178
4
2178
2178
4
2178
2178
4
2178
2179
4
2178
2252
4
2178
2325
4
2178
2326
4
2178
2326
4
2178
2341
4
2178
2396
4
2178
2470
4
2178
2546
4
2178
2561
4
2178
2645
4
2178
2652
4
2178
2684
4
2178
2684
4
2178
2684
4
2178
2842
4
2178
2929
4
2178
2934
4
2178
3044
4
2178
3069
4
2178
669
4
2178
679
4
2178
691
4
2178
761
4
2178
949
4
2178
989
4
2178
1303
5
2178
1323
5
2178
2059
5
2178
2127
5
2178
2178
5
2178
2178
5
2178
2178
5
2178
3184
5
2178
</TEXT>
</DOC>
<DOC>
<DOCNO>2179</DOCNO>
<TEXT>
simple
lr
k
grammars
a
class
of
context
free
grammars
called
the
simple
lr
k
or
slr
k
grammars
is
defined
this
class
has
been
shown
to
include
weak
precedence
and
simple
precedence
grammars
as
proper
subsets
how
to
construct
parsers
for
the
slr
k
grammars
is
also
shown
these
parser
construction
techniques
are
extendible
to
cover
all
of
the
lr
k
grammars
of
knuth
they
have
been
implemented
and
by
direct
comparison
proved
to
be
superior
to
precedence
techniques
not
only
in
the
range
of
grammars
covered
but
also
in
the
speed
of
parser
construction
and
in
the
size
and
speed
of
the
resulting
parsers
cacm
july
1971
deremer
f
l
context
free
grammar
lr
k
grammar
precedence
grammar
syntactic
analysis
parsing
algorithm
parser
finite
state
machine
deterministic
pushdown
automaton
4
12
5
22
5
23
ca710703
jb
february
3
1978
9
31
am
1086
4
2179
1132
4
2179
1234
4
2179
1263
4
2179
1265
4
2179
1270
4
2179
1323
4
2179
1358
4
2179
1379
4
2179
1379
4
2179
1380
4
2179
1453
4
2179
1464
4
2179
1484
4
2179
1491
4
2179
1498
4
2179
1542
4
2179
1613
4
2179
1614
4
2179
1683
4
2179
1693
4
2179
1693
4
2179
1781
4
2179
1781
4
2179
1781
4
2179
1787
4
2179
1825
4
2179
1836
4
2179
1836
4
2179
1860
4
2179
1945
4
2179
1945
4
2179
1989
4
2179
2015
4
2179
2060
4
2179
2060
4
2179
2060
4
2179
2061
4
2179
2061
4
2179
2061
4
2179
2083
4
2179
2082
4
2179
2091
4
2179
2091
4
2179
2152
4
2179
2178
4
2179
2179
4
2179
2179
4
2179
2179
4
2179
2179
4
2179
2179
4
2179
2179
4
2179
2252
4
2179
2325
4
2179
2341
4
2179
2340
4
2179
2356
4
2179
2423
4
2179
2546
4
2179
2546
4
2179
2546
4
2179
2603
4
2179
2645
4
2179
2652
4
2179
2684
4
2179
2698
4
2179
2698
4
2179
2698
4
2179
2708
4
2179
2708
4
2179
2824
4
2179
2842
4
2179
2921
4
2179
2929
4
2179
2934
4
2179
2982
4
2179
2986
4
2179
3045
4
2179
3045
4
2179
3069
4
2179
3093
4
2179
3154
4
2179
669
4
2179
679
4
2179
691
4
2179
761
4
2179
949
4
2179
989
4
2179
1477
5
2179
1491
5
2179
1825
5
2179
2015
5
2179
2110
5
2179
2179
5
2179
2179
5
2179
2179
5
2179
2733
5
2179
2986
5
2179
3093
5
2179
3094
5
2179
3184
5
2179
1265
6
2179
1491
6
2179
1491
6
2179
1683
6
2179
1781
6
2179
1836
6
2179
2179
6
2179
2179
6
2179
2179
6
2179
2179
6
2179
2340
6
2179
2423
6
2179
2645
6
2179
2708
6
2179
2786
6
2179
680
6
2179
799
6
2179
</TEXT>
</DOC>
<DOC>
<DOCNO>2180</DOCNO>
<TEXT>
a
programmer
training
project
a
project
is
described
whose
purpose
is
to
train
selected
black
residents
of
the
albany
schenectady
area
in
computer
programming
and
arrange
for
jobs
for
them
in
the
computer
field
both
the
organization
and
curriculum
of
the
course
are
discussed
cacm
july
1971
bernstein
a
j
programmer
training
job
opportunities
fortran
1
59
ca710702
jb
february
3
1978
9
36
am
2180
5
2180
2180
5
2180
2180
5
2180
</TEXT>
</DOC>
<DOC>
<DOCNO>2181</DOCNO>
<TEXT>
the
state
of
computer
oriented
curricula
in
business
schools
1970
the
acm
committee
on
computer
education
for
management
supported
by
a
national
science
foundation
grant
is
established
to
appraise
the
state
of
the
art
and
to
develop
a
series
of
recommendations
for
improving
computer
education
for
management
to
provide
the
committee
with
material
for
its
study
of
curricular
needs
five
regional
meetings
in
the
united
states
were
held
in
1970
at
each
of
which
a
broad
cross
section
of
invited
academicians
and
practitioners
considered
the
state
of
curricula
in
business
schools
three
topics
were
covered
curricula
for
the
general
manager
computer
related
material
in
required
and
functional
courses
and
curricula
for
students
concentrating
on
computer
based
information
systems
an
analysis
of
the
minutes
of
the
meetings
revealed
a
common
set
of
experiences
which
raised
similar
pedagogic
and
economic
issues
this
presentation
gives
a
summary
of
the
discussions
a
condensation
of
the
pedagogic
and
substantive
concerns
raised
and
consideration
of
the
resource
allocation
issues
involved
preliminary
to
the
committee
recommendations
for
improving
computer
education
for
management
this
report
has
been
prepared
to
provide
the
participants
and
the
administrators
of
their
institutions
with
background
information
for
the
ongoing
task
of
course
development
chairman
of
the
ten
man
committee
is
daniel
teichroew
the
university
of
michigan
cacm
july
1971
mckenney
j
l
tonge
f
m
university
programs
management
education
curriculum
design
business
administration
curricula
graduate
business
school
resource
planning
1
52
3
5
ca710701
jb
february
3
1978
9
47
am
2163
5
2181
2181
5
2181
2181
5
2181
2181
5
2181
2345
5
2181
2407
5
2181
1720
6
2181
1771
6
2181
1771
6
2181
1927
6
2181
2163
6
2181
2181
6
2181
2181
6
2181
2181
6
2181
2345
6
2181
</TEXT>
</DOC>
<DOC>
<DOCNO>2182</DOCNO>
<TEXT>
interrupt
driven
programming
cacm
july
1971
zelkowitz
m
interrupts
supervisors
monitors
debugging
parallel
processing
associative
memories
microprogramming
3
51
4
32
4
42
ca710608
jb
february
3
1978
9
49
am
2182
4
2182
2534
4
2182
1959
5
2182
2182
5
2182
2182
5
2182
2182
5
2182
2497
5
2182
2534
5
2182
830
6
2182
1471
6
2182
1787
6
2182
1959
6
2182
1973
6
2182
2111
6
2182
2182
6
2182
2182
6
2182
799
6
2182
</TEXT>
</DOC>
<DOC>
<DOCNO>2183</DOCNO>
<TEXT>
binary
summation
cacm
july
1971
walker
r
j
summation
binary
summation
floating
point
addition
round
off
errors
5
11
ca710607
jb
february
3
1978
9
50
am
2183
4
2183
2282
4
2183
2049
5
2183
2183
5
2183
2183
5
2183
2183
5
2183
</TEXT>
</DOC>
<DOC>
<DOCNO>2184</DOCNO>
<TEXT>
on
the
meaning
of
names
in
programming
systems
it
is
assumed
that
there
is
a
similarity
of
function
between
the
data
names
of
a
programming
language
and
the
file
names
of
an
operating
system
the
two
functions
are
discussed
in
terms
of
the
same
basic
concepts
in
order
to
identify
the
extent
to
which
they
overlap
it
is
suggested
that
there
is
some
similarity
between
the
idea
of
a
file
directory
and
a
storable
object
of
type
context
manipulations
with
contexts
are
then
discussed
at
length
it
is
noted
that
there
is
a
simple
extension
of
church
lambda
notation
that
deals
nicely
with
these
ideas
of
context
manipulation
whereas
a
function
can
be
regarded
as
the
abstraction
based
upon
the
first
two
terms
of
the
expression
lambda
name
list
expression
value
list
it
is
found
that
a
context
can
be
viewed
as
an
abstraction
based
upon
the
first
two
terms
in
the
equivalent
expression
mu
name
list
value
list
expression
cacm
july
1971
fraser
a
g
file
operating
system
programming
language
functions
names
context
file
directory
file
dictionary
lambda
calculus
theory
of
programming
3
73
4
22
4
39
5
23
5
24
ca710606
jb
february
3
1978
9
58
am
2184
5
2184
2184
5
2184
2184
5
2184
</TEXT>
</DOC>
<DOC>
<DOCNO>2185</DOCNO>
<TEXT>
a
note
on
compiling
fixed
point
binary
multiplications
an
algorithm
is
developed
for
compiling
as
a
sequence
of
shifts
additions
and
subtractions
many
fixed
point
binary
multiplications
involving
a
constant
the
most
significant
characteristics
of
the
algorithm
are
the
simplicity
of
the
test
which
determines
if
the
algorithm
should
be
applied
and
the
degree
to
which
it
suggests
efficient
object
code
cacm
june
1971
glaswin
h
t
compiling
multiplications
fixed
point
arithmetic
4
12
ca710605
jb
february
3
1978
10
04
am
2185
5
2185
2185
5
2185
2185
5
2185
2296
5
2185
2952
5
2185
142
6
2185
162
6
2185
163
6
2185
192
6
2185
2185
6
2185
2185
6
2185
2727
6
2185
</TEXT>
</DOC>
<DOC>
<DOCNO>2186</DOCNO>
<TEXT>
numerical
properties
of
the
ritz
trefftz
algorithm
for
optimal
control
in
this
paper
the
ritz
trefftz
algorithm
is
applied
to
the
computer
solution
of
the
state
regulator
problem
the
algorithm
represents
a
modification
of
the
ritz
direct
method
and
is
designed
to
improve
the
speed
of
solution
and
the
storage
requirements
to
the
point
where
real
time
implementation
becomes
feasible
the
modification
is
shown
to
be
more
stable
computationally
than
the
traditional
ritz
approach
the
first
concern
of
the
paper
is
to
describe
the
algorithm
and
establish
its
properties
as
a
valid
and
useful
numerical
technique
in
particular
such
useful
properties
as
definiteness
and
reasonableness
of
condition
are
established
for
the
method
the
second
part
of
the
paper
is
devoted
to
a
comparison
of
the
new
techniques
with
the
standard
procedure
of
numerically
integrating
a
matrix
riccati
equation
to
determine
a
feedback
matrix
the
new
technique
is
shown
to
be
significantly
faster
for
comparable
accuracy
cacm
june
1971
bosarge
jr
w
e
johnson
o
g
splines
regulator
problem
control
theory
numerical
analysis
5
1
ca710604
jb
february
3
1978
10
12
am
2186
5
2186
2186
5
2186
2186
5
2186
</TEXT>
</DOC>
<DOC>
<DOCNO>2187</DOCNO>
<TEXT>
computer
science
a
conceptual
framework
for
curriculum
planning
two
views
of
computer
science
are
considered
a
global
view
which
attempts
to
capture
broad
characteristics
of
the
field
and
its
relationships
to
other
fields
and
a
local
view
which
focuses
on
the
inner
structure
of
the
field
this
structure
is
presented
in
terms
of
the
kinds
of
knowledge
problems
and
activities
that
exist
within
the
discipline
as
well
as
the
relations
between
them
an
approach
to
curriculum
planning
in
computer
science
is
presented
which
is
guided
by
the
structure
of
the
field
by
the
fact
that
change
is
an
important
feature
of
the
situation
and
by
the
expectation
that
computer
science
will
continue
to
increase
its
working
contacts
with
other
disciplines
cacm
june
1971
amarel
s
computer
science
curriculum
planning
education
1
0
1
52
ca710603
jb
february
3
1978
10
17
am
1665
4
2187
1768
4
2187
1787
4
2187
1805
4
2187
1824
4
2187
1825
4
2187
1828
4
2187
1836
4
2187
1854
4
2187
1861
4
2187
2015
4
2187
2110
4
2187
2127
4
2187
2187
4
2187
2187
4
2187
2317
4
2187
2545
4
2187
2698
4
2187
2733
4
2187
1748
5
2187
1781
5
2187
2187
5
2187
2187
5
2187
2187
5
2187
3003
5
2187
1659
6
2187
1678
6
2187
1927
6
2187
1945
6
2187
2097
6
2187
2147
6
2187
2163
6
2187
2187
6
2187
2329
6
2187
2345
6
2187
2367
6
2187
2407
6
2187
2478
6
2187
2479
6
2187
2480
6
2187
2538
6
2187
</TEXT>
</DOC>
<DOC>
<DOCNO>2188</DOCNO>
<TEXT>
an
approach
to
the
optimum
design
of
computer
graphics
systems
display
system
designers
are
faced
with
the
difficult
task
of
selecting
major
subsystems
in
an
intelligent
way
each
subsystem
is
chosen
from
large
numbers
of
alternatives
the
selection
is
based
on
considerations
such
as
system
response
time
system
cost
and
the
distribution
of
data
storage
and
processing
between
the
graphics
processor
and
its
supporting
data
processing
system
the
work
reported
here
develops
an
objective
quantitative
design
procedure
and
helps
give
a
better
understanding
of
now
to
configure
display
systems
this
is
accomplished
by
means
of
a
mathematical
model
of
a
computer
driven
graphics
system
the
parameters
of
the
model
are
functions
of
the
capabilities
of
the
graphics
hardware
and
of
the
computational
requirements
of
the
graphics
application
the
model
can
be
analyzed
using
numerical
queueing
analysis
or
simulation
to
obtain
an
average
response
time
prediction
by
combining
the
model
with
an
optimization
the
best
graphics
system
configuration
subject
to
a
cost
constraint
is
found
for
several
applications
the
optimum
configurations
are
in
turn
used
to
find
general
display
system
design
guidelines
cacm
june
1971
foley
j
d
design
guidelines
graphic
display
systems
mathematical
model
optimum
system
design
queueing
model
3
8
6
22
6
35
ca710602
jb
february
3
1978
10
26
am
1805
4
2188
1846
4
2188
1892
4
2188
2188
4
2188
2218
4
2188
2317
4
2188
1572
5
2188
2188
5
2188
2188
5
2188
2188
5
2188
2319
5
2188
1408
6
2188
1719
6
2188
1749
6
2188
1751
6
2188
2016
6
2188
2017
6
2188
2080
6
2188
2188
6
2188
2203
6
2188
2204
6
2188
</TEXT>
</DOC>
<DOC>
<DOCNO>2189</DOCNO>
<TEXT>
generation
of
rosary
permutations
expressed
in
hamiltonian
circuits
systematic
generation
of
a
specific
class
of
permutations
fundamental
to
scheduling
problems
is
described
in
a
nonoriented
complete
graph
with
n
vertices
hamitonian
circuits
equivalent
to
5
n
1
specific
permutations
of
n
elements
termed
rosary
permutations
can
be
defined
each
of
them
corresponds
to
two
circular
permutations
which
mirror
image
each
other
and
is
generated
successively
by
a
number
system
covering
3
4
n
1
sets
of
edges
every
set
of
edges
e
k
1
e
k
k
3
k
n
1
is
determined
recursively
by
constructing
a
hamiltonian
circuit
with
k
vertices
from
a
hamiltonian
circuit
with
k
1
vertices
starting
with
the
hamiltonian
circuit
of
3
vertices
the
basic
operation
consists
of
transposition
of
a
pair
of
adjacent
vertices
where
the
position
of
the
pair
in
the
permutation
is
determined
by
e
k
two
algorithms
treating
the
same
example
for
five
vertices
are
presented
it
is
very
easy
to
derive
all
possible
n
permutations
from
the
5
n
1
rosary
permutations
be
cycling
the
permutations
and
by
taking
them
in
the
reverse
order
procedures
which
can
be
performed
fairly
efficiently
by
computer
cacm
june
1971
harada
k
permutation
graph
theory
scheduling
combinatorial
algebra
5
32
5
39
ca710601
jb
february
3
1978
1
55
pm
2044
4
2189
2087
4
2189
2189
4
2189
2189
4
2189
2189
4
2189
2189
4
2189
2417
4
2189
2505
4
2189
2874
4
2189
2908
4
2189
3188
4
2189
1594
5
2189
2087
5
2189
2189
5
2189
2189
5
2189
2189
5
2189
2292
5
2189
2505
5
2189
521
5
2189
3191
5
2189
2189
6
2189
2189
6
2189
2292
6
2189
521
6
2189
</TEXT>
</DOC>
<DOC>
<DOCNO>2190</DOCNO>
<TEXT>
function
minimization
cacm
may
1971
house
f
r
ca710510
jb
february
3
1978
1
57
pm
2190
4
2190
2190
4
2190
1372
5
2190
1849
5
2190
2190
5
2190
2190
5
2190
2190
5
2190
</TEXT>
</DOC>
<DOC>
<DOCNO>2191</DOCNO>
<TEXT>
algorithm
410
partial
sorting
m1
cacm
may
1971
chambers
j
m
sorting
partial
sorting
order
statistics
5
11
5
13
ca710508
jb
february
3
1978
2
23
pm
1175
4
2191
1919
4
2191
1919
4
2191
1969
4
2191
1997
4
2191
2191
4
2191
2191
4
2191
2388
4
2191
2388
4
2191
2679
4
2191
2783
4
2191
2784
4
2191
3054
4
2191
3054
4
2191
3121
4
2191
3121
4
2191
864
4
2191
308
5
2191
309
5
2191
2191
5
2191
2191
5
2191
2191
5
2191
</TEXT>
</DOC>
<DOC>
<DOCNO>2192</DOCNO>
<TEXT>
another
recursion
induction
principle
an
inductive
method
for
proving
things
about
recursively
defined
functions
is
described
it
is
shown
to
be
useful
for
proving
partial
functions
equivalent
and
thus
applicable
in
proofs
about
interpreters
for
programming
languages
cacm
may
1971
morris
jr
j
h
recursion
induction
correctness
proofs
compiler
correctness
4
13
4
2
5
24
ca710507
jb
february
3
1978
2
27
pm
2192
5
2192
2192
5
2192
2192
5
2192
2326
5
2192
2457
5
2192
2842
5
2192
2903
5
2192
1303
6
2192
1323
6
2192
210
6
2192
1834
6
2192
2060
6
2192
2148
6
2192
2192
6
2192
2192
6
2192
2192
6
2192
2192
6
2192
2326
6
2192
3184
6
2192
3186
6
2192
</TEXT>
</DOC>
<DOC>
<DOCNO>2193</DOCNO>
<TEXT>
on
implementation
of
label
variables
variables
of
label
mode
are
conventionally
implemented
with
a
technique
which
fails
to
trap
certain
programming
errors
fine
grained
calendar
clocks
have
recently
become
available
these
allow
implementation
of
label
variables
via
a
new
technique
which
traps
all
programming
errors
of
this
variety
cacm
may
1971
fenichel
r
r
labels
compiler
interpreter
go
to
transfer
4
22
ca710506
jb
february
3
1978
2
31
pm
2193
4
2193
2193
4
2193
2319
4
2193
2326
4
2193
2477
4
2193
2541
4
2193
2594
4
2193
2894
4
2193
3004
4
2193
2016
5
2193
2193
5
2193
2193
5
2193
2193
5
2193
3101
5
2193
3186
5
2193
2138
6
2193
2193
6
2193
2438
6
2193
3185
6
2193
</TEXT>
</DOC>
<DOC>
<DOCNO>2194</DOCNO>
<TEXT>
how
to
keep
the
addresses
short
an
algorithm
is
presented
for
minimizing
the
sum
of
the
lengths
of
the
blocks
of
coding
produced
by
an
assembler
or
compiler
when
1
the
length
of
each
computer
instruction
is
assumed
to
be
either
long
or
short
long
if
the
memory
location
addressed
is
more
than
a
predetermined
distance
from
the
current
location
short
otherwise
and
2
there
are
blocks
of
instructions
whose
beginnings
origins
are
separated
by
prespecified
amounts
for
example
some
computers
permit
either
8
bit
addressing
interpreted
relative
to
the
location
counter
or
full
16
bit
addressing
of
all
of
memory
when
assembling
or
compiling
two
or
more
blocks
of
instructions
which
have
many
mutual
references
in
such
a
computer
there
is
no
simple
iterative
procedure
for
keeping
as
many
of
the
addresses
short
as
possible
this
paper
demonstrates
that
a
wide
class
of
problems
of
this
type
can
be
formulated
as
covering
problems
solvable
by
means
of
elementary
arithmetic
operations
on
the
column
vectors
of
a
ternary
matrix
cacm
may
1971
richards
d
l
addressing
assembler
covering
problem
integer
programming
variable
length
addressing
4
11
4
12
4
21
5
41
ca710505
jb
february
3
1978
2
40
pm
2194
5
2194
2194
5
2194
2194
5
2194
2858
5
2194
3110
5
2194
2194
6
2194
2194
6
2194
2629
6
2194
2858
6
2194
</TEXT>
</DOC>
<DOC>
<DOCNO>2195</DOCNO>
<TEXT>
on
the
optimal
detection
of
curves
in
noisy
pictures
a
technique
for
recognizing
systems
of
lines
is
presented
in
this
technique
the
heuristic
of
the
problem
is
not
embedded
in
the
recognition
algorithm
but
is
expressed
in
a
figure
of
merit
a
multistage
decision
process
is
then
able
to
recognize
in
the
input
picture
the
optimal
system
of
lines
according
to
the
given
figure
of
merit
due
to
the
global
approach
greater
flexibility
and
adequacy
in
the
particular
problem
is
achieved
the
relation
between
the
structure
of
the
figure
of
merit
and
the
complexity
of
the
optimization
process
is
then
discussed
the
method
described
is
suitable
for
parallel
processing
because
the
operations
relative
to
each
state
can
be
computed
in
parallel
and
the
number
of
stages
is
equal
to
the
length
n
of
the
curves
or
to
log2
n
if
the
approximate
method
is
used
cacm
may
1971
montanari
u
picture
processing
picture
recognition
picture
description
curve
detection
line
detection
edge
detection
optimal
detection
heuristic
methods
global
recognition
parallel
processing
dynamic
programming
interaction
graph
secondary
optimization
problem
3
63
3
66
5
42
ca710504
jb
february
3
1978
2
49
pm
1663
4
2195
2195
4
2195
2679
4
2195
1190
5
2195
2195
5
2195
2195
5
2195
2195
5
2195
2883
5
2195
2195
6
2195
</TEXT>
</DOC>
<DOC>
<DOCNO>2196</DOCNO>
<TEXT>
a
man
machine
approach
toward
solving
the
traveling
salesman
problem
the
traveling
salesman
problem
belongs
to
an
important
class
of
scheduling
and
routing
problems
it
is
also
a
subproblem
in
solving
others
such
as
the
warehouse
distribution
problem
it
has
been
attacked
by
many
mathematical
methods
with
but
meager
success
only
for
special
forms
of
the
problem
or
for
problems
with
a
moderate
number
of
points
can
it
be
solved
exactly
even
if
very
large
amounts
of
computer
time
are
used
heuristic
procedures
have
been
proposed
and
tested
with
only
slightly
better
results
this
paper
describes
a
computer
aided
heuristic
technique
which
uses
only
a
modest
amount
of
computer
time
in
real
time
to
solve
large
100
200
point
problems
this
technique
takes
advantage
of
both
the
computer
and
the
human
problem
solving
abilities
the
computer
is
not
asked
to
solve
the
problem
in
a
brute
force
way
as
in
many
of
today
heuristics
but
it
is
asked
to
organize
the
data
for
the
human
so
that
the
human
can
solve
the
problem
easily
the
technique
used
in
this
paper
seems
to
point
to
new
directions
in
the
field
of
man
machine
interaction
and
in
the
field
of
artificial
intelligence
cacm
may
1971
krolak
p
felts
w
marble
g
heuristic
procedures
computer
aided
heuristic
technique
man
machine
interaction
artificial
intelligence
assignment
problem
mask
of
the
assignment
rubber
band
tour
generator
interaction
process
traveling
salesman
problem
3
57
3
66
5
30
ca710503
jb
february
3
1978
3
00
pm
2196
5
2196
2196
5
2196
2196
5
2196
</TEXT>
</DOC>
<DOC>
<DOCNO>2197</DOCNO>
<TEXT>
the
merit
of
regional
computing
networks
one
of
the
suggested
means
for
stimulating
the
spread
of
computing
capabilities
in
institutions
of
higher
learning
is
through
the
construction
of
regional
computing
networks
one
such
network
has
been
constructed
in
the
san
francisco
bay
area
by
stanford
university
this
paper
reports
upon
the
lessons
learned
from
the
operation
of
the
network
over
the
past
two
years
a
major
impact
of
the
network
was
not
so
much
the
computer
power
delivered
to
the
schools
as
the
awakening
of
computing
awareness
and
the
fostering
of
capability
development
at
these
schools
the
expertise
and
assistance
from
the
central
facility
as
well
as
the
sharing
of
ideas
among
the
participants
were
other
important
benefits
both
the
quality
and
variety
of
services
provided
by
the
central
facility
were
found
to
play
a
key
role
in
the
effectiveness
of
the
network
a
regional
network
brings
many
benefits
and
should
not
be
judged
as
a
purveyor
of
raw
computer
power
alone
cacm
may
1971
nielsen
n
r
computer
sharing
computer
utility
cooperative
networks
curriculum
development
educational
computing
network
computing
regional
computing
networks
remote
computing
shared
computing
1
52
2
11
ca710502
jb
february
3
1978
3
17
pm
2197
5
2197
2197
5
2197
2197
5
2197
</TEXT>
</DOC>
<DOC>
<DOCNO>2198</DOCNO>
<TEXT>
introduction
to
feature
analysis
of
generalized
data
base
management
systems
this
paper
is
a
separately
published
introduction
to
a
main
report
which
analyzes
the
features
of
generalized
data
base
management
systems
this
introduction
gives
a
review
of
the
current
state
of
the
art
in
these
systems
and
discusses
the
differences
and
similarities
between
capabilities
found
in
host
language
systems
and
those
found
in
self
contained
systems
after
some
discussion
of
the
problems
of
data
independence
and
binding
the
four
user
levels
are
identified
and
described
technical
problems
facing
future
designers
are
described
the
first
of
these
is
that
of
handling
existing
stored
data
and
the
next
is
that
of
providing
more
complex
data
structures
than
those
already
available
in
conventional
programming
languages
the
problem
of
high
level
interrogation
and
update
functions
acting
on
network
structures
is
mentioned
followed
by
a
discussion
of
the
problem
of
catering
to
a
high
volume
of
transactions
initiated
from
terminals
by
parametric
users
the
lowest
level
of
user
the
use
of
cobol
as
a
basis
for
further
development
work
is
considered
at
some
length
with
respect
to
data
structures
host
language
capabilities
and
self
contained
capabilities
this
section
also
assesses
the
effect
of
the
data
base
task
group
proposals
the
final
section
outlines
the
ten
major
topics
in
the
main
body
of
the
full
report
cacm
may
1971
codasyl
systems
committee
data
base
management
systems
programming
languages
data
structures
storage
structures
information
retrieval
transaction
processing
3
5
3
70
3
72
3
73
3
74
4
29
ca710501
jb
february
3
1978
3
18
pm
2198
5
2198
2198
5
2198
2198
5
2198
2452
5
2198
2882
5
2198
849
6
2198
1936
6
2198
1976
6
2198
2198
6
2198
2198
6
2198
2452
6
2198
627
6
2198
</TEXT>
</DOC>
<DOC>
<DOCNO>2199</DOCNO>
<TEXT>
a
sparse
matrix
package
part
i
f4
algorithm
408
cacm
april
1971
mcnamee
j
m
matrix
sparse
matrix
matrix
manipulation
5
14
ca710406
jb
february
3
1978
3
20
pm
2199
5
2199
2199
5
2199
2199
5
2199
</TEXT>
</DOC>
<DOC>
<DOCNO>2200</DOCNO>
<TEXT>
on
complement
division
the
division
algorithm
theorem
is
expressed
in
a
form
that
permits
it
to
serve
as
the
basis
for
devising
division
operations
that
produce
both
quotient
and
remainder
in
complement
form
algorithms
for
division
yielding
complement
results
are
derived
for
numbers
represented
in
any
base
greater
than
one
both
radix
and
radix
less
one
complementation
schemes
are
considered
the
binary
form
of
the
algorithms
thus
includes
both
two
and
one
complement
implementation
the
problem
of
quotient
overflow
for
complement
results
is
dealt
with
as
is
that
of
selecting
an
appropriate
form
of
the
remainder
condition
for
complement
division
cacm
april
1971
stein
m
l
munro
w
d
division
algorithm
complement
arithmetic
complement
division
one
complement
arithmetic
two
complement
arithmetic
3
15
4
0
4
9
5
11
6
32
ca710405
jb
february
3
1978
3
28
pm
1965
4
2200
2200
4
2200
1718
5
2200
2200
5
2200
2200
5
2200
2200
5
2200
</TEXT>
</DOC>
<DOC>
<DOCNO>2201</DOCNO>
<TEXT>
animator
an
on
line
two
dimensional
film
animation
system
animator
is
a
computer
animation
system
which
was
designed
to
overcome
some
of
the
inherent
disadvantages
associated
with
conventional
computer
animation
techniqueshe
dec
338
serves
as
an
input
terminal
for
movie
making
allowing
the
trial
and
error
design
of
picture
sequences
in
a
conversational
mode
during
all
stages
on
the
system
input
elements
light
pen
pushbuttons
and
teletype
is
maintained
at
the
user
request
this
record
is
sent
to
the
ibm
360
75
where
the
s
d
4020
instructions
necessary
to
produce
the
same
sequence
of
pictures
can
be
generated
it
is
anticipated
that
one
of
the
primary
contributions
of
animator
will
be
the
provision
of
a
facility
which
will
allow
any
professor
to
produce
his
own
expository
film
strips
cacm
april
1971
talbot
p
a
carr
iii
j
w
coulter
jr
r
r
hwang
r
c
computer
graphics
computer
animation
on
line
systems
two
dimensional
languages
crt
microfilm
recorder
3
41
3
80
4
22
ca710404
jb
february
3
1978
3
37
pm
2201
5
2201
2201
5
2201
2201
5
2201
</TEXT>
</DOC>
<DOC>
<DOCNO>2202</DOCNO>
<TEXT>
dynamic
microprogramming
processor
organization
and
programming
a
dynamically
microprogrammed
processor
is
characterized
by
a
small
4
k
64
bit
word
read
write
micro
storage
the
access
time
of
this
storage
is
similar
to
the
cycle
time
of
the
machine
50
100
nsec
this
microstorage
is
used
to
contain
both
data
and
subroutines
the
micro
instructions
in
such
a
processor
differ
from
the
conventional
in
that
they
perform
only
purely
combinatorial
operations
sequencing
is
under
the
control
of
the
microinstruction
the
presence
of
the
read
write
microstorage
permits
a
more
flexible
assignment
of
resources
than
the
read
only
storage
in
particular
the
processor
developed
in
this
paper
stresses
the
simultaneous
operation
within
the
microinstruction
of
the
adder
shifter
masker
and
testing
facilities
of
the
processor
a
microassembly
language
is
developed
and
the
overhead
involved
in
subroutine
linkages
is
analyzed
the
efficiency
of
a
flexible
software
linkage
scheme
is
examined
as
to
its
overhead
for
various
subroutine
characteristics
finally
three
examples
of
problem
oriented
programming
are
considered
and
the
resulting
coding
is
compared
against
a
system
360
assembly
language
version
with
the
technology
normalized
cacm
april
1971
tucker
a
b
flynn
m
j
microprogramming
read
write
microstorage
subroutine
linkage
execution
speed
6
2
ca710403
jb
february
3
1978
3
58
pm
2202
4
2202
2527
4
2202
1542
5
2202
2202
5
2202
2202
5
2202
2202
5
2202
</TEXT>
</DOC>
<DOC>
<DOCNO>2203</DOCNO>
<TEXT>
key
to
address
transform
techniques
a
fundamental
performance
study
on
large
existing
formatted
files
the
results
of
a
study
of
eight
different
key
to
address
transformation
methods
applied
to
a
set
of
existing
files
are
presented
as
each
method
is
applied
to
a
particular
file
load
factor
and
bucket
size
are
varied
over
a
wide
range
in
addition
appropriate
variables
pertinent
only
to
a
specific
method
take
on
different
values
the
performance
of
each
method
is
summarized
in
terms
of
the
number
of
accesses
required
to
get
to
a
record
and
the
number
of
overflow
records
created
by
a
transformation
peculiarities
of
each
method
are
discussed
practical
guidelines
obtained
from
the
results
are
stated
finally
a
proposal
for
further
quantitative
fundamental
study
is
outlined
cacm
april
1971
lum
v
y
yuen
p
s
t
dodd
m
hashing
hashing
techniques
hashing
methods
hash
coding
keys
key
transformation
key
to
address
transformation
direct
addressing
direct
access
method
randomizing
random
access
file
addressing
file
organizations
file
structures
scatter
storage
search
collisions
clusters
information
retrieval
3
7
3
72
3
73
3
74
3
79
4
9
ca710402
jb
february
3
1978
4
10
pm
1676
4
2203
1682
4
2203
1728
4
2203
1785
4
2203
1785
4
2203
1860
4
2203
1860
4
2203
1973
4
2203
1973
4
2203
1973
4
2203
1973
4
2203
1992
4
2203
1992
4
2203
2018
4
2203
2018
4
2203
2018
4
2203
2032
4
2203
2033
4
2203
2033
4
2203
2107
4
2203
2107
4
2203
2109
4
2203
2109
4
2203
2138
4
2203
2203
4
2203
2203
4
2203
2203
4
2203
2203
4
2203
2203
4
2203
2203
4
2203
2251
4
2203
2251
4
2203
2251
4
2203
2251
4
2203
2359
4
2203
2524
4
2203
2530
4
2203
2537
4
2203
2543
4
2203
2543
4
2203
2543
4
2203
2543
4
2203
2552
4
2203
2552
4
2203
2559
4
2203
2559
4
2203
2573
4
2203
2573
4
2203
2770
4
2203
2770
4
2203
2860
4
2203
2974
4
2203
2991
4
2203
2991
4
2203
3053
4
2203
3053
4
2203
3053
4
2203
3083
4
2203
911
4
2203
911
5
2203
1785
5
2203
1786
5
2203
2107
5
2203
2109
5
2203
2203
5
2203
2203
5
2203
2203
5
2203
2258
5
2203
2313
5
2203
2319
5
2203
2359
5
2203
2437
5
2203
2552
5
2203
2781
5
2203
2860
5
2203
2991
5
2203
492
5
2203
911
6
2203
1328
6
2203
1408
6
2203
1719
6
2203
1749
6
2203
1751
6
2203
1785
6
2203
1785
6
2203
1785
6
2203
332
6
2203
2016
6
2203
2017
6
2203
2080
6
2203
2107
6
2203
2188
6
2203
2203
6
2203
2203
6
2203
2203
6
2203
2203
6
2203
2203
6
2203
2203
6
2203
2203
6
2203
2203
6
2203
2203
6
2203
2204
6
2203
492
6
2203
</TEXT>
</DOC>
<DOC>
<DOCNO>2204</DOCNO>
<TEXT>
program
development
by
stepwise
refinement
the
creative
activity
of
programming
to
be
distinguished
from
coding
is
usually
taught
by
examples
serving
to
exhibit
certain
techniques
it
is
here
considered
as
a
sequence
of
design
decisions
concerning
the
decomposition
of
tasks
into
subtasks
and
of
data
into
data
structures
the
process
of
successive
refinement
of
specifications
is
illustrated
by
a
short
but
nontrivial
example
from
which
a
number
of
conclusions
are
drawn
regarding
the
art
and
the
instruction
of
programming
cacm
april
1971
wirth
n
education
in
programming
programming
techniques
stepwise
program
construction
1
50
4
0
ca710401
jb
february
3
1978
4
14
pm
2204
5
2204
2204
5
2204
2204
5
2204
2319
5
2204
2480
5
2204
2594
5
2204
2709
5
2204
2939
5
2204
2972
5
2204
3155
5
2204
970
6
2204
1408
6
2204
1425
6
2204
1719
6
2204
1749
6
2204
1751
6
2204
1771
6
2204
2016
6
2204
2017
6
2204
2080
6
2204
2138
6
2204
2155
6
2204
2188
6
2204
2203
6
2204
2204
6
2204
2204
6
2204
2204
6
2204
2204
6
2204
2204
6
2204
2204
6
2204
2204
6
2204
2247
6
2204
2247
6
2204
2456
6
2204
2477
6
2204
2558
6
2204
2597
6
2204
2732
6
2204
2738
6
2204
3073
6
2204
3186
6
2204
799
6
2204
</TEXT>
</DOC>
<DOC>
<DOCNO>2205</DOCNO>
<TEXT>
difsub
for
solution
of
ordinary
differential
equations
d2
algorithm
407
cacm
march
1971
gear
c
w
differential
equations
stiff
differential
equations
5
17
ca710307
jb
february
3
1978
4
16
pm
2205
4
2205
2474
4
2205
2205
5
2205
2205
5
2205
2205
5
2205
2207
5
2205
2474
5
2205
2205
6
2205
2207
6
2205
</TEXT>
</DOC>
<DOC>
<DOCNO>2206</DOCNO>
<TEXT>
exact
solution
of
linear
equations
using
residue
arithmetic
f4
algorithm
406
cacm
march
1971
howell
j
residue
arithmetic
symmetric
residue
modulus
mixed
radix
representation
symmetric
mixed
radix
representation
mixed
radix
conversion
prime
number
linear
equations
gaussian
elimination
matrix
inversion
determinant
adjoint
matrix
ill
condition
3
15
5
14
ca710306
jb
february
3
1978
4
23
pm
2206
5
2206
2206
5
2206
2206
5
2206
</TEXT>
</DOC>
<DOC>
<DOCNO>2207</DOCNO>
<TEXT>
the
automatic
integration
of
ordinary
differential
equations
an
integration
technique
for
the
automatic
solution
of
an
initial
value
problem
for
a
set
of
ordinary
differential
equations
is
described
a
criterion
for
the
selection
of
the
order
of
approximation
is
proposed
the
objective
of
the
criterion
is
to
increase
the
step
size
so
as
to
reduce
solution
time
an
option
permits
the
solution
of
stiff
differential
equations
a
program
embodying
the
techniques
discussed
appears
in
algorithm
407
cacm
march
1971
gear
c
w
differential
equations
stiff
equations
integration
step
control
order
control
5
17
ca710305
jb
february
3
1978
4
28
pm
2205
5
2207
2207
5
2207
2207
5
2207
2207
5
2207
2474
5
2207
2205
6
2207
2207
6
2207
2207
6
2207
</TEXT>
</DOC>
<DOC>
<DOCNO>2208</DOCNO>
<TEXT>
storage
utilization
in
a
memory
hierarchy
when
storage
assignment
is
performed
by
a
hashing
algorithm
the
utilization
of
storage
is
studied
in
a
two
level
memory
hierarchy
the
first
storage
level
which
is
the
fast
store
is
divided
into
a
number
of
storage
areas
when
an
entry
is
to
be
filed
in
the
hierarchy
a
hashing
algorithm
will
attempt
to
place
the
entry
into
one
of
these
areas
if
this
particular
area
is
full
then
the
entry
will
be
placed
into
the
slower
second
level
store
even
though
other
areas
in
the
first
level
store
may
have
space
available
given
the
n
entries
have
been
filed
in
the
entire
hierarchy
an
expression
is
derived
for
the
expected
number
of
entries
filed
in
the
first
level
storehis
expression
gives
a
measure
of
how
effectively
the
first
level
store
is
being
used
by
means
of
examples
storage
utilization
is
then
studied
as
a
function
of
the
hashing
algorithm
the
number
of
storage
areas
into
which
the
first
level
store
is
divided
and
the
total
size
of
the
first
level
store
cacm
march
1971
williams
j
g
hashing
algorithms
memory
allocation
memory
hierarchy
memory
utilization
storage
allocation
storage
hierarchy
storage
utilization
3
74
4
3
ca710304
jb
february
3
1978
4
37
pm
2208
5
2208
2208
5
2208
2208
5
2208
</TEXT>
</DOC>
<DOC>
<DOCNO>2209</DOCNO>
<TEXT>
a
scheduling
algorithm
for
a
computer
assisted
registration
system
this
paper
presents
the
scheduling
algorithm
used
in
the
computer
assisted
registration
system
at
the
university
of
tennessee
notation
is
defined
and
the
logic
of
the
algorithm
necessary
to
implement
educational
policy
is
described
results
from
the
first
term
implementation
are
presented
cacm
march
1971
winters
w
k
computer
assisted
registration
scheduling
algorithm
timetable
3
32
5
39
ca710303
jb
february
3
1978
4
40
pm
1540
4
2209
2052
4
2209
2209
4
2209
2209
4
2209
1434
5
2209
1540
5
2209
2209
5
2209
2209
5
2209
2209
5
2209
</TEXT>
</DOC>
<DOC>
<DOCNO>2210</DOCNO>
<TEXT>
toward
automatic
program
synthesis
an
elementary
outline
of
the
theorem
proving
approach
to
automatic
program
synthesis
is
given
without
dwelling
on
technical
details
the
method
is
illustrated
by
the
automatic
construction
of
both
recursive
and
iterative
programs
operating
on
natural
numbers
lists
and
trees
in
order
to
construct
a
program
satisfying
certain
specifications
a
theorem
induced
by
those
specifications
is
proved
and
the
desired
program
is
extracted
from
the
proof
the
same
technique
is
applied
to
transform
recursively
defined
functions
into
iterative
programs
frequently
with
a
major
gain
inefficiency
it
is
emphasized
that
in
order
to
construct
a
program
with
loops
or
with
recursion
the
principle
of
mathematical
induction
must
be
applied
the
relation
between
the
version
of
the
induction
rule
used
and
the
form
of
the
program
constructed
is
explored
in
some
detail
cacm
march
1971
manna
z
waldinger
r
j
artificial
intelligence
answer
extraction
automatic
program
synthesis
mathematical
induction
principle
problem
solving
theorem
proving
3
64
5
23
5
24
ca710302
jb
february
3
1978
4
48
pm
1515
4
2210
2096
4
2210
2127
4
2210
2210
4
2210
1155
5
2210
2210
5
2210
2210
5
2210
2210
5
2210
2657
5
2210
2719
5
2210
1626
6
2210
210
6
2210
2151
6
2210
2167
6
2210
2210
6
2210
2210
6
2210
2645
6
2210
2657
6
2210
</TEXT>
</DOC>
<DOC>
<DOCNO>2211</DOCNO>
<TEXT>
scanned
display
computer
graphics
a
television
like
scanned
display
system
has
been
successfully
implemented
on
a
honeywell
ddp
224
computer
installation
the
scanned
image
is
stored
in
the
core
memory
of
the
computer
and
software
scan
conversion
is
used
to
convert
the
rectangular
coordinates
of
a
point
to
the
appropriate
word
and
bit
in
an
output
display
array
in
core
storage
results
thus
far
indicate
that
flicker
free
displays
of
large
amounts
of
data
are
possible
with
reasonably
fast
graphical
interaction
a
scanned
image
of
size
240
x
254
points
is
displayed
at
a
30
frame
per
second
rate
cacm
march
1971
noll
a
m
computer
graphics
scanned
display
scan
conversion
raster
displays
4
41
6
35
ca710301
jb
february
3
1978
4
53
pm
1891
4
2211
2211
4
2211
2211
4
2211
2421
4
2211
2674
4
2211
2687
4
2211
1554
5
2211
1741
5
2211
2211
5
2211
2211
5
2211
2211
5
2211
2421
5
2211
1741
6
2211
2211
6
2211
</TEXT>
</DOC>
<DOC>
<DOCNO>2212</DOCNO>
<TEXT>
f
distribution
cacm
february
1971
tolman
h
fisher
f
distribution
student
t
distribution
5
5
ca710209
jb
february
8
1978
8
35
am
2212
5
2212
2212
5
2212
2212
5
2212
</TEXT>
</DOC>
<DOC>
<DOCNO>2213</DOCNO>
<TEXT>
roots
of
matrix
pencils
the
generalized
eigenvalue
problem
f2
algorithm
405
cacm
february
1971
dell
a
m
weil
r
l
thompson
g
l
eigenvalues
matrix
roots
pencil
roots
5
1
5
3
ca710208
jb
february
8
1978
8
37
am
2213
5
2213
2213
5
2213
2213
5
2213
</TEXT>
</DOC>
<DOC>
<DOCNO>2214</DOCNO>
<TEXT>
complex
interval
arithmetic
complex
interval
arithmetic
is
defined
using
real
interval
arithmetic
complex
interval
division
is
defined
so
as
to
assure
smallest
possible
resulting
intervals
cacm
february
1971
rokne
j
lancaster
p
real
intervals
real
interval
arithmetic
complex
intervals
complex
interval
arithmetic
5
11
ca710207
jb
february
8
1978
8
39
am
1524
4
2214
1931
4
2214
2214
4
2214
2544
4
2214
311
5
2214
2214
5
2214
2214
5
2214
2214
5
2214
2544
5
2214
1524
6
2214
311
6
2214
2214
6
2214
</TEXT>
</DOC>
<DOC>
<DOCNO>2215</DOCNO>
<TEXT>
application
of
game
tree
searching
techniques
to
sequential
pattern
recognition
a
sequential
pattern
recognition
spr
procedure
does
not
test
all
the
features
of
a
pattern
at
once
instead
it
selects
a
feature
to
be
tested
after
receiving
the
result
of
that
test
the
procedure
either
classifies
the
unknown
pattern
or
selects
another
feature
to
be
tested
etc
medical
diagnosis
is
an
example
of
spr
in
this
paper
the
authors
suggest
that
spr
be
viewed
as
a
one
person
game
played
against
nature
chance
virtually
all
the
powerful
techniques
developed
for
searching
two
person
strictly
competitive
game
trees
can
easily
be
incorporated
either
directly
or
by
analogy
into
spr
procedures
in
particular
one
can
incorporate
the
mini
average
backing
up
procedure
and
the
gamma
procedure
which
are
the
analogues
of
the
minimax
backing
up
procedure
and
the
alpha
beta
procedure
respectively
some
computer
simulated
experiments
in
character
recognition
are
presented
the
results
indicate
that
the
approach
is
promising
cacm
february
1971
slagle
j
r
lee
r
c
t
sequential
pattern
recognition
game
tree
searching
game
against
nature
gamma
procedure
mini
average
backing
up
procedure
dynamic
programming
branch
and
bound
approach
optimal
solution
3
60
3
63
5
42
ca710206
jb
february
8
1978
8
56
am
2215
4
2215
2096
5
2215
2215
5
2215
2215
5
2215
2215
5
2215
3132
5
2215
2215
6
2215
</TEXT>
</DOC>
<DOC>
<DOCNO>2216</DOCNO>
<TEXT>
on
the
probability
distribution
of
the
values
of
binary
trees
an
integral
equation
is
derived
for
the
generating
function
for
binary
tree
values
the
values
reflecting
sorting
effort
the
analysis
does
not
assume
uniformly
distributed
branching
ratios
and
therefore
is
applicable
to
a
family
of
sorting
algorithms
discussed
by
hoare
singleton
and
van
emden
the
solution
to
the
integral
equation
indicates
that
using
more
advanced
algorithms
in
the
family
makes
only
minor
reductions
in
the
expected
sorting
effort
but
substantially
reduces
the
variance
in
sorting
effort
statistical
tests
of
the
values
of
several
thousand
trees
containing
up
to
10
000
points
have
given
first
second
and
third
moments
of
the
value
distribution
function
in
satisfactory
agreement
with
the
moments
computed
from
the
generating
function
the
empirical
tests
as
well
as
the
analytical
results
are
in
agreement
with
previously
published
results
for
the
first
moment
in
the
cases
of
uniform
and
nonuniform
distribution
of
branching
ratio
and
for
the
second
moment
in
the
case
of
uniform
distribution
of
branching
ratio
cacm
february
1971
hurwitz
jr
h
binary
trees
sorting
statistical
analysis
4
40
5
18
5
5
ca710205
jb
february
8
1978
9
09
am
1175
4
2216
1919
4
2216
1997
4
2216
2017
4
2216
2041
4
2216
2216
4
2216
2216
4
2216
2216
4
2216
2216
4
2216
2679
4
2216
2679
4
2216
3054
4
2216
3054
4
2216
3054
4
2216
1919
5
2216
1969
5
2216
1997
5
2216
2216
5
2216
2216
5
2216
2216
5
2216
864
5
2216
</TEXT>
</DOC>
<DOC>
<DOCNO>2217</DOCNO>
<TEXT>
experiments
in
automatic
learning
for
a
multipurpose
heuristic
program
an
automatic
learning
capability
has
been
developed
and
implemented
for
use
with
the
multiple
multipurpose
program
that
learns
heuristic
tree
searching
program
which
is
presently
being
applied
to
resolution
theorem
proving
in
predicate
calculus
multiple
proving
program
pp
uses
two
evaluation
functions
to
guide
its
search
for
a
proof
of
whether
or
not
a
particular
goal
is
achievable
thirteen
general
features
of
predicate
calculus
clauses
were
created
for
use
in
the
automatic
learning
of
better
evaluation
functions
for
pp
a
multiple
regression
program
was
used
to
produce
optimal
coefficients
for
linear
polynomial
functions
in
terms
of
the
features
also
automatic
data
handling
routines
were
written
for
passing
data
between
the
learning
program
and
the
proving
program
and
for
analyzing
and
summarizing
results
data
was
generally
collected
for
learning
regression
analysis
from
the
experience
of
pp
a
number
of
experiments
were
performed
to
test
the
effectiveness
and
generality
of
the
learning
program
results
showed
that
the
learning
produced
dramatic
improvements
in
the
solutions
to
problems
which
were
in
the
same
domain
as
those
used
for
collection
learning
data
learning
was
also
shown
to
generalize
successfully
to
domains
other
than
those
used
for
data
collection
another
experiment
demonstrated
that
the
learning
program
could
simultaneously
improve
performance
on
problems
in
a
specific
domain
and
on
problems
in
a
variety
of
domains
some
variations
of
the
learning
program
were
also
tested
cacm
february
1971
slagle
j
r
farrell
c
d
learning
theorem
providing
heuristic
automatic
learning
self
modifying
tree
searching
artificial
intelligence
problem
solving
adaptive
lisp
multiple
regression
resolution
3
62
3
64
ca710204
jb
february
8
1978
9
33
am
2217
5
2217
2217
5
2217
2217
5
2217
</TEXT>
</DOC>
<DOC>
<DOCNO>2218</DOCNO>
<TEXT>
an
analysis
of
some
time
sharing
techniques
the
effectiveness
of
certain
time
sharing
techniques
such
as
program
relocation
disk
rotational
delay
minimization
and
swap
volume
minimization
is
investigated
summary
data
is
presented
and
the
findings
are
discussed
the
vehicle
for
this
investigation
was
a
simula
based
simulation
model
reflecting
an
early
framework
for
a
planned
burroughs
b6500
time
sharing
system
inasmuch
as
the
b6500
system
is
based
upon
the
use
of
variable
sized
segments
and
a
dynamic
overlay
procedure
data
is
also
presented
which
provides
some
indication
of
the
effectiveness
of
this
type
of
organization
in
a
time
sharing
environment
the
design
characteristics
and
operational
capabilities
of
the
simulation
model
are
also
described
cacm
february
1971
nielsen
n
r
b6500
bulk
core
usage
operating
system
model
relocation
rotational
delay
minimization
simulation
swap
volume
minimization
system
simulation
time
sharing
3
9
4
32
ca710203
jb
february
8
1978
9
40
am
1541
4
2218
1751
4
2218
1805
4
2218
1846
4
2218
1846
4
2218
1892
4
2218
1892
4
2218
1892
4
2218
1892
4
2218
1901
4
2218
1924
4
2218
2060
4
2218
2085
4
2218
2095
4
2218
2095
4
2218
2095
4
2218
2128
4
2218
2188
4
2218
2218
4
2218
2218
4
2218
2218
4
2218
2218
4
2218
2218
4
2218
2218
4
2218
2218
4
2218
2218
4
2218
2277
4
2218
2297
4
2218
2317
4
2218
2319
4
2218
2329
4
2218
2358
4
2218
2373
4
2218
2373
4
2218
2374
4
2218
2380
4
2218
2434
4
2218
2499
4
2218
2498
4
2218
2501
4
2218
2526
4
2218
2582
4
2218
2596
4
2218
2667
4
2218
2668
4
2218
2669
4
2218
2734
4
2218
2734
4
2218
2828
4
2218
2862
4
2218
2863
4
2218
2863
4
2218
2881
4
2218
2902
4
2218
2911
4
2218
2928
4
2218
2996
4
2218
3000
4
2218
3000
4
2218
3006
4
2218
3067
4
2218
3112
4
2218
1380
5
2218
1572
5
2218
1728
5
2218
1751
5
2218
1752
5
2218
1810
5
2218
1879
5
2218
2095
5
2218
2218
5
2218
2218
5
2218
2218
5
2218
2681
5
2218
2218
6
2218
</TEXT>
</DOC>
<DOC>
<DOCNO>2219</DOCNO>
<TEXT>
a
policy
driven
scheduler
for
a
time
sharing
system
the
service
received
by
a
process
from
a
time
sharing
operating
system
can
be
characterized
by
a
resource
count
sum
w
i
r
ij
where
r
ij
is
the
number
of
units
of
service
received
by
process
i
from
resource
i
and
w
i
is
the
cost
per
unit
of
the
service
each
class
of
users
can
be
characterized
by
a
policy
function
which
specifies
the
amount
of
service
a
user
who
belongs
to
this
class
should
receive
as
a
function
of
time
priority
changes
dynamically
as
a
function
of
the
difference
between
the
service
promised
to
the
user
by
the
policy
function
and
the
service
he
actually
receives
a
scheduling
and
swapping
algorithm
which
keeps
the
resource
count
of
each
process
above
its
policy
function
will
provide
the
specified
level
of
service
overhead
can
be
reduced
by
avoiding
swaps
of
process
which
have
received
at
least
his
level
of
service
the
algorithm
has
been
implemented
in
a
general
purpose
operating
system
and
it
has
provided
significantly
better
service
to
interactive
and
to
batch
jobs
than
the
previous
scheduler
cacm
february
1971
bernstein
a
j
sharp
j
c
scheduler
time
sharing
operating
system
resource
allocation
and
swapping
4
32
ca710202
jb
february
8
1978
9
54
am
2219
4
2219
2344
4
2219
1938
5
2219
2219
5
2219
2219
5
2219
2219
5
2219
2950
5
2219
3072
5
2219
1713
6
2219
2219
6
2219
2219
6
2219
2245
6
2219
2375
6
2219
</TEXT>
</DOC>
<DOC>
<DOCNO>2220</DOCNO>
<TEXT>
conversion
of
limited
entry
decision
tables
to
computer
programs
a
proposed
modification
to
pollack
algorithm
pollack
has
proposed
an
algorithm
for
converting
decision
tables
into
flowcharts
which
minimize
subsequent
execution
time
when
compiled
into
a
computer
program
two
modifications
of
this
algorithm
are
proposed
the
first
relies
on
shannon
noiseless
coding
theorem
and
the
communications
concept
of
entropy
but
does
not
completely
test
the
else
rule
the
second
modification
completely
tests
the
else
rule
but
results
in
more
executions
than
the
first
modification
both
modifications
result
in
modification
guarantees
a
globally
optimal
solution
cacm
february
1971
shwayder
k
coding
decision
table
entropy
information
theory
noiseless
channel
sorting
3
50
5
31
ca710201
jb
february
8
1978
10
06
am
1237
4
2220
1354
4
2220
1354
4
2220
1354
4
2220
1488
4
2220
1488
4
2220
1548
4
2220
1684
4
2220
1994
4
2220
2053
4
2220
2053
4
2220
2053
4
2220
2053
4
2220
2220
4
2220
2220
4
2220
2220
4
2220
2220
4
2220
2220
4
2220
2220
4
2220
2220
4
2220
2273
4
2220
2273
4
2220
2273
4
2220
2273
4
2220
2453
4
2220
2453
4
2220
2492
4
2220
2518
4
2220
2598
4
2220
2598
4
2220
2616
4
2220
2726
4
2220
2726
4
2220
2726
4
2220
2726
4
2220
2726
4
2220
2856
4
2220
2856
4
2220
2856
4
2220
3113
4
2220
753
4
2220
1172
5
2220
1237
5
2220
1327
5
2220
1354
5
2220
250
5
2220
1489
5
2220
1548
5
2220
2220
5
2220
2220
5
2220
2220
5
2220
2273
5
2220
2453
5
2220
2598
5
2220
2726
5
2220
2856
5
2220
1172
6
2220
1172
6
2220
1172
6
2220
1172
6
2220
1172
6
2220
1237
6
2220
1327
6
2220
1327
6
2220
1327
6
2220
1354
6
2220
1354
6
2220
1354
6
2220
1354
6
2220
1488
6
2220
1489
6
2220
1548
6
2220
1548
6
2220
2053
6
2220
2053
6
2220
2053
6
2220
2220
6
2220
2220
6
2220
2220
6
2220
2220
6
2220
2220
6
2220
2221
6
2220
2263
6
2220
2263
6
2220
2453
6
2220
2453
6
2220
2598
6
2220
2691
6
2220
753
6
2220
</TEXT>
</DOC>
<DOC>
<DOCNO>2221</DOCNO>
<TEXT>
comment
on
the
conversion
of
decision
tables
to
computer
programs
cacm
january
1971
pollack
s
l
decision
tables
diagnostic
aids
system
analysis
business
applications
3
50
3
59
4
19
4
29
4
49
ca710113
jb
february
8
1978
10
09
am
2221
4
2221
2221
4
2221
2273
4
2221
2340
4
2221
2453
4
2221
2517
4
2221
2824
4
2221
2856
4
2221
2986
4
2221
3034
4
2221
1683
5
2221
2053
5
2221
2221
5
2221
2221
5
2221
2221
5
2221
2517
5
2221
2726
5
2221
1172
6
2221
1327
6
2221
1354
6
2221
1488
6
2221
1489
6
2221
1548
6
2221
1684
6
2221
2053
6
2221
2220
6
2221
2221
6
2221
2221
6
2221
2263
6
2221
</TEXT>
</DOC>
<DOC>
<DOCNO>2222</DOCNO>
<TEXT>
comment
on
london
certification
of
algorithm
245
cacm
january
1971
redish
k
a
proof
of
algorithms
debugging
certification
metatheory
sorting
in
place
sorting
4
42
4
49
5
24
5
31
ca710112
jb
february
8
1978
10
19
am
2021
4
2222
2042
4
2222
2222
4
2222
2222
4
2222
2222
4
2222
2222
4
2222
2222
4
2222
2227
4
2222
2315
4
2222
2326
4
2222
2356
4
2222
2470
4
2222
2679
4
2222
2679
4
2222
2732
4
2222
2844
4
2222
2865
4
2222
2896
4
2222
2943
4
2222
2972
4
2222
3014
4
2222
3068
4
2222
3077
4
2222
3143
4
2222
970
5
2222
1800
5
2222
1818
5
2222
1834
5
2222
2042
5
2222
2222
5
2222
2222
5
2222
2222
5
2222
</TEXT>
</DOC>
<DOC>
<DOCNO>2223</DOCNO>
<TEXT>
minit
algorithm
for
linear
programming
algorithm
222
h
cacm
january
1971
kolm
a
dahlstrand
t
linear
programming
dual
simplex
method
primal
problem
dual
problem
5
41
ca710111
jb
february
8
1978
10
22
am
2223
5
2223
2223
5
2223
2223
5
2223
</TEXT>
</DOC>
<DOC>
<DOCNO>2224</DOCNO>
<TEXT>
complex
gamma
function
s14
algorithm
404
cacm
january
1971
lucas
jr
c
w
terrill
c
w
gamma
function
poles
of
gamma
function
stirling
asymptotic
series
recursion
formula
reflection
formula
5
12
ca710110
jb
february
8
1978
10
25
am
2224
4
2224
1547
5
2224
2224
5
2224
2224
5
2224
2224
5
2224
</TEXT>
</DOC>
<DOC>
<DOCNO>2225</DOCNO>
<TEXT>
circular
integer
partitioning
a1
algorithm
403
cacm
january
1971
coleman
m
w
taylor
m
s
partitions
combinatorics
statistical
design
of
experiments
5
39
5
5
ca710109
jb
february
8
1978
10
27
am
2225
5
2225
2225
5
2225
2225
5
2225
</TEXT>
</DOC>
<DOC>
<DOCNO>2226</DOCNO>
<TEXT>
further
evidence
for
the
analysis
of
algorithms
for
the
zero
one
programming
problem
the
purpose
of
this
note
is
to
report
computational
experience
additional
to
that
recently
summarized
by
gue
et
al
with
two
algorithms
for
the
zero
one
linear
programming
problem
an
error
in
gue
paper
is
corrected
the
utility
of
one
of
the
algorithms
as
a
suboptimizer
is
indicated
cacm
january
1971
proll
l
g
operations
research
integer
programming
zero
one
variables
algorithms
5
39
5
41
ca710108
jb
february
8
1978
10
32
am
2226
4
2226
2226
4
2226
1658
5
2226
1666
5
2226
2226
5
2226
2226
5
2226
2226
5
2226
</TEXT>
</DOC>
<DOC>
<DOCNO>2227</DOCNO>
<TEXT>
proof
of
a
program
find
a
proof
is
given
of
the
correctness
of
the
algorithm
find
first
a
informal
description
is
given
of
the
purpose
of
the
program
and
the
method
used
a
systematic
technique
is
described
for
constructing
the
program
proof
during
the
process
of
coding
it
in
such
a
way
as
to
prevent
the
intrusion
of
logical
errors
the
proof
of
termination
is
treated
as
a
separate
exercise
finally
some
conclusions
relating
to
general
programming
methodology
are
drawn
cacm
january
1971
hoare
c
a
r
proofs
of
programs
programming
methodology
program
documentation
program
correctness
theory
of
programming
4
0
4
22
5
21
5
23
5
24
ca710107
jb
february
8
1978
10
40
am
2021
4
2227
2222
4
2227
2227
4
2227
2227
4
2227
2315
4
2227
2326
4
2227
2470
4
2227
2732
4
2227
2783
4
2227
2865
4
2227
2896
4
2227
2943
4
2227
3014
4
2227
3054
4
2227
3068
4
2227
3077
4
2227
3143
4
2227
1834
5
2227
307
5
2227
2227
5
2227
2227
5
2227
2227
5
2227
2356
5
2227
2420
5
2227
2874
5
2227
3143
5
2227
970
6
2227
1491
6
2227
1682
6
2227
1834
6
2227
2227
6
2227
2227
6
2227
2227
6
2227
2227
6
2227
2317
6
2227
2683
6
2227
2871
6
2227
521
6
2227
</TEXT>
</DOC>
<DOC>
<DOCNO>2228</DOCNO>
<TEXT>
comments
on
prevention
of
system
deadlocks
habermann
method
of
deadlock
prevention
is
discussed
where
deadlock
is
defined
as
a
system
state
from
which
resource
allocations
to
certain
processes
are
not
possible
it
is
shown
that
the
scheduler
may
introduce
artificial
deadlocks
which
habermann
method
does
not
prevent
permanent
blocking
is
the
situation
where
certain
processes
never
receive
their
resource
requests
it
is
shown
that
deadlock
prevention
does
not
necessarily
eliminate
permanent
blocking
a
method
of
preventing
permanent
blocking
is
given
cacm
january
1971
holt
r
c
multiprogramming
time
sharing
scheduling
resource
allocation
deadlock
lockout
deadly
embrace
knotting
3
72
4
32
6
20
ca710106
jb
february
8
1978
10
45
am
1781
4
2228
2150
4
2228
2150
4
2228
2228
4
2228
2228
4
2228
2228
4
2228
2256
4
2228
2256
4
2228
2280
4
2228
2317
4
2228
2342
4
2228
2342
4
2228
2376
4
2228
2379
4
2228
2482
4
2228
2618
4
2228
2618
4
2228
2740
4
2228
2851
4
2228
2920
4
2228
3184
4
2228
1198
5
2228
1338
5
2228
1877
5
2228
2228
5
2228
2228
5
2228
2228
5
2228
2280
5
2228
2379
5
2228
2482
5
2228
2500
5
2228
1749
6
2228
1749
6
2228
1877
6
2228
1877
6
2228
1877
6
2228
2228
6
2228
2228
6
2228
2228
6
2228
2228
6
2228
</TEXT>
</DOC>
<DOC>
<DOCNO>2229</DOCNO>
<TEXT>
construction
of
rational
and
negative
powers
of
a
formal
series
some
methods
are
described
for
the
generation
of
fractional
and
negative
powers
of
any
formal
series
such
as
poisson
series
or
chebyshev
series
it
is
shown
that
with
the
use
of
the
three
elementary
operations
of
addition
subtraction
and
multiplication
all
rational
positive
and
negative
powers
of
a
series
can
be
constructed
there
are
basically
two
approaches
the
binomial
theorem
and
the
iteration
methods
both
methods
are
described
here
and
the
relationship
between
them
is
pointed
out
some
well
known
classical
formulas
are
obtained
as
particular
cases
and
it
is
shown
how
the
convergence
properties
of
these
formulas
can
be
improved
with
very
little
additional
computations
finally
at
the
end
of
the
article
some
numerical
experiments
are
described
with
chebyshev
series
and
with
fourier
series
cacm
january
1971
brucke
r
a
series
expansion
series
inversion
root
extraction
binomial
theorem
newton
iterations
chebyshev
series
poisson
series
fourier
series
3
11
3
15
3
21
5
0
ca710105
jb
february
8
1978
10
57
am
1396
4
2229
2229
4
2229
1365
5
2229
2229
5
2229
2229
5
2229
2229
5
2229
</TEXT>
</DOC>
<DOC>
<DOCNO>2230</DOCNO>
<TEXT>
a
language
for
treating
geometric
patterns
in
a
two
dimensional
space
in
this
paper
cadep
a
problem
oriented
language
for
positioning
geometric
patterns
in
a
two
dimensional
space
is
presented
although
the
language
has
been
specifically
designed
for
the
automatic
generation
of
integrated
circuit
masks
it
turns
out
to
be
well
suited
also
for
such
other
placement
problems
as
architecture
design
urban
planning
logical
and
block
diagram
representation
the
design
criteria
the
structure
and
the
specific
features
of
cadep
are
illustrated
cacm
january
1971
bracchi
g
ferrari
d
graphic
language
problem
oriented
language
two
dimensional
patterns
graphic
display
fortran
extension
layout
problems
integrated
circuit
architecture
design
urban
planning
3
23
3
24
3
25
4
22
ca710104
jb
february
8
1978
11
17
am
2230
4
2230
2003
5
2230
2044
5
2230
2230
5
2230
2230
5
2230
2230
5
2230
996
6
2230
1558
6
2230
2230
6
2230
521
6
2230
</TEXT>
</DOC>
<DOC>
<DOCNO>2231</DOCNO>
<TEXT>
the
reconstruction
of
binary
patterns
from
their
projections
given
the
horizontal
and
vertical
projections
of
a
finite
binary
pattern
f
can
we
construct
the
original
pattern
f
in
this
paper
we
give
a
characterization
of
patterns
that
are
reconstructable
from
their
projection
three
algorithms
are
developed
to
reconstruct
both
unambiguous
and
ambiguous
patterns
it
is
shown
that
an
unambiguous
pattern
can
be
perfectly
reconstructed
in
time
m
x
n
and
that
a
pattern
similar
to
an
ambiguous
pattern
can
also
be
constructed
in
time
m
x
n
where
m
n
are
the
dimensions
of
the
pattern
frame
cacm
january
1971
chang
s
pattern
reconstruction
image
reconstruction
data
compression
pattern
recognition
integral
geometry
3
63
5
30
ca710103
jb
february
8
1978
12
33
pm
2142
5
2231
2231
5
2231
2231
5
2231
2231
5
2231
2529
5
2231
1929
6
2231
2231
6
2231
2231
6
2231
</TEXT>
</DOC>
<DOC>
<DOCNO>2232</DOCNO>
<TEXT>
pattern
width
at
a
given
angle
that
the
pattern
feature
width
as
a
function
of
angle
possesses
several
possible
interpretations
is
demonstrated
in
this
paper
which
is
a
review
of
the
width
concept
in
pattern
recognition
and
the
geometrical
concept
itself
the
object
of
the
work
is
to
clarify
how
the
word
description
can
be
made
precise
so
that
computer
algorithms
for
feature
extraction
may
be
obtained
the
focus
is
on
the
theoretical
subject
matter
the
results
consist
of
a
set
theoretic
definition
of
width
at
angle
a
theorem
relating
it
to
the
pattern
boundary
radius
vector
and
descriptions
of
alternate
widths
all
widths
are
calculated
for
an
illustrative
example
graphical
and
tabular
comparisons
are
given
substantial
variation
in
width
at
angle
magnitude
is
found
the
principal
conclusion
is
that
the
set
theoretic
width
at
angle
is
a
useful
pattern
feature
when
it
can
be
easily
computed
further
investigation
of
the
information
contained
in
only
part
of
a
width
function
is
recommended
for
cases
where
computation
of
width
at
angle
is
difficult
cacm
january
1971
klinger
a
feature
extraction
pattern
recognition
figure
properties
picture
processing
integral
geometry
width
at
angle
extent
integral
projections
linear
pattern
measures
width
functions
3
60
3
62
3
63
5
12
ca710102
jb
february
8
1978
12
49
pm
2232
5
2232
2232
5
2232
2232
5
2232
</TEXT>
</DOC>
<DOC>
<DOCNO>2233</DOCNO>
<TEXT>
signature
simulation
and
certain
cryptographic
codes
three
cyphers
allegedly
authored
by
thomas
jefferson
beale
in
1822
have
been
the
subject
of
intensive
study
for
over
100
years
generations
of
cryptanalysts
have
expended
untold
man
years
thus
far
without
success
attempting
tode
code
them
vast
armies
of
fortune
hunters
and
treasure
seekers
have
devoted
herculean
labors
to
digging
up
the
rolling
hills
of
virginia
trying
to
locate
the
promised
bonanza
the
history
of
pertinent
activities
would
fill
volumes
yet
serious
students
of
cryptography
have
always
had
nagging
doubts
about
the
cyphers
authenticity
it
has
been
alleged
that
the
known
solution
to
cypher
number
two
115
73
24
818
37
52
49
i
have
deposited
in
the
county
of
bedford
about
four
miles
from
buford
in
an
excavation
or
vault
with
the
aid
of
an
unsanitized
version
of
the
declaration
of
independence
was
merely
a
superb
imaginative
and
grandiose
hoax
perpetrated
ages
ago
for
whatever
reasons
modern
computer
technology
could
obviously
perform
signature
analyses
the
process
of
encoding
itself
so
as
to
yield
new
clues
and
deeper
insights
into
their
construction
for
the
benefit
of
the
uninitiated
the
encoding
method
used
in
the
second
cypher
employs
a
specified
document
whose
words
are
simply
numbered
consecutively
and
first
letters
of
these
words
are
sought
out
at
random
to
match
the
letters
of
these
words
are
sought
out
at
random
to
match
the
letters
of
the
clear
text
or
message
the
sequence
of
numbers
corresponding
to
these
matches
is
then
written
down
as
the
final
code
while
primitive
the
process
has
the
advantage
of
relative
security
until
the
source
document
becomes
known
at
that
moment
the
cypher
can
be
decoded
even
by
second
graders
the
work
now
completed
with
the
help
of
our
univac
1108
includes
numerous
analytical
studies
of
the
beale
cyphers
and
various
types
of
simulations
for
example
we
have
turned
the
entire
process
of
simulated
encoding
by
various
schemes
over
to
the
machine
and
analyzed
the
signatures
of
these
synthetic
codes
we
have
also
encoded
various
messages
by
hand
using
different
texts
and
a
variety
of
methods
to
obtain
their
signatures
these
simulations
provide
convincing
evidence
that
the
signatures
are
both
process
and
data
dependent
they
indicate
also
very
strongly
that
mr
beale
cyphers
are
for
real
and
that
it
is
merely
a
matter
of
time
before
someone
finds
the
correct
source
document
and
locates
the
right
vault
in
the
common
wealth
of
virginia
cacm
january
1971
hammer
c
thomas
jefferson
beale
codes
cryptanalysis
cyphers
decoding
declaration
of
independence
encoding
magna
carta
pseudotext
signature
simulation
3
42
3
63
3
65
3
71
ca710101
jb
february
8
1978
1
15
pm
2233
5
2233
2233
5
2233
2233
5
2233
</TEXT>
</DOC>
<DOC>
<DOCNO>2234</DOCNO>
<TEXT>
roots
of
matrix
pencils
algorithm
r405
cacm
december
1972
heiberger
r
m
eigenvalues
matrix
roots
pencil
roots
5
1
5
3
ca721221
jb
january
27
1978
8
51
am
2234
5
2234
2234
5
2234
2234
5
2234
</TEXT>
</DOC>
<DOC>
<DOCNO>2235</DOCNO>
<TEXT>
decision
table
translation
algorithm
r394
cacm
december
1972
marshall
d
r
t
decision
table
decision
table
translation
4
19
ca721220
jb
january
27
1978
8
53
am
2235
5
2235
2235
5
2235
2235
5
2235
</TEXT>
</DOC>
<DOC>
<DOCNO>2236</DOCNO>
<TEXT>
remarks
on
characteristic
values
and
associated
solutions
of
mathieus
differential
equation
exponential
integral
and
systems
of
hyperbolic
p
algorithms
r352
r385
r392
cacm
december
1972
frisch
m
j
ansi
fortran
standard
4
0
4
22
ca721219
jb
january
27
1978
8
56
am
2236
5
2236
2236
5
2236
2236
5
2236
</TEXT>
</DOC>
<DOC>
<DOCNO>2237</DOCNO>
<TEXT>
bandsolve
algorithm
r195
cacm
december
1972
schuegraf
e
ca721218
dmm
february
2
1978
1
39
pm
2237
5
2237
2237
5
2237
2237
5
2237
</TEXT>
</DOC>
<DOC>
<DOCNO>2238</DOCNO>
<TEXT>
least
squares
surface
fit
algorithm
r176
cacm
december
1972
schuegraf
e
ca721217
jb
january
27
1978
8
59
am
2238
5
2238
2238
5
2238
2238
5
2238
</TEXT>
</DOC>
<DOC>
<DOCNO>2239</DOCNO>
<TEXT>
squank
algorithm
c379
cacm
december
1972
hallet
p
mund
e
numerical
integration
integration
rule
adaptive
integration
automatic
integration
simpson
rule
numerical
quadrature
quadrature
rule
adaptive
quadrature
automatic
quadrature
round
off
error
control
5
16
ca721216
jb
january
27
1978
9
01
am
2239
5
2239
2239
5
2239
2239
5
2239
</TEXT>
</DOC>
<DOC>
<DOCNO>2240</DOCNO>
<TEXT>
pseudo
random
numbers
g5
algorithm
c266
cacm
december
1972
sullins
w
l
pseudo
random
numbers
testing
random
number
generators
5
5
ca721215
jb
january
27
1978
9
04
am
2240
5
2240
2240
5
2240
2240
5
2240
</TEXT>
</DOC>
<DOC>
<DOCNO>2241</DOCNO>
<TEXT>
product
type
three
point
gauss
legendre
simpson
integration
d1
algorithm
a439
cacm
december
1972
boland
w
r
numerical
integration
product
type
quadrature
gaussian
quadrature
simpson
rule
5
16
ca721214
jb
january
27
1978
9
06
am
2241
5
2241
2241
5
2241
2241
5
2241
</TEXT>
</DOC>
<DOC>
<DOCNO>2242</DOCNO>
<TEXT>
product
type
two
point
gauss
legendre
simpson
integration
d1
algorithm
a438
cacm
december
1972
boland
w
r
numerical
integration
product
type
quadrature
gaussian
quadrature
simpson
rule
5
16
ca721213
jb
january
27
1978
9
08
am
2242
5
2242
2242
5
2242
2242
5
2242
</TEXT>
</DOC>
<DOC>
<DOCNO>2243</DOCNO>
<TEXT>
product
type
simpson
integration
d1
algorithm
a437
cacm
december
1972
boland
w
r
numerical
integration
product
type
quadrature
simpson
rule
5
16
ca721212
jb
january
27
1978
9
10
am
2243
5
2243
2243
5
2243
2243
5
2243
</TEXT>
</DOC>
<DOC>
<DOCNO>2244</DOCNO>
<TEXT>
product
type
trapezoidal
integration
algorithm
a436
cacm
december
1972
boland
w
r
numerical
integration
product
type
quadrature
trapezoidal
integration
5
16
ca721211
jb
january
27
1978
9
11
am
2244
5
2244
2244
5
2244
2244
5
2244
</TEXT>
</DOC>
<DOC>
<DOCNO>2245</DOCNO>
<TEXT>
trace
driven
modeling
and
analysis
of
cpu
scheduling
in
multiprogramming
system
microscopic
level
job
stream
data
obtained
in
a
production
environment
by
an
event
driven
software
probe
is
used
to
drive
a
model
of
a
multiprogramming
computer
system
the
cpu
scheduling
algorithm
of
the
model
is
systematically
varied
this
technique
called
trace
driven
modeling
provides
an
accurate
replica
of
a
production
environment
for
the
testing
of
variations
in
the
system
at
the
same
time
alterations
in
scheduling
methods
can
be
easily
carried
out
in
a
controlled
way
with
cause
and
effects
relationships
being
isolated
the
scheduling
methods
tested
included
the
best
possible
and
worst
possible
methods
the
traditional
methods
of
multiprogramming
theory
round
robin
first
come
first
served
etc
and
dynamic
predictors
the
relative
and
absolute
performances
of
these
scheduling
methods
are
given
it
is
concluded
that
a
successful
cpu
scheduling
method
must
be
preemptive
and
must
prevent
a
given
job
from
holding
the
cpu
for
too
long
a
period
cacm
december
1972
sherman
s
baskett
iii
f
browne
j
c
scheduling
cpu
scheduling
multiprogramming
performance
measurement
trace
driven
models
4
10
4
20
4
31
4
32
ca721210
jb
january
27
1978
10
57
am
2245
5
2245
2245
5
2245
2245
5
2245
2571
5
2245
3072
5
2245
3119
5
2245
1713
6
2245
2219
6
2245
2245
6
2245
2245
6
2245
2245
6
2245
2375
6
2245
2798
6
2245
2849
6
2245
2859
6
2245
</TEXT>
</DOC>
<DOC>
<DOCNO>2246</DOCNO>
<TEXT>
levels
of
language
for
portable
software
an
increasing
amount
of
software
is
being
implemented
in
a
portable
form
a
popular
way
of
accomplishing
this
is
to
encode
the
software
in
a
specially
designed
machine
independent
language
and
then
to
map
this
language
often
using
a
macro
processor
into
the
assembly
language
of
each
desired
object
machine
the
design
of
the
machine
independent
language
is
the
key
factor
in
this
operation
this
paper
discusses
the
relative
merits
of
pitching
this
language
at
a
high
level
or
a
low
level
and
presents
some
comparative
results
cacm
december
1972
brown
p
j
portable
software
level
of
language
machine
independent
macro
processor
efficiency
4
12
4
21
4
22
ca721209
jb
january
27
1978
11
02
am
2246
5
2246
2246
5
2246
2246
5
2246
</TEXT>
</DOC>
<DOC>
<DOCNO>2247</DOCNO>
<TEXT>
on
the
criteria
to
be
used
in
decomposing
systems
into
modules
this
paper
discusses
modularization
as
a
mechanism
for
improving
the
flexibility
ad
comprehensibility
of
a
system
while
allowing
the
shortening
of
its
development
time
the
effectiveness
of
a
modularization
is
dependent
upon
the
criteria
used
in
dividing
the
system
into
modules
a
system
design
problem
is
presented
and
both
a
conventional
and
unconventional
decomposition
are
described
it
is
shown
that
the
unconventional
decompositions
have
distinct
advantages
for
the
goals
outlined
the
criteria
used
in
arriving
at
the
decompositions
are
discussed
the
unconventional
decomposition
if
implemented
with
the
conventional
assumption
that
a
module
consists
of
one
or
more
subroutines
will
be
less
efficient
in
most
cases
an
alternative
approach
to
implementation
which
does
not
have
this
effect
is
sketched
cacm
december
1972
parnas
d
l
software
modules
modularity
software
engineering
kwic
index
software
design
4
0
ca721208
jb
january
27
1978
11
09
am
2247
5
2247
2247
5
2247
2247
5
2247
2480
5
2247
2738
5
2247
2867
5
2247
3004
5
2247
3030
5
2247
3155
5
2247
1425
6
2247
1749
6
2247
1749
6
2247
2080
6
2247
2204
6
2247
2204
6
2247
2247
6
2247
2247
6
2247
2247
6
2247
2247
6
2247
2247
6
2247
2247
6
2247
2356
6
2247
2356
6
2247
2356
6
2247
2379
6
2247
2456
6
2247
2457
6
2247
2651
6
2247
2777
6
2247
2958
6
2247
2972
6
2247
3073
6
2247
3186
6
2247
799
6
2247
</TEXT>
</DOC>
<DOC>
<DOCNO>2248</DOCNO>
<TEXT>
a
new
method
for
the
solution
of
the
cauchy
problem
for
parabolic
equations
an
integral
equation
representation
is
given
for
parabolic
partial
differential
equations
when
the
equations
are
defined
in
unbounded
domains
as
in
the
initial
value
cauchy
problem
the
solution
of
the
integral
equation
by
the
method
of
successive
approximation
has
inherent
advantages
over
other
methods
error
bounds
for
the
methods
are
of
order
h
3
2
and
h
7
2
his
the
increment
size
depending
on
the
finite
difference
approximations
involved
cacm
december
1972
moore
j
robinson
p
parabolic
equations
the
cauchy
problem
method
of
successive
approximations
5
17
ca721207
jb
january
27
1978
11
13
am
2248
5
2248
2248
5
2248
2248
5
2248
</TEXT>
</DOC>
<DOC>
<DOCNO>2249</DOCNO>
<TEXT>
a
comparison
of
multivariate
normal
generators
three
methods
for
generating
outcomes
on
multivariate
normal
random
vectors
with
a
specified
variance
covariance
matrix
are
presented
a
comparison
is
made
to
determine
which
method
requires
the
least
computer
execution
time
and
memory
space
when
utilizing
the
ibm
360
67
all
methods
use
as
a
basis
a
standard
gaussian
random
number
generator
results
of
the
comparison
indicate
that
the
method
based
on
triangular
factorization
of
the
covariance
matrix
generally
requires
less
memory
space
and
computer
time
than
the
other
two
methods
cacm
december
1972
barr
d
r
sezak
n
l
random
number
generator
normal
distribution
multivariate
normal
distribution
multivariate
normal
generator
3
65
5
5
ca721206
jb
january
27
1978
11
19
am
1708
4
2249
1781
4
2249
1826
4
2249
1860
4
2249
1972
4
2249
2156
4
2249
2168
4
2249
2249
4
2249
2249
4
2249
2249
4
2249
2314
4
2249
2719
4
2249
2736
4
2249
2736
4
2249
2833
4
2249
3074
4
2249
1626
5
2249
1708
5
2249
1853
5
2249
2249
5
2249
2249
5
2249
2249
5
2249
</TEXT>
</DOC>
<DOC>
<DOCNO>2250</DOCNO>
<TEXT>
computer
methods
for
sampling
from
the
exponential
and
normal
distributions
corrigendum
cacm
december
1972
ahrens
j
h
dieter
u
ca721205
jb
january
27
1978
11
20
am
2250
5
2250
2250
5
2250
2250
5
2250
</TEXT>
</DOC>
<DOC>
<DOCNO>2251</DOCNO>
<TEXT>
weighted
increment
linear
search
for
scatter
tables
a
new
linear
search
for
hash
tables
whose
increment
step
is
a
function
of
the
key
being
addressed
is
presented
comparisons
with
known
methods
are
given
in
terms
of
efficiency
and
computation
complexity
in
particular
the
new
method
applies
to
tables
of
size
n
2
r
it
allows
full
table
searching
and
practically
eliminates
primary
clustering
at
a
very
low
cost
cacm
december
1972
luccio
f
linear
search
weighted
increment
search
scatter
storage
hash
table
key
hash
address
clustering
search
length
3
73
3
74
4
9
ca721204
jb
january
27
1978
11
25
am
1676
4
2251
1682
4
2251
1728
4
2251
1860
4
2251
1860
4
2251
1973
4
2251
1973
4
2251
1973
4
2251
1973
4
2251
1992
4
2251
1992
4
2251
2018
4
2251
2018
4
2251
2018
4
2251
2032
4
2251
2033
4
2251
2033
4
2251
2107
4
2251
2107
4
2251
2109
4
2251
2109
4
2251
2138
4
2251
2203
4
2251
2203
4
2251
2203
4
2251
2203
4
2251
2251
4
2251
2251
4
2251
2251
4
2251
2251
4
2251
2251
4
2251
2251
4
2251
2359
4
2251
2524
4
2251
2530
4
2251
2534
4
2251
2537
4
2251
2543
4
2251
2543
4
2251
2543
4
2251
2543
4
2251
2543
4
2251
2552
4
2251
2559
4
2251
2559
4
2251
2559
4
2251
2573
4
2251
2573
4
2251
2573
4
2251
2770
4
2251
2770
4
2251
2770
4
2251
2770
4
2251
2974
4
2251
2991
4
2251
2991
4
2251
3053
4
2251
3053
4
2251
3053
4
2251
3053
4
2251
3083
4
2251
3083
4
2251
1785
5
2251
1786
5
2251
1973
5
2251
2018
5
2251
2107
5
2251
2109
5
2251
2251
5
2251
2251
5
2251
2251
5
2251
2974
5
2251
2109
6
2251
2251
6
2251
</TEXT>
</DOC>
<DOC>
<DOCNO>2252</DOCNO>
<TEXT>
a
method
for
incrementally
compiling
languages
with
nested
statement
structure
a
method
of
incremental
compilation
is
presented
which
applies
especially
to
programming
languages
in
which
statements
can
be
nested
such
as
algol
and
pl
i
the
method
permits
editing
of
the
source
language
using
a
general
purpose
text
editor
and
incremental
processing
of
changes
without
frequent
recompilation
of
entire
routines
the
essential
points
of
the
method
are
1
the
syntax
of
the
language
is
restricted
insof
ar
as
which
constructs
may
occur
on
lines
2
an
internal
data
structure
called
the
skeleton
is
maintained
to
represent
the
statement
structure
3
the
recompilation
is
partially
batched
in
the
sense
that
recompilation
of
modified
lines
does
not
occur
until
the
last
of
a
set
of
editing
commands
has
been
received
and
4
the
parsing
and
compilation
are
factored
into
two
parts
that
done
on
individual
lines
and
that
done
globally
to
handle
the
relationships
between
the
lines
cacm
december
1972
earley
j
caizergues
p
incremental
compiler
interactive
programming
language
4
12
4
22
ca721203
jb
january
27
1978
1
04
pm
1086
4
2252
1132
4
2252
1234
4
2252
1263
4
2252
1265
4
2252
1270
4
2252
1323
4
2252
1358
4
2252
1379
4
2252
1380
4
2252
1396
4
2252
1453
4
2252
1464
4
2252
1484
4
2252
1491
4
2252
1498
4
2252
1541
4
2252
1565
4
2252
1613
4
2252
1614
4
2252
1767
4
2252
1781
4
2252
1781
4
2252
1781
4
2252
1787
4
2252
1824
4
2252
1825
4
2252
1860
4
2252
1860
4
2252
1945
4
2252
1988
4
2252
2083
4
2252
2178
4
2252
2179
4
2252
2252
4
2252
2252
4
2252
2252
4
2252
2252
4
2252
2325
4
2252
2341
4
2252
2546
4
2252
2594
4
2252
2645
4
2252
2652
4
2252
2684
4
2252
2842
4
2252
2929
4
2252
2934
4
2252
3069
4
2252
669
4
2252
679
4
2252
691
4
2252
761
4
2252
949
4
2252
989
4
2252
1358
5
2252
1496
5
2252
2155
5
2252
2252
5
2252
2252
5
2252
2252
5
2252
3184
5
2252
</TEXT>
</DOC>
<DOC>
<DOCNO>2253</DOCNO>
<TEXT>
index
ranges
for
matrix
calculi
the
paper
describes
a
scheme
for
symbolic
manipulation
of
index
expressions
which
arise
as
a
by
product
of
the
symbolic
manipulation
of
expressions
in
the
matrix
calculi
described
by
the
authors
in
a
previous
paper
this
scheme
attempts
program
optimization
by
transforming
the
original
algorithm
rather
than
the
machine
code
the
goal
is
to
automatically
generate
code
for
handling
the
tedious
address
calculations
necessitated
by
complicated
data
structures
the
paper
is
therefore
preoccupied
with
indexing
by
position
the
relationship
of
indexing
by
name
and
indexing
by
position
is
discussed
cacm
december
1972
bayer
r
witzgall
c
address
calculations
algorithm
transformation
compilation
data
structures
indexing
by
name
indexing
by
position
index
domain
index
map
index
range
matrix
expressions
normal
form
programming
languages
program
optimization
range
operations
symbolic
manipulation
syntactic
analysis
well
formed
expressions
4
12
4
22
5
14
ca721202
jb
january
27
1978
1
12
pm
1614
4
2253
2253
4
2253
2253
4
2253
2254
4
2253
2557
4
2253
2081
5
2253
2253
5
2253
2253
5
2253
2253
5
2253
437
5
2253
</TEXT>
</DOC>
<DOC>
<DOCNO>2254</DOCNO>
<TEXT>
dynamic
partitioning
for
array
languages
the
classical
process
of
partitioning
an
array
into
subarrays
is
extended
to
a
more
useful
array
language
operation
various
modes
of
partitioning
are
defined
for
different
types
of
arrays
so
that
subarrays
may
vary
over
the
original
array
in
a
nearly
arbitrary
manner
these
definitions
are
motivated
with
several
realistic
examples
to
illustrate
the
value
of
partitioning
for
array
languages
of
general
interest
is
the
data
structure
for
partitioning
this
consists
of
dynamic
tree
structures
which
are
used
to
derive
and
maintain
the
array
control
information
these
are
described
in
sufficient
detail
to
be
of
value
in
the
design
of
other
array
languages
the
description
presented
in
this
paper
is
implemented
in
a
new
array
language
ol
2
currently
under
development
at
the
university
of
illinois
cacm
december
1972
phillips
j
r
adams
h
c
dynamic
partitioning
array
partitioning
array
language
data
structure
tree
structure
programming
language
design
array
control
blocks
partition
control
blocks
4
12
4
2
4
22
ca721201
jb
january
27
1978
1
20
pm
2253
4
2254
2254
4
2254
2081
5
2254
2254
5
2254
2254
5
2254
2254
5
2254
</TEXT>
</DOC>
<DOC>
<DOCNO>2255</DOCNO>
<TEXT>
comments
on
moorer
music
and
computer
composition
cacm
november
1972
smoliar
s
w
artificial
intelligence
heuristic
programming
models
of
cognitive
processes
computer
music
computer
composition
music
theory
3
44
3
65
ca721114
jb
january
27
1978
1
22
pm
2255
5
2255
2255
5
2255
2255
5
2255
</TEXT>
</DOC>
<DOC>
<DOCNO>2256</DOCNO>
<TEXT>
further
comments
on
dijkstra
concurrent
programming
control
problem
cacm
november
1972
eisenberg
m
a
mcguire
m
r
critical
section
concurrent
programming
control
multiprocessing
4
32
ca721113
jb
january
27
1978
1
24
pm
1781
4
2256
2150
4
2256
2150
4
2256
2228
4
2256
2228
4
2256
2256
4
2256
2256
4
2256
2317
4
2256
2342
4
2256
2342
4
2256
2376
4
2256
2618
4
2256
2618
4
2256
3184
4
2256
1198
5
2256
1338
5
2256
2256
5
2256
2256
5
2256
2256
5
2256
2618
5
2256
1198
6
2256
1338
6
2256
1749
6
2256
2256
6
2256
</TEXT>
</DOC>
<DOC>
<DOCNO>2257</DOCNO>
<TEXT>
a
note
on
optimal
doubly
chained
trees
cacm
november
1972
kennedy
s
file
searching
doubly
chained
tree
binary
search
tree
3
73
3
74
5
32
5
6
ca721112
jb
january
27
1978
1
26
pm
1050
4
2257
1935
4
2257
1936
4
2257
2017
4
2257
2032
4
2257
2257
4
2257
2257
4
2257
2257
4
2257
2257
4
2257
2360
4
2257
2360
4
2257
2360
4
2257
2451
4
2257
2451
4
2257
2452
4
2257
2452
4
2257
2556
4
2257
2765
4
2257
1831
5
2257
1936
5
2257
2257
5
2257
2257
5
2257
2257
5
2257
2360
5
2257
849
5
2257
</TEXT>
</DOC>
<DOC>
<DOCNO>2258</DOCNO>
<TEXT>
additional
results
on
key
to
address
transform
techniques
a
fundamental
performance
study
on
large
existing
formatted
files
cacm
november
1972
lum
v
y
yuen
p
s
t
hashing
hashing
techniques
hashing
methods
hash
coding
keys
key
transformation
key
to
address
transformation
direct
addressing
direct
access
method
randomizing
random
access
file
organization
file
search
scatter
storage
information
retrieval
3
7
3
72
3
73
3
74
3
79
4
9
ca721111
jb
january
27
1978
1
31
pm
2258
4
2258
2319
4
2258
2313
4
2258
2359
4
2258
2437
4
2258
2552
4
2258
2781
4
2258
2860
4
2258
2991
4
2258
2203
5
2258
2258
5
2258
2258
5
2258
2258
5
2258
</TEXT>
</DOC>
<DOC>
<DOCNO>2259</DOCNO>
<TEXT>
modified
incomplete
gamma
function
s14
algorithm
a435
cacm
november
1972
fullerton
w
modified
incomplete
gamma
function
incomplete
gamma
function
chi
square
distribution
function
poisson
distribution
function
5
13
ca721110
jb
january
27
1978
1
40
pm
2259
5
2259
2259
5
2259
2259
5
2259
</TEXT>
</DOC>
<DOC>
<DOCNO>2260</DOCNO>
<TEXT>
exact
probabilities
for
r
x
c
contingency
tables
g2
algorithm
a434
cacm
november
1972
march
d
l
probability
contingency
table
test
of
significance
3
5
5
5
ca721109
jb
january
27
1978
1
42
pm
2260
5
2260
2260
5
2260
2260
5
2260
</TEXT>
</DOC>
<DOC>
<DOCNO>2261</DOCNO>
<TEXT>
an
approximate
method
for
generating
symmetric
random
variables
a
method
for
generating
values
of
continuous
symmetric
random
variables
that
is
relatively
fast
requires
essentially
no
computer
memory
and
is
easy
to
use
is
developed
the
method
which
uses
a
uniform
zero
one
random
number
source
is
based
on
the
inverse
function
of
the
lambda
distribution
of
turkey
since
it
approximates
many
of
the
continuous
theoretical
distributions
and
empirical
distributions
frequently
used
in
simulations
the
method
should
be
useful
to
simulation
practitioners
cacm
november
1972
ramberg
j
s
schmeiser
b
w
simulation
monte
carlo
probability
statistics
approximations
random
variables
random
numbers
moments
distribution
5
5
8
1
ca721108
jb
january
27
1978
1
47
pm
2261
5
2261
2261
5
2261
2261
5
2261
2686
5
2261
2261
6
2261
</TEXT>
</DOC>
<DOC>
<DOCNO>2262</DOCNO>
<TEXT>
garbage
collection
for
virtual
memory
computer
systems
in
list
processing
there
is
typically
a
growing
demand
for
space
during
program
execution
this
paper
examines
the
practical
implications
of
this
growth
within
a
virtual
memory
computer
system
proposes
two
new
garbage
collection
techniques
for
virtual
memory
systems
and
compares
them
with
traditional
methods
by
discussion
and
by
simulation
cacm
november
1972
baecker
h
d
garbage
collection
virtual
memory
list
processing
paging
segmentation
page
tables
4
32
ca721107
jb
january
27
1978
1
50
pm
2262
5
2262
2262
5
2262
2262
5
2262
</TEXT>
</DOC>
<DOC>
<DOCNO>2263</DOCNO>
<TEXT>
the
conversion
of
limited
entry
decision
tables
to
optimal
and
near
optimal
flowcharts
two
new
algorithms
two
new
algorithms
for
deriving
optimal
and
near
optimal
flowcharts
from
limited
entry
decision
tables
are
presented
both
take
into
account
rule
frequencies
and
the
time
needed
to
test
conditions
one
of
the
algorithms
called
the
optimum
finding
algorithm
leads
to
a
flowchart
which
truly
minimizes
execution
time
for
a
decision
table
in
which
simple
rules
are
already
contracted
to
complex
rules
the
other
one
called
the
optimum
approaching
algorithm
requires
many
fewer
calculations
but
does
not
necessarily
produce
the
optimum
flowchart
the
algorithms
are
first
derived
for
treating
decision
tables
not
containing
an
else
rule
but
the
optimum
approaching
algorithm
is
shown
to
be
equally
valid
for
tables
including
such
a
rule
both
algorithms
are
compared
with
existing
ones
and
are
applied
to
a
somewhat
large
decision
table
derived
from
a
real
case
from
this
comparison
two
conclusions
are
drawn
1
the
optimum
approaching
algorithm
will
usually
lead
to
better
results
than
comparable
existing
ones
and
will
not
require
more
but
usually
less
computation
time
2
in
general
the
greater
computation
effort
needed
for
applying
the
optimum
finding
algorithm
will
not
be
justified
by
the
small
reduction
in
execution
time
obtained
cacm
november
1972
verhelst
m
decision
table
flowcharting
preprocessor
optimal
programs
search
3
50
3
59
4
19
4
29
4
49
5
31
ca721106
jb
january
27
1978
2
10
pm
2263
5
2263
2263
5
2263
2263
5
2263
2598
5
2263
2691
5
2263
2726
5
2263
3113
5
2263
1172
6
2263
1172
6
2263
1327
6
2263
1354
6
2263
1354
6
2263
1488
6
2263
1489
6
2263
1548
6
2263
1548
6
2263
2220
6
2263
2220
6
2263
2221
6
2263
2263
6
2263
2263
6
2263
2263
6
2263
2263
6
2263
2453
6
2263
2598
6
2263
2691
6
2263
2691
6
2263
2856
6
2263
</TEXT>
</DOC>
<DOC>
<DOCNO>2264</DOCNO>
<TEXT>
derived
semantics
for
some
programming
language
constructs
the
constructs
of
a
simple
programming
language
are
introduced
and
described
informally
in
terms
of
values
and
side
effects
a
translator
is
defined
which
translates
the
language
into
flowcharts
for
a
simple
machine
the
action
of
the
machine
in
executing
a
flowchart
is
defined
a
proof
is
constructed
that
the
effect
of
translating
and
executing
any
program
can
be
expressed
solely
in
terms
of
the
value
and
side
effect
of
the
program
during
the
course
of
constructing
the
proof
formal
definitions
of
the
concepts
of
value
and
side
effect
are
derived
in
order
to
make
the
proof
rigorous
correctness
of
the
implementation
involves
checking
that
the
definitions
derived
in
the
step
above
are
an
acceptable
formalization
of
the
informal
description
given
in
the
first
step
cacm
november
1972
henderson
p
lambda
calculus
formal
description
program
correctness
programming
languages
semantics
4
22
5
23
5
24
ca721105
jb
january
27
1978
2
19
pm
2264
5
2264
2264
5
2264
2264
5
2264
2470
5
2264
1303
6
2264
1469
6
2264
1834
6
2264
2264
6
2264
</TEXT>
</DOC>
<DOC>
<DOCNO>2265</DOCNO>
<TEXT>
a
model
for
type
checking
most
current
programming
languages
treat
computation
over
different
classes
of
objects
e
g
numbers
strings
labels
and
functions
for
correct
compilation
and
execution
the
following
question
then
arises
is
a
program
properly
constructed
so
that
its
operations
and
operands
are
compatible
the
activity
of
answering
this
question
is
usually
called
type
checking
this
paper
attempts
to
isolate
the
notion
of
type
checking
and
presents
a
partial
solution
to
the
type
checking
problem
based
on
the
notions
of
abstraction
and
application
of
functions
in
particular
a
program
is
mapped
into
an
expression
within
a
decidable
subset
of
the
lambda
calculus
which
characterizes
the
type
relations
within
the
program
and
eliminates
all
other
information
the
determination
of
the
type
wise
correctness
or
incorrectness
of
the
program
is
resolved
by
reducing
its
corresponding
lambda
calculus
expression
to
one
of
two
normal
forms
the
constant
correct
for
a
type
wise
correct
program
or
the
constant
error
an
application
to
type
checking
in
algol
60
is
made
and
the
attendant
problems
faced
for
any
notion
of
type
checking
are
discussed
cacm
november
1972
ledgard
h
f
type
checking
types
lambda
calculus
models
for
programming
languages
syntax
semantics
compiler
writing
language
implementation
formal
definition
4
12
4
22
5
2
5
21
5
23
ca721104
jb
january
27
1978
2
30
pm
2265
5
2265
2265
5
2265
2265
5
2265
</TEXT>
</DOC>
<DOC>
<DOCNO>2266</DOCNO>
<TEXT>
a
highly
parallel
algorithm
for
approximating
all
zeros
of
a
polynomial
with
only
real
zeros
an
algorithm
is
described
based
on
newton
method
which
simultaneously
approximates
all
zeros
of
a
polynomial
with
only
real
zeros
the
algorithm
which
is
conceptually
suitable
for
parallel
computation
determines
its
own
starting
values
so
that
convergence
to
the
zeros
is
guaranteed
multiple
zeros
and
their
multiplicity
are
readily
determined
at
no
point
in
the
method
is
polynomial
deflation
used
cacm
november
1972
patrick
m
l
parallel
numerical
algorithms
real
polynomials
real
zeros
newton
method
starting
values
guaranteed
convergence
5
15
ca721103
jb
january
27
1978
2
35
pm
2266
5
2266
2266
5
2266
2266
5
2266
2660
5
2266
2266
6
2266
</TEXT>
</DOC>
<DOC>
<DOCNO>2267</DOCNO>
<TEXT>
algorithms
to
reveal
properties
of
floating
point
arithmetic
two
algorithms
are
presented
in
the
form
of
fortran
subroutines
each
subroutine
computes
the
radix
and
number
of
digits
of
the
floating
point
numbers
and
whether
rounding
or
chopping
is
done
by
the
machine
on
which
it
is
run
the
methods
are
shown
to
work
on
any
reasonable
floating
point
computer
cacm
november
1972
malcolm
m
a
floating
point
arithmetic
high
level
languages
philosophy
of
language
design
4
9
5
19
ca721102
jb
january
27
1978
2
39
pm
2267
5
2267
2267
5
2267
2267
5
2267
2647
5
2267
2792
5
2267
2267
6
2267
2267
6
2267
2647
6
2267
</TEXT>
</DOC>
<DOC>
<DOCNO>2268</DOCNO>
<TEXT>
a
comparative
study
of
computer
programs
for
integrating
differential
equations
a
study
comparing
the
performance
of
several
computer
programs
for
integrating
systems
of
ordinary
differential
equations
is
reported
the
integration
methods
represented
include
multistep
methods
predictor
correctors
single
step
methods
runge
kutta
and
extrapolation
methods
both
polynomial
and
rational
the
testing
procedure
is
described
together
with
the
evaluation
criteria
applied
a
set
of
test
problems
on
which
the
programs
were
tested
is
included
in
an
appendix
for
the
particular
problems
and
criteria
used
in
the
investigation
it
was
found
that
a
program
based
on
rational
extrapolation
showed
the
best
performance
cacm
november
1972
fox
p
ordinary
differential
equations
integration
program
comparison
certification
validation
5
10
5
17
ca721101
jb
january
27
1978
2
45
pm
2268
5
2268
2268
5
2268
2268
5
2268
2567
5
2268
2268
6
2268
755
6
2268
</TEXT>
</DOC>
<DOC>
<DOCNO>2269</DOCNO>
<TEXT>
tableless
date
conversion
algorithm
r398
cacm
october
1972
robertson
j
d
date
calendar
fortran
statement
function
arithmetic
statement
function
3
15
4
9
5
9
ca721009
jb
january
27
1978
2
47
pm
2269
4
2269
3115
4
2269
2269
5
2269
2269
5
2269
2269
5
2269
785
5
2269
</TEXT>
</DOC>
<DOC>
<DOCNO>2270</DOCNO>
<TEXT>
interpolation
and
smooth
curve
fitting
based
on
local
procedures
e2
algorithm
a433
cacm
october
1972
akima
h
interpolation
polynomial
slope
of
curve
smooth
curve
fitting
5
13
ca721008
jb
january
27
19782
49
pm
1845
4
2270
1900
4
2270
2083
4
2270
2154
4
2270
2270
4
2270
2693
4
2270
988
5
2270
2270
5
2270
2270
5
2270
2270
5
2270
2693
5
2270
2696
5
2270
988
6
2270
2270
6
2270
2270
6
2270
2696
6
2270
2693
6
2270
</TEXT>
</DOC>
<DOC>
<DOCNO>2271</DOCNO>
<TEXT>
aesthetics
and
the
human
factor
in
programming
corrigendum
cacm
october
1972
ershov
a
p
ca721007
jb
january
27
1978
2
51
pm
2271
5
2271
2271
5
2271
2271
5
2271
</TEXT>
</DOC>
<DOC>
<DOCNO>2272</DOCNO>
<TEXT>
sorting
by
natural
selection
a
family
of
sorting
algorithms
is
proposed
the
members
of
which
make
fuller
use
of
the
memory
space
and
thus
yield
longer
sorted
strings
extensive
simulation
results
are
presented
and
various
implications
and
further
applications
are
discussed
cacm
october
1972
frazer
w
d
wong
c
k
algorithms
sorting
by
replacement
selection
expected
string
length
5
31
ca721006
jb
january
27
1978
2
54
pm
1638
4
2272
1867
4
2272
2176
4
2272
2272
4
2272
2272
4
2272
1638
5
2272
2272
5
2272
2272
5
2272
2272
5
2272
677
5
2272
</TEXT>
</DOC>
<DOC>
<DOCNO>2273</DOCNO>
<TEXT>
conversion
of
decision
tables
by
rule
mask
method
without
rule
mask
two
algorithms
for
generating
computer
programs
from
decision
tables
are
described
the
algorithms
allow
handling
limited
entry
extended
entry
and
mixed
entry
tables
the
algorithms
are
based
on
the
rule
mask
method
but
need
not
have
the
masks
at
execution
time
they
perform
the
logical
operations
immediately
rather
than
at
the
end
of
the
interpreting
process
execution
time
can
be
considerably
reduced
by
instantly
marking
rules
which
are
not
applicable
algorithms
1
and
2
or
conditions
which
are
already
tested
algorithm
2
the
new
algorithms
combine
to
a
certain
degree
the
advantages
of
mask
methods
with
those
of
tree
methods
cacm
october
1972
dathe
g
decision
tables
rule
mask
rule
mask
method
rule
mask
technique
program
generator
3
50
4
12
4
19
4
29
ca721005
jb
january
27
1978
3
02
pm
1354
4
2273
1354
4
2273
1354
4
2273
1488
4
2273
1488
4
2273
1684
4
2273
1994
4
2273
2053
4
2273
2053
4
2273
2053
4
2273
2053
4
2273
2220
4
2273
2220
4
2273
2220
4
2273
2220
4
2273
2221
4
2273
2273
4
2273
2273
4
2273
2273
4
2273
2273
4
2273
2273
4
2273
2273
4
2273
2453
4
2273
2453
4
2273
2453
4
2273
2453
4
2273
2517
4
2273
2598
4
2273
2598
4
2273
2726
4
2273
2726
4
2273
2726
4
2273
2726
4
2273
2856
4
2273
2856
4
2273
2856
4
2273
2856
4
2273
2856
4
2273
3034
4
2273
3113
4
2273
1172
5
2273
1237
5
2273
1327
5
2273
1354
5
2273
2053
5
2273
2220
5
2273
2273
5
2273
2273
5
2273
2273
5
2273
</TEXT>
</DOC>
<DOC>
<DOCNO>2274</DOCNO>
<TEXT>
generating
english
discourse
from
semantic
networks
a
system
is
described
for
generating
english
sentences
from
a
form
of
semantic
nets
in
which
the
nodes
are
word
sense
meanings
and
the
paths
are
primarily
deep
case
relations
the
grammar
used
by
the
system
is
in
the
form
of
a
network
that
imposes
an
ordering
on
a
set
of
syntactic
transformations
that
are
expressed
as
lisp
functions
the
generation
algorithm
uses
the
information
in
the
semantic
network
to
select
appropriate
generation
paths
through
the
grammar
the
system
is
designed
for
use
as
a
computational
tool
that
allows
a
linguist
to
develop
and
study
methods
for
generating
surface
strings
from
an
underlying
semantic
structure
initial
finding
with
regard
to
form
determiners
such
as
voice
form
tense
and
mood
some
rules
for
embedding
sentences
and
some
attention
to
pronominal
substitution
are
reported
the
system
is
programmed
in
lisp
1
5
and
is
available
from
the
authors
cacm
october
1972
simmons
r
slocum
j
semantic
nets
grammars
deep
case
relations
semantic
generation
discourse
generation
3
42
3
65
ca721004
jb
january
27
1978
3
10
pm
2274
5
2274
2274
5
2274
2274
5
2274
2795
5
2274
1928
6
2274
1989
6
2274
2274
6
2274
</TEXT>
</DOC>
<DOC>
<DOCNO>2275</DOCNO>
<TEXT>
integral
equations
of
immunology
the
inversion
of
a
particular
integral
equation
of
the
first
fredholm
kind
is
the
basic
problem
considered
the
strategy
which
yielded
success
consisted
of
three
essential
points
1
fit
the
known
experimental
data
by
a
curve
with
properties
which
derive
from
properties
of
the
as
yet
unknown
function
2
stabilize
the
computation
for
the
unknown
function
by
using
singular
value
decomposition
3
constrain
the
unknown
function
approximation
since
it
represents
a
probability
distribution
to
be
nonnegative
a
number
of
test
cases
are
presented
one
set
of
actual
experimental
data
is
analyzed
with
the
procedures
presented
cacm
october
1972
hanson
r
j
integral
equations
of
the
first
kind
nonnegative
constraints
singular
value
analysis
3
10
5
14
5
18
5
41
ca721003
jb
january
27
1978
3
37
pm
2275
5
2275
2275
5
2275
2275
5
2275
</TEXT>
</DOC>
<DOC>
<DOCNO>2276</DOCNO>
<TEXT>
computer
methods
for
sampling
from
the
exponential
and
normal
distributions
various
methods
are
known
for
transforming
uniformly
distributed
random
numbers
into
exponentially
and
normally
distributed
quantities
the
most
efficient
ones
are
compared
in
terms
of
memory
requirements
and
speed
with
some
new
algorithms
a
number
of
procedures
convert
taylor
series
expansions
directly
into
sampling
steps
an
approach
which
may
be
used
for
sampling
from
any
continuous
distribution
for
the
exponential
distribution
a
definite
recommendation
can
be
made
whereas
in
the
case
of
the
normal
distribution
there
remains
a
choice
between
slower
and
shorter
algorithms
and
faster
but
space
consuming
methods
cacm
october
1972
ahrens
j
h
dieter
u
random
numbers
pseudorandom
normal
distribution
exponential
distribution
exponential
distribution
simulation
numerical
analysis
3
29
3
57
5
11
5
5
ca721002
jb
january
27
1978
3
55
pm
1073
4
2276
2137
4
2276
2276
4
2276
2276
4
2276
1073
5
2276
1153
5
2276
2276
5
2276
2276
5
2276
2276
5
2276
2565
5
2276
1716
6
2276
2276
6
2276
</TEXT>
</DOC>
<DOC>
<DOCNO>2277</DOCNO>
<TEXT>
demand
paging
through
utilization
of
working
sets
on
the
maniac
ii
a
hardware
implementation
on
the
maniac
ii
computer
of
the
working
set
model
for
demand
paging
as
introduced
by
denning
is
discussed
characteristics
of
the
maniac
ii
are
given
along
with
a
description
of
the
basic
demand
paging
scheme
and
the
associate
memory
which
has
been
added
to
the
maniac
ii
hardware
finally
a
description
of
the
hardware
design
for
implementation
of
the
working
set
model
is
discussed
and
a
specification
of
the
actions
taken
under
various
conditions
which
may
arise
during
the
operation
of
the
full
working
set
model
demand
paging
system
is
given
cacm
october
1972
morris
j
b
demand
paging
dynamic
storage
allocation
maniac
ii
memory
allocation
one
level
store
paging
paging
associative
memory
storage
allocation
thrashing
virtual
memory
working
set
model
4
30
6
21
ca721001
jb
january
27
1978
4
06
pm
1879
4
2277
1884
4
2277
1892
4
2277
1901
4
2277
1901
4
2277
2085
4
2277
2095
4
2277
2095
4
2277
2218
4
2277
2277
4
2277
2277
4
2277
2297
4
2277
2319
4
2277
2329
4
2277
2358
4
2277
2365
4
2277
2373
4
2277
2380
4
2277
2434
4
2277
2499
4
2277
2501
4
2277
2582
4
2277
2669
4
2277
2828
4
2277
2863
4
2277
2881
4
2277
2928
4
2277
2996
4
2277
3006
4
2277
3067
4
2277
1751
5
2277
1754
5
2277
2277
5
2277
2277
5
2277
2277
5
2277
2928
5
2277
3127
5
2277
1751
6
2277
2080
6
2277
2277
6
2277
2277
6
2277
2380
6
2277
2522
6
2277
2569
6
2277
</TEXT>
</DOC>
<DOC>
<DOCNO>2278</DOCNO>
<TEXT>
on
foster
information
storage
and
retrieval
using
avl
trees
cacm
september
1972
tan
k
c
binary
trees
search
trees
information
storage
information
retrieval
3
70
3
73
3
74
ca720912
jb
january
27
1978
4
10
pm
2278
5
2278
2278
5
2278
2278
5
2278
2455
5
2278
2278
6
2278
2388
6
2278
</TEXT>
</DOC>
<DOC>
<DOCNO>2279</DOCNO>
<TEXT>
a
controller
for
a
braille
terminal
cacm
september
1972
rubinstein
r
feldman
j
blind
programming
aid
braille
braille
character
set
braille
character
translation
braille
computer
communication
braille
computer
terminal
braille
terminal
tactile
computer
communication
tactile
terminal
1
59
4
41
6
35
ca720911
jb
january
27
1978
4
14
pm
2279
4
2279
1740
5
2279
2279
5
2279
2279
5
2279
2279
5
2279
</TEXT>
</DOC>
<DOC>
<DOCNO>2280</DOCNO>
<TEXT>
comment
on
deadlock
prevention
method
cacm
september
1972
parnas
d
l
habermann
a
n
multiprogramming
time
sharing
scheduling
resource
allocation
deadlock
interlock
lockout
deadly
embrace
knotting
3
72
4
32
6
20
ca720910
jb
january
27
1978
4
16
pm
2228
4
2280
2280
4
2280
2280
4
2280
2379
4
2280
2379
4
2280
2482
4
2280
2482
4
2280
2500
4
2280
2740
4
2280
2851
4
2280
2920
4
2280
1877
5
2280
2228
5
2280
2280
5
2280
2280
5
2280
2280
5
2280
</TEXT>
</DOC>
<DOC>
<DOCNO>2281</DOCNO>
<TEXT>
the
eigen
problem
of
block
tridiagonal
matrices
cacm
september
1972
khalil
h
m
linear
algebra
eigenvalues
and
eigenvectors
partial
differential
equations
5
14
5
17
ca720909
jb
january
27
1978
4
18
pm
2281
5
2281
2281
5
2281
2281
5
2281
</TEXT>
</DOC>
<DOC>
<DOCNO>2282</DOCNO>
<TEXT>
a
comparison
of
floating
point
summation
methods
cacm
september
1972
gregory
j
summation
floating
point
addition
truncation
error
error
propagation
5
11
ca720908
jb
january
27
1978
4
20
pm
2183
4
2282
2282
4
2282
2282
4
2282
2860
4
2282
3083
4
2282
1328
5
2282
2049
5
2282
2282
5
2282
2282
5
2282
2282
5
2282
</TEXT>
</DOC>
<DOC>
<DOCNO>2283</DOCNO>
<TEXT>
thinning
algorithms
on
rectangular
hexagonal
and
triangular
arrays
in
this
report
three
thinning
algorithms
are
developed
one
each
for
use
with
rectangular
hexagonal
and
triangular
arrays
the
approach
to
the
development
of
each
algorithm
is
the
same
pictorial
results
produced
by
each
of
the
algorithms
are
presented
and
the
relative
performances
of
the
algorithms
are
compared
it
is
found
that
the
algorithm
operating
with
the
triangular
array
is
the
most
sensitive
to
image
irregularities
and
noise
yet
it
will
yield
a
thinned
image
with
an
overall
reduced
number
of
points
it
is
concluded
that
the
algorithm
operating
in
conjunction
with
the
hexagonal
array
has
features
which
strike
a
balance
between
those
of
the
other
two
arrays
cacm
september
1972
deutsch
e
s
thinning
algorithms
rectangular
hexagonal
triangular
arrays
image
processing
skeleton
3
64
ca720907
jb
january
27
1978
4
25
pm
2283
5
2283
2283
5
2283
2283
5
2283
</TEXT>
</DOC>
<DOC>
<DOCNO>2284</DOCNO>
<TEXT>
solution
of
the
matrix
equation
ax
xb
c
f4
algorithm
a432
cacm
september
1972
bartels
r
h
stewart
g
w
linear
algebra
matrices
linear
equations
5
14
ca720906
jb
january
27
1978
4
31
pm
2284
5
2284
2284
5
2284
2284
5
2284
</TEXT>
</DOC>
<DOC>
<DOCNO>2285</DOCNO>
<TEXT>
computer
routine
for
quadratic
and
linear
programming
problems
h
algorithm
a431
a
computer
program
based
on
lemke
complementary
pivot
algorithm
is
presented
this
can
be
used
to
solve
linear
and
quadratic
programming
problems
the
program
has
been
extensively
tested
on
a
wide
range
of
problems
and
the
results
have
been
extremely
satisfactory
cacm
september
1972
ravindran
a
linear
program
quadratic
program
complementary
problem
lemke
algorithm
simplex
method
5
41
ca720905
jb
january
27
1978
4
34
pm
2285
5
2285
2285
5
2285
2285
5
2285
</TEXT>
</DOC>
<DOC>
<DOCNO>2286</DOCNO>
<TEXT>
automatic
error
analysis
for
determining
precision
the
problem
considered
is
that
of
evaluating
a
rational
expression
to
within
any
desired
tolerance
on
a
computer
which
performs
variable
precision
floating
point
arithmetic
operations
an
automatic
error
analysis
technique
is
given
for
determining
directly
from
the
results
of
a
trial
low
precision
interval
arithmetic
calculation
just
how
much
precision
and
data
accuracy
are
required
to
achieve
a
desired
final
accuracy
the
technique
given
generalize
easily
to
the
evaluation
of
many
nonrational
expressions
cacm
september
1972
richman
p
l
error
analysis
interval
arithmetic
precision
control
5
11
ca720904
jb
january
27
1978
4
39
pm
2286
5
2286
2286
5
2286
2286
5
2286
2555
5
2286
2605
5
2286
1026
6
2286
2286
6
2286
2286
6
2286
</TEXT>
</DOC>
<DOC>
<DOCNO>2287</DOCNO>
<TEXT>
a
new
approach
to
automatic
scanning
of
contour
maps
the
problem
of
automatic
digitizing
of
contour
maps
is
discussed
the
structure
of
a
general
contour
map
is
analyzed
and
its
topological
properties
are
utilized
in
developing
a
new
scanning
algorithm
the
problem
of
detection
and
recognition
of
contour
lines
is
solved
by
a
two
color
labeling
method
it
is
shown
that
for
maps
containing
normal
contour
lines
only
it
suffices
to
distinguish
between
so
called
even
and
odd
lines
the
tangency
problem
involved
in
practical
scanning
is
discussed
and
a
solution
based
on
minimizing
computer
memory
space
and
simplifying
control
program
is
suggested
cacm
september
1972
mor
m
lamdan
t
automatic
scanning
contour
maps
digitizing
contour
lines
topology
detection
and
recognition
3
14
3
19
6
35
6
36
ca720903
jb
january
27
1978
4
46
pm
2287
4
2287
2547
4
2287
3062
4
2287
1925
5
2287
2287
5
2287
2287
5
2287
2287
5
2287
</TEXT>
</DOC>
<DOC>
<DOCNO>2288</DOCNO>
<TEXT>
file
organization
the
consecutive
retrieval
property
the
consecutive
retrieval
property
is
an
important
relation
between
a
query
set
and
record
set
its
existence
enables
the
design
of
an
information
retrieval
system
with
a
minimal
search
time
and
no
redundant
storage
some
important
theorems
on
the
consecutive
retrieval
property
are
proved
in
this
paper
conditions
under
which
the
consecutive
retrieval
property
exists
and
remain
invariant
have
been
established
an
outline
for
designing
an
information
retrieval
system
based
on
the
consecutive
retrieval
property
is
also
discussed
cacm
september
1972
ghosh
s
p
file
organization
consecutive
storage
consecutive
retrieval
information
retrieval
record
organization
query
structure
record
structure
storage
on
tapes
storage
space
minimum
access
time
3
70
3
73
3
74
ca720902
jb
january
27
1978
4
52
pm
2288
5
2288
2288
5
2288
2288
5
2288
2729
5
2288
2288
6
2288
2801
6
2288
</TEXT>
</DOC>
<DOC>
<DOCNO>2289</DOCNO>
<TEXT>
cellular
arrays
for
the
solution
of
graph
problems
a
cellular
array
is
a
two
dimensional
checkerboard
type
interconnection
of
identical
modules
or
cells
where
each
cell
contains
a
few
bits
of
memory
and
a
small
amount
of
combinational
logic
and
communicates
mainly
with
its
immediate
neighbors
in
the
array
the
chief
computational
advantage
offered
by
cellular
arrays
is
the
improvement
in
speed
achieved
by
virtue
of
the
possibilities
for
parallel
processing
in
this
paper
it
is
shown
that
cellular
arrays
are
inherently
well
suited
for
the
solution
of
many
graph
problems
for
example
the
adjacency
matrix
of
a
graph
is
easily
mapped
onto
an
array
each
matrix
element
is
stored
in
one
cell
of
the
array
and
typical
row
and
column
operations
are
readily
implemented
by
simple
cell
logic
a
major
challenge
in
the
effective
use
of
cellular
arrays
for
the
solution
of
graph
problems
is
the
determination
of
algorithms
that
exploit
the
possibilities
for
parallelism
especially
for
problems
whose
solutions
appear
to
be
inherently
serial
in
particular
several
parallelized
algorithms
are
presented
for
the
solution
of
certain
spanning
tree
distance
and
path
problems
with
direct
applications
to
wire
routing
pert
chart
analysis
and
the
analysis
of
many
types
of
networks
these
algorithms
exhibit
a
computation
time
that
in
many
cases
grows
at
a
rate
not
exceeding
log2
n
where
n
is
the
number
of
nodes
in
the
graph
straightforward
cellular
implementations
of
the
well
known
serial
algorithms
for
these
problems
require
about
n
steps
and
noncellular
implementations
require
from
n
2
to
n
3
steps
cacm
september
1972
levitt
k
n
kautz
w
h
graph
theory
cellular
logic
in
memory
arrays
parallel
processing
special
purpose
computers
algorithms
for
distance
and
spanning
tree
problems
5
32
6
22
6
5
ca720901
jb
january
30
1978
9
16
am
2289
5
2289
2289
5
2289
2289
5
2289
3075
5
2289
3156
5
2289
2289
6
2289
2289
6
2289
2557
6
2289
2664
6
2289
2714
6
2289
2973
6
2289
3075
6
2289
</TEXT>
</DOC>
<DOC>
<DOCNO>2290</DOCNO>
<TEXT>
immediate
predominators
in
a
directed
graph
h
algorithm
a430
cacm
august
1972
purdom
jr
p
w
moore
e
f
predominator
immediate
predominator
graph
theory
directed
graph
shortest
path
articulation
connectivity
program
optimization
optimizing
compiler
4
12
5
32
ca720812
jb
january
30
1978
9
19
am
1807
4
2290
2034
4
2290
2290
4
2290
2579
4
2290
2923
4
2290
2945
4
2290
1947
5
2290
2290
5
2290
2290
5
2290
2290
5
2290
</TEXT>
</DOC>
<DOC>
<DOCNO>2291</DOCNO>
<TEXT>
localization
of
the
roots
of
a
polynomial
c2
algorithm
a429
cacm
august
1972
squire
w
polynomials
roots
of
polynomials
theory
of
equations
routh
hurwitz
criterion
5
15
ca720811
jb
january
30
1978
9
21
am
2291
5
2291
2291
5
2291
2291
5
2291
</TEXT>
</DOC>
<DOC>
<DOCNO>2292</DOCNO>
<TEXT>
a
note
on
the
generation
of
rosary
permutations
cacm
august
1972
read
r
c
permutation
permutation
generation
5
39
ca720810
jb
january
30
1978
9
24
am
2292
4
2292
2505
4
2292
2189
5
2292
2292
5
2292
2292
5
2292
2292
5
2292
2505
5
2292
2189
6
2292
2292
6
2292
521
6
2292
</TEXT>
</DOC>
<DOC>
<DOCNO>2293</DOCNO>
<TEXT>
comment
on
average
binary
search
length
cacm
august
1972
jones
p
r
searching
binary
searching
record
retrieval
3
74
ca720809
jb
january
30
1978
9
26
am
2293
4
2293
2157
5
2293
2293
5
2293
2293
5
2293
2293
5
2293
</TEXT>
</DOC>
<DOC>
<DOCNO>2294</DOCNO>
<TEXT>
a
bonus
from
van
wijngaarden
device
cacm
august
1972
morris
jr
j
h
non
local
transfers
procedure
returns
4
12
4
13
4
22
ca720808
jb
january
30
1978
9
27
am
2060
4
2294
2155
4
2294
2294
4
2294
2294
4
2294
2470
4
2294
2558
4
2294
2842
4
2294
3077
4
2294
3124
4
2294
3150
4
2294
1469
5
2294
2060
5
2294
2294
5
2294
2294
5
2294
2294
5
2294
</TEXT>
</DOC>
<DOC>
<DOCNO>2295</DOCNO>
<TEXT>
comment
on
the
composition
of
semantics
in
algol
68
cacm
august
1972
van
der
poel
w
l
programming
primitives
programming
languages
algol
semantics
recursive
composition
design
of
programming
languages
data
structures
1
3
4
2
4
22
5
23
5
24
ca720807
jb
january
30
1978
9
29
am
2295
5
2295
2295
5
2295
2295
5
2295
</TEXT>
</DOC>
<DOC>
<DOCNO>2296</DOCNO>
<TEXT>
compiling
fixed
point
multiplications
cacm
august
1972
bernstein
h
j
compiling
multiplications
fixed
point
arithmetic
4
12
ca720806
jb
january
30
1978
9
42
am
2296
4
2296
2952
4
2296
2185
5
2296
2296
5
2296
2296
5
2296
2296
5
2296
</TEXT>
</DOC>
<DOC>
<DOCNO>2297</DOCNO>
<TEXT>
a
model
of
memory
contention
in
a
paging
machine
this
paper
is
concerned
with
certain
aspects
of
contention
for
main
memory
resources
in
a
multiprogrammed
computer
system
operating
under
demand
paging
in
the
model
presented
the
number
of
page
frames
of
main
memory
allocated
to
a
problem
program
varies
in
time
these
changes
in
memory
configuration
are
represented
explicitly
in
the
model
cpu
requirements
and
page
exception
characteristics
of
program
material
being
described
statistically
expressions
for
the
distribution
of
the
number
of
page
frames
allocated
to
an
executing
program
the
long
run
expected
fraction
of
a
program
execution
time
in
a
given
number
of
page
frames
and
the
average
execution
interval
of
the
multiprogrammed
load
are
obtained
it
is
pointed
out
heuristically
and
demonstrated
numerically
that
an
increase
is
obtain
able
in
the
average
execution
interval
of
the
multiprogrammed
load
over
that
resulting
from
equal
fixed
partitioning
of
main
memory
cacm
august
1972
oden
p
h
shedler
g
s
paging
machines
demand
paging
operating
systems
studies
queuing
analysis
memory
contention
memory
management
4
32
ca720805
jb
january
30
1978
9
50
am
1879
4
2297
1884
4
2297
1892
4
2297
1901
4
2297
1924
4
2297
2095
4
2297
2095
4
2297
2218
4
2297
2277
4
2297
2297
4
2297
2297
4
2297
2365
4
2297
2374
4
2297
2526
4
2297
2667
4
2297
2668
4
2297
2862
4
2297
2863
4
2297
1728
5
2297
1754
5
2297
2297
5
2297
2297
5
2297
2297
5
2297
</TEXT>
</DOC>
<DOC>
<DOCNO>2298</DOCNO>
<TEXT>
an
environment
for
research
in
microprogramming
and
emulation
the
development
of
the
research
project
in
microprogramming
and
emulation
at
state
university
of
new
york
at
buffalo
consisted
of
three
phases
the
evaluation
of
various
possible
machines
to
support
this
research
the
decision
to
purchase
one
such
machine
which
appears
to
be
superior
to
the
others
considered
and
the
organization
and
definition
of
goals
for
each
group
in
the
project
each
of
these
phases
is
reported
with
emphasis
placed
on
the
early
results
achieved
in
this
research
cacm
august
1972
rosin
r
f
frieder
g
eckhouse
jr
r
h
microprogramming
emulation
computer
systems
language
processors
input
output
systems
nano
program
project
management
hardware
evaluation
4
1
4
2
4
3
6
2
ca720804
jb
january
30
1978
9
55
am
2298
5
2298
2298
5
2298
2298
5
2298
3144
5
2298
1471
6
2298
2298
6
2298
2491
6
2298
2597
6
2298
2624
6
2298
2625
6
2298
2632
6
2298
</TEXT>
</DOC>
<DOC>
<DOCNO>2299</DOCNO>
<TEXT>
an
extensible
editor
for
a
small
machine
with
disk
storage
a
design
philosophy
for
developing
a
sophisticated
utility
program
is
illustrated
by
the
actual
design
and
implementation
of
a
text
editor
a
versatile
data
structure
is
employed
so
that
only
a
small
number
of
programmed
subroutines
are
necessary
for
all
types
of
data
manipulation
such
a
data
structure
is
described
and
its
merits
are
illustrated
by
the
ease
with
which
powerful
extensions
can
be
implemented
in
terms
of
a
few
basic
editing
function
cacm
august
1972
benjamin
a
j
command
processing
context
searching
executive
program
garbage
collection
interpreter
list
processing
macro
language
paging
parameter
substitution
recursion
state
table
storage
allocation
string
manipulation
text
editing
virtual
memory
3
73
3
74
3
75
4
13
4
22
4
43
4
49
ca720803
jb
january
30
1978
10
00
am
1626
4
2299
1708
4
2299
1781
4
2299
1860
4
2299
2299
4
2299
2299
4
2299
2501
4
2299
2629
4
2299
2915
4
2299
3114
4
2299
1502
5
2299
1641
5
2299
2299
5
2299
2299
5
2299
2299
5
2299
</TEXT>
</DOC>
<DOC>
<DOCNO>2300</DOCNO>
<TEXT>
political
redistricting
by
computer
the
problems
of
political
redistricting
are
considered
and
a
computer
method
for
redistricting
is
presented
criteria
for
acceptable
redistricting
are
discussed
including
population
equality
compactness
contiguity
and
preservation
of
natural
and
or
political
boundaries
only
nonpartisan
criteria
are
considered
using
1970
bureau
of
census
population
data
specific
results
are
given
for
the
ten
congressional
districts
in
the
state
of
missouri
and
for
the
seven
st
louis
county
council
seats
results
from
the
use
of
the
algorithm
indicate
the
feasibility
of
political
redistricting
with
the
aid
of
a
computer
cacm
august
1972
helbig
r
e
orr
p
k
roediger
r
r
political
redistricting
reapportionment
compactness
equal
population
contiguity
transportation
algorithm
legislative
districts
population
units
2
12
3
35
5
41
ca720802
jb
january
30
1978
10
14
am
2300
5
2300
2300
5
2300
2300
5
2300
</TEXT>
</DOC>
<DOC>
<DOCNO>2301</DOCNO>
<TEXT>
generating
parsers
for
affix
grammars
affix
grammars
are
two
level
grammars
which
are
similar
to
van
wijngaarden
two
level
grammars
used
in
the
definition
of
algol
68
affix
grammars
are
shown
by
koster
to
be
equal
in
power
to
van
wijngaarden
grammars
they
are
much
more
suited
to
parsing
than
are
the
latter
however
koster
the
inventor
of
affix
based
on
recursive
procedures
this
paper
presents
a
bottom
up
scheme
for
parsing
them
based
on
an
extension
of
floyd
production
language
fpl
included
is
an
algorithm
similar
to
that
of
deremer
for
converting
a
large
class
of
affix
grammars
into
fpl
the
paper
concludes
by
discussing
briefly
the
applicabilities
of
the
conversion
algorithm
and
affix
grammars
in
general
and
some
possible
extensions
to
koster
definition
of
affix
grammars
cacm
august
1972
crowe
d
algorithmic
language
processing
bottom
up
parsing
floyd
production
language
parsing
syntax
directed
compiling
translator
writing
systems
two
level
grammars
3
42
4
12
4
13
4
20
5
23
ca720801
jb
january
30
1978
10
21
am
2301
5
2301
2301
5
2301
2301
5
2301
2886
5
2301
2301
6
2301
</TEXT>
</DOC>
<DOC>
<DOCNO>2302</DOCNO>
<TEXT>
computers
and
employment
the
relationship
of
computers
and
automation
to
employment
is
part
of
the
more
general
relation
of
technological
change
to
employment
the
most
obvious
effect
is
that
increase
in
productivity
due
to
technology
can
eliminate
jobs
technology
affects
the
individual
worker
in
the
nature
and
amount
of
his
work
and
in
his
attitudes
toward
that
work
technological
change
affects
the
occupational
structure
of
the
entire
labor
force
because
of
the
central
importance
of
these
effects
the
impact
of
technology
has
been
the
subject
of
extensive
study
by
economists
sociologists
political
scientists
and
psychologists
even
within
a
single
discipline
studies
are
often
contradictory
and
conclusions
are
colored
by
political
overtones
we
wish
to
delineate
some
of
the
issues
and
present
arguments
given
to
support
different
viewpoints
cacm
july
1972
borodin
a
gotlieb
c
c
employment
unemployment
social
implications
attitudes
skills
obsolescence
technology
unions
displacement
2
1
ca720726
jb
january
30
1978
10
30
am
2302
5
2302
2302
5
2302
2302
5
2302
3011
5
2302
2075
6
2302
2302
6
2302
2345
6
2302
2485
6
2302
</TEXT>
</DOC>
<DOC>
<DOCNO>2303</DOCNO>
<TEXT>
archaeology
of
computers
reminiscences
1945
1947
the
period
preceding
the
founding
of
acm
was
dominated
by
the
first
large
computer
eniac
its
characteristics
described
here
foreshadow
later
developments
cacm
july
1972
alt
f
l
history
of
computers
1
2
ca720725
jb
january
30
1978
10
36
am
2303
5
2303
2303
5
2303
2303
5
2303
</TEXT>
</DOC>
<DOC>
<DOCNO>2304</DOCNO>
<TEXT>
a
western
view
of
computer
history
many
u
histories
of
the
digital
computer
field
have
tended
to
be
impersonal
with
heavy
emphasis
on
eastern
universities
and
commercial
developments
this
article
records
the
events
of
the
early
years
in
a
personal
way
the
people
organizations
technologies
and
computers
of
the
1945
55
period
in
the
western
part
of
the
united
statesare
described
as
they
happened
cacm
july
1972
sprague
r
e
history
computer
history
1
2
6
0
ca720724
jb
january
30
1978
10
40
am
2304
5
2304
2304
5
2304
2304
5
2304
</TEXT>
</DOC>
<DOC>
<DOCNO>2305</DOCNO>
<TEXT>
the
plankalkul
of
konrad
zuse
a
forerunner
of
today
programming
languages
plankalkul
was
an
attempt
by
korrad
zuse
in
the
1940
to
devise
a
notational
and
conceptual
system
for
writing
what
today
is
termed
a
program
although
this
early
approach
to
a
programming
language
did
not
lead
to
practical
use
the
plan
is
described
here
because
it
contains
features
that
are
standard
in
today
programming
languages
the
investigation
is
of
historical
interest
also
it
may
provide
insights
that
would
lead
to
advancements
in
the
state
of
the
art
using
modern
programming
terminology
the
plankalkul
is
presented
to
the
extent
it
has
possible
to
reconstruct
it
from
the
published
literature
cacm
july
1972
bauer
f
l
wossner
h
higher
programming
languages
programming
theory
of
programming
history
of
programming
1
2
4
22
5
29
ca720723
jb
january
30
1978
10
46
am
2305
5
2305
2305
5
2305
2305
5
2305
</TEXT>
</DOC>
<DOC>
<DOCNO>2306</DOCNO>
<TEXT>
ancient
babylonian
algorithms
the
early
origins
of
mathematics
are
discussed
emphasizing
those
aspects
which
seem
to
be
of
greatest
interest
from
the
standpoint
of
computer
science
a
number
of
old
babylonian
tablets
many
of
which
have
never
before
been
translated
into
english
are
quoted
cacm
july
1972
knuth
d
e
history
of
computation
babylonian
tablets
sexagesimal
number
system
sorting
1
2
ca720722
jb
january
30
1978
10
50
am
2306
5
2306
2306
5
2306
2306
5
2306
</TEXT>
</DOC>
<DOC>
<DOCNO>2307</DOCNO>
<TEXT>
dynamic
document
processing
the
current
role
of
computers
in
automatic
document
processing
is
briefly
outlined
and
some
reasons
are
given
why
the
early
promise
of
library
automation
and
of
the
mechanization
of
documentation
processes
has
not
been
fulfilled
a
new
dynamic
document
environment
is
then
outlined
in
which
clustered
files
are
searched
and
information
is
retrieved
following
an
interactive
user
controlled
search
process
methods
are
described
for
an
automatic
query
modification
based
on
user
needs
and
for
a
continuous
reorganization
of
the
stored
information
as
a
function
of
earlier
file
processing
and
of
normal
collection
growth
the
proposed
procedures
provide
powerful
tools
for
information
retrieval
and
for
the
control
of
dynamic
library
collections
in
which
new
items
are
continually
added
and
old
ones
are
retired
cacm
july
1972
salton
g
automatic
indexing
automatic
search
and
retrieval
iterative
searching
mechanized
library
processing
collection
growth
collection
retirement
feedback
search
3
62
3
71
3
73
3
74
ca720721
jb
january
30
1978
10
59
am
2307
5
2307
2307
5
2307
2307
5
2307
</TEXT>
</DOC>
<DOC>
<DOCNO>2308</DOCNO>
<TEXT>
computers
and
urban
society
this
brief
survey
of
the
use
of
computers
in
urban
society
covers
the
broad
range
of
activities
found
in
any
city
the
future
scope
of
applications
is
limited
only
by
the
imagination
and
inventiveness
of
future
system
designers
programmers
analysts
and
decision
makers
the
computer
can
be
if
properly
used
with
respect
for
human
dignity
and
civil
liberty
a
significant
factor
in
improving
the
efficiency
of
the
urban
process
it
is
expected
that
the
benefits
of
such
computer
usage
will
outweigh
the
costs
and
that
we
may
look
forward
to
an
expansion
of
such
usage
cacm
july
1972
sturman
g
m
urban
systems
urban
applications
data
acquisition
data
management
engineering
analysis
information
systems
3
23
3
39
3
53
3
72
3
82
3
89
ca720720
jb
january
30
1978
11
05
am
2308
5
2308
2308
5
2308
2308
5
2308
</TEXT>
</DOC>
<DOC>
<DOCNO>2309</DOCNO>
<TEXT>
computers
in
the
instructional
process
directions
for
research
and
development
a
survey
is
given
of
computer
applications
to
the
instructional
process
which
suggests
how
the
computer
professional
can
contribute
to
effective
educational
systems
cacm
july
1972
zinn
k
l
education
1
5
3
32
ca720719
jb
january
30
1978
11
13
am
2127
4
2309
2309
4
2309
2309
4
2309
2310
4
2309
2396
4
2309
1856
5
2309
2309
5
2309
2309
5
2309
2309
5
2309
2398
5
2309
</TEXT>
</DOC>
<DOC>
<DOCNO>2310</DOCNO>
<TEXT>
language
analysis
in
the
humanities
the
use
of
the
computer
in
the
language
oriented
humanities
for
exhaustive
listing
of
detail
as
in
indices
and
concordances
is
widespread
and
accepted
as
desirable
the
implications
of
the
computer
for
a
science
of
the
humanities
a
science
entailing
gathering
data
for
the
construction
and
testing
of
models
are
neither
widely
recognized
nor
accepted
this
paper
argues
that
the
computer
major
role
as
to
language
analysis
in
the
humanities
will
be
the
establishing
of
such
a
sciencehus
for
those
areas
of
the
humanities
for
which
rigor
and
precision
are
necessary
e
g
analyzing
literature
or
teaching
a
student
to
write
a
composition
the
computer
can
be
a
critically
important
facilitator
cacm
july
1972
sedelow
s
y
language
analysis
humanities
science
of
the
humanities
pattern
recognition
pattern
generation
interdisciplinary
cooperation
1
3
2
19
3
42
3
43
ca720718
jb
january
30
1978
11
19
am
2127
4
2310
2309
4
2310
2310
4
2310
2396
4
2310
1856
5
2310
2310
5
2310
2310
5
2310
2310
5
2310
</TEXT>
</DOC>
<DOC>
<DOCNO>2311</DOCNO>
<TEXT>
a
generational
perspective
of
information
system
development
system
development
is
categorized
from
a
generational
point
of
view
that
parallels
the
commonly
described
computing
system
generations
for
each
generation
the
scope
of
development
projects
and
the
technological
world
view
of
the
system
developer
are
examined
cacm
july
1972
benjamin
r
i
computing
milieu
management
data
processing
hardware
systems
software
systems
systems
development
process
functional
systems
management
systems
2
0
3
50
4
0
6
20
ca720717
jb
january
30
1978
11
22
am
2311
5
2311
2311
5
2311
2311
5
2311
</TEXT>
</DOC>
<DOC>
<DOCNO>2312</DOCNO>
<TEXT>
on
the
present
and
future
of
scientific
computation
a
pessimistic
forecast
is
given
of
what
can
be
expected
to
happen
in
the
application
of
computers
to
the
physical
sciences
cacm
july
1972
rice
j
r
scientific
computation
3
1
5
0
ca720716
jb
january
30
1978
11
24
am
2312
5
2312
2312
5
2312
2312
5
2312
</TEXT>
</DOC>
<DOC>
<DOCNO>2313</DOCNO>
<TEXT>
the
evolution
of
storage
structures
data
base
management
systems
have
grown
rapidly
in
their
power
and
complexity
over
the
15
year
history
of
data
processing
on
commercially
available
computers
the
original
concepts
have
split
and
new
terms
have
been
adopted
to
name
and
refer
to
these
concepts
the
data
structure
diagram
graphic
technique
is
used
to
illustrate
the
splitting
of
the
concepts
and
the
structural
relations
which
exist
between
these
concepts
at
each
point
in
the
evolution
cacm
july
1972
bachman
c
w
block
cylinder
device
field
extent
file
page
record
physical
record
logical
record
track
volume
entity
set
entity
class
set
class
data
structure
diagram
storage
structure
physical
storage
structure
logical
storage
structure
storage
allocation
structure
integrated
data
store
index
sequential
hash
randomize
item
1
4
4
41
4
9
ca720715
jb
january
30
1978
1
16
pm
2258
4
2313
2319
4
2313
2313
4
2313
2359
4
2313
2437
4
2313
2552
4
2313
2781
4
2313
2860
4
2313
2991
4
2313
2203
5
2313
2313
5
2313
2313
5
2313
2313
5
2313
2425
5
2313
2313
6
2313
</TEXT>
</DOC>
<DOC>
<DOCNO>2314</DOCNO>
<TEXT>
requirements
for
advanced
programming
systems
for
list
processing
list
processing
systems
should
be
designed
to
facilitate
production
of
large
programs
to
manipulate
large
complex
symbolic
data
stores
this
paper
presents
an
overview
of
a
number
of
system
features
which
the
author
feels
are
important
to
improve
the
productivity
of
programmers
working
in
such
domains
a
system
view
it
taken
rather
than
focusing
just
on
language
features
since
algorithms
must
be
not
only
coded
in
a
language
form
but
debugged
modified
made
efficient
and
run
on
data
because
of
this
general
framework
the
requirements
specified
are
applicable
to
the
design
of
advanced
programming
systems
for
a
wide
range
of
applications
three
aspects
of
programming
systems
are
highlighted
good
interactive
facilities
programmable
control
structures
and
sophisticated
data
communication
mechanisms
interactive
features
are
described
to
facilitate
program
composition
entry
testing
debugging
editing
optimization
and
packaging
implementation
of
a
generalized
environment
structure
model
specified
would
allow
programming
of
various
control
regimes
including
multiprocesses
coroutines
and
backtracking
alternative
methods
of
procedure
invocation
required
include
invocation
by
pattern
and
by
monitoring
condition
the
need
for
extended
data
forms
storage
management
and
extensibility
are
stressed
as
is
the
duality
of
data
retrieval
and
function
evaluation
syntax
directed
input
and
output
of
data
would
facilitate
use
of
complex
data
stores
cacm
july
1972
bobrow
d
g
list
processing
programming
languages
design
of
programming
languages
interactive
systems
control
structures
data
structures
programming
primitives
semantics
advanced
programming
systems
1
3
4
2
4
22
4
3
4
32
5
23
5
24
ca720714
jb
january
30
1978
1
30
pm
1570
4
2314
1708
4
2314
1781
4
2314
1826
4
2314
1860
4
2314
1945
4
2314
2156
4
2314
2168
4
2314
2249
4
2314
2314
4
2314
2314
4
2314
2314
4
2314
2314
4
2314
2317
4
2314
2719
4
2314
2736
4
2314
2833
4
2314
2842
4
2314
1098
5
2314
1626
5
2314
2082
5
2314
2148
5
2314
2314
5
2314
2314
5
2314
2314
5
2314
2438
5
2314
1826
6
2314
2314
6
2314
</TEXT>
</DOC>
<DOC>
<DOCNO>2315</DOCNO>
<TEXT>
the
production
of
better
mathematical
software
some
observations
are
made
on
steps
to
be
taken
toward
the
creation
of
better
mathematical
software
these
steps
suggest
the
need
for
a
coordinated
effort
and
the
creation
of
a
center
to
focus
activities
in
this
area
cacm
july
1972
fosdick
l
d
mathematical
software
programming
4
0
ca720713
jb
january
30
1978
1
32
pm
1330
4
2315
1348
4
2315
1986
4
2315
2021
4
2315
2222
4
2315
2227
4
2315
2315
4
2315
2315
4
2315
2315
4
2315
2315
4
2315
2326
4
2315
2470
4
2315
2732
4
2315
2865
4
2315
2896
4
2315
2943
4
2315
3014
4
2315
3068
4
2315
3077
4
2315
3143
4
2315
1348
5
2315
1834
5
2315
1987
5
2315
2315
5
2315
2315
5
2315
2315
5
2315
728
5
2315
</TEXT>
</DOC>
<DOC>
<DOCNO>2316</DOCNO>
<TEXT>
programming
languages
history
and
future
this
paper
discusses
both
the
history
and
future
of
programming
languages
higher
level
languages
some
of
the
difficulties
in
writing
such
a
history
are
indicated
a
key
part
of
the
paper
is
a
tree
showing
the
chronological
development
of
languages
and
their
interrelationships
reasons
for
the
proliferation
of
languages
are
given
the
major
languages
are
listed
with
the
reasons
for
their
importance
a
section
on
chronology
indicates
the
happenings
of
the
significant
previous
time
periods
and
the
major
topics
of
1972
key
concepts
other
than
specific
languages
are
discussed
cacm
july
1972
sammet
j
e
programming
languages
higher
level
languages
languages
history
future
directions
language
interrelationships
programming
language
tree
programming
language
history
programming
language
future
1
2
4
2
ca720712
jb
january
30
1978
1
38
pm
2316
5
2316
2316
5
2316
2316
5
2316
</TEXT>
</DOC>
<DOC>
<DOCNO>2317</DOCNO>
<TEXT>
programming
systems
and
languages
1965
1975
in
spite
of
impressive
gains
by
pl
i
fortran
and
cobol
remain
the
languages
in
which
most
of
the
world
production
programs
are
written
and
will
remain
so
into
the
foreseeable
future
there
is
a
great
deal
of
theoretical
interest
in
algol
68
and
in
extensible
languages
but
so
far
at
least
they
have
had
little
practical
impact
problem
oriented
languages
may
very
well
become
the
most
important
language
development
area
in
the
next
five
to
ten
years
in
the
operating
system
area
all
major
computer
manufacturers
set
out
to
produce
very
ambitious
multiprogramming
systems
and
they
all
ran
into
similar
problems
a
number
of
university
projects
though
not
directly
comparable
to
those
of
the
manufacturers
have
contributed
greatly
to
a
better
understanding
of
operating
system
principles
important
trends
include
the
increased
interest
in
the
development
of
system
measurement
and
evaluation
techniques
and
increased
use
of
microprogramming
for
some
programming
system
functions
cacm
july
1972
rosen
s
languages
operating
systems
programming
systems
multiprogramming
history
1
2
4
22
4
32
ca720711
jb
january
30
1978
1
47
pm
1665
4
2317
1768
4
2317
1781
4
2317
1787
4
2317
1805
4
2317
1824
4
2317
1825
4
2317
1828
4
2317
1836
4
2317
1846
4
2317
1854
4
2317
1861
4
2317
1877
4
2317
1892
4
2317
1960
4
2317
2015
4
2317
2110
4
2317
2126
4
2317
2127
4
2317
2150
4
2317
2150
4
2317
2187
4
2317
2188
4
2317
2218
4
2317
2228
4
2317
2256
4
2317
2314
4
2317
2317
4
2317
2317
4
2317
2317
4
2317
2317
4
2317
2317
4
2317
2317
4
2317
2317
4
2317
2317
4
2317
2319
4
2317
2358
4
2317
2377
4
2317
2342
4
2317
2342
4
2317
2376
4
2317
2376
4
2317
2379
4
2317
2424
4
2317
2482
4
2317
2545
4
2317
2546
4
2317
2618
4
2317
2618
4
2317
2625
4
2317
2632
4
2317
2698
4
2317
2704
4
2317
2723
4
2317
2733
4
2317
2738
4
2317
2740
4
2317
2741
4
2317
2842
4
2317
2867
4
2317
3184
4
2317
3184
4
2317
1198
5
2317
1572
5
2317
1693
5
2317
1749
5
2317
1753
5
2317
1781
5
2317
2126
5
2317
2148
5
2317
2317
5
2317
2317
5
2317
2317
5
2317
2874
5
2317
1682
6
2317
2227
6
2317
2317
6
2317
2683
6
2317
2871
6
2317
521
6
2317
</TEXT>
</DOC>
<DOC>
<DOCNO>2318</DOCNO>
<TEXT>
the
role
of
computer
system
models
in
performance
evaluation
models
constitute
a
useful
means
of
investigating
computer
system
performance
this
paper
examines
the
interrelationships
between
models
and
other
methods
for
evaluating
the
performance
of
computer
systems
and
establishes
circumstances
under
which
the
use
of
a
model
is
appropriate
cacm
july
1972
kimbleton
s
r
modeling
evaluation
performance
analytic
models
simulation
models
system
models
2
43
2
44
6
2
8
3
ca720710
jb
january
30
1978
2
03
pm
2151
4
2318
2318
4
2318
1653
5
2318
2318
5
2318
2318
5
2318
2318
5
2318
</TEXT>
</DOC>
<DOC>
<DOCNO>2319</DOCNO>
<TEXT>
operating
system
performance
an
overview
of
the
current
and
future
positions
with
respect
to
operating
system
performance
is
given
while
a
great
deal
of
information
and
a
large
number
of
models
for
subsystems
have
been
developed
gaps
still
exist
in
out
knowledge
because
of
the
severe
interactions
between
the
various
subsystems
of
an
operating
system
an
overall
model
of
the
total
system
must
be
developed
to
be
able
to
analyze
and
design
the
performance
aspects
of
an
operating
system
although
such
total
system
designs
are
exceptional
today
it
is
projected
that
they
will
become
increasingly
more
common
and
necessary
in
the
near
future
such
a
design
philosophy
will
clearly
have
a
severe
impact
on
the
way
we
go
about
modularizing
operating
and
computer
systems
cacm
july
1972
lynch
w
c
computer
system
operating
system
performance
evaluation
performance
measurement
measurement
techniques
modularity
layering
structured
programming
paging
virtual
memory
input
output
disk
storage
facility
drum
storage
facility
sector
queueing
4
30
6
20
ca720709
jb
january
30
1978
2
33
pm
1828
4
2319
1854
4
2319
1877
4
2319
1892
4
2319
1901
4
2319
1960
4
2319
2085
4
2319
2095
4
2319
2150
4
2319
2193
4
2319
2218
4
2319
2258
4
2319
2277
4
2319
2317
4
2319
2319
4
2319
2319
4
2319
2319
4
2319
2319
4
2319
2319
4
2319
2319
4
2319
2319
4
2319
2319
4
2319
2319
4
2319
2319
4
2319
2313
4
2319
2329
4
2319
2358
4
2319
2377
4
2319
2378
4
2319
2373
4
2319
2359
4
2319
2342
4
2319
2376
4
2319
2379
4
2319
2380
4
2319
2320
4
2319
2424
4
2319
2434
4
2319
2437
4
2319
2482
4
2319
2499
4
2319
2480
4
2319
2501
4
2319
2552
4
2319
2582
4
2319
2582
4
2319
2594
4
2319
2618
4
2319
2632
4
2319
2632
4
2319
2669
4
2319
2669
4
2319
2704
4
2319
2709
4
2319
2723
4
2319
2738
4
2319
2738
4
2319
2740
4
2319
2740
4
2319
2741
4
2319
2781
4
2319
2828
4
2319
2860
4
2319
2863
4
2319
2867
4
2319
2868
4
2319
2881
4
2319
2894
4
2319
2928
4
2319
2939
4
2319
2972
4
2319
2991
4
2319
2996
4
2319
3006
4
2319
3054
4
2319
3067
4
2319
3127
4
2319
3155
4
2319
3184
4
2319
1408
5
2319
1719
5
2319
1749
5
2319
1751
5
2319
2016
5
2319
2017
5
2319
2080
5
2319
2188
5
2319
2203
5
2319
2204
5
2319
2319
5
2319
2319
5
2319
2319
5
2319
</TEXT>
</DOC>
<DOC>
<DOCNO>2320</DOCNO>
<TEXT>
structured
multiprogramming
this
paper
presents
a
proposal
for
structured
representation
of
multiprogramming
in
a
high
level
language
the
notation
used
explicitly
associates
a
data
structure
shared
by
concurrent
processes
with
operations
defined
on
it
this
clarifies
the
meaning
of
programs
and
permits
a
large
class
of
time
dependent
errors
to
be
caught
at
compile
time
a
combination
of
critical
regions
and
event
variables
enables
the
programmer
to
control
scheduling
of
resources
among
competing
processes
to
any
degree
desired
these
concepts
are
sufficiently
safe
to
use
not
only
within
operating
systems
but
also
within
user
programs
cacm
july
1972
hansen
p
b
structured
multiprogramming
programming
languages
operating
systems
concurrent
processes
shared
data
mutual
exclusion
critical
regions
process
communication
synchronizing
events
4
2
4
3
ca720708
jb
january
30
1978
2
39
pm
2319
4
2320
2378
4
2320
2320
4
2320
2320
4
2320
2597
4
2320
2632
4
2320
2738
4
2320
2740
4
2320
2777
4
2320
2851
4
2320
2868
4
2320
2895
4
2320
2912
4
2320
2946
4
2320
3127
4
2320
3128
4
2320
2080
5
2320
2150
5
2320
2320
5
2320
2320
5
2320
2320
5
2320
2597
5
2320
2150
6
2320
2320
6
2320
</TEXT>
</DOC>
<DOC>
<DOCNO>2321</DOCNO>
<TEXT>
on
the
interface
between
computers
and
data
communications
systems
future
systems
that
combine
computers
digital
terminals
and
communications
equipment
present
design
optimization
problems
that
require
reconsideration
of
the
traditional
functional
responsibilities
of
the
respective
subsystems
several
standard
interfaces
by
means
of
which
computers
and
digital
terminals
connect
to
the
communications
systems
will
be
required
when
specifying
these
interfaces
consideration
must
be
given
to
problems
of
coordination
synchronization
error
control
signaling
stream
multiplexing
and
switch
control
in
addition
to
minimizing
the
technological
interdependence
of
specific
subsystem
designs
a
focus
on
some
of
the
problems
is
obtained
in
a
discussion
of
a
detailed
specification
for
a
particular
computer
communications
system
interface
cacm
july
1972
fraser
a
g
communications
standard
interface
communications
protocol
virtual
channel
multiplexed
input
output
coordination
of
input
output
3
81
6
0
6
35
ca720707
jb
january
30
1978
2
46
pm
2321
5
2321
2321
5
2321
2321
5
2321
</TEXT>
</DOC>
<DOC>
<DOCNO>2322</DOCNO>
<TEXT>
a
view
of
computer
architecture
an
attempt
is
made
to
predict
the
developments
of
the
next
25
years
in
the
field
of
computer
architecture
standardized
inexpensive
microcomputers
on
a
single
chip
are
predicted
these
will
be
used
extensively
to
provide
logical
functions
for
noncomputational
devices
and
incidentally
for
the
design
of
superscale
computers
cacm
july
1972
foster
c
c
computer
architecture
projection
microcomputers
computer
design
computer
organization
1
2
2
1
6
0
6
2
ca720706
jb
january
30
1978
3
00
pm
2322
5
2322
2322
5
2322
2322
5
2322
</TEXT>
</DOC>
<DOC>
<DOCNO>2323</DOCNO>
<TEXT>
toward
a
general
theory
of
special
functions
a
list
of
a
number
of
natural
developments
for
the
field
of
algebraic
manipulation
is
given
then
the
prospects
for
a
general
theory
of
functions
defined
by
ordinary
differential
equations
are
discussed
the
claim
is
made
that
recent
developments
in
mathematics
indicate
that
it
should
be
possible
to
algorithmically
generate
many
properties
of
solutions
to
differential
equations
such
a
theory
is
preferable
to
a
less
general
effort
to
make
algebraic
manipulation
systems
knowledgeable
about
the
usual
special
functions
e
g
exponential
hypergeometric
cacm
july
1972
moses
j
algebraic
manipulation
special
functions
algebraic
simplification
symbolic
integration
algebraic
geometry
differential
algebra
1
50
3
15
5
19
5
9
ca720705
jb
january
30
1978
3
07
pm
2164
4
2323
2170
4
2323
2323
4
2323
2323
4
2323
2323
4
2323
2719
4
2323
2167
5
2323
2164
5
2323
2170
5
2323
2323
5
2323
2323
5
2323
2323
5
2323
</TEXT>
</DOC>
<DOC>
<DOCNO>2324</DOCNO>
<TEXT>
management
science
a
view
from
nonlinear
programming
a
brief
history
of
integer
and
continuous
nonlinear
programming
is
presented
as
well
as
the
current
obstacles
to
practical
use
of
these
mathematical
programming
techniques
it
is
forecast
that
the
useful
contributions
to
nonlinear
programming
actually
made
in
the
next
few
years
are
more
likely
to
be
consolidations
than
theoretical
breakthroughs
these
contributions
are
likely
to
be
the
documentation
of
standard
test
problems
construction
of
user
oriented
software
and
comparisons
of
currently
known
algorithms
to
demonstrate
which
techniques
are
best
for
specific
problems
cacm
july
1972
shanno
d
f
weil
r
l
integer
programming
linear
programming
mathematical
programming
nonlinear
programming
quadratic
programming
management
science
operations
research
algorithms
5
41
8
3
ca720704
jb
january
30
1978
3
14
pm
2324
5
2324
2324
5
2324
2324
5
2324
</TEXT>
</DOC>
<DOC>
<DOCNO>2325</DOCNO>
<TEXT>
numerical
mathematics
and
computer
science
numerical
mathematics
is
viewed
as
the
analysis
of
continuous
algorithms
four
of
the
components
of
numerical
mathematics
are
discussed
these
are
foundations
finite
precision
number
systems
computational
complexity
synthesis
and
analysis
of
algorithms
analysis
of
error
programs
and
program
libraries
cacm
july
1972
traub
j
f
numerical
mathematics
computer
science
mathematics
of
computation
algorithms
continuous
algorithms
1
3
5
0
5
1
5
25
ca720703
jb
january
30
1978
3
17
pm
1086
4
2325
1132
4
2325
1234
4
2325
1263
4
2325
1265
4
2325
1270
4
2325
1323
4
2325
1358
4
2325
1379
4
2325
1380
4
2325
1453
4
2325
1464
4
2325
1484
4
2325
1491
4
2325
1498
4
2325
1613
4
2325
1614
4
2325
1781
4
2325
1825
4
2325
1860
4
2325
2083
4
2325
2178
4
2325
2179
4
2325
2252
4
2325
2325
4
2325
2341
4
2325
2546
4
2325
2645
4
2325
2652
4
2325
2684
4
2325
2842
4
2325
2929
4
2325
2934
4
2325
3069
4
2325
669
4
2325
679
4
2325
691
4
2325
761
4
2325
949
4
2325
989
4
2325
2325
5
2325
2325
5
2325
2325
5
2325
3184
5
2325
</TEXT>
</DOC>
<DOC>
<DOCNO>2326</DOCNO>
<TEXT>
fix
point
approach
to
the
theory
of
computation
following
the
fix
point
theory
of
scott
the
semantics
of
computer
programs
are
defined
in
terms
of
the
least
fix
points
of
recursive
programs
this
allows
not
only
the
justification
of
all
existing
verification
techniques
but
also
their
extension
to
the
handling
in
a
uniform
manner
of
various
properties
of
computer
programs
including
correctness
termination
and
equivalence
cacm
july
1972
manna
z
vuillemin
j
verification
techniques
semantics
of
programming
languages
least
fix
points
recursive
programs
computational
induction
5
23
5
24
ca720702
jb
january
30
1978
3
42
pm
1469
4
2326
1486
4
2326
1491
4
2326
1781
4
2326
1781
4
2326
2021
4
2326
2178
4
2326
2178
4
2326
2193
4
2326
2222
4
2326
2227
4
2326
2315
4
2326
2326
4
2326
2326
4
2326
2326
4
2326
2326
4
2326
2326
4
2326
2470
4
2326
2470
4
2326
2477
4
2326
2457
4
2326
2541
4
2326
2594
4
2326
2684
4
2326
2684
4
2326
2732
4
2326
2842
4
2326
2865
4
2326
2896
4
2326
2903
4
2326
2943
4
2326
3004
4
2326
3014
4
2326
3044
4
2326
3068
4
2326
3077
4
2326
3143
4
2326
1303
5
2326
1323
5
2326
1834
5
2326
2192
5
2326
2326
5
2326
2326
5
2326
2326
5
2326
2411
5
2326
2457
5
2326
3186
5
2326
2138
6
2326
2192
6
2326
2326
6
2326
2326
6
2326
</TEXT>
</DOC>
<DOC>
<DOCNO>2327</DOCNO>
<TEXT>
toward
an
automata
theory
of
brains
a
source
of
ideas
for
automata
theory
the
study
of
the
brain
has
been
pushed
aside
in
mathematical
development
of
the
theory
this
paper
suggests
the
ways
in
which
automata
theory
might
evolve
over
the
next
25
years
if
it
is
to
contribute
to
an
understanding
of
how
the
brain
processes
information
cacm
july
1972
arbib
m
a
automata
theory
brain
theory
network
complexity
resolution
of
redundancy
of
potential
command
frog
visual
system
reticular
formation
mode
selection
3
36
3
65
5
22
ca720701
jb
january
30
1978
3
46
pm
2327
5
2327
2327
5
2327
2327
5
2327
</TEXT>
</DOC>
<DOC>
<DOCNO>2328</DOCNO>
<TEXT>
individualizing
instruction
in
a
generative
cai
tutor
cacm
june
1972
koffman
e
b
computer
assisted
instruction
generative
cal
adaptive
instruction
3
32
3
51
3
62
ca720617
jb
january
30
1978
3
47
pm
2328
5
2328
2328
5
2328
2328
5
2328
</TEXT>
</DOC>
<DOC>
<DOCNO>2329</DOCNO>
<TEXT>
computer
science
a
vicious
circle
cacm
june
1972
kandel
a
education
computer
engineering
computer
science
curriculum
systems
design
1
52
6
0
ca720616
jb
january
30
1978
3
49
pm
1892
4
2329
1901
4
2329
2085
4
2329
2095
4
2329
2218
4
2329
2277
4
2329
2319
4
2329
2329
4
2329
2358
4
2329
2373
4
2329
2380
4
2329
2434
4
2329
2499
4
2329
2501
4
2329
2582
4
2329
2669
4
2329
2828
4
2329
2863
4
2329
2881
4
2329
2928
4
2329
2996
4
2329
3006
4
2329
3067
4
2329
1751
5
2329
2329
5
2329
2329
5
2329
2329
5
2329
2478
5
2329
3003
5
2329
1205
6
2329
1659
6
2329
1678
6
2329
1771
6
2329
1927
6
2329
1945
6
2329
2097
6
2329
2147
6
2329
2163
6
2329
2187
6
2329
2329
6
2329
2329
6
2329
2345
6
2329
2367
6
2329
2407
6
2329
2478
6
2329
2479
6
2329
2480
6
2329
2538
6
2329
</TEXT>
</DOC>
<DOC>
<DOCNO>2330</DOCNO>
<TEXT>
calculation
of
fourier
integrals
algorithm
r418
cacm
june
1972
einarsson
b
quadrature
filon
quadrature
integration
filon
integration
fourier
coefficients
fourier
integrals
fourier
series
spline
spline
approximation
spline
quadrature
extrapolation
richardson
extrapolation
5
16
ca720615
jb
january
30
1978
3
53
pm
2330
5
2330
2330
5
2330
2330
5
2330
</TEXT>
</DOC>
<DOC>
<DOCNO>2331</DOCNO>
<TEXT>
an
integer
programming
problem
algorithm
r397
cacm
june
1972
johnson
s
c
kernighan
b
w
integer
programming
change
making
problem
5
41
ca720614
jb
january
30
1978
3
55
pm
2331
5
2331
2331
5
2331
2331
5
2331
</TEXT>
</DOC>
<DOC>
<DOCNO>2332</DOCNO>
<TEXT>
special
series
summation
with
arbitrary
precision
algorithm
r393
cacm
june
1972
sale
a
h
j
function
evaluation
series
summation
approximation
5
12
5
13
ca720613
jb
january
30
1978
4
00
pm
2332
5
2332
2332
5
2332
2332
5
2332
</TEXT>
</DOC>
<DOC>
<DOCNO>2333</DOCNO>
<TEXT>
random
vectors
uniform
is
solid
angle
algorithm
r381
cacm
june
1972
schrack
g
f
random
vector
generator
points
uniform
on
sphere
spherically
symmetric
probability
distribution
5
5
ca720612
jb
january
30
1978
4
02
pm
2333
4
2333
2333
4
2333
2333
4
2333
87
4
2333
1793
5
2333
2333
5
2333
2333
5
2333
2333
5
2333
87
5
2333
88
5
2333
</TEXT>
</DOC>
<DOC>
<DOCNO>2334</DOCNO>
<TEXT>
general
random
number
generator
algorithm
r370
cacm
june
1972
proll
l
g
random
number
generator
probability
density
function
transformation
cumulative
distribution
function
5
13
5
5
ca720611
jb
january
30
1978
4
09
pm
2334
4
2334
1580
5
2334
2334
5
2334
2334
5
2334
2334
5
2334
</TEXT>
</DOC>
<DOC>
<DOCNO>2335</DOCNO>
<TEXT>
eigenvalues
and
eigenvectors
of
a
real
general
matrix
algorithm
r343
cacm
june
1972
niessner
h
eigenvalues
eigenvectors
qr
algorithm
nonsymmetric
matrices
general
matrices
5
14
ca720610
jb
january
30
1978
4
11
pm
1968
4
2335
2099
4
2335
2335
4
2335
1662
5
2335
2335
5
2335
2335
5
2335
2335
5
2335
</TEXT>
</DOC>
<DOC>
<DOCNO>2336</DOCNO>
<TEXT>
complex
error
function
algorithm
c363
cacm
june
1972
kolbig
k
s
error
function
for
complex
argument
voigt
function
special
functions
function
evaluation
5
12
ca720609
jb
january
30
1978
4
12
pm
2336
5
2336
2336
5
2336
2336
5
2336
</TEXT>
</DOC>
<DOC>
<DOCNO>2337</DOCNO>
<TEXT>
a
sorting
problem
and
its
complexity
a
technique
for
proving
min
max
norms
of
sorting
algorithms
is
given
one
new
algorithm
for
finding
the
minimum
and
maximum
elements
of
a
set
with
fewest
comparisons
is
proved
optimal
with
this
technique
cacm
june
1972
pohl
i
sorting
computational
complexity
computational
combinatorics
5
29
5
31
ca720608
jb
january
30
1978
4
15
pm
2337
5
2337
2337
5
2337
2337
5
2337
</TEXT>
</DOC>
<DOC>
<DOCNO>2338</DOCNO>
<TEXT>
a
starting
method
for
solving
nonlinear
volterra
integral
equations
of
the
second
kind
a
fourth
order
starting
method
is
given
for
volterra
integral
equations
of
the
second
kind
and
numerical
examples
are
presented
cacm
june
1972
iguchi
k
algorithm
volterra
integral
equations
starting
method
5
18
ca720607
jb
january
30
1978
4
17
pm
2338
5
2338
2338
5
2338
2338
5
2338
</TEXT>
</DOC>
<DOC>
<DOCNO>2339</DOCNO>
<TEXT>
computer
assigned
codes
from
verbal
responses
it
is
often
desirable
to
convert
verbal
responses
to
multidigit
codes
this
conversion
is
generally
accomplished
by
clerk
coders
a
study
was
conducted
to
test
the
feasibility
of
translating
verbal
descriptions
to
numerical
codes
in
a
computer
program
primary
emphasis
was
placed
on
computerized
construction
of
a
reference
file
of
verbal
descriptions
for
use
by
the
program
the
results
of
the
study
clearly
show
that
such
procedures
are
feasible
cacm
june
1972
o
r
t
verbal
responses
computer
coding
reference
list
historical
response
patterns
word
strings
concept
translation
word
coding
3
30
3
42
3
63
3
66
3
71
3
74
3
75
5
6
ca720606
jb
january
30
1978
4
23
pm
1112
4
2339
1592
4
2339
1592
4
2339
2111
4
2339
2111
4
2339
2111
4
2339
2339
4
2339
2339
4
2339
2339
4
2339
2339
4
2339
440
4
2339
1112
5
2339
1592
5
2339
2339
5
2339
2339
5
2339
2339
5
2339
440
5
2339
619
5
2339
</TEXT>
</DOC>
<DOC>
<DOCNO>2340</DOCNO>
<TEXT>
a
boolean
matrix
method
for
the
computation
of
linear
precedence
functions
a
modified
version
of
bell
boolean
matrix
method
for
the
computation
of
linear
precedence
functions
associated
with
a
conflict
free
matrix
of
precedence
relations
is
given
this
algorithm
not
only
detects
when
the
precedence
functions
do
not
exist
but
also
provides
an
indication
of
why
they
do
not
exist
so
that
corrective
action
can
be
taken
if
possible
necessary
and
sufficient
conditions
for
the
existence
of
precedence
functions
are
given
the
use
of
boolean
matrices
to
prove
the
existence
of
precedence
functions
associated
with
classes
of
conflict
free
grammars
is
illustrated
through
an
example
cacm
june
1972
martin
d
f
precedence
grammars
context
free
parsing
4
12
ca720605
jb
january
30
1978
4
28
pm
1542
4
2340
1683
4
2340
1693
4
2340
1781
4
2340
1787
4
2340
1836
4
2340
1836
4
2340
1945
4
2340
2060
4
2340
2061
4
2340
2082
4
2340
2091
4
2340
2152
4
2340
2179
4
2340
2221
4
2340
2340
4
2340
2340
4
2340
2340
4
2340
2340
4
2340
2356
4
2340
2546
4
2340
2603
4
2340
2698
4
2340
2708
4
2340
2824
4
2340
2824
4
2340
2982
4
2340
2982
4
2340
2986
4
2340
2986
4
2340
2986
4
2340
3045
4
2340
3093
4
2340
1191
5
2340
1491
5
2340
1683
5
2340
1836
5
2340
2340
5
2340
2340
5
2340
2340
5
2340
2824
5
2340
2982
5
2340
2986
5
2340
1491
6
2340
1491
6
2340
1491
6
2340
1683
6
2340
1683
6
2340
1836
6
2340
1836
6
2340
2179
6
2340
2340
6
2340
2340
6
2340
2340
6
2340
</TEXT>
</DOC>
<DOC>
<DOCNO>2341</DOCNO>
<TEXT>
blocks
a
new
data
type
for
snobol4
a
new
data
type
called
a
block
has
been
implemented
for
snobol4
a
block
is
a
three
dimensional
aggregate
of
characters
in
the
form
of
a
right
parallelepiped
best
thought
of
as
a
three
dimensional
extension
to
a
string
the
third
dimension
is
used
for
overstriking
blocks
may
be
printed
concatenated
in
any
of
three
dimensions
and
merged
on
the
basis
of
program
defined
connection
points
some
blocks
adapt
in
size
and
shape
to
their
environment
blocks
and
their
operations
are
mainly
used
for
composing
printable
output
a
variety
of
graphical
problems
including
flowcharting
bargraphs
logic
diagrams
mathematical
equation
formation
and
text
justification
and
preparation
have
been
programmed
on
a
printer
in
what
appears
to
be
an
easy
and
natural
way
in
addition
to
these
somewhat
specialized
applications
blocks
appear
to
be
a
good
general
purpose
device
independent
output
formation
mechanism
especially
suitable
for
nonnumerical
work
the
concept
of
a
block
is
largely
language
independenthat
is
blocks
require
little
in
the
way
of
specialized
syntax
and
could
readily
be
absorbed
into
the
external
structure
of
most
programming
languages
cacm
june
1972
gimpel
j
f
character
manipulation
output
formatting
string
processing
graphics
nonnumerical
programming
snobol4
data
types
two
dimensional
mathematics
test
processing
flowcharting
4
22
4
41
ca720604
jb
january
30
1978
4
38
pm
1086
4
2341
1132
4
2341
1234
4
2341
1263
4
2341
1265
4
2341
1270
4
2341
1323
4
2341
1358
4
2341
1379
4
2341
1380
4
2341
1453
4
2341
1464
4
2341
1484
4
2341
1491
4
2341
1498
4
2341
1613
4
2341
1614
4
2341
1767
4
2341
1781
4
2341
1781
4
2341
1781
4
2341
1825
4
2341
1860
4
2341
1945
4
2341
2083
4
2341
2178
4
2341
2179
4
2341
2252
4
2341
2325
4
2341
2341
4
2341
2341
4
2341
2341
4
2341
2341
4
2341
2546
4
2341
2645
4
2341
2652
4
2341
2684
4
2341
2842
4
2341
2929
4
2341
2934
4
2341
3069
4
2341
669
4
2341
679
4
2341
691
4
2341
761
4
2341
949
4
2341
989
4
2341
990
5
2341
1466
5
2341
1468
5
2341
2341
5
2341
2341
5
2341
2341
5
2341
2545
5
2341
3184
5
2341
1739
6
2341
1781
6
2341
2341
6
2341
</TEXT>
</DOC>
<DOC>
<DOCNO>2342</DOCNO>
<TEXT>
interference
between
communicating
parallel
processes
various
kinds
of
interference
between
communicating
parallel
processes
have
been
examined
by
dijkstra
knuth
and
others
solutions
have
been
given
for
the
mutual
exclusion
problem
and
associated
subproblems
in
the
form
of
parallel
programs
and
informal
proofs
of
correctness
have
been
given
for
these
solutions
in
this
paper
a
system
of
parallel
processes
is
regarded
as
a
machine
which
proceeds
from
one
state
s
i
e
a
collection
of
pertinent
data
values
and
process
configurations
to
a
next
state
s
in
accordance
with
a
transition
rule
s
s
a
set
of
such
rules
yields
sequences
of
states
which
dictate
the
system
behavior
the
mutual
exclusion
problem
and
the
associated
subproblems
are
formulated
as
questions
of
inclusion
between
sets
of
states
or
of
the
existence
of
certain
sequences
a
mechanical
proof
procedure
is
shown
which
will
either
verify
prove
the
correctness
of
or
discredit
prove
the
incorrectness
of
an
attempted
solution
with
respect
to
any
of
the
interference
properties
it
is
shown
how
to
calculate
transition
rules
from
the
partial
rules
by
which
the
individual
processes
operate
the
formation
of
partial
rules
and
the
calculation
of
transition
rules
are
both
applicable
to
hardware
processes
as
well
as
to
software
processes
and
symmetry
between
processes
is
not
required
cacm
june
1972
gilbert
p
chandler
w
j
concurrent
programming
control
cooperating
processes
formal
programs
interference
mutual
exclusion
operating
systems
parallel
processes
4
0
4
10
4
30
4
32
4
42
5
24
6
20
ca720603
jb
january
31
1978
8
44
am
1781
4
2342
1828
4
2342
1854
4
2342
1877
4
2342
1960
4
2342
2150
4
2342
2150
4
2342
2150
4
2342
2228
4
2342
2228
4
2342
2256
4
2342
2256
4
2342
2317
4
2342
2317
4
2342
2319
4
2342
2377
4
2342
2342
4
2342
2342
4
2342
2342
4
2342
2376
4
2342
2376
4
2342
2379
4
2342
2424
4
2342
2482
4
2342
2618
4
2342
2618
4
2342
2618
4
2342
2632
4
2342
2704
4
2342
2723
4
2342
2738
4
2342
2740
4
2342
2741
4
2342
2867
4
2342
3184
4
2342
3184
4
2342
1198
5
2342
1338
5
2342
1749
5
2342
2342
5
2342
2342
5
2342
2342
5
2342
</TEXT>
</DOC>
<DOC>
<DOCNO>2343</DOCNO>
<TEXT>
a
proposal
to
establish
a
pseudo
virtual
memory
via
writable
overlays
many
computer
systems
solve
executable
storage
size
problems
for
large
programs
by
using
overlays
however
it
appears
that
no
one
overlay
scheme
contains
a
well
balanced
combination
of
the
most
useful
capabilities
which
are
found
in
various
existing
techniques
a
proposal
is
presented
which
utilizes
several
of
the
best
capabilities
from
existing
schemes
and
is
complemented
by
several
additional
features
e
g
writable
overlays
the
writable
overlay
capability
provides
a
virtual
memory
effect
although
the
programmer
may
still
be
required
to
design
the
overlay
configuration
since
overlay
structuring
is
a
complex
task
several
tools
including
a
graphic
display
are
included
in
the
proposal
in
order
to
aid
the
programmer
in
the
design
the
content
of
overlays
is
briefly
discussed
and
it
is
noted
that
many
of
the
details
of
the
final
overlay
configuration
may
be
decided
after
the
fact
cacm
june
1972
spacek
t
r
overlay
overlay
structure
segment
segmentation
folding
paging
linkage
editor
collector
loader
virtual
memory
4
10
4
12
4
39
4
49
ca720602
jb
january
31
1978
8
53
am
1774
4
2343
2343
4
2343
2343
4
2343
2343
4
2343
1173
5
2343
1774
5
2343
1845
5
2343
2343
5
2343
2343
5
2343
2343
5
2343
</TEXT>
</DOC>
<DOC>
<DOCNO>2344</DOCNO>
<TEXT>
on
the
optimization
of
performance
of
time
sharing
systems
by
simulation
a
simulation
model
of
a
time
sharing
system
with
a
finite
noncontiguous
store
and
an
infinite
auxiliary
store
is
used
to
study
the
variation
of
system
parameters
such
as
store
size
number
of
jobs
allowed
to
execute
simultaneously
job
scheduling
algorithm
etc
the
effects
of
these
variations
on
a
measure
of
system
performance
is
used
to
ascertain
which
of
the
parameters
controllable
by
the
job
scheduling
algorithm
including
the
scheduling
itself
require
optimization
and
which
of
the
parameters
not
normally
controllable
by
the
scheduling
algorithm
have
a
marked
effect
on
system
performance
system
performance
is
based
upon
the
mean
cost
of
delay
to
all
jobs
processed
it
is
shown
that
significant
improvements
in
the
measure
of
system
performance
can
be
obtained
by
using
variable
time
slice
techniques
and
by
selecting
the
optimum
round
robin
cycle
time
it
appears
that
these
features
would
benefit
from
optimization
whereas
other
parameters
controllable
by
the
scheduling
algorithm
affect
system
performance
in
a
predictable
manner
and
would
not
benefit
from
optimization
features
not
normally
under
the
control
of
the
scheduling
algorithm
can
also
have
a
marked
effect
on
the
measure
of
performance
in
particular
supervisor
overheads
the
size
of
the
store
and
the
speed
of
the
cpu
a
comparison
is
made
between
the
results
of
the
simulation
model
and
two
analytical
equations
for
quantum
oriented
nonpreemptive
time
sharing
systems
the
comparison
is
found
to
be
very
favorable
cacm
june
1972
blatny
j
clark
s
r
rourke
t
a
time
sharing
simulation
studies
optimization
measure
of
performance
scheduling
algorithms
3
80
4
30
4
32
ca720601
jb
january
31
1978
9
19
am
2219
4
2344
2344
4
2344
1938
5
2344
2344
5
2344
2344
5
2344
2344
5
2344
</TEXT>
</DOC>
<DOC>
<DOCNO>2345</DOCNO>
<TEXT>
curriculum
recommendations
for
graduate
professional
programs
in
information
systems
the
need
for
education
related
to
information
systems
in
organizations
is
discussed
and
a
curriculum
is
proposed
for
graduate
professional
programs
in
universities
at
the
master
level
material
necessary
for
such
programs
is
identified
and
courses
incorporating
it
are
specified
detailed
course
descriptions
are
presented
program
organization
discussed
and
implementation
questions
considered
cacm
may
1972
ashenhurst
r
l
education
management
systems
systems
analysis
management
information
systems
information
systems
development
information
analysis
system
design
1
52
3
51
ca720515
jb
january
31
1978
9
28
am
1720
4
2345
1927
4
2345
2147
4
2345
2163
4
2345
2163
4
2345
2345
4
2345
2345
4
2345
2407
4
2345
2478
4
2345
2594
4
2345
2852
4
2345
2899
4
2345
3130
4
2345
1771
5
2345
2181
5
2345
2345
5
2345
2345
5
2345
2345
5
2345
2407
5
2345
2852
5
2345
3003
5
2345
3011
5
2345
3050
5
2345
1417
6
2345
1659
6
2345
1678
6
2345
1771
6
2345
1927
6
2345
1945
6
2345
2075
6
2345
2097
6
2345
2147
6
2345
2163
6
2345
2163
6
2345
2181
6
2345
2187
6
2345
2302
6
2345
2329
6
2345
2345
6
2345
2345
6
2345
2345
6
2345
2345
6
2345
2345
6
2345
2367
6
2345
2387
6
2345
2387
6
2345
2407
6
2345
2478
6
2345
2479
6
2345
2479
6
2345
2480
6
2345
2485
6
2345
2538
6
2345
</TEXT>
</DOC>
<DOC>
<DOCNO>2346</DOCNO>
<TEXT>
hu
tucker
minimum
redundancy
alphabetic
coding
method
z
algorithm
a428
cacm
may
1972
yohe
j
m
information
theory
coding
theory
hu
tucker
method
minimum
redundancy
coding
5
6
ca720514
jb
january
31
1978
9
30
am
2346
4
2346
2459
4
2346
1114
5
2346
2346
5
2346
2346
5
2346
2346
5
2346
</TEXT>
</DOC>
<DOC>
<DOCNO>2347</DOCNO>
<TEXT>
fourier
cosine
integral
d1
algorithm
a427
cacm
may
1972
linz
p
numerical
integration
quadrature
adaptive
quadrature
filon
quadrature
fourier
coefficients
fourier
integrals
5
16
ca720513
jb
january
31
1978
9
32
am
2347
5
2347
2347
5
2347
2347
5
2347
</TEXT>
</DOC>
<DOC>
<DOCNO>2348</DOCNO>
<TEXT>
merge
sort
algorithm
m1
algorithm
a426
cacm
may
1972
bron
c
sort
merge
5
31
ca720512
jb
january
31
1978
9
33
am
1919
4
2348
1969
4
2348
2118
4
2348
2348
4
2348
2679
4
2348
3054
4
2348
1175
5
2348
2348
5
2348
2348
5
2348
2348
5
2348
2563
5
2348
2348
6
2348
</TEXT>
</DOC>
<DOC>
<DOCNO>2349</DOCNO>
<TEXT>
generation
of
random
correlated
normal
variables
g5
algorithm
a425
cacm
may
1972
hurst
r
l
knop
r
e
random
number
normal
density
normal
distribution
gaussian
density
gaussian
distribution
simulation
monte
carlo
5
5
ca720511
jb
january
31
1978
9
35
am
1663
4
2349
2057
4
2349
2349
4
2349
2349
4
2349
2349
4
2349
2349
4
2349
2349
4
2349
2349
4
2349
2349
4
2349
2349
4
2349
2565
4
2349
1648
5
2349
1716
5
2349
1794
5
2349
1894
5
2349
2043
5
2349
2349
5
2349
2349
5
2349
2349
5
2349
501
5
2349
613
5
2349
774
5
2349
</TEXT>
</DOC>
<DOC>
<DOCNO>2350</DOCNO>
<TEXT>
clenshaw
curtis
quadrature
d1
algorithm
a424
cacm
may
1972
gentleman
w
quadrature
chebyshev
series
cosine
transform
fast
fourier
transform
5
1
ca720510
jb
january
31
1978
9
37
am
2355
4
2350
2355
4
2350
2350
4
2350
2350
4
2350
2350
4
2350
2354
4
2350
2354
4
2350
2640
4
2350
1418
5
2350
2350
5
2350
2350
5
2350
2350
5
2350
2354
5
2350
2355
5
2350
1418
6
2350
1418
6
2350
1521
6
2350
1521
6
2350
1597
6
2350
1597
6
2350
1679
6
2350
1883
6
2350
2040
6
2350
2350
6
2350
2350
6
2350
2354
6
2350
2355
6
2350
</TEXT>
</DOC>
<DOC>
<DOCNO>2351</DOCNO>
<TEXT>
the
optimality
of
winograd
formula
cacm
may
1972
harter
r
inner
product
winograd
formula
5
14
ca720509
jb
january
31
1978
9
38
am
2351
5
2351
2351
5
2351
2351
5
2351
</TEXT>
</DOC>
<DOC>
<DOCNO>2352</DOCNO>
<TEXT>
minimax
nonlinear
approximation
by
approximation
on
subsets
cacm
may
1972
dunham
c
b
minimax
approximation
nonlinear
approximation
subset
5
13
ca720508
jb
january
31
1978
9
40
am
2352
4
2352
2353
4
2352
2094
5
2352
2352
5
2352
2352
5
2352
2352
5
2352
</TEXT>
</DOC>
<DOC>
<DOCNO>2353</DOCNO>
<TEXT>
fast
finite
difference
solution
of
biharmonic
problems
setting
the
reynolds
number
equal
to
zero
in
a
method
for
solving
the
navier
strokes
equations
numerically
results
in
a
fast
numerical
method
for
biharmonic
problems
the
equation
is
treated
as
a
system
of
two
second
order
equations
and
a
simple
smoothing
process
is
essential
for
convergence
an
application
is
made
to
a
crack
type
problem
cacm
may
1972
greenspan
d
schultz
d
numerical
analysis
partial
differential
equations
biharmonic
equation
boundary
value
problem
5
17
ca720507
jb
january
31
1978
9
43
am
2352
4
2353
2353
4
2353
2094
5
2353
2353
5
2353
2353
5
2353
2353
5
2353
</TEXT>
</DOC>
<DOC>
<DOCNO>2354</DOCNO>
<TEXT>
implementing
clenshaw
curtis
quadrature
ii
computing
the
cosine
transformation
in
a
companion
paper
to
this
i
methodology
and
experiences
the
automatic
clenshaw
curtis
quadrature
scheme
was
described
and
how
each
quadrature
formula
used
in
the
scheme
requires
a
cosine
transformation
of
the
integrand
values
was
shown
the
high
cost
of
these
cosine
transformations
has
been
a
serious
drawback
in
using
clenshaw
curtis
quadrature
two
other
problems
related
to
the
cosine
transformation
have
also
been
trouble
some
first
the
conventional
computation
of
the
cosine
transformation
by
recurrence
relation
is
numerically
unstable
particularly
at
the
low
frequencies
which
have
the
largest
effect
upon
the
integral
second
in
case
the
automatic
scheme
should
require
refinement
of
the
sampling
storage
is
required
to
save
the
integrand
values
after
the
cosine
transformation
is
computed
this
second
part
of
the
paper
shows
how
the
cosine
transformation
can
be
computed
by
a
modification
of
the
fast
fourier
transform
and
all
three
problems
overcome
the
modification
is
also
applicable
in
other
circumstances
requiring
cosine
or
sine
transformations
such
as
polynomial
interpolation
through
the
chebyshev
points
cacm
may
1972
gentleman
w
m
fast
fourier
transformation
cosine
transformation
clenshaw
curtis
quadrature
chebyshev
series
5
13
5
14
5
16
ca720506
jb
january
31
1978
9
56
am
2355
4
2354
2355
4
2354
2355
4
2354
2355
4
2354
2350
4
2354
2350
4
2354
2354
4
2354
2354
4
2354
2354
4
2354
2354
4
2354
2354
4
2354
2354
4
2354
2640
4
2354
1418
5
2354
1521
5
2354
1597
5
2354
1679
5
2354
2350
5
2354
2354
5
2354
2354
5
2354
2354
5
2354
2355
5
2354
1418
6
2354
1418
6
2354
1521
6
2354
1597
6
2354
1883
6
2354
2040
6
2354
2350
6
2354
2354
6
2354
2354
6
2354
2355
6
2354
</TEXT>
</DOC>
<DOC>
<DOCNO>2355</DOCNO>
<TEXT>
implementing
clenshaw
curtis
quadrature
i
methodology
and
experience
clenshaw
curtis
quadrature
is
a
particularly
important
automatic
quadrature
scheme
for
a
variety
of
reasons
especially
the
high
accuracy
obtained
from
relatively
few
integrand
values
however
it
has
received
little
use
because
it
requires
the
computation
of
a
cosine
transformation
and
the
arithmetic
cost
of
this
has
been
prohibitive
this
paper
is
in
two
parts
a
companion
paper
ii
computing
the
cosine
transformation
shows
that
this
objection
can
be
overcome
by
computing
the
cosine
transformation
by
a
modification
of
the
fast
fourier
transform
algorithm
this
first
part
discusses
the
strategy
and
various
error
estimates
and
summarizes
experience
with
a
particular
implementation
of
the
scheme
cacm
may
1972
gentleman
w
m
clenshaw
curtis
numerical
integration
automatic
quadrature
error
estimates
chebyshev
series
5
16
ca720505
jb
january
31
1978
10
05
am
1982
4
2355
2355
4
2355
2355
4
2355
2355
4
2355
2355
4
2355
2355
4
2355
2355
4
2355
2355
4
2355
2350
4
2355
2350
4
2355
2354
4
2355
2354
4
2355
2354
4
2355
2354
4
2355
1418
5
2355
1521
5
2355
1597
5
2355
1883
5
2355
2040
5
2355
2350
5
2355
2354
5
2355
2355
5
2355
2355
5
2355
2355
5
2355
2640
5
2355
1418
6
2355
1418
6
2355
1521
6
2355
1597
6
2355
1679
6
2355
2350
6
2355
2354
6
2355
2355
6
2355
2355
6
2355
2355
6
2355
</TEXT>
</DOC>
<DOC>
<DOCNO>2356</DOCNO>
<TEXT>
a
technique
for
software
module
specification
with
examples
this
paper
presents
an
approach
to
writing
specifications
for
parts
of
software
systems
the
main
goal
is
to
provide
specifications
sufficiently
precise
and
complete
that
other
pieces
of
software
can
be
written
to
interact
with
the
piece
specified
without
additional
information
the
secondary
goal
is
to
include
in
the
specification
no
more
information
than
necessary
to
meet
the
first
goal
the
technique
is
illustrated
by
means
of
a
variety
of
examples
from
a
tutorial
system
cacm
may
1972
parnas
d
l
software
specification
modules
software
engineering
software
design
4
0
4
29
4
9
ca720504
jb
january
31
1978
10
47
am
1542
4
2356
1683
4
2356
1693
4
2356
1781
4
2356
1787
4
2356
1836
4
2356
1945
4
2356
2042
4
2356
2060
4
2356
2061
4
2356
2082
4
2356
2091
4
2356
2152
4
2356
2179
4
2356
2222
4
2356
2340
4
2356
2356
4
2356
2356
4
2356
2356
4
2356
2420
4
2356
2546
4
2356
2603
4
2356
2679
4
2356
2698
4
2356
2708
4
2356
2824
4
2356
2844
4
2356
2874
4
2356
2972
4
2356
2982
4
2356
2986
4
2356
3045
4
2356
3093
4
2356
3143
4
2356
970
5
2356
1491
5
2356
2227
5
2356
2356
5
2356
2356
5
2356
2356
5
2356
2704
5
2356
2738
5
2356
2866
5
2356
2869
5
2356
2941
5
2356
2958
5
2356
3004
5
2356
3030
5
2356
1247
6
2356
1425
6
2356
1471
6
2356
1552
6
2356
1749
6
2356
1749
6
2356
2080
6
2356
2247
6
2356
2247
6
2356
2247
6
2356
2356
6
2356
2356
6
2356
2356
6
2356
2356
6
2356
2356
6
2356
2356
6
2356
2356
6
2356
2356
6
2356
2379
6
2356
2436
6
2356
2456
6
2356
2457
6
2356
2558
6
2356
2597
6
2356
2651
6
2356
2651
6
2356
2673
6
2356
2777
6
2356
2796
6
2356
2958
6
2356
2972
6
2356
3186
6
2356
</TEXT>
</DOC>
<DOC>
<DOCNO>2357</DOCNO>
<TEXT>
mux
a
simple
approach
to
on
line
computing
an
on
line
system
operating
as
part
of
a
normal
batch
system
for
the
cdc
6600
computer
is
described
the
system
which
required
one
man
year
for
initial
software
implementation
although
basically
simple
provides
the
necessary
elements
to
input
and
modify
files
submit
them
for
batch
execution
and
provide
results
at
the
user
terminal
a
multiplexer
designed
and
developed
as
part
of
the
project
cost
one
man
year
for
design
and
checkout
and
16
000
for
parts
and
fabrication
all
aspects
of
the
system
are
described
including
design
criteria
implementation
cost
overhead
and
user
reactions
cacm
may
1972
christman
r
d
time
sharing
remote
computing
on
line
access
on
line
computing
remote
file
manager
real
time
multiplexer
implementation
effort
operating
overhead
user
reactions
remote
terminals
operating
system
3
79
3
89
4
39
4
41
ca720503
jb
january
31
1978
11
04
am
1657
4
2357
2080
4
2357
2357
4
2357
2357
4
2357
2357
4
2357
2536
4
2357
1523
5
2357
1829
5
2357
2035
5
2357
2357
5
2357
2357
5
2357
2357
5
2357
</TEXT>
</DOC>
<DOC>
<DOCNO>2358</DOCNO>
<TEXT>
the
multics
virtual
memory
concepts
and
design
as
experience
with
use
of
on
line
operating
systems
has
grown
the
need
to
share
information
among
system
users
has
become
increasingly
apparent
many
contemporary
systems
permit
some
degree
of
sharing
usually
sharing
is
accomplished
by
allowing
several
users
to
share
data
via
input
and
output
of
information
stored
in
files
kept
in
secondary
storage
through
the
use
of
segmentation
however
multics
provides
direct
hardware
addressing
by
user
and
system
programs
of
all
information
independent
of
its
physical
storage
location
information
is
stored
in
segments
each
of
which
is
potentially
sharable
and
carries
its
own
independent
attributes
of
size
and
access
privilege
here
the
design
and
implementation
considerations
of
segmentation
and
sharing
in
multics
are
first
discussed
under
the
assumption
that
all
information
resides
in
large
segmented
main
memory
since
the
size
of
main
memory
on
contemporary
systems
is
rather
limited
it
is
then
shown
how
the
multics
software
achieves
the
effect
of
a
large
segmented
main
memory
through
the
use
of
the
honeywell
645
segmentation
and
paging
hardware
cacm
may
1972
bensoussan
a
clingen
c
t
daley
r
c
operating
system
multics
virtual
memory
segmentation
information
sharing
paging
memory
management
memory
hierarchy
4
30
4
31
4
32
ca720502
jb
january
31
1978
11
24
am
1753
4
2358
1754
4
2358
1892
4
2358
1901
4
2358
2085
4
2358
2095
4
2358
2218
4
2358
2277
4
2358
2317
4
2358
2319
4
2358
2329
4
2358
2358
4
2358
2358
4
2358
2358
4
2358
2358
4
2358
2377
4
2358
2373
4
2358
2372
4
2358
2380
4
2358
2434
4
2358
2499
4
2358
2501
4
2358
2582
4
2358
488
4
2358
2625
4
2358
2626
4
2358
2669
4
2358
2828
4
2358
2840
4
2358
2863
4
2358
2881
4
2358
2928
4
2358
2996
4
2358
3006
4
2358
3067
4
2358
274
5
2358
1746
5
2358
1751
5
2358
1753
5
2358
2358
5
2358
2358
5
2358
2358
5
2358
2377
5
2358
2625
5
2358
2626
5
2358
2669
5
2358
1471
6
2358
1471
6
2358
1746
6
2358
1746
6
2358
1749
6
2358
1751
6
2358
1753
6
2358
1901
6
2358
2017
6
2358
2358
6
2358
2358
6
2358
2358
6
2358
2358
6
2358
2377
6
2358
2438
6
2358
2625
6
2358
2629
6
2358
</TEXT>
</DOC>
<DOC>
<DOCNO>2359</DOCNO>
<TEXT>
an
improved
index
sequential
access
method
using
hashed
overflow
the
index
sequential
access
method
isam
is
one
of
the
most
important
file
management
systems
used
with
moveable
head
disk
devices
this
study
investigates
the
use
of
an
unconventional
method
of
treating
overflow
records
the
method
is
to
use
hashing
techniques
to
allocate
space
for
such
records
if
certain
conditions
are
satisfied
this
is
superior
to
the
conventional
isam
method
of
chaining
the
overflow
records
via
linked
list
techniques
these
conditions
are
long
overflow
chains
with
significant
overflow
lack
of
tight
disk
space
constraints
record
keys
which
are
small
compared
to
the
total
record
size
and
significant
use
of
the
file
in
the
index
as
opposed
to
the
sequential
mode
using
hashed
overflow
the
time
to
locate
a
record
is
dependent
not
on
the
total
volume
of
overflow
records
as
in
conventional
isam
but
on
the
percentage
use
of
space
dedicated
to
overflow
records
cacm
may
1972
mullin
j
k
isam
index
sequential
hashing
scatter
storage
disk
cylinder
overflow
3
72
3
73
3
74
ca720501
jb
january
31
1978
12
29
pm
1676
4
2359
1682
4
2359
1728
4
2359
1860
4
2359
1973
4
2359
2018
4
2359
2032
4
2359
2033
4
2359
2107
4
2359
2109
4
2359
2203
4
2359
2251
4
2359
2258
4
2359
2319
4
2359
2313
4
2359
2359
4
2359
2359
4
2359
2437
4
2359
2524
4
2359
2543
4
2359
2552
4
2359
2552
4
2359
2559
4
2359
2781
4
2359
2860
4
2359
2991
4
2359
2991
4
2359
3053
4
2359
1785
5
2359
2203
5
2359
2359
5
2359
2359
5
2359
2359
5
2359
</TEXT>
</DOC>
<DOC>
<DOCNO>2360</DOCNO>
<TEXT>
a
comment
on
the
double
chained
tree
cacm
april
1972
hu
t
c
file
searching
double
chained
tree
binary
search
tree
3
73
3
74
5
32
5
6
ca720413
jb
january
31
1978
12
31
pm
1050
4
2360
1935
4
2360
1936
4
2360
2017
4
2360
2032
4
2360
2257
4
2360
2257
4
2360
2257
4
2360
2360
4
2360
2360
4
2360
2360
4
2360
2451
4
2360
2451
4
2360
2452
4
2360
2452
4
2360
2556
4
2360
2765
4
2360
1831
5
2360
1936
5
2360
2257
5
2360
2360
5
2360
2360
5
2360
2360
5
2360
849
5
2360
849
6
2360
1831
6
2360
1936
6
2360
2360
6
2360
</TEXT>
</DOC>
<DOC>
<DOCNO>2361</DOCNO>
<TEXT>
a
note
on
cheney
nonrecursive
list
compacting
algorithm
cacm
april
1972
walden
d
c
list
compacting
garbage
collection
4
19
4
49
ca720412
jb
january
31
1978
12
32
pm
2156
4
2361
2361
4
2361
2513
4
2361
2736
4
2361
2855
4
2361
3074
4
2361
3106
4
2361
3112
4
2361
1972
5
2361
2361
5
2361
2361
5
2361
2361
5
2361
</TEXT>
</DOC>
<DOC>
<DOCNO>2362</DOCNO>
<TEXT>
linear
equation
solver
f4
algorithm
a423
cacm
april
1972
moler
c
b
matrix
algorithms
linear
equations
fortran
paged
memory
virtual
memory
array
processing
4
22
4
32
5
14
ca720411
jb
january
31
1978
12
34
pm
2362
4
2362
3152
4
2362
2362
5
2362
2362
5
2362
2362
5
2362
2365
5
2362
987
6
2362
1754
6
2362
1924
6
2362
2362
6
2362
</TEXT>
</DOC>
<DOC>
<DOCNO>2363</DOCNO>
<TEXT>
minimal
spanning
tree
h
algorithm
a422
cacm
april
1972
whitney
v
k
m
spanning
tree
minimal
spanning
tree
maximal
spanning
tree
5
32
ca720410
jb
january
31
1978
12
36
pm
2363
5
2363
2363
5
2363
2363
5
2363
2641
5
2363
2363
6
2363
</TEXT>
</DOC>
<DOC>
<DOCNO>2364</DOCNO>
<TEXT>
complex
gamma
function
with
error
control
s14
algorithm
a421
cacm
april
1972
kuki
h
complex
gamma
function
gamma
function
complex
log
gamma
function
loggamma
function
round
off
error
control
inherent
error
control
run
time
error
estimates
error
estimates
special
functions
4
9
5
11
5
12
ca720409
jb
january
31
1978
12
50
pm
2364
4
2364
2364
5
2364
2364
5
2364
2364
5
2364
2366
5
2364
2364
6
2364
</TEXT>
</DOC>
<DOC>
<DOCNO>2365</DOCNO>
<TEXT>
matrix
computations
with
fortran
and
paging
the
efficiency
of
conventional
fortran
programs
for
matrix
computations
can
often
be
improved
by
reversing
the
order
of
nested
loops
such
modifications
produce
modest
savings
in
many
common
situations
and
very
significant
savings
for
large
problems
run
under
an
operating
system
which
uses
paging
cacm
april
1972
moler
c
b
matrix
algorithms
linear
equations
fortran
paged
memory
virtual
memory
array
processing
4
22
4
32
5
14
ca720408
jb
january
31
1978
12
54
pm
1613
4
2365
1646
4
2365
1879
4
2365
1884
4
2365
1900
4
2365
1901
4
2365
1955
4
2365
2025
4
2365
2095
4
2365
2154
4
2365
2277
4
2365
2297
4
2365
2365
4
2365
2365
4
2365
2365
4
2365
2365
4
2365
2506
4
2365
2582
4
2365
3060
4
2365
3152
4
2365
987
5
2365
1754
5
2365
1924
5
2365
2362
5
2365
2365
5
2365
2365
5
2365
2365
5
2365
3152
5
2365
1924
6
2365
2365
6
2365
2365
6
2365
</TEXT>
</DOC>
<DOC>
<DOCNO>2366</DOCNO>
<TEXT>
complex
gamma
function
with
error
control
an
algorithm
to
compute
the
gamma
function
and
log
gamma
function
of
a
complex
variable
is
presented
the
standard
algorithm
is
modified
in
several
respects
to
insure
the
continuity
of
the
function
value
and
to
reduce
accumulation
of
round
off
errors
in
addition
to
computation
of
function
values
this
algorithm
includes
an
object
time
estimation
of
round
off
errors
experimental
data
with
regard
to
the
effectiveness
of
this
error
control
are
presented
a
fortran
program
for
the
algorithm
appears
in
the
algorithms
section
of
this
issue
cacm
april
1972
kuki
h
complex
gamma
function
gamma
function
complex
log
gamma
function
loggamma
function
round
off
error
control
inherent
error
control
run
time
error
estimates
error
estimates
5
11
5
12
ca720407
jb
january
31
1978
12
59
pm
2366
4
2366
2364
5
2366
2366
5
2366
2366
5
2366
2366
5
2366
2366
6
2366
</TEXT>
</DOC>
<DOC>
<DOCNO>2367</DOCNO>
<TEXT>
computers
and
society
a
proposed
course
for
computer
scientists
the
purpose
of
this
paper
is
to
describe
a
course
concerned
with
both
the
effects
of
computers
on
society
and
the
responsibilities
of
computer
scientists
to
society
the
impact
of
computers
is
divided
into
five
components
political
economic
cultural
social
and
moral
the
main
part
of
the
paper
defines
each
component
and
presents
examples
of
the
relevant
issues
in
the
remaining
portions
the
possible
formats
for
such
a
course
are
discussed
a
topic
by
topic
outline
is
given
and
a
selected
set
of
references
is
listed
it
is
hoped
that
the
proposal
will
make
it
easier
to
initiate
courses
on
this
subject
cacm
april
1972
horowitz
e
morgan
h
l
shaw
a
c
computers
and
society
social
implications
course
proposal
1
0
1
52
2
1
ca720406
jb
january
31
1978
1
06
pm
2367
5
2367
2367
5
2367
2367
5
2367
3003
5
2367
1659
6
2367
1678
6
2367
1927
6
2367
1945
6
2367
2097
6
2367
2147
6
2367
2163
6
2367
2187
6
2367
2329
6
2367
2345
6
2367
2367
6
2367
2407
6
2367
2478
6
2367
2479
6
2367
2480
6
2367
2538
6
2367
</TEXT>
</DOC>
<DOC>
<DOCNO>2368</DOCNO>
<TEXT>
an
implemented
graph
algorithm
for
winning
shannon
switching
games
in
this
tutorial
paper
a
computer
program
which
wins
shannon
switching
games
is
described
since
these
games
are
played
on
graphs
the
program
is
a
good
example
of
the
implementation
of
graph
algorithms
the
two
players
in
a
shannon
switching
game
connect
and
cut
have
nonsimilar
goals
either
connect
cut
or
the
player
moving
first
is
guaranteed
the
existence
of
a
winning
strategy
the
simple
strategy
explained
in
this
paper
is
valid
in
all
three
cases
in
fact
the
major
routines
never
need
to
know
whether
the
computer
is
connect
or
cut
cacm
april
1972
chase
s
m
graph
algorithms
graph
processing
shannon
switching
games
game
playing
graph
theory
positional
games
demonstration
programs
game
theory
spinning
trees
3
69
5
32
ca720405
jb
january
31
1978
1
34
pm
2368
5
2368
2368
5
2368
2368
5
2368
</TEXT>
</DOC>
<DOC>
<DOCNO>2369</DOCNO>
<TEXT>
hidden
lines
elimination
for
a
rotating
object
a
method
is
presented
of
determining
which
parts
of
three
dimensional
objects
are
visible
and
which
are
invisible
when
the
objects
are
rotated
about
some
axis
this
paper
describes
a
polygon
comparison
scheme
in
which
the
relationships
of
two
polygons
can
be
classified
into
tree
types
and
also
discusses
how
the
relationship
is
changed
for
each
pair
of
polygons
under
rotation
about
some
axis
a
rotation
table
is
defined
for
each
pair
of
polygons
which
remains
fixed
as
long
as
rotation
is
about
one
axis
and
provides
a
means
of
rapidly
determining
the
visible
and
hidden
line
relationship
between
two
polygons
additional
work
must
be
done
to
extend
this
approach
to
simultaneous
rotation
about
several
axes
cacm
april
1972
matsushita
y
hidden
line
problem
display
programming
computer
graphics
displays
graphics
computer
drawn
picture
4
40
4
41
4
49
ca720404
jb
january
31
1978
1
40
pm
2369
5
2369
2369
5
2369
2369
5
2369
</TEXT>
</DOC>
<DOC>
<DOCNO>2370</DOCNO>
<TEXT>
an
experimental
laboratory
for
pattern
recognition
and
signal
processing
an
interactive
computer
controlled
scanning
and
display
system
has
been
in
operation
at
the
ibm
thomas
j
watson
research
center
for
three
years
the
system
includes
two
flying
spot
scanners
and
a
tv
camera
specially
interfaced
to
a
process
control
digital
computer
dot
mode
and
vector
displays
analog
input
and
output
facilities
and
a
variety
of
other
experimental
equipment
the
system
design
and
programming
support
are
described
and
typical
applications
in
scanner
control
optical
character
recognition
and
image
processing
are
presented
cacm
april
1972
herbst
n
m
will
p
m
scanners
pseudorandom
displays
interactive
terminal
image
processing
pattern
recognition
4
41
6
35
ca720403
jb
january
31
1978
1
47
pm
2370
4
2370
1726
5
2370
2370
5
2370
2370
5
2370
2370
5
2370
</TEXT>
</DOC>
<DOC>
<DOCNO>2371</DOCNO>
<TEXT>
a
system
for
interprocess
communication
in
a
resource
sharing
computer
network
a
system
of
communication
between
processes
in
a
time
sharing
system
is
described
and
the
communication
system
is
extended
so
that
it
may
be
used
between
processes
distributed
throughout
a
computer
network
the
hypothetical
application
of
the
system
to
an
existing
network
is
discussed
cacm
april
1972
walden
d
c
interprocess
communication
time
sharing
computer
networks
resource
sharing
3
81
4
39
4
82
4
9
ca720402
jb
january
31
1978
1
51
pm
2371
5
2371
2371
5
2371
2371
5
2371
2849
5
2371
2371
6
2371
</TEXT>
</DOC>
<DOC>
<DOCNO>2372</DOCNO>
<TEXT>
on
the
implementation
of
security
measures
in
information
systems
the
security
of
an
information
system
may
be
represented
by
a
model
matrix
whose
elements
are
decision
rules
and
whose
row
and
column
indices
are
users
and
data
items
respectively
a
set
of
four
functions
is
used
to
access
this
matrix
at
translation
and
execution
time
distinguishing
between
data
dependent
and
data
independent
decision
rules
enables
one
to
perform
much
of
the
checking
of
security
only
once
at
translation
time
rather
than
repeatedly
at
execution
time
the
model
is
used
to
explain
security
features
of
several
existing
systems
and
serves
as
a
framework
for
a
proposal
for
general
security
system
implementation
within
today
languages
and
operating
systems
cacm
april
1972
conway
r
w
maxwell
w
l
morgan
h
l
security
privacy
access
control
confidentiality
operating
systems
access
management
data
banks
management
information
systems
3
50
3
73
4
12
4
22
4
39
ca720401
jb
january
31
1978
1
59
pm
1753
4
2372
2358
4
2372
2377
4
2372
2372
4
2372
2626
4
2372
2840
4
2372
1746
5
2372
2372
5
2372
2372
5
2372
2372
5
2372
</TEXT>
</DOC>
<DOC>
<DOCNO>2373</DOCNO>
<TEXT>
properties
of
the
working
set
model
a
program
working
set
w
t
t
at
time
t
is
the
set
of
distinct
pages
among
the
t
most
recently
referenced
pages
relations
between
the
average
working
set
size
the
missing
page
rate
and
the
interreference
interval
distribution
may
be
derived
both
from
time
average
definitions
and
from
ensemble
average
statistical
definitions
an
efficient
algorithm
for
estimating
these
quantities
is
given
the
relation
to
lru
least
recently
used
paging
is
characterized
the
independent
reference
model
in
which
page
references
are
statistically
independent
is
used
to
assess
the
effects
to
interpage
dependencies
on
working
set
size
observations
under
general
assumptions
working
set
size
is
shown
to
be
normally
distributed
cacm
march
1972
denning
p
j
schwartz
s
c
working
set
model
paging
paging
algorithms
program
behavior
program
modeling
4
3
ca720308
jb
january
31
1978
2
07
pm
1604
4
2373
1892
4
2373
1901
4
2373
1951
4
2373
2085
4
2373
2095
4
2373
2218
4
2373
2218
4
2373
2277
4
2373
2319
4
2373
2329
4
2373
2358
4
2373
2373
4
2373
2373
4
2373
2373
4
2373
2373
4
2373
2373
4
2373
2380
4
2373
2434
4
2373
2499
4
2373
2450
4
2373
2501
4
2373
2582
4
2373
2669
4
2373
2828
4
2373
2863
4
2373
2881
4
2373
2894
4
2373
2928
4
2373
2996
4
2373
3006
4
2373
3006
4
2373
3067
4
2373
3067
4
2373
1410
5
2373
1751
5
2373
1810
5
2373
1951
5
2373
2373
5
2373
2373
5
2373
2373
5
2373
2374
5
2373
2380
5
2373
2450
5
2373
2595
5
2373
2996
5
2373
3006
5
2373
3067
5
2373
1728
6
2373
1751
6
2373
1751
6
2373
1751
6
2373
1751
6
2373
1884
6
2373
1901
6
2373
2374
6
2373
2374
6
2373
2374
6
2373
2373
6
2373
2373
6
2373
2373
6
2373
2373
6
2373
2373
6
2373
2373
6
2373
2373
6
2373
2595
6
2373
2595
6
2373
2595
6
2373
2682
6
2373
2863
6
2373
2864
6
2373
3006
6
2373
</TEXT>
</DOC>
<DOC>
<DOCNO>2374</DOCNO>
<TEXT>
a
study
of
storage
partitioning
using
a
mathematical
model
of
locality
both
fixed
and
dynamic
storage
partitioning
procedures
are
examined
for
use
in
multiprogramming
systems
the
storage
requirement
of
programs
is
modeled
as
a
stationary
gaussian
process
experiments
justifying
this
model
are
described
by
means
of
this
model
dynamic
storage
partitioning
is
shown
to
provide
substantial
increases
in
storage
utilization
and
operating
efficiency
over
fixed
partitioning
cacm
march
1972
coffman
jr
e
g
ryan
jr
t
a
storage
partitioning
memory
management
dynamic
storage
allocation
space
sharing
multiprogrammed
storage
working
sets
program
behavior
models
mathematical
modeling
4
32
4
39
ca720307
jb
january
31
1978
2
29
pm
1892
4
2374
1924
4
2374
2095
4
2374
2218
4
2374
2297
4
2374
2374
4
2374
2374
4
2374
2374
4
2374
2380
4
2374
2450
4
2374
2481
4
2374
2526
4
2374
2595
4
2374
2667
4
2374
2668
4
2374
2669
4
2374
2862
4
2374
2863
4
2374
2863
4
2374
2996
4
2374
3006
4
2374
3016
4
2374
3052
4
2374
3067
4
2374
1728
5
2374
1901
5
2374
2373
5
2374
2374
5
2374
2374
5
2374
2374
5
2374
2450
5
2374
3006
5
2374
3067
5
2374
1410
6
2374
1751
6
2374
1751
6
2374
1751
6
2374
1810
6
2374
1884
6
2374
1951
6
2374
2374
6
2374
2374
6
2374
2374
6
2374
2374
6
2374
2373
6
2374
2373
6
2374
2373
6
2374
2595
6
2374
2595
6
2374
2682
6
2374
2863
6
2374
2864
6
2374
3006
6
2374
</TEXT>
</DOC>
<DOC>
<DOCNO>2375</DOCNO>
<TEXT>
a
comparative
analysis
of
disk
scheduling
policies
five
well
known
scheduling
policies
for
movable
head
disks
are
compared
using
the
performance
criteria
of
expected
seek
time
system
oriented
and
expected
waiting
time
individual
i
o
request
oriented
both
analytical
and
simulation
results
are
obtained
the
variance
of
waiting
time
is
introduced
as
another
meaningful
measure
of
performance
showing
possible
discrimination
against
individual
requests
then
the
choice
of
a
utility
function
to
measure
total
performance
including
system
oriented
and
individual
request
oriented
measures
is
described
such
a
function
allows
one
to
differentiate
among
the
scheduling
policies
over
a
wide
range
of
input
loading
conditions
the
selection
and
implementation
of
a
maximum
performance
two
policy
algorithm
are
discussed
cacm
march
1972
teorey
t
j
pinkerton
t
b
access
time
analytical
models
auxiliary
storage
direct
access
storage
disk
analysis
disk
scheduling
performance
criteria
peripheral
memory
devices
real
time
systems
response
time
rotational
delay
scheduling
policies
seek
time
simulation
storage
units
time
sharing
systems
waiting
time
3
72
4
32
6
34
ca720306jb
january
31
1978
2
38
pm
2375
5
2375
2375
5
2375
2375
5
2375
2628
5
2375
2891
5
2375
3072
5
2375
1713
6
2375
2219
6
2375
2245
6
2375
2375
6
2375
2375
6
2375
2375
6
2375
2496
6
2375
2628
6
2375
</TEXT>
</DOC>
<DOC>
<DOCNO>2376</DOCNO>
<TEXT>
synchronization
of
communicating
processes
formalization
of
a
well
defined
synchronization
mechanism
can
be
used
to
prove
that
concurrently
running
processes
of
a
system
communicate
correctly
this
is
demonstrated
for
a
system
consisting
of
many
sending
processes
which
deposit
messages
in
a
buffer
and
many
receiving
processes
which
remove
messages
from
that
buffer
the
formal
description
of
the
synchronization
mechanism
makes
it
very
easy
to
prove
that
the
buffer
will
neither
overflow
nor
underflow
that
senders
and
receivers
will
never
operate
on
the
same
message
frame
in
the
buffer
nor
will
they
run
into
a
deadlock
cacm
march
1972
habermann
a
n
parallel
programming
multiprogramming
program
correctness
process
communication
process
scheduling
4
30
4
32
4
39
4
9
ca720305
jb
january
31
1978
2
44
pm
1781
4
2376
1828
4
2376
1854
4
2376
1877
4
2376
1960
4
2376
2150
4
2376
2150
4
2376
2228
4
2376
2256
4
2376
2317
4
2376
2317
4
2376
2319
4
2376
2377
4
2376
2342
4
2376
2342
4
2376
2376
4
2376
2376
4
2376
2376
4
2376
2379
4
2376
2424
4
2376
2482
4
2376
2618
4
2376
2618
4
2376
2632
4
2376
2704
4
2376
2723
4
2376
2738
4
2376
2740
4
2376
2741
4
2376
2867
4
2376
3184
4
2376
3184
4
2376
1198
5
2376
1749
5
2376
1960
5
2376
2376
5
2376
2376
5
2376
2376
5
2376
2700
5
2376
3128
5
2376
2150
6
2376
2376
6
2376
2376
6
2376
2436
6
2376
2597
6
2376
2865
6
2376
2866
6
2376
2870
6
2376
2912
6
2376
3082
6
2376
</TEXT>
</DOC>
<DOC>
<DOCNO>2377</DOCNO>
<TEXT>
a
hardware
architecture
for
implementing
protection
rings
protection
of
computations
and
information
is
an
important
aspect
of
a
computer
utility
in
a
system
which
uses
segmentation
as
a
memory
addressing
scheme
protection
can
be
achieved
in
part
by
associating
concentric
rings
of
decreasing
access
privilege
with
a
computation
this
paper
describes
hardware
processor
mechanisms
for
implementing
these
rings
of
protection
the
mechanisms
for
implementing
these
rings
of
protection
the
mechanisms
allow
cross
ring
calls
and
subsequent
returns
to
occur
without
trapping
to
the
supervisor
automatic
hardware
validation
of
references
across
ring
boundaries
is
also
performed
thus
a
call
by
a
user
procedure
to
a
protected
subsystem
including
the
supervisor
is
identical
to
a
call
to
a
companion
user
procedure
the
mechanisms
of
passing
and
referencing
arguments
are
the
same
in
both
cases
as
well
cacm
march
1972
schroeder
m
d
saltzer
j
h
protection
protection
rings
protection
hardware
access
control
hardware
access
control
computer
utility
time
sharing
shared
information
segmentation
virtual
memory
multics
4
32
6
21
ca720304
jb
january
31
1978
2
58
pm
1458
4
2377
1523
4
2377
1603
4
2377
1698
4
2377
1747
4
2377
1748
4
2377
1753
4
2377
1828
4
2377
1854
4
2377
1854
4
2377
1877
4
2377
1877
4
2377
1960
4
2377
1960
4
2377
2150
4
2377
2317
4
2377
2319
4
2377
2358
4
2377
2377
4
2377
2377
4
2377
2377
4
2377
2377
4
2377
2378
4
2377
2372
4
2377
2342
4
2377
2376
4
2377
2379
4
2377
2424
4
2377
2482
4
2377
2497
4
2377
2558
4
2377
2618
4
2377
2625
4
2377
2625
4
2377
2626
4
2377
2626
4
2377
2632
4
2377
2632
4
2377
2669
4
2377
2704
4
2377
2723
4
2377
2738
4
2377
2740
4
2377
2741
4
2377
2840
4
2377
2840
4
2377
2867
4
2377
2941
4
2377
3105
4
2377
3144
4
2377
3184
4
2377
1471
5
2377
1746
5
2377
1749
5
2377
2358
5
2377
2377
5
2377
2377
5
2377
2377
5
2377
2436
5
2377
2626
5
2377
2868
5
2377
2870
5
2377
953
6
2377
1746
6
2377
2080
6
2377
2358
6
2377
2377
6
2377
2377
6
2377
2377
6
2377
2377
6
2377
2380
6
2377
2558
6
2377
2625
6
2377
2625
6
2377
2629
6
2377
2632
6
2377
2632
6
2377
</TEXT>
</DOC>
<DOC>
<DOCNO>2378</DOCNO>
<TEXT>
an
operating
system
based
on
the
concept
of
a
supervisory
computer
an
operating
system
which
is
organized
as
a
small
supervisor
and
a
set
of
independent
processes
are
described
the
supervisor
handles
i
o
with
external
devices
the
file
and
directory
system
schedules
active
processes
and
manages
memory
handle
errors
and
provides
a
small
set
of
primitive
functions
which
it
will
execute
for
a
process
a
process
is
able
to
specify
a
request
for
a
complicated
action
on
the
part
of
the
supervisor
usually
a
wait
on
the
occurrence
of
a
compound
event
in
the
system
by
combining
these
primitives
into
a
supervisory
computer
program
the
part
of
the
supervisor
which
executes
these
programs
may
be
viewed
as
a
software
implemented
supervisory
computer
the
paper
develops
these
concepts
in
detail
outlines
the
remainder
of
the
supervisor
and
discusses
some
of
the
advantages
of
this
approach
cacm
march
1972
gaines
r
s
operating
systems
supervisors
multiprogramming
time
sharing
cooperating
processes
4
30
4
31
4
32
ca720303
jb
january
31
1978
3
08
pm
1458
4
2378
1523
4
2378
1603
4
2378
1698
4
2378
1747
4
2378
1748
4
2378
1854
4
2378
1877
4
2378
1960
4
2378
2319
4
2378
2377
4
2378
2378
4
2378
2378
4
2378
2320
4
2378
2497
4
2378
2558
4
2378
2625
4
2378
2632
4
2378
2632
4
2378
2738
4
2378
2740
4
2378
2840
4
2378
2868
4
2378
2941
4
2378
3105
4
2378
3127
4
2378
3144
4
2378
1471
5
2378
2080
5
2378
2378
5
2378
2378
5
2378
2378
5
2378
</TEXT>
</DOC>
<DOC>
<DOCNO>2379</DOCNO>
<TEXT>
the
design
of
the
venus
operating
system
the
venus
operating
system
is
an
experimental
multiprogramming
system
which
supports
five
or
six
concurrent
users
on
a
small
computer
the
system
was
produced
to
test
the
effect
of
machine
architecture
on
complexity
of
software
the
system
is
defined
by
a
combination
of
microprograms
and
software
the
microprogram
defines
a
machine
with
some
unusual
architectural
feature
the
software
exploits
these
features
to
define
the
operating
system
as
simply
as
possible
in
this
paper
the
development
of
the
system
is
described
with
particular
emphasis
on
the
principles
which
guided
the
design
cacm
march
1972
liskov
b
h
operating
systems
system
design
levels
of
abstraction
machine
architecture
microprogramming
segments
semaphores
multiprogramming
virtual
machines
processes
process
communication
virtual
devices
data
sharing
resource
management
deadlock
4
30
4
32
4
41
6
21
ca720302
jb
january
31
1978
3
16
pm
1828
4
2379
1854
4
2379
1877
4
2379
1960
4
2379
2150
4
2379
2228
4
2379
2280
4
2379
2280
4
2379
2317
4
2379
2319
4
2379
2377
4
2379
2342
4
2379
2376
4
2379
2379
4
2379
2379
4
2379
2379
4
2379
2424
4
2379
2482
4
2379
2482
4
2379
2482
4
2379
2500
4
2379
2618
4
2379
2632
4
2379
2704
4
2379
2723
4
2379
2738
4
2379
2740
4
2379
2740
4
2379
2741
4
2379
2851
4
2379
2867
4
2379
2920
4
2379
3184
4
2379
1749
5
2379
1877
5
2379
2228
5
2379
2379
5
2379
2379
5
2379
2379
5
2379
2704
5
2379
2867
5
2379
1247
6
2379
1552
6
2379
1749
6
2379
1749
6
2379
2247
6
2379
2356
6
2379
2379
6
2379
2379
6
2379
2673
6
2379
</TEXT>
</DOC>
<DOC>
<DOCNO>2380</DOCNO>
<TEXT>
tenex
a
paged
time
sharing
system
for
the
pdp
10
tenex
is
a
new
time
sharing
system
implemented
on
dec
pdp
10
augmented
by
special
paging
hardware
developed
at
bbn
this
report
specifies
a
set
of
goals
which
are
important
for
any
time
sharing
system
it
describes
how
the
tenex
design
and
implementation
achieve
these
goals
these
include
specifications
for
a
powerful
multiprocess
large
memory
virtual
machine
intimate
terminal
interaction
comprehensive
uniform
file
and
i
o
capabilities
and
clean
flexible
system
structure
although
the
implementation
described
here
required
some
compromise
to
achieve
a
system
operational
within
six
months
of
hardware
checkout
tenex
has
met
its
major
goals
and
provided
reliable
service
at
several
sites
and
through
the
arpa
network
cacm
march
1972
bobrow
d
g
burchfiel
j
d
murphy
d
l
tomlinson
r
s
beranek
b
tenex
paging
virtual
machines
time
sharing
system
scheduling
algorithm
process
structure
pdp
10
2
44
4
32
4
39
4
42
ca720301
jb
january
31
1978
3
37
pm
1892
4
2380
1901
4
2380
2085
4
2380
2095
4
2380
2218
4
2380
2277
4
2380
2319
4
2380
2329
4
2380
2358
4
2380
2373
4
2380
2374
4
2380
2380
4
2380
2380
4
2380
2434
4
2380
2499
4
2380
2450
4
2380
2501
4
2380
2582
4
2380
2595
4
2380
2669
4
2380
2828
4
2380
2863
4
2380
2881
4
2380
2928
4
2380
2996
4
2380
2996
4
2380
3006
4
2380
3006
4
2380
3067
4
2380
3067
4
2380
1751
5
2380
2373
5
2380
2380
5
2380
2380
5
2380
2380
5
2380
2629
5
2380
2868
5
2380
2928
5
2380
2951
5
2380
1502
6
2380
1751
6
2380
2080
6
2380
2277
6
2380
2377
6
2380
2380
6
2380
2380
6
2380
2380
6
2380
2380
6
2380
2522
6
2380
2558
6
2380
2569
6
2380
2625
6
2380
2632
6
2380
</TEXT>
</DOC>
<DOC>
<DOCNO>2381</DOCNO>
<TEXT>
average
binary
search
length
for
dense
ordered
lists
corrigendum
cacm
february
1972
flores
i
madpis
g
ca720210
jb
january
31
1978
3
40
pm
2381
5
2381
2381
5
2381
2381
5
2381
</TEXT>
</DOC>
<DOC>
<DOCNO>2382</DOCNO>
<TEXT>
reconstruction
of
pictures
from
their
projections
corrigendum
cacm
february
1972
gordon
r
herman
g
t
ca720209
jb
january
31
1978
3
42
pm
2382
5
2382
2382
5
2382
2382
5
2382
</TEXT>
</DOC>
<DOC>
<DOCNO>2383</DOCNO>
<TEXT>
music
and
computer
composition
the
problem
discussed
is
that
of
simulating
human
composition
of
western
popular
music
by
computer
and
some
relevant
theories
of
music
and
harmony
are
given
problems
with
this
kind
of
program
and
several
schemes
that
are
known
not
to
work
are
discussed
several
previous
computer
compositions
are
discussed
including
the
illiac
suite
a
program
to
generate
short
melody
fragments
was
written
to
simulate
some
of
the
aspects
of
human
composition
five
samples
of
its
output
are
presented
and
discussed
it
was
discovered
that
although
the
fragments
show
many
of
the
characteristics
of
popular
melodies
they
have
a
strangely
alien
sound
it
is
theorized
that
this
is
because
the
relevant
probabilities
which
would
discriminate
against
unfamiliar
sequences
were
not
used
cacm
february
1972
moorer
j
a
artificial
intelligence
heuristic
programming
models
of
cognitive
processes
computer
music
computer
composition
music
theory
3
44
3
65
ca720208
jb
january
31
1978
3
54
pm
2383
5
2383
2383
5
2383
2383
5
2383
</TEXT>
</DOC>
<DOC>
<DOCNO>2384</DOCNO>
<TEXT>
hidden
line
plotting
program
j6
algorithm
a420
cacm
february
1972
williamson
h
hidden
line
plot
surface
plot
4
9
ca720207
jb
january
31
1978
4
12
pm
2384
5
2384
2384
5
2384
2384
5
2384
</TEXT>
</DOC>
<DOC>
<DOCNO>2385</DOCNO>
<TEXT>
zeros
of
a
complex
polynomial
c2
algorithm
a419
cacm
february
1972
jenkins
m
a
traub
j
f
roots
roots
of
a
polynomial
zeros
of
a
polynomial
5
15
ca720206
jb
january
31
1978
4
14
pm
2385
5
2385
2385
5
2385
2385
5
2385
</TEXT>
</DOC>
<DOC>
<DOCNO>2386</DOCNO>
<TEXT>
dynamic
microprogramming
processor
organization
and
programming
corrigendum
cacm
february
1972
tucker
a
b
ca720205
jb
january
31
1978
4
21
pm
2386
5
2386
2386
5
2386
2386
5
2386
</TEXT>
</DOC>
<DOC>
<DOCNO>2387</DOCNO>
<TEXT>
maximum
computing
power
and
cost
factors
in
the
centralization
problem
a
simple
analysis
of
some
computer
economic
factors
involved
in
comparing
multimachine
installations
versus
large
single
machine
installations
is
given
and
a
mathematical
model
is
derived
to
assist
policy
decisions
cacm
february
1972
oldehoeft
a
e
halstead
m
h
centralization
decentralization
economics
of
computers
computer
management
economies
of
scale
2
41
ca720204
jb
january
31
1978
4
25
pm
1653
4
2387
2387
4
2387
2387
4
2387
2852
4
2387
1417
5
2387
2387
5
2387
2387
5
2387
2387
5
2387
2852
5
2387
3050
5
2387
3190
5
2387
1417
6
2387
1771
6
2387
2345
6
2387
2345
6
2387
2387
6
2387
2387
6
2387
2479
6
2387
</TEXT>
</DOC>
<DOC>
<DOCNO>2388</DOCNO>
<TEXT>
optimizing
binary
trees
grown
with
a
sorting
algorithm
items
can
be
retrieved
from
binary
trees
grown
with
a
form
of
the
algorithm
quicksort
in
an
average
time
proportional
to
log
n
where
n
is
the
number
of
items
in
the
tree
the
binary
trees
grown
by
this
algorithm
sometimes
have
some
branches
longer
than
others
therefore
it
is
possible
to
reduce
the
average
retrieval
time
by
restructuring
the
tree
to
make
the
branches
as
uniform
in
length
as
possible
an
algorithm
to
do
this
is
presented
the
use
of
this
algorithm
is
discussed
and
it
is
compared
with
another
which
restructures
the
tree
after
each
new
item
is
added
cacm
february
1972
martin
w
a
ness
d
n
retrieving
information
from
binary
trees
global
and
local
optimization
sorting
recursion
3
74
5
31
ca720203
jb
january
31
1978
4
30
pm
1175
4
2388
1919
4
2388
1919
4
2388
1969
4
2388
1997
4
2388
2191
4
2388
2191
4
2388
2388
4
2388
2388
4
2388
2679
4
2388
2783
4
2388
2784
4
2388
3054
4
2388
3054
4
2388
3121
4
2388
3121
4
2388
864
4
2388
308
5
2388
309
5
2388
2388
5
2388
2388
5
2388
2388
5
2388
2455
5
2388
2493
5
2388
2889
5
2388
2968
5
2388
2138
6
2388
2278
6
2388
2388
6
2388
2388
6
2388
2388
6
2388
2388
6
2388
2455
6
2388
2455
6
2388
</TEXT>
</DOC>
<DOC>
<DOCNO>2389</DOCNO>
<TEXT>
preliminary
report
on
a
system
for
general
space
planning
a
computer
language
and
a
set
of
programs
within
that
language
are
described
which
allow
the
formulating
and
solving
of
a
class
of
space
planning
problems
the
language
is
an
extension
of
algol
and
includes
means
to
represent
spaces
and
objects
to
manipulate
them
and
to
test
the
resulting
arrangements
according
to
a
variety
of
constraints
the
algorithms
used
to
solve
problems
expressed
in
this
language
rely
on
heuristic
programming
both
the
language
and
the
search
algorithms
are
detailed
cacm
february
1972
eastman
c
m
automated
design
architecture
heuristic
programs
space
planning
3
20
3
40
3
64
3
66
ca720202
jb
january
31
1978
4
35
pm
2389
4
2389
2078
5
2389
2389
5
2389
2389
5
2389
2389
5
2389
</TEXT>
</DOC>
<DOC>
<DOCNO>2390</DOCNO>
<TEXT>
a
proposal
for
a
computer
based
interactive
scientific
community
because
of
the
problems
created
by
the
explosion
of
papers
in
the
mathematical
sciences
and
the
drawbacks
that
this
places
on
research
it
is
suggested
that
a
tree
of
all
mathematical
results
and
terminology
be
maintained
in
a
multiterminal
computer
system
users
of
the
system
can
store
in
the
computer
an
updated
file
of
their
current
knowledge
and
on
selecting
a
paper
to
read
they
can
obtain
from
the
computer
the
minimum
subtree
of
theorems
required
to
bring
them
from
what
they
already
know
to
the
background
knowledge
which
the
paper
assumes
under
certain
conditions
means
are
also
provided
for
the
contribution
of
useful
comments
by
the
readers
of
a
work
and
for
interaction
between
commentators
and
with
the
author
this
paper
describes
how
the
system
can
be
organized
and
the
role
required
of
readers
writers
and
commentators
cacm
february
1972
pager
d
interactive
system
organization
of
scientific
community
readers
writers
commentators
computer
utility
information
retrieval
trees
data
structures
1
0
1
1
1
59
2
10
3
15
3
32
3
50
3
51
3
70
3
71
3
74
3
9
ca720201
jb
february
1
1978
8
51
am
2390
5
2390
2390
5
2390
2390
5
2390
2519
5
2390
2390
6
2390
</TEXT>
</DOC>
<DOC>
<DOCNO>2391</DOCNO>
<TEXT>
unitary
symmetric
polynomials
z
algorithm
r391
cacm
january
1972
schrack
g
f
symmetric
polynomials
elementary
symmetric
polynomials
unitary
symmetric
polynomials
polynomial
synthesis
reverse
horner
scheme
reverse
synthetic
division
binomial
coefficients
5
11
5
30
5
5
ca720112
jb
february
1
1978
8
55
am
2391
5
2391
2391
5
2391
2391
5
2391
</TEXT>
</DOC>
<DOC>
<DOCNO>2392</DOCNO>
<TEXT>
in
situ
transposition
of
a
rectangular
matrix
f1
algorithm
c380
cacm
january
1972
macleod
i
d
g
rectangular
matrix
transpose
5
14
ca720111
jb
february
1
1978
8
57
am
2057
4
2392
2057
4
2392
2058
4
2392
2392
4
2392
2392
4
2392
2416
4
2392
1600
5
2392
2055
5
2392
2392
5
2392
2392
5
2392
2392
5
2392
</TEXT>
</DOC>
<DOC>
<DOCNO>2393</DOCNO>
<TEXT>
calculation
of
fourier
integrals
d1
algorithm
a418
cacm
january
1972
einarsson
b
quadrature
filon
quadrature
integration
filon
integration
fourier
coefficients
fourier
integrals
fourier
series
spline
spline
approximation
spline
quadrature
extrapolation
richardson
extrapolation
5
16
ca720110
jb
february
1
1978
9
00
am
1857
4
2393
2393
4
2393
2393
4
2393
1858
5
2393
2071
5
2393
2393
5
2393
2393
5
2393
2393
5
2393
</TEXT>
</DOC>
<DOC>
<DOCNO>2394</DOCNO>
<TEXT>
ordering
f
f
f
f
x
when
f
x
is
positive
monotonic
cacm
january
1972
salzer
h
e
ordering
storage
retrieval
positive
functions
monotonic
functions
increasing
functions
decreasing
function
binary
system
chebyshev
zeros
square
rots
continued
fractions
5
40
ca720109
jb
february
1
1978
9
05
am
2394
4
2394
2394
4
2394
1872
5
2394
1903
5
2394
2394
5
2394
2394
5
2394
2394
5
2394
2533
5
2394
2394
6
2394
</TEXT>
</DOC>
<DOC>
<DOCNO>2395</DOCNO>
<TEXT>
quadratic
programming
for
nonlinear
regression
a
quadratic
programming
algorithm
is
described
for
use
with
the
magnified
diagonal
method
of
nonlinear
regression
with
linear
constraints
the
regression
method
is
published
in
jacm
july
1970
cacm
january
1972
shrager
r
i
nonlinear
equations
nonlinear
regression
nonlinear
programming
quadratic
programming
least
squares
inequality
constraints
iteration
5
15
5
41
ca720108
jb
february
1
1978
9
09
am
2395
5
2395
2395
5
2395
2395
5
2395
</TEXT>
</DOC>
<DOC>
<DOCNO>2396</DOCNO>
<TEXT>
muse
a
model
to
understand
simple
english
muse
is
a
computer
model
for
natural
language
processing
based
on
a
semantic
memory
network
like
that
of
quillian
tlc
muse
from
a
model
to
understand
simple
english
processes
english
sentences
of
unrestricted
content
but
somewhat
restricted
format
the
model
first
applies
syntactic
analysis
to
eliminate
some
interpretations
and
then
employs
a
simplified
semantic
intersection
procedure
to
find
a
valid
interpretation
of
the
input
while
the
semantic
processing
is
similar
to
tlc
the
syntactic
component
includes
the
early
use
of
parse
trees
and
special
purpose
rules
the
relational
triple
notation
used
during
interpretation
of
input
is
compatible
with
mu
memory
structures
allowing
direct
verification
of
familiar
concepts
and
the
addition
of
new
ones
muse
also
has
a
repertoire
of
actions
which
range
from
editing
and
reporting
the
contents
of
its
own
memory
to
an
indirect
form
of
question
answering
examples
are
presented
to
demonstrate
how
the
model
interprets
text
resolves
ambiguities
adds
information
to
memory
generalizes
from
examples
and
performs
various
actions
cacm
january
1972
mccalla
g
i
sampson
j
r
natural
language
processing
semantic
memory
text
comprehension
question
answering
artificial
intelligence
human
memory
simulation
3
36
3
42
3
62
3
65
3
74
ca720107
jb
february
1
1978
9
20
am
1400
4
2396
1553
4
2396
1945
4
2396
2127
4
2396
2127
4
2396
2178
4
2396
2309
4
2396
2310
4
2396
2396
4
2396
2396
4
2396
2396
4
2396
2396
4
2396
2561
4
2396
2730
4
2396
1487
5
2396
1856
5
2396
2092
5
2396
2127
5
2396
2396
5
2396
2396
5
2396
2396
5
2396
</TEXT>
</DOC>
<DOC>
<DOCNO>2397</DOCNO>
<TEXT>
optimizing
the
polyphase
sort
corrigendum
cacm
january
1972
shell
d
l
ca720106
jb
february
1
1978
9
21
am
2397
5
2397
2397
5
2397
2397
5
2397
</TEXT>
</DOC>
<DOC>
<DOCNO>2398</DOCNO>
<TEXT>
teacher
student
authored
cai
using
the
newbasic
system
the
pedagogical
advantages
of
a
general
purpose
interactive
system
called
newbasic
catalyst
are
discussed
newbasic
catalystincorporates
an
advanced
implementation
of
basic
system
level
interactive
features
and
a
general
capability
for
extension
through
user
oriented
function
attachment
application
of
this
last
feature
to
provide
a
flexible
cai
scan
capability
is
illustrated
an
example
of
interaction
at
the
system
level
shows
how
students
can
mix
the
advantages
of
independent
or
solo
mode
computing
with
those
of
guided
or
dual
mode
interaction
preliminary
experience
with
the
system
in
an
urban
secondary
school
setting
is
discussed
cacm
january
1972
dwyer
t
a
cai
basic
catalyst
newbasic
education
computers
in
education
extended
languages
interactive
systems
1
50
1
51
3
32
4
22
ca720105
jb
february
1
1978
9
28
am
2309
5
2398
2398
5
2398
2398
5
2398
2398
5
2398
1856
6
2398
2398
6
2398
</TEXT>
</DOC>
<DOC>
<DOCNO>2399</DOCNO>
<TEXT>
a
crt
editing
system
a
test
editing
and
manipulation
program
is
described
the
program
operates
from
low
cost
cathode
ray
tube
entry
and
display
stations
with
keyboard
and
13
function
buttons
applications
potential
economy
of
operation
and
some
aspects
of
implementation
are
discussed
cacm
january
1972
irons
e
t
djorup
f
m
editing
text
cathode
ray
tube
entry
display
time
sharing
3
7
4
3
ca720104
jb
february
1
1978
9
31
am
2399
5
2399
2399
5
2399
2399
5
2399
</TEXT>
</DOC>
<DOC>
<DOCNO>2400</DOCNO>
<TEXT>
use
of
the
hough
transformation
todetect
lines
and
curves
in
pictures
hough
has
proposed
an
interesting
and
computationally
efficient
procedure
for
detecting
lines
in
pictures
this
paper
points
out
that
the
use
of
angle
radius
rather
than
slope
intercept
parameters
simplifies
the
computation
further
it
also
shows
how
the
method
can
be
used
for
more
general
curve
fitting
and
gives
alternative
interpretations
that
explain
the
source
of
its
efficiency
cacm
january
1972
duda
r
o
hart
p
e
picture
processing
pattern
recognition
line
detection
curve
detection
colinear
points
point
line
transformation
hough
transformation
3
63
ca720103
jb
february
1
1978
9
36
am
2400
5
2400
2400
5
2400
2400
5
2400
2788
5
2400
2910
5
2400
2400
6
2400
2400
6
2400
2788
6
2400
</TEXT>
</DOC>
<DOC>
<DOCNO>2401</DOCNO>
<TEXT>
on
shrinking
binary
picture
patterns
a
parallel
processing
algorithm
for
shrinking
binary
patterns
to
obtain
single
isolated
elements
one
for
each
pattern
is
presented
this
procedure
may
be
used
for
counting
patterns
on
a
matrix
and
a
hardware
implementation
of
the
algorithm
using
large
scale
integrated
technology
is
envisioned
the
principal
features
of
this
method
are
the
very
small
window
employed
two
by
two
elements
the
parallel
nature
of
the
process
and
the
possibility
of
shrinking
any
pattern
regardless
of
the
complexity
of
its
configuration
problems
regarding
merging
and
disconnection
of
patterns
during
the
process
as
well
as
the
determination
of
the
maximum
number
of
steps
necessary
to
obtain
a
single
isolated
element
from
a
pattern
are
reviewed
and
discussed
an
analogy
with
a
neural
network
description
in
terms
of
mcculloch
pitts
neurons
is
presented
cacm
january
1972
levialdi
s
counting
binary
patterns
shrinking
parallel
processing
multiple
connected
pictures
3
63
ca720102
jb
february
1
1978
9
43
am
2401
5
2401
2401
5
2401
2401
5
2401
</TEXT>
</DOC>
<DOC>
<DOCNO>2402</DOCNO>
<TEXT>
pictorial
pattern
recognition
and
the
phase
problem
of
x
ray
crystallography
the
availability
of
interactive
three
dimensional
computer
graphics
systems
coupled
to
powerful
digital
computers
encourages
the
development
of
algorithms
adapted
to
this
environment
pictorial
pattern
recognition
techniques
make
possible
a
number
of
approaches
to
x
ray
structure
determination
based
on
molecular
model
building
i
e
the
use
of
chemical
information
to
frame
structural
hypotheses
which
can
computationally
be
tested
and
refined
by
reference
to
the
experimental
data
application
of
standard
pattern
recognition
algorithms
is
hindered
by
the
fact
that
the
cross
correlation
between
a
model
and
the
correct
structure
cannot
be
computed
because
of
a
fundamental
incompleteness
in
the
measured
data
however
it
is
possible
to
compute
an
upper
bound
to
such
a
cross
correlation
a
simple
example
demonstrates
that
this
information
can
be
the
basis
of
a
technique
for
structure
determination
that
can
make
effective
use
of
an
interactive
graphics
system
model
building
by
cross
correlations
has
intrinsic
advantages
over
usual
crystallographic
techniques
based
on
the
autocorrelation
or
patterson
function
especially
for
large
structures
this
is
significant
for
crystallography
of
biological
macromolecules
hasbeen
and
will
continue
to
be
a
field
of
intense
interest
cacm
january
1972
lesk
a
m
pictorial
pattern
recognition
phase
problem
x
ray
crystallography
interactive
graphics
3
13
3
17
3
63
ca720101
jb
february
1
1978
9
53
am
2402
5
2402
2402
5
2402
2402
5
2402
</TEXT>
</DOC>
<DOC>
<DOCNO>2403</DOCNO>
<TEXT>
procedures
for
natural
spline
interpolation
e1
algorithm
a472
cacm
december
1973
herriot
j
g
approximation
interpolation
spline
natural
spline
spline
approximation
cubic
natural
spline
5
13
ca731205
jb
january
19
1978
2
47
pm
2403
5
2403
2403
5
2403
2403
5
2403
</TEXT>
</DOC>
<DOC>
<DOCNO>2404</DOCNO>
<TEXT>
exponential
integrals
s13
algorithm
a471
cacm
december
1973
gautschi
w
exponential
integral
recurrence
relations
recursive
computation
continued
fractions
5
12
ca731204
jb
january
19
1978
2
48
pm
2404
4
2404
2119
5
2404
2404
5
2404
2404
5
2404
2404
5
2404
</TEXT>
</DOC>
<DOC>
<DOCNO>2405</DOCNO>
<TEXT>
linear
systems
with
almost
tridiagonal
matrix
f4
algorithm
a470
cacm
december
1973
kubicek
m
system
of
linear
equations
almost
tridiagonal
matrix
sparse
matrix
5
14
ca731203
jb
january
19
1978
2
50
pm
2405
5
2405
2405
5
2405
2405
5
2405
</TEXT>
</DOC>
<DOC>
<DOCNO>2406</DOCNO>
<TEXT>
a
data
definition
and
mapping
language
a
data
definition
language
i
sa
declarative
computer
language
for
specifying
data
structures
most
data
definition
languages
concentrate
on
the
declaration
of
logical
data
structures
with
little
concern
for
how
these
structures
are
physically
realized
on
a
computer
system
however
the
need
for
data
definition
languages
which
describe
both
the
logical
and
physical
aspects
of
data
is
increasingly
apparent
such
languages
will
be
a
key
systems
as
well
as
in
advanced
data
management
systems
and
distributed
data
bases
this
paper
reviews
past
work
in
the
data
definition
language
for
describing
both
logical
and
physical
aspects
of
data
applications
of
these
generalized
data
definition
languages
are
also
discussed
cacm
december
1973
sibley
e
h
taylor
r
w
data
definition
language
data
and
storage
structure
data
translation
data
base
management
systems
file
translation
3
51
3
70
3
73
4
29
4
82
ca731202
jb
january
19
1978
2
58
pm
2155
4
2406
2406
4
2406
2710
4
2406
2715
4
2406
2716
4
2406
2717
4
2406
2718
4
2406
2765
4
2406
2817
4
2406
2888
4
2406
2901
4
2406
2957
4
2406
2959
4
2406
2965
4
2406
3087
4
2406
3154
4
2406
2046
5
2406
2406
5
2406
2406
5
2406
2406
5
2406
2717
5
2406
2046
6
2406
2406
6
2406
</TEXT>
</DOC>
<DOC>
<DOCNO>2407</DOCNO>
<TEXT>
curriculum
recommendations
for
undergraduate
programs
in
information
systems
the
need
for
education
related
to
information
systems
in
organizations
is
discussed
and
a
curriculum
is
proposed
for
an
undergraduate
program
material
necessary
for
such
programs
is
identified
and
courses
incorporating
it
are
specifiedetailed
course
descriptions
are
presented
program
organization
and
a
problems
of
implementation
are
discussed
cacm
december
1973
couger
j
d
education
undergraduate
curricula
management
systems
information
systems
information
analysis
system
design
systems
analysis
1
52
3
51
ca731201
jb
january
19
1978
3
24
pm
2163
4
2407
2345
4
2407
2407
4
2407
2407
4
2407
2407
4
2407
2852
4
2407
3003
4
2407
3003
4
2407
3011
4
2407
3050
4
2407
2163
5
2407
2181
5
2407
2345
5
2407
2407
5
2407
2407
5
2407
2407
5
2407
3003
5
2407
1659
6
2407
1678
6
2407
1927
6
2407
1945
6
2407
2097
6
2407
2147
6
2407
2163
6
2407
2187
6
2407
2329
6
2407
2345
6
2407
2367
6
2407
2407
6
2407
2478
6
2407
2479
6
2407
2480
6
2407
2538
6
2407
</TEXT>
</DOC>
<DOC>
<DOCNO>2408</DOCNO>
<TEXT>
solving
the
biharmonic
equation
in
a
square
a
direct
versus
a
semidirect
method
two
methods
for
solving
the
biharmonic
equation
are
compared
one
method
is
direct
using
eigenvalue
eigenvector
decomposition
the
other
method
is
iterative
solving
a
poisson
equation
directly
at
each
iteration
cacm
november
1973
ehrlich
l
w
biharmonic
direct
method
block
iterative
eigenvector
eigenvalue
decomposition
5
14
5
17
ca731118
jb
january
19
1978
3
28
pm
2408
5
2408
2408
5
2408
2408
5
2408
</TEXT>
</DOC>
<DOC>
<DOCNO>2409</DOCNO>
<TEXT>
an
algorithm
for
the
approximate
solution
of
wiener
hopf
integral
equations
an
explicit
approximate
solution
is
given
for
an
equation
where
it
is
assumed
that
the
classical
wiener
hopf
technique
may
be
applied
it
is
furthermore
assumed
that
fourier
transforms
are
known
explicitly
the
approximate
solution
depends
on
two
positive
parameters
cacm
november
1973
stenger
f
integral
equations
wiener
hopf
convolution
approximate
solution
5
18
ca731117
jb
january
19
1978
3
36
pm
2409
5
2409
2409
5
2409
2409
5
2409
</TEXT>
</DOC>
<DOC>
<DOCNO>2410</DOCNO>
<TEXT>
a
recurrence
scheme
for
converting
from
one
orthogonal
expansion
into
another
a
generalization
of
a
scheme
of
hamming
for
converting
a
polynomial
pn
x
into
a
chebyshev
series
is
combined
with
a
recurrence
scheme
of
clenshaw
for
summing
any
finite
series
whose
terms
satisfy
a
three
term
recurrence
formula
cacm
november
1973
salzer
h
e
orthogonal
expansions
series
interconversion
recurrence
schemes
hamming
recurrence
clenshaw
recurrence
three
term
recurrence
five
term
recurrence
chebyshev
series
5
12
ca731116
jb
january
19
1978
4
16
pm
2410
5
2410
2410
5
2410
2410
5
2410
</TEXT>
</DOC>
<DOC>
<DOCNO>2411</DOCNO>
<TEXT>
tree
structured
programs
cacm
november
1973
wegner
e
control
structures
flowcharts
goto
statements
inductive
assertion
least
fix
points
optimization
in
compilers
program
documentation
program
flow
graphs
programming
language
design
proof
of
programs
semantics
of
programming
languages
structured
programming
4
12
4
22
5
24
ca731115
jb
january
19
1978
4
19
pm
2411
4
2411
2411
4
2411
2457
4
2411
2709
4
2411
2889
4
2411
2937
4
2411
2989
4
2411
3005
4
2411
3025
4
2411
3101
4
2411
2138
5
2411
2326
5
2411
2411
5
2411
2411
5
2411
2411
5
2411
</TEXT>
</DOC>
<DOC>
<DOCNO>2412</DOCNO>
<TEXT>
comment
on
brent
scatter
storage
algorithm
cacm
november
1973
feldman
j
a
low
j
r
hashing
information
storage
and
retrieval
scatter
storage
searching
symbol
table
3
7
3
73
3
74
4
1
4
9
ca731114
jb
january
19
1978
4
40
pm
2412
4
2412
3053
4
2412
3083
4
2412
2412
5
2412
2412
5
2412
2412
5
2412
2543
5
2412
3053
5
2412
1329
6
2412
1785
6
2412
1973
6
2412
1992
6
2412
2107
6
2412
2109
6
2412
2412
6
2412
2543
6
2412
2673
6
2412
2707
6
2412
2770
6
2412
</TEXT>
</DOC>
<DOC>
<DOCNO>2413</DOCNO>
<TEXT>
a
note
on
subexpression
ordering
in
the
execution
of
arithmetic
expressions
a
counterexample
to
the
supposed
optimality
of
an
algorithm
for
generating
schedules
for
trees
of
tasks
with
unequal
execution
times
is
presented
a
comparison
with
the
critical
path
heuristic
is
discussed
cacm
november
1973
denning
p
j
graham
g
s
scheduling
tree
scheduling
task
scheduling
multiprocessor
scheduling
4
32
8
3
8
1
ca731113
jb
january
25
1978
4
24
pm
2413
4
2413
2175
5
2413
2413
5
2413
2413
5
2413
2413
5
2413
</TEXT>
</DOC>
<DOC>
<DOCNO>2414</DOCNO>
<TEXT>
arithmetic
overa
finite
field
a1
algorithm
a469
cacm
november
1973
lam
c
mckay
j
algebra
5
19
ca731112
jb
january
20
1978
9
25
am
2414
5
2414
2414
5
2414
2414
5
2414
</TEXT>
</DOC>
<DOC>
<DOCNO>2415</DOCNO>
<TEXT>
algorithm
for
automatic
numerical
integration
over
a
finite
interval
d1
algorithm
a468
cacm
november
1973
patterson
t
n
l
automatic
integration
numerical
integration
automatic
quadrature
numerical
quadrature
5
16
ca731111
jb
january
20
1978
9
51
am
1352
4
2415
2415
4
2415
2415
4
2415
2415
4
2415
2550
4
2415
1040
5
2415
1982
5
2415
2074
5
2415
2415
5
2415
2415
5
2415
2415
5
2415
</TEXT>
</DOC>
<DOC>
<DOCNO>2416</DOCNO>
<TEXT>
matrix
transposition
in
place
f1
algorithm
a467
cacm
november
1973
brenner
n
transposition
matrix
operations
permutations
primitive
roots
number
theory
3
15
5
14
5
39
ca731110jb
january
20
1978
9
58
am
2057
4
2416
2058
4
2416
2392
4
2416
2416
4
2416
2416
4
2416
1600
5
2416
2058
5
2416
2416
5
2416
2416
5
2416
2416
5
2416
</TEXT>
</DOC>
<DOC>
<DOCNO>2417</DOCNO>
<TEXT>
four
combinatorial
algorithms
g6
algorithm
a466
cacm
november
1973
ehrlich
g
permutations
and
combinations
5
39
ca731109
jb
january
20
1978
9
59
am
2044
4
2417
2189
4
2417
2417
4
2417
2505
4
2417
2874
4
2417
2908
4
2417
2417
5
2417
2417
5
2417
2417
5
2417
2834
5
2417
2884
5
2417
521
5
2417
3115
5
2417
907
6
2417
969
6
2417
2045
6
2417
2045
6
2417
2417
6
2417
2417
6
2417
2417
6
2417
2466
6
2417
2466
6
2417
2884
6
2417
579
6
2417
785
6
2417
</TEXT>
</DOC>
<DOC>
<DOCNO>2418</DOCNO>
<TEXT>
student
t
frequency
s14
algorithm
a465
cacm
november
1973
hill
g
w
student
t
statistic
density
function
series
approximation
5
12
5
5
ca731108
jb
january
20
1978
10
01
am
2418
5
2418
2418
5
2418
2418
5
2418
</TEXT>
</DOC>
<DOC>
<DOCNO>2419</DOCNO>
<TEXT>
eigenvalues
of
a
real
symmetric
tridiagonal
matrix
f2
algorithm
a464
cacm
november
1973
reinsch
c
h
eigenvalues
qr
algorithm
5
14
ca731107
jb
january
20
1978
10
03
am
2419
5
2419
2419
5
2419
2419
5
2419
2825
5
2419
2419
6
2419
</TEXT>
</DOC>
<DOC>
<DOCNO>2420</DOCNO>
<TEXT>
experiments
with
an
automatic
theorem
prover
havingpartial
ordering
inference
rules
automatic
theorem
provers
need
to
be
made
much
more
efficient
with
this
in
mind
slagle
has
shown
how
the
axioms
for
partial
ordering
can
be
replaced
by
built
in
inference
rules
when
using
a
particular
theorem
proving
algorithm
based
upon
hyper
resolution
and
paramodulation
the
new
rules
embody
the
transitivity
of
partial
orderings
and
the
close
relationship
between
predicates
a
program
has
been
developed
using
a
modified
version
of
these
rules
this
new
theorem
prover
has
been
found
to
be
very
powerful
for
solving
problems
involving
partial
orderings
this
paper
presents
a
detailed
description
of
the
program
and
a
comprehensive
account
of
the
experiments
that
have
been
performed
with
it
cacm
november
1973
slagle
j
r
norton
l
m
theorem
proving
partial
ordering
resolution
hyper
resolution
p1
resolution
paramodulation
inference
rules
heuristics
3
64
3
66
ca731106
jb
january
20
1978
10
10
am
2356
4
2420
2420
4
2420
2874
4
2420
3143
4
2420
2227
5
2420
2420
5
2420
2420
5
2420
2420
5
2420
</TEXT>
</DOC>
<DOC>
<DOCNO>2421</DOCNO>
<TEXT>
a
scan
conversion
algorithm
with
reduced
storage
requirements
most
graphics
systems
using
a
raster
scan
output
device
crt
or
hardcopy
maintain
a
display
file
in
the
xy
or
random
scan
format
scan
converters
hardware
or
software
must
be
provided
to
translate
the
picture
description
from
the
xy
format
to
the
raster
format
published
scan
conversion
algorithms
which
are
fast
will
reserve
a
buffer
area
large
enough
to
accommodate
the
entire
screen
on
the
other
hand
those
which
use
a
small
buffer
area
are
slow
because
they
require
multiple
passes
through
the
xy
display
file
the
scan
conversion
algorithm
described
here
uses
a
linked
list
data
structure
to
process
the
lines
of
the
drawing
in
strips
corresponding
to
groups
of
scan
lines
a
relatively
small
primary
memory
buffer
area
is
used
to
accumulate
the
binary
image
for
a
group
of
scan
lines
when
this
portion
of
the
drawing
has
been
plotted
the
buffer
is
reused
for
the
next
portion
because
of
the
list
processing
procedures
used
only
a
single
pass
through
the
xy
display
file
is
required
when
generating
the
binary
image
and
only
a
slight
increase
in
execution
time
over
the
fully
buffered
core
results
results
slow
that
storage
requirements
can
be
reduced
by
more
than
80
percent
while
causing
less
than
a
10
percent
increase
in
execution
time
cacm
november
1973
jordan
b
w
jr
barrett
r
c
graphics
scan
conversion
raster
plotter
line
drawing
discrete
image
dot
generation
4
41
6
35
8
2
ca731105
jb
january
20
1978
10
28
am
1891
4
2421
2211
4
2421
2421
4
2421
2421
4
2421
2674
4
2421
2687
4
2421
1741
5
2421
2211
5
2421
2421
5
2421
2421
5
2421
2421
5
2421
2674
5
2421
1741
6
2421
2004
6
2421
2421
6
2421
2687
6
2421
</TEXT>
</DOC>
<DOC>
<DOCNO>2422</DOCNO>
<TEXT>
adaptive
correction
of
program
statements
corrigendum
cacm
november
1973
james
e
b
partridge
d
p
ca731104
jb
january
20
1978
10
29
am
2422
5
2422
2422
5
2422
2422
5
2422
</TEXT>
</DOC>
<DOC>
<DOCNO>2423</DOCNO>
<TEXT>
a
parser
generating
system
for
constructing
compressed
compilers
this
paper
describes
a
parser
generating
system
pgs
currently
in
use
on
the
cdc
6500
computer
at
purdue
university
the
pgs
is
a
fortran
coded
compiler
in
the
input
translation
grammar
each
bnf
syntactic
rule
corresponds
to
a
possibly
empty
code
generator
realizable
as
an
assembly
language
fortran
or
algol
subroutine
that
is
called
whenever
that
syntactic
rule
is
applied
in
the
parse
of
a
program
typical
one
pass
compilers
constructed
by
the
pgs
translate
source
programs
at
speeds
approaching
14
000
cards
per
minute
for
an
xpl
compiler
the
parser
program
and
its
tables
currently
occupy
288
words
of
60
bit
core
memory
of
which
140
words
are
parsing
table
entries
and
82
words
are
links
to
code
generators
cacm
november
1973
mickunas
m
d
schneider
v
b
parser
generators
translator
writing
systems
syntactic
analysis
normal
form
grammars
pushdown
automata
translation
grammars
translator
optimization
compression
algorithm
4
12
5
22
5
23
ca731103
jb
january
20
197810
41
am
2179
4
2423
2423
4
2423
2423
4
2423
1337
5
2423
2015
5
2423
2423
5
2423
2423
5
2423
2423
5
2423
2733
5
2423
1781
6
2423
2179
6
2423
2423
6
2423
2786
6
2423
799
6
2423
</TEXT>
</DOC>
<DOC>
<DOCNO>2424</DOCNO>
<TEXT>
dynamic
verification
of
operating
system
decisions
dynamic
verification
of
a
decision
implies
that
every
time
the
decision
is
made
there
is
a
consistency
check
performed
on
the
decision
using
independent
hardware
and
software
the
dynamic
verification
of
operating
system
decisions
is
used
on
the
prime
system
being
designed
and
constructed
at
the
university
of
california
berkeley
prime
is
an
experimental
time
sharing
which
is
to
have
the
properties
of
continuous
availability
data
privacy
and
cost
effectiveness
the
technique
of
dynamic
verification
allows
the
construction
of
an
operating
system
which
does
not
make
certain
decisions
improperly
even
in
the
presence
of
a
single
hardware
or
software
fault
furthermore
multiple
faults
lead
to
unreliable
operation
only
if
the
faults
happen
to
reinforce
each
other
on
prime
dynamic
verification
is
used
to
ensure
that
one
user
information
cannot
become
available
to
another
user
gratuitously
even
in
the
presence
of
a
single
hardware
or
software
fault
the
amount
of
additional
hardware
and
software
required
for
dynamic
verification
can
be
modest
cacm
november
1973
fabry
r
s
operating
systems
data
security
fault
tolerance
software
reliability
data
privacy
program
verification
modular
computer
systems
4
32
ca731102
jb
january
20
1978
10
56
am
1828
4
2424
1854
4
2424
1877
4
2424
1960
4
2424
2150
4
2424
2317
4
2424
2319
4
2424
2377
4
2424
2342
4
2424
2376
4
2424
2379
4
2424
2424
4
2424
2482
4
2424
2618
4
2424
2632
4
2424
2704
4
2424
2723
4
2424
2738
4
2424
2740
4
2424
2741
4
2424
2867
4
2424
3184
4
2424
1749
5
2424
2424
5
2424
2424
5
2424
2424
5
2424
</TEXT>
</DOC>
<DOC>
<DOCNO>2425</DOCNO>
<TEXT>
the
programmer
as
navigator
cacm
november
1973
bachman
c
w
ca731101
jb
january
20
1978
10
59
am
2425
4
2425
2313
5
2425
2425
5
2425
2425
5
2425
2425
5
2425
</TEXT>
</DOC>
<DOC>
<DOCNO>2426</DOCNO>
<TEXT>
algorithms
scale1
scale2
and
scale3
for
determination
of
scales
on
computer
generated
plots
j6
algorithm
a463
cacm
october
1973
lewart
c
r
plotting
scaling
for
plotting
4
41
ca731014
jb
january
20
1978
11
01
am
2426
5
2426
2426
5
2426
2426
5
2426
</TEXT>
</DOC>
<DOC>
<DOCNO>2427</DOCNO>
<TEXT>
bivariate
normal
distribution
s15
algorithm
a462
cacm
october
1973
donnelly
t
g
bivariate
normal
gaussian
frequency
distribution
5
5
ca731013
jb
january
20
1978
11
03
am
1987
4
2427
2427
4
2427
2427
4
2427
1581
5
2427
1636
5
2427
2427
5
2427
2427
5
2427
2427
5
2427
</TEXT>
</DOC>
<DOC>
<DOCNO>2428</DOCNO>
<TEXT>
cubic
spline
solutions
to
a
class
of
functional
differential
equations
d2
algorithm
a461
cacm
october
1973
burkowski
f
j
hoskins
w
d
differential
equation
spline
approximation
5
17
ca731012
jb
january
20
1978
11
06
am
2428
5
2428
2428
5
2428
2428
5
2428
</TEXT>
</DOC>
<DOC>
<DOCNO>2429</DOCNO>
<TEXT>
calculation
of
optimum
parameters
for
alternating
direction
implicit
procedures
d3
algorithm
a460
cacm
october
1973
saylor
p
e
sebastian
j
d
elliptic
difference
equations
peaceman
rachford
douglas
rachford
w
b
jordan
optimum
parameters
alternating
direction
implicit
adi
5
14
5
17
ca731011
jb
january
20
1978
11
09
am
2429
5
2429
2429
5
2429
2429
5
2429
</TEXT>
</DOC>
<DOC>
<DOCNO>2430</DOCNO>
<TEXT>
the
elementary
circuits
of
a
graph
h
algorithm
a459
cacm
october
1973
syslo
m
m
algorithm
graph
theory
circuit
search
algorithm
path
search
algorithm
searching
3
74
4
22
5
32
ca731010
jb
january
20
1978
11
11
am
2430
4
2430
1961
5
2430
2430
5
2430
2430
5
2430
2430
5
2430
</TEXT>
</DOC>
<DOC>
<DOCNO>2431</DOCNO>
<TEXT>
discrete
linear
l1
approximation
by
interval
linear
programming
e2
algorithm
a458
cacm
october
1973
robers
p
d
robers
s
s
discrete
approximation
l1
approximation
5
13
5
41
ca731009
jb
january
20
1978
11
13
am
2431
5
2431
2431
5
2431
2431
5
2431
</TEXT>
</DOC>
<DOC>
<DOCNO>2432</DOCNO>
<TEXT>
addendum
to
a
multiple
precision
division
algorithm
cacm
october
1973
mifsud
c
j
bohlen
m
j
multiple
precision
division
overflow
3
15
4
0
5
1
ca731008
jb
january
20
1978
11
15
am
2432
4
2432
1975
5
2432
2432
5
2432
2432
5
2432
2432
5
2432
</TEXT>
</DOC>
<DOC>
<DOCNO>2433</DOCNO>
<TEXT>
control
structures
in
illiac
iv
fortran
as
part
of
an
effort
to
design
and
implement
a
fortran
compiler
on
the
illiac
iv
an
extended
fortran
called
ivtran
has
been
developed
this
language
provides
a
means
of
expressing
data
and
control
structures
suitable
for
exploiting
illiac
iv
parallelism
this
paper
reviews
the
hardware
characteristics
of
the
illiac
and
singles
out
unconventional
features
which
could
be
expected
to
influence
language
and
compiler
design
the
implications
of
these
features
for
data
layout
and
algorithm
structure
are
discussed
and
the
conclusion
is
drawn
that
data
allocation
rather
than
code
structuring
is
the
crucial
illiac
optimization
problem
a
satisfactory
method
of
data
allocation
is
then
presented
language
structures
to
utilize
this
storage
method
and
express
parallel
algorithms
are
described
cacm
october
1973
millstein
r
e
array
processing
parallelism
detection
explicit
parallelism
array
allocation
parallel
control
structures
illiac
iv
fortran
4
12
4
21
4
22
ca731007
jb
january
20
1978
11
30
am
2433
5
2433
2433
5
2433
2433
5
2433
2785
5
2433
2433
6
2433
2685
6
2433
</TEXT>
</DOC>
<DOC>
<DOCNO>2434</DOCNO>
<TEXT>
using
page
residency
to
select
the
working
set
parameter
denning
method
for
selecting
the
working
set
parameter
which
uses
interreference
intervals
is
examined
several
omissions
in
his
model
are
noted
and
new
assumptions
are
introduced
to
overcome
these
omissions
using
this
modified
model
dening
results
on
page
residency
are
rederived
and
reconsidered
for
selecting
the
working
set
parameter
cacm
october
1973
prieve
b
g
working
set
model
paging
program
behavior
program
modeling
4
3
ca731006
jb
january
20
1978
11
34
am
1892
4
2434
1901
4
2434
2085
4
2434
2095
4
2434
2218
4
2434
2277
4
2434
2319
4
2434
2329
4
2434
2358
4
2434
2373
4
2434
2380
4
2434
2434
4
2434
2499
4
2434
2501
4
2434
2582
4
2434
2669
4
2434
2828
4
2434
2863
4
2434
2881
4
2434
2928
4
2434
2996
4
2434
3006
4
2434
3067
4
2434
1751
5
2434
2434
5
2434
2434
5
2434
2434
5
2434
</TEXT>
</DOC>
<DOC>
<DOCNO>2435</DOCNO>
<TEXT>
a
class
of
dynamic
memory
allocation
algorithms
anew
dynamic
memory
allocation
algorithm
the
fibonacci
system
is
introduced
this
algorithm
is
similar
to
but
seems
to
have
certain
advantages
over
the
buddy
system
a
generalization
is
mentioned
which
includes
both
of
these
systems
as
special
cases
cacm
october
1973
hirschberg
d
s
dynamic
storage
allocation
buddy
system
simulation
fibonacci
fragmentation
3
89
4
32
4
39
ca731005
jb
january
20
1978
11
38
am
1389
4
2435
1552
4
2435
2162
4
2435
2435
4
2435
2596
4
2435
2768
4
2435
2845
4
2435
2902
4
2435
2955
4
2435
1184
5
2435
2435
5
2435
2435
5
2435
2435
5
2435
2596
5
2435
2747
5
2435
2768
5
2435
2845
5
2435
2902
5
2435
2911
5
2435
2955
5
2435
1051
6
2435
1062
6
2435
1184
6
2435
1184
6
2435
1184
6
2435
1184
6
2435
1184
6
2435
1211
6
2435
1552
6
2435
1879
6
2435
1879
6
2435
1879
6
2435
273
6
2435
2435
6
2435
2435
6
2435
2435
6
2435
2435
6
2435
2435
6
2435
2435
6
2435
2435
6
2435
2498
6
2435
2596
6
2435
2596
6
2435
2598
6
2435
2734
6
2435
2734
6
2435
2736
6
2435
2747
6
2435
2747
6
2435
2747
6
2435
2768
6
2435
2768
6
2435
2773
6
2435
2773
6
2435
2983
6
2435
</TEXT>
</DOC>
<DOC>
<DOCNO>2436</DOCNO>
<TEXT>
a
note
on
the
confinement
problem
this
note
explores
the
problem
of
confining
a
program
during
its
execution
so
that
it
cannot
transmit
information
to
any
other
program
except
its
caller
a
set
of
examples
attempts
to
stake
out
the
boundaries
of
the
problem
necessary
conditions
for
a
solution
are
stated
and
informally
justified
cacm
october
1973
lampson
b
w
protection
confinement
proprietary
program
privacy
security
leakage
of
data
2
11
4
30
ca731004
jb
january
20
1978
11
41
am
2436
4
2436
2626
4
2436
2868
4
2436
2870
4
2436
2377
5
2436
2436
5
2436
2436
5
2436
2436
5
2436
2840
5
2436
2869
5
2436
3128
5
2436
3158
5
2436
1471
6
2436
1746
6
2436
2150
6
2436
2356
6
2436
2376
6
2436
2436
6
2436
2436
6
2436
2436
6
2436
2436
6
2436
2597
6
2436
2626
6
2436
2629
6
2436
2865
6
2436
2866
6
2436
2870
6
2436
2912
6
2436
3038
6
2436
3082
6
2436
3111
6
2436
</TEXT>
</DOC>
<DOC>
<DOCNO>2437</DOCNO>
<TEXT>
general
performance
analysis
of
key
to
address
transformation
methods
using
an
abstract
file
concept
this
paper
presents
a
new
approach
to
the
analysis
of
performance
of
the
various
key
to
address
transformation
methods
in
this
approach
the
keys
in
a
file
are
assumed
to
have
been
selected
from
the
key
space
according
to
a
certain
probabilistic
selection
algorithm
all
files
with
the
same
number
of
keys
selected
from
this
key
space
will
be
suitably
weighted
in
accordance
with
the
algorithm
and
the
average
performance
of
the
transformation
methods
on
these
files
will
be
used
as
the
potential
of
these
methods
using
this
analysis
methods
with
the
same
overall
performance
can
be
classified
and
key
distributions
partial
to
certain
transformations
can
be
identified
all
this
can
be
done
analytically
the
approach
is
applied
to
a
group
of
transformation
methods
using
files
whose
keys
are
selected
randomly
cacm
october
1973
lum
v
y
hashing
hashing
techniques
hashing
methods
hash
coding
key
transformation
key
to
address
transformation
direct
addressing
randomizing
random
access
scatter
storage
information
retrieval
hashing
analysis
randomization
performance
analysis
3
7
3
72
3
73
3
74
3
79
4
9
5
9
ca731003
jb
january
20
1978
11
51
am
2258
4
2437
2319
4
2437
2313
4
2437
2359
4
2437
2437
4
2437
2552
4
2437
2781
4
2437
2860
4
2437
2991
4
2437
2203
5
2437
2437
5
2437
2437
5
2437
2437
5
2437
</TEXT>
</DOC>
<DOC>
<DOCNO>2438</DOCNO>
<TEXT>
a
model
and
stack
implementation
of
multiple
environments
many
control
and
access
environment
structures
require
that
storage
for
a
procedure
activation
exist
at
times
when
control
is
not
nested
within
the
procedure
activated
this
is
straightforward
to
implement
by
dynamic
storage
allocation
with
linked
blocks
for
each
activation
but
rather
expensive
in
both
time
and
space
this
paper
presents
an
implementation
technique
using
a
single
stack
to
hold
procedure
activation
storage
which
allows
retention
of
that
storage
for
durations
not
necessarily
tied
to
control
flow
the
technique
has
the
property
that
in
the
simple
case
it
runs
identically
to
the
usual
automatic
stack
allocation
and
deallocation
procedure
applications
of
this
technique
to
multitasking
coroutines
backtracking
label
valued
variables
and
functional
arguments
are
discussed
in
the
initial
model
a
single
real
processor
is
assumed
and
the
implementation
assumes
multiple
processes
coordinate
by
passing
control
explicitly
to
one
another
a
multiprocessor
implementation
requires
only
a
few
changes
to
the
basic
technique
as
described
cacm
october
1973
bobrow
d
g
wegbreit
b
control
structures
environments
stack
allocation
dendrarchy
retention
dynamic
storage
allocation
access
environments
funarg
problem
multitasking
coroutines
backtracking
label
valued
variables
functional
arguments
multiprocessor
systems
extensible
control
structures
4
1
4
2
4
22
4
3
4
32
5
24
ca731002
jb
january
23
1978
8
27
am
1972
4
2438
2156
4
2438
2168
4
2438
2438
4
2438
2438
4
2438
2723
4
2438
2736
4
2438
2833
4
2438
2855
4
2438
3074
4
2438
3112
4
2438
1826
5
2438
2314
5
2438
2438
5
2438
2438
5
2438
2438
5
2438
2625
5
2438
2922
5
2438
3081
5
2438
3101
5
2438
3112
5
2438
106
6
2438
1380
6
2438
1471
6
2438
1753
6
2438
1826
6
2438
1972
6
2438
2138
6
2438
2193
6
2438
2358
6
2438
2438
6
2438
2438
6
2438
2438
6
2438
2438
6
2438
2438
6
2438
2723
6
2438
2736
6
2438
2833
6
2438
2838
6
2438
3185
6
2438
731
6
2438
</TEXT>
</DOC>
<DOC>
<DOCNO>2439</DOCNO>
<TEXT>
multiple
terminals
under
user
program
control
in
a
time
sharing
environment
user
written
programs
on
the
dartmouth
time
sharing
system
can
communicate
with
many
remote
terminals
simultaneously
and
can
control
the
interactions
between
these
terminals
such
programs
can
be
written
using
standard
input
and
output
instructions
in
any
language
available
on
the
system
this
paper
describes
how
this
multiple
terminal
facility
was
implemented
without
requiring
any
changes
in
the
system
executive
or
in
any
of
the
system
compilers
or
interpreters
cacm
october
1973
mcgeachie
j
s
dtss
multiple
terminals
remote
terminals
remote
consoles
time
sharing
on
line
interaction
on
line
games
3
81
4
32
ca731001
jb
january
23
1978
8
33
am
2439
5
2439
2439
5
2439
2439
5
2439
</TEXT>
</DOC>
<DOC>
<DOCNO>2440</DOCNO>
<TEXT>
localization
of
the
roots
of
a
polynomial
algorithm
r429
cacm
september
1973
driessen
h
b
hunt
e
w
lem
ca730915
jb
january
23
1978
8
34
am
2440
5
2440
2440
5
2440
2440
5
2440
</TEXT>
</DOC>
<DOC>
<DOCNO>2441</DOCNO>
<TEXT>
hidden
line
plotting
program
algorithm
r420
cacm
september
1973
williamson
h
ca730914
jb
january
23
1978
8
36
am
2441
5
2441
2441
5
2441
2441
5
2441
</TEXT>
</DOC>
<DOC>
<DOCNO>2442</DOCNO>
<TEXT>
a
sparse
matrix
package
algorithm
r408
cacm
september
1973
lawrence
e
e
ca730913
jb
january
23
1978
8
37
am
2442
5
2442
2442
5
2442
2442
5
2442
</TEXT>
</DOC>
<DOC>
<DOCNO>2443</DOCNO>
<TEXT>
generation
of
permutations
in
lexicographic
order
algorithm
r323
cacm
september
1973
roy
m
k
ca730912
jb
january
23
1978
8
39
am
2443
4
2443
2443
5
2443
2443
5
2443
2443
5
2443
747
5
2443
</TEXT>
</DOC>
<DOC>
<DOCNO>2444</DOCNO>
<TEXT>
finding
all
cliques
of
an
undirected
graph
algorithm
a457
cacm
september
1973
bron
c
kerbosch
j
cliques
maximal
complete
subgraphs
clusters
backtracking
algorithm
branch
and
bound
technique
recursion
3
71
5
32
ca730911
jb
january
23
1978
8
44
am
2444
5
2444
2444
5
2444
2444
5
2444
</TEXT>
</DOC>
<DOC>
<DOCNO>2445</DOCNO>
<TEXT>
routing
problem
algorithm
a456
cacm
september
1973
fencl
z
routing
problem
shortest
path
traveling
salesman
problem
hamiltonian
circuit
5
40
ca730910
jb
january
23
1978
8
47
am
2445
5
2445
2445
5
2445
2445
5
2445
</TEXT>
</DOC>
<DOC>
<DOCNO>2446</DOCNO>
<TEXT>
analysis
of
skew
representations
of
the
symmetric
group
algorithm
a455
cacm
september
1973
hunter
d
b
williams
j
m
symmetric
group
skew
representation
partition
young
diagram
lattice
permutation
binary
model
outer
product
5
30
ca730909
jb
january
23
1978
8
49
am
2446
5
2446
2446
5
2446
2446
5
2446
</TEXT>
</DOC>
<DOC>
<DOCNO>2447</DOCNO>
<TEXT>
sard
kernels
for
certain
bivariate
cubatures
an
error
analysis
for
some
bivariate
cubatures
is
given
the
remainders
are
obtained
by
the
use
of
sard
kernels
numerical
results
and
computer
graphs
are
given
for
some
of
the
kernel
functions
cacm
september
1973
barnhill
r
e
pilcher
d
t
cubatures
sard
kernels
numerical
integration
remainder
formulas
5
13
5
16
ca730908
jb
january
23
1978
8
52
am
2447
5
2447
2447
5
2447
2447
5
2447
</TEXT>
</DOC>
<DOC>
<DOCNO>2448</DOCNO>
<TEXT>
reversible
execution
cacm
september
1973
zelkowitz
m
v
debugging
pl
i
reversible
execution
backtracking
4
22
4
42
ca730907
jb
january
23
1978
8
54
am
2448
5
2448
2448
5
2448
2448
5
2448
</TEXT>
</DOC>
<DOC>
<DOCNO>2449</DOCNO>
<TEXT>
a
simple
technique
for
structured
variable
lookup
a
simple
technique
for
the
symbol
table
lookup
of
structured
variables
based
on
simple
automata
theory
is
presented
the
technique
offers
a
deterministic
solution
to
a
problem
which
is
currently
handled
in
a
nondeterministic
manner
in
pl
i
and
cobol
compilers
cacm
september
1973
gates
g
w
poplawski
d
a
symbol
table
organization
pl
i
and
cobol
structured
variables
4
12
ca730906
jb
january
23
1978
9
17
am
2449
5
2449
2449
5
2449
2449
5
2449
2659
5
2449
2449
6
2449
</TEXT>
</DOC>
<DOC>
<DOCNO>2450</DOCNO>
<TEXT>
empirical
working
set
behavior
the
working
set
model
for
program
behavior
has
been
proposed
in
recent
years
as
a
basis
for
the
design
of
scheduling
and
paging
algorithms
although
the
words
working
set
are
now
commonly
encountered
in
the
literature
dealing
with
resource
allocation
there
is
a
dearth
of
published
data
on
program
measurements
in
the
hope
that
workers
in
the
field
might
find
experimental
evidence
upon
which
to
substantiate
and
base
theoretical
work
cacm
september
1973
rodriguez
rosell
j
virtual
memory
paging
working
set
software
measurement
program
behavior
4
3
ca730905
jb
january
23
1978
9
22
am
2373
4
2450
2374
4
2450
2380
4
2450
2450
4
2450
2450
4
2450
2595
4
2450
2996
4
2450
3006
4
2450
3006
4
2450
3067
4
2450
3067
4
2450
2373
5
2450
2374
5
2450
2450
5
2450
2450
5
2450
2450
5
2450
</TEXT>
</DOC>
<DOC>
<DOCNO>2451</DOCNO>
<TEXT>
design
of
tree
structures
for
efficient
querying
a
standard
information
retrieval
operation
is
to
determine
which
records
in
a
data
collection
satisfy
a
given
query
expressed
in
terms
of
data
values
the
process
of
locating
the
desired
responses
can
be
represented
by
a
tree
search
model
this
paper
poses
an
optimization
problem
in
the
design
of
such
trees
to
serve
a
well
specified
application
the
problem
is
academic
in
the
sense
that
ordinarily
the
optimal
tree
cannot
be
implemented
by
means
of
practical
techniques
on
the
other
hand
it
is
potentially
useful
for
the
comparison
it
affords
between
observed
performance
and
that
of
an
intuitively
attractive
ideal
search
procedure
as
a
practical
application
of
such
a
model
this
paper
considers
the
design
of
a
novel
tree
search
scheme
based
on
a
bit
vector
representation
of
data
and
shows
that
essentially
the
same
algorithm
can
be
used
to
design
either
an
ideal
search
tree
or
a
bit
vector
tree
an
experimental
study
of
a
small
formatted
file
illustrates
the
concepts
cacm
september
1973
casey
r
g
tree
file
information
storage
and
retrieval
clustering
search
data
structure
data
management
query
answering
3
62
3
74
ca730904
jb
january
23
1978
9
38
am
1050
4
2451
1234
4
2451
1935
4
2451
1936
4
2451
2017
4
2451
2032
4
2451
2257
4
2451
2257
4
2451
2360
4
2451
2360
4
2451
2451
4
2451
2451
4
2451
2451
4
2451
2451
4
2451
2452
4
2451
2452
4
2451
2556
4
2451
2556
4
2451
2765
4
2451
2978
4
2451
944
5
2451
1935
5
2451
1936
5
2451
2451
5
2451
2451
5
2451
2451
5
2451
2765
5
2451
2965
5
2451
849
5
2451
1936
6
2451
1976
6
2451
2046
6
2451
2046
6
2451
2451
6
2451
2451
6
2451
2452
6
2451
616
6
2451
</TEXT>
</DOC>
<DOC>
<DOCNO>2452</DOCNO>
<TEXT>
evaluation
and
selection
of
file
organization
a
model
and
system
this
work
first
discusses
the
factors
that
affect
file
data
base
organization
performance
an
elusive
subject
and
then
presents
a
methodology
a
model
and
a
programmed
system
to
estimate
primarily
total
storage
costs
and
average
access
time
of
several
file
organizations
given
a
specific
data
base
query
characterization
and
device
related
specifications
based
on
these
estimates
an
appropriate
file
structure
may
be
selected
for
the
specific
situation
the
system
is
a
convenient
tool
to
study
file
structures
and
to
facilitate
as
much
as
possible
the
process
of
data
base
structure
design
and
evaluation
cacm
september
1973
cardenas
a
f
file
organization
file
structures
file
management
file
organization
performance
file
organization
model
file
structure
design
secondary
index
organization
simulation
data
base
access
time
storage
requirement
data
base
analysis
data
management
3
70
3
71
3
72
3
74
3
79
4
0
ca730903
jb
january
23
1978
9
46
am
1050
4
2452
1935
4
2452
1936
4
2452
2017
4
2452
2032
4
2452
2140
4
2452
2257
4
2452
2257
4
2452
2360
4
2452
2360
4
2452
2451
4
2452
2451
4
2452
2452
4
2452
2452
4
2452
2452
4
2452
2452
4
2452
2556
4
2452
2765
4
2452
2765
4
2452
2882
4
2452
2901
4
2452
3134
4
2452
1936
5
2452
1976
5
2452
2198
5
2452
2452
5
2452
2452
5
2452
2452
5
2452
2765
5
2452
2882
5
2452
849
5
2452
1936
6
2452
1976
6
2452
2046
6
2452
2198
6
2452
2451
6
2452
2452
6
2452
2452
6
2452
616
6
2452
627
6
2452
</TEXT>
</DOC>
<DOC>
<DOCNO>2453</DOCNO>
<TEXT>
information
theory
applied
to
the
conversion
of
decision
tables
to
computer
programs
using
ideas
from
information
theory
this
paper
develops
a
heuristic
algorithm
that
converts
a
limited
entry
decision
table
to
a
tree
structured
computer
program
with
near
minimum
average
processing
time
the
method
is
applicable
to
any
limited
entry
decision
table
and
does
not
require
that
actions
have
single
rules
or
that
the
cost
of
testing
conditions
be
equal
it
is
thus
more
general
than
the
previously
published
heuristic
algorithms
compared
to
the
optimal
algorithm
of
reinwald
and
soland
this
algorithm
is
easy
to
code
and
takes
a
much
smaller
translation
time
it
is
thus
felt
that
it
is
more
useful
in
practice
the
algorithm
is
well
suited
for
manual
conversion
of
decision
tables
to
flowcharts
cacm
september
1973
ganapathy
s
rajaraman
v
decision
tables
optimum
computer
programs
information
measure
3
50
4
12
5
6
ca730902
jb
january
23
1978
10
01
am
1237
4
2453
1354
4
2453
1549
4
2453
1564
4
2453
1684
4
2453
2053
4
2453
2053
4
2453
2220
4
2453
2220
4
2453
2221
4
2453
2273
4
2453
2273
4
2453
2273
4
2453
2273
4
2453
2453
4
2453
2453
4
2453
2453
4
2453
2453
4
2453
2453
4
2453
2517
4
2453
2598
4
2453
2598
4
2453
2726
4
2453
2726
4
2453
2726
4
2453
2856
4
2453
2856
4
2453
2856
4
2453
2856
4
2453
3034
4
2453
3113
4
2453
1172
5
2453
1354
5
2453
2053
5
2453
2220
5
2453
2453
5
2453
2453
5
2453
2453
5
2453
2598
5
2453
2856
5
2453
753
5
2453
1172
6
2453
1172
6
2453
1327
6
2453
1354
6
2453
1548
6
2453
2053
6
2453
2220
6
2453
2220
6
2453
2263
6
2453
2453
6
2453
2453
6
2453
2598
6
2453
2691
6
2453
</TEXT>
</DOC>
<DOC>
<DOCNO>2454</DOCNO>
<TEXT>
computational
algorithms
for
closed
queueing
networks
with
exponential
servers
methods
are
presented
for
computing
the
equilibrium
distribution
of
customers
in
closed
queueing
networks
with
exponential
servers
expressions
for
various
marginal
distributions
are
also
derived
the
computational
algorithms
are
based
on
two
dimensional
iterative
techniques
which
are
highly
efficient
and
quite
simple
to
implement
implementation
considerations
such
as
storage
allocation
strategies
and
order
of
evaluation
are
examined
in
some
detail
cacm
september
1973
buzen
j
p
queueing
theory
queueing
networks
equilibrium
distributions
steady
state
distributions
5
12
5
5
8
1
8
3
ca730901
jb
january
23
1978
10
07
am
2454
5
2454
2454
5
2454
2454
5
2454
2712
5
2454
2741
5
2454
3070
5
2454
1526
6
2454
1749
6
2454
1805
6
2454
2454
6
2454
2454
6
2454
2454
6
2454
2741
6
2454
2988
6
2454
</TEXT>
</DOC>
<DOC>
<DOCNO>2455</DOCNO>
<TEXT>
a
generalization
of
avl
trees
a
generalization
of
avl
trees
is
proposed
in
which
imbalances
up
to
triangle
shape
is
a
small
integer
an
experiment
is
performed
to
compare
these
trees
with
standard
avl
trees
and
with
balanced
trees
on
the
basis
of
mean
retrieval
time
of
amount
of
restructuring
expected
and
on
the
worst
case
of
retrieval
time
it
is
shown
that
by
permitting
imbalances
of
up
to
five
units
the
retrieval
time
is
increased
a
small
amount
while
the
amount
of
restructuring
required
is
decreased
by
a
factor
of
ten
a
few
theoretical
results
are
derived
including
the
correction
of
an
earlier
paper
and
are
duly
compared
with
the
experimental
data
reasonably
good
correspondence
is
found
cacm
august
1973
foster
c
c
avl
trees
balanced
trees
information
storage
and
retrieval
3
7
3
72
4
49
5
31
ca730819
jb
january
23
1978
10
13
am
2455
4
2455
2455
4
2455
2493
4
2455
2889
4
2455
2968
4
2455
2278
5
2455
2388
5
2455
2455
5
2455
2455
5
2455
2455
5
2455
2889
5
2455
2968
5
2455
3042
5
2455
2138
6
2455
2388
6
2455
2388
6
2455
2455
6
2455
2455
6
2455
2455
6
2455
2839
6
2455
2889
6
2455
2968
6
2455
</TEXT>
</DOC>
<DOC>
<DOCNO>2456</DOCNO>
<TEXT>
on
the
capabilities
of
while
repeat
and
exit
statements
a
well
formed
program
is
defined
as
a
program
in
which
loops
and
if
statements
are
properly
nested
and
can
be
entered
only
at
their
beginning
a
corresponding
definition
is
given
for
a
well
formed
flowchart
it
is
shown
that
a
program
is
well
formed
if
and
only
if
it
can
be
written
with
if
repeat
and
multi
level
exit
statements
for
sequence
control
it
is
also
shown
that
if
while
and
repeat
statements
with
single
level
exit
do
not
suffice
it
is
also
shown
that
any
flowcharts
can
be
converted
to
a
well
formed
flowchart
by
node
splitting
practical
implications
are
discussed
cacm
august
1973
peterson
w
w
kasami
t
tokura
n
well
formed
program
while
statement
repeat
statement
exit
statement
go
to
statement
flowchart
node
splitting
software
reliability
4
39
4
49
5
29
ca730818
jb
january
23
1978
10
20
am
2456
5
2456
2456
5
2456
2456
5
2456
2709
5
2456
3004
5
2456
3121
5
2456
1312
6
2456
1425
6
2456
1425
6
2456
308
6
2456
309
6
2456
2138
6
2456
2204
6
2456
2247
6
2456
2356
6
2456
2456
6
2456
2456
6
2456
2456
6
2456
2477
6
2456
2709
6
2456
3186
6
2456
</TEXT>
</DOC>
<DOC>
<DOCNO>2457</DOCNO>
<TEXT>
inductive
methodsfor
proving
properties
of
programs
there
are
two
main
purposes
in
this
paper
first
clarification
and
extension
of
known
results
about
computation
of
recursive
programs
with
emphasis
on
the
difference
between
the
theoretical
and
practical
approaches
second
presentation
and
examination
of
various
known
methods
for
proving
properties
of
recursive
programs
discussed
in
detail
are
two
powerful
inductive
methods
computational
induction
and
structural
induction
including
examples
of
their
applications
cacm
august
1973
manna
z
nes
s
vuillemin
j
recursive
programs
least
fixed
point
computational
induction
structural
induction
4
2
5
23
5
24
ca730817
jb
january
23
1978
10
24
am
2326
4
2457
2411
4
2457
2457
4
2457
2457
4
2457
2842
4
2457
2903
4
2457
2192
5
2457
2326
5
2457
2457
5
2457
2457
5
2457
2457
5
2457
2981
5
2457
3030
5
2457
3077
5
2457
3104
5
2457
210
6
2457
1834
6
2457
2060
6
2457
2247
6
2457
2356
6
2457
2457
6
2457
2457
6
2457
2457
6
2457
2457
6
2457
2651
6
2457
2683
6
2457
2958
6
2457
2972
6
2457
</TEXT>
</DOC>
<DOC>
<DOCNO>2458</DOCNO>
<TEXT>
localization
of
the
roots
of
a
polynomial
algorithm
r429
cacm
august
1973
williams
e
j
ca730816
jb
january
23
1978
10
26
am
2458
5
2458
2458
5
2458
2458
5
2458
</TEXT>
</DOC>
<DOC>
<DOCNO>2459</DOCNO>
<TEXT>
hu
tucker
minimum
redundancy
alphabetic
coding
method
algorithm
r428
cacm
august
1973
byrne
j
g
ca730815
jb
january
23
1978
10
27
am
2346
4
2459
2459
4
2459
1114
5
2459
2459
5
2459
2459
5
2459
2459
5
2459
</TEXT>
</DOC>
<DOC>
<DOCNO>2460</DOCNO>
<TEXT>
clenshaw
curtis
quadrature
algorithm
r424
cacm
august
1973
good
a
j
ca730814
jb
january
23
1978
10
29
am
2460
5
2460
2460
5
2460
2460
5
2460
</TEXT>
</DOC>
<DOC>
<DOCNO>2461</DOCNO>
<TEXT>
graph
plotter
algorithm
r412
cacm
august
1973
watkins
r
p
ca730813
jb
january
23
1978
10
30
am
2461
5
2461
2461
5
2461
2461
5
2461
</TEXT>
</DOC>
<DOC>
<DOCNO>2462</DOCNO>
<TEXT>
an
efficient
prime
number
generator
algorithm
r357
cacm
august
1973
demorgan
r
m
ca730812
jb
january
23
1978
10
31
am
2462
5
2462
2462
5
2462
2462
5
2462
</TEXT>
</DOC>
<DOC>
<DOCNO>2463</DOCNO>
<TEXT>
complex
gamma
function
algorithm
r404
c404
cacm
august
1973
andrejkova
g
vinar
j
ca730811
jb
january
23
1978
10
33
am
2463
5
2463
2463
5
2463
2463
5
2463
</TEXT>
</DOC>
<DOC>
<DOCNO>2464</DOCNO>
<TEXT>
the
complex
method
for
constrained
optimization
e4
algorithm
a454
cacm
august
1973
richardson
j
a
kuester
j
l
optimization
constrained
optimization
box
algorithm
5
41
ca730810
jb
january
23
1978
10
34
am
2464
5
2464
2464
5
2464
2464
5
2464
</TEXT>
</DOC>
<DOC>
<DOCNO>2465</DOCNO>
<TEXT>
gaussian
quadrature
formulas
for
bromwich
integral
d1
algorithm
a453
cacm
august
1973
piessens
r
gaussian
quadrature
bromwich
integral
complex
integration
numerical
inversion
of
the
laplace
transform
5
16
5
13
ca730809
jb
january
23
1978
10
37
am
2465
5
2465
2465
5
2465
2465
5
2465
</TEXT>
</DOC>
<DOC>
<DOCNO>2466</DOCNO>
<TEXT>
enumerating
combinations
of
m
out
of
n
objects
g6
algorithm
a452
cacm
august
1973
liu
c
n
tang
d
t
permutations
combination
5
30
ca730808
jb
january
23
1978
10
39
am
2466
4
2466
2834
4
2466
3115
4
2466
2045
5
2466
2466
5
2466
2466
5
2466
2466
5
2466
2834
5
2466
3115
5
2466
907
6
2466
969
6
2466
2045
6
2466
2045
6
2466
2417
6
2466
2417
6
2466
2466
6
2466
2466
6
2466
2884
6
2466
579
6
2466
785
6
2466
</TEXT>
</DOC>
<DOC>
<DOCNO>2467</DOCNO>
<TEXT>
chi
square
quantiles
g1
algorithm
a451
cacm
august
1973
goldstein
r
b
chi
square
asymptotic
approximation
normal
deviate
chi
square
deviate
degrees
of
freedom
5
12
5
5
ca730807
jb
january
23
1978
10
41
am
2467
4
2467
2793
4
2467
1606
5
2467
2467
5
2467
2467
5
2467
2467
5
2467
</TEXT>
</DOC>
<DOC>
<DOCNO>2468</DOCNO>
<TEXT>
rosenbrock
function
minimization
e4
algorithm
a450
cacm
august
1973
machura
m
mulawa
a
function
minimization
rosenbrock
method
5
19
ca730806
jb
january
23
1978
10
43
am
2468
5
2468
2468
5
2468
2468
5
2468
</TEXT>
</DOC>
<DOC>
<DOCNO>2469</DOCNO>
<TEXT>
petri
nets
and
speed
independent
design
petri
nets
are
investigated
as
one
method
of
modeling
speed
independent
asynchronous
circuits
a
study
of
circuit
realizations
of
petri
nets
leads
to
a
demonstration
of
their
usefulness
in
modeling
speed
independent
operation
this
usefulness
is
emphasized
by
the
design
of
a
speed
independent
processor
from
modules
developed
in
the
investigation
of
petri
net
implementation
cacm
august
1973
misunas
d
speed
independent
asynchronous
petri
net
6
1
6
33
ca730805
jb
january
23
1978
10
46
am
2469
5
2469
2469
5
2469
2469
5
2469
</TEXT>
</DOC>
<DOC>
<DOCNO>2470</DOCNO>
<TEXT>
fen
an
axiomatic
basis
for
program
semantics
a
formal
system
is
presented
which
abstracts
the
notions
of
data
item
function
and
relation
it
is
argued
that
the
system
is
more
suitable
than
set
theory
or
its
derivatives
for
the
concise
and
accurate
description
of
program
semantics
it
is
shown
how
the
system
can
be
used
to
build
composite
data
types
out
of
simper
ones
with
the
operations
of
rowing
structuring
and
uniting
it
is
also
demonstrated
that
completely
new
primitive
types
can
be
introduced
into
languages
through
the
mechanism
of
singleton
data
types
both
deterministic
and
nondeterministic
functions
are
shown
to
be
definable
in
the
system
it
is
described
how
the
local
environment
can
be
modeled
as
a
data
item
and
how
imperative
statements
can
be
considered
functions
on
the
environment
the
nature
of
recursive
functions
is
briefly
discussed
and
a
technique
is
presented
by
which
they
can
be
introduced
into
the
system
the
technique
is
contrasted
with
the
use
of
the
paradoxical
combinator
y
the
questions
of
local
and
global
environments
and
of
various
modes
of
function
calling
and
parameter
passing
are
touched
upon
the
theory
is
applied
to
the
proof
of
several
elementary
theorems
concerning
the
semantics
of
the
assignment
conditional
and
iterative
statements
an
appendix
is
included
which
presents
in
detail
the
formal
system
governing
webs
and
fen
the
abstractions
used
informally
in
the
body
of
the
paper
cacm
august
1973
maclennan
b
j
semantics
formal
systems
lambda
calculus
extensible
languages
data
types
modes
axioms
correctness
formal
language
definition
formal
description
data
structures
description
languages
models
of
computation
4
22
5
21
5
24
5
26
ca730804
jb
january
23
1978
11
01
am
1469
4
2470
1486
4
2470
1491
4
2470
1781
4
2470
2021
4
2470
2060
4
2470
2178
4
2470
2222
4
2470
2227
4
2470
2294
4
2470
2315
4
2470
2326
4
2470
2326
4
2470
2470
4
2470
2470
4
2470
2470
4
2470
2470
4
2470
2684
4
2470
2732
4
2470
2865
4
2470
2896
4
2470
2943
4
2470
3014
4
2470
3044
4
2470
3068
4
2470
3077
4
2470
3124
4
2470
3143
4
2470
1303
5
2470
1469
5
2470
1834
5
2470
2264
5
2470
2470
5
2470
2470
5
2470
2470
5
2470
</TEXT>
</DOC>
<DOC>
<DOCNO>2471</DOCNO>
<TEXT>
a
learning
program
which
plays
partnership
dominoes
a
learning
program
has
been
written
is
basic
to
play
four
player
partnership
dominoes
because
dominoes
is
a
game
of
incomplete
information
the
program
uses
somewhat
different
principles
of
artificial
intelligence
from
those
used
in
programs
for
games
of
complete
information
such
as
checkers
chess
and
go
the
program
was
constructed
to
use
a
strategy
signature
table
which
classifies
board
situations
through
the
interactions
of
game
parameters
each
entry
in
the
table
contains
adaptively
determined
weights
indicating
the
advi
sability
of
various
strategies
once
chosen
a
strategy
then
employs
probability
analysis
and
linear
polynomial
evaluation
to
choose
a
move
our
program
wins
approximately
two
thirds
of
its
games
in
tournament
situations
and
has
defeated
championship
players
cacm
august
1973
smith
m
h
artificial
intelligence
intelligence
learning
heuristic
procedures
heuristic
programming
game
playing
problem
solving
dominoes
incomplete
information
machine
learning
signature
table
learning
programs
strategy
learning
3
62
3
64
3
66
3
69
ca730803
jb
january
23
1978
11
09
am
2471
5
2471
2471
5
2471
2471
5
2471
</TEXT>
</DOC>
<DOC>
<DOCNO>2472</DOCNO>
<TEXT>
minimal
spanning
tree
algorithm
r422
cacm
july
1973
kernighan
b
w
spanning
tree
minimal
spanning
tree
prim
algorithm
5
32
ca730714
jb
january
23
1978
11
12
am
2472
5
2472
2472
5
2472
2472
5
2472
</TEXT>
</DOC>
<DOC>
<DOCNO>2473</DOCNO>
<TEXT>
hidden
line
plotting
program
algorithm
r420
cacm
july
1973
macleod
i
d
g
collins
a
m
hidden
line
plot
surface
plot
4
9
ca730713
jb
january
23
1978
11
14
am
2473
5
2473
2473
5
2473
2473
5
2473
</TEXT>
</DOC>
<DOC>
<DOCNO>2474</DOCNO>
<TEXT>
difsub
for
solution
of
ordinary
differential
equations
algorithm
c407
cacm
july
1973
nikolai
p
j
differential
equations
stiff
differential
equations
boundary
value
problems
5
17
ca730712
jb
january
23
1978
11
16
am
2205
4
2474
2474
4
2474
2474
4
2474
2205
5
2474
2207
5
2474
2474
5
2474
2474
5
2474
2474
5
2474
</TEXT>
</DOC>
<DOC>
<DOCNO>2475</DOCNO>
<TEXT>
solution
of
linear
programming
problems
in
0
1
variables
h1
algorithm
a449
cacm
july
1973
fiala
f
linear
programming
zero
one
variable
5
41
ca730711
jb
january
23
1978
11
19
am
2475
5
2475
2475
5
2475
2475
5
2475
</TEXT>
</DOC>
<DOC>
<DOCNO>2476</DOCNO>
<TEXT>
equivalence
between
and
or
graphs
and
context
free
grammars
cacm
july
1973
hall
p
a
v
artificial
intelligence
and
or
graphs
language
theory
context
free
grammars
3
60
3
64
5
23
ca730710
jb
january
23
1978
11
21
am
2476
5
2476
2476
5
2476
2476
5
2476
</TEXT>
</DOC>
<DOC>
<DOCNO>2477</DOCNO>
<TEXT>
multiple
exits
from
a
loop
without
the
goto
cacm
july
1973
bochmann
g
v
control
structures
goto
free
programming
multiple
exits
from
loops
exit
statement
4
20
4
22
ca730709
jb
january
23
1978
11
23
am
2193
4
2477
2326
4
2477
2477
4
2477
2541
4
2477
2594
4
2477
3004
4
2477
2477
5
2477
2477
5
2477
2477
5
2477
2574
5
2477
2709
5
2477
3186
5
2477
1425
6
2477
2138
6
2477
2204
6
2477
2456
6
2477
2477
6
2477
2477
6
2477
</TEXT>
</DOC>
<DOC>
<DOCNO>2478</DOCNO>
<TEXT>
computer
science
seminars
for
undergraduates
cacm
july
1973
kandel
a
education
computer
science
curriculum
imprecise
synthesis
fuzzy
educational
structure
1
52
6
0
ca730708
jb
january
23
1978
11
24
am
1413
4
2478
1654
4
2478
1720
4
2478
1771
4
2478
1927
4
2478
2147
4
2478
2163
4
2478
2345
4
2478
2478
4
2478
2478
4
2478
2478
4
2478
2594
4
2478
2852
4
2478
2899
4
2478
3003
4
2478
3130
4
2478
1205
5
2478
1771
5
2478
2329
5
2478
2478
5
2478
2478
5
2478
2478
5
2478
3003
5
2478
1659
6
2478
1678
6
2478
1927
6
2478
1945
6
2478
2097
6
2478
2147
6
2478
2163
6
2478
2187
6
2478
2329
6
2478
2345
6
2478
2367
6
2478
2407
6
2478
2478
6
2478
2479
6
2478
2480
6
2478
2538
6
2478
</TEXT>
</DOC>
<DOC>
<DOCNO>2479</DOCNO>
<TEXT>
curriculum
recommendations
for
graduate
professional
programs
in
information
systems
recommended
addendum
on
information
systems
administration
an
addendum
to
the
report
of
the
acm
curriculum
committee
on
computer
education
for
management
is
proposed
the
proposed
addendum
is
to
include
in
the
curriculum
a
course
on
information
systems
administration
it
is
important
for
two
reasons
1
the
systems
designer
must
understand
the
administrative
framework
in
which
he
must
operate
to
work
effectively
and
2
an
important
objective
of
the
curriculum
recommendations
is
to
prepare
the
future
manager
of
the
computer
activity
it
is
felt
that
the
importance
of
these
two
reasons
justifies
the
addition
of
the
recommended
course
the
course
is
outlined
in
the
format
of
the
original
report
cacm
july
1973
mcfarlan
f
w
nolan
r
l
education
management
information
systems
information
systems
administration
information
systems
management
computer
management
1
52
3
51
ca730707
jb
january
23
1978
12
30
pm
2479
4
2479
2020
5
2479
2479
5
2479
2479
5
2479
2479
5
2479
2852
5
2479
3003
5
2479
1417
6
2479
1659
6
2479
1678
6
2479
1771
6
2479
1927
6
2479
1945
6
2479
2097
6
2479
2147
6
2479
2163
6
2479
2187
6
2479
2329
6
2479
2345
6
2479
2345
6
2479
2367
6
2479
2387
6
2479
2407
6
2479
2478
6
2479
2479
6
2479
2479
6
2479
2480
6
2479
2538
6
2479
</TEXT>
</DOC>
<DOC>
<DOCNO>2480</DOCNO>
<TEXT>
teaching
about
programming
this
paper
presents
the
goals
and
organization
of
a
course
about
programming
designed
to
provide
entering
students
in
a
graduate
program
with
a
cultural
enrichment
in
their
professional
lives
the
students
are
expected
to
have
taken
at
least
two
programming
courses
prior
to
this
one
and
therefore
to
be
familiar
with
at
least
two
programming
languages
both
as
students
and
users
teaching
someone
how
to
program
is
similar
to
teaching
him
to
play
a
musical
instrument
neither
skill
can
be
taught
they
must
be
learned
however
the
teacher
still
serves
several
vital
purposes
to
present
a
set
of
rules
for
producing
well
formed
utterances
to
offer
numerous
demonstrations
of
his
own
skill
and
to
function
as
an
involved
critic
finally
the
teacher
is
the
source
of
information
about
the
process
in
which
the
student
is
involved
cacm
july
1973
rosin
r
f
education
programming
concepts
professionalism
1
52
2
2
4
22
ca730706
jb
january
23
1978
12
36
pm
2319
4
2480
2480
4
2480
2480
4
2480
2594
4
2480
2709
4
2480
2738
4
2480
2867
4
2480
2939
4
2480
2972
4
2480
3004
4
2480
3030
4
2480
3155
4
2480
3155
4
2480
2204
5
2480
2247
5
2480
2480
5
2480
2480
5
2480
2480
5
2480
3003
5
2480
1659
6
2480
1678
6
2480
1927
6
2480
1945
6
2480
2097
6
2480
2147
6
2480
2163
6
2480
2187
6
2480
2329
6
2480
2345
6
2480
2367
6
2480
2407
6
2480
2478
6
2480
2479
6
2480
2480
6
2480
2538
6
2480
</TEXT>
</DOC>
<DOC>
<DOCNO>2481</DOCNO>
<TEXT>
the
distribution
of
a
program
in
primary
and
fast
buffer
storage
a
virtual
memory
computer
system
with
a
fast
buffer
cache
memory
between
primary
memory
and
the
central
processing
unit
is
considered
the
optimal
distribution
of
a
program
between
the
buffer
and
primary
memory
is
studied
using
the
program
lifetime
function
expressions
for
the
distribution
of
a
program
which
maximizes
the
useful
fraction
of
the
cost
time
integral
of
primary
and
fast
buffer
storage
are
obtained
for
swapping
and
nonswapping
buffer
management
policies
cacm
july
1973
gelenbe
e
cache
virtual
memory
lifetime
function
cost
time
integral
fast
buffer
4
3
6
2
6
3
ca730705
jb
january
23
1978
12
41
pm
2374
4
2481
2481
4
2481
2669
4
2481
2863
4
2481
3016
4
2481
3052
4
2481
1901
5
2481
2481
5
2481
2481
5
2481
2481
5
2481
</TEXT>
</DOC>
<DOC>
<DOCNO>2482</DOCNO>
<TEXT>
mixed
solutions
for
the
deadlock
problem
mixtures
of
detection
avoidance
and
prevention
provide
more
effective
and
practical
solutions
to
the
deadlock
problem
than
any
one
of
these
alone
the
individual
techniques
can
be
tailored
for
subproblems
of
resource
allocation
and
still
operate
together
to
prevent
deadlocks
this
paper
presents
a
method
based
on
the
concept
of
the
hierarchical
operating
system
for
constructing
appropriate
mixtures
and
suggests
appropriate
subsystems
for
the
most
frequently
occurring
resource
allocation
problems
cacm
july
1973
howard
j
h
jr
deadlocks
resource
allocation
operating
systems
multiprogramming
hierarchical
systems
4
30
4
32
ca730704
jb
january
23
1978
12
46
pm
1828
4
2482
1854
4
2482
1877
4
2482
1960
4
2482
2150
4
2482
2228
4
2482
2280
4
2482
2280
4
2482
2317
4
2482
2319
4
2482
2377
4
2482
2342
4
2482
2376
4
2482
2379
4
2482
2379
4
2482
2379
4
2482
2424
4
2482
2482
4
2482
2482
4
2482
2482
4
2482
2500
4
2482
2618
4
2482
2632
4
2482
2704
4
2482
2723
4
2482
2738
4
2482
2740
4
2482
2740
4
2482
2741
4
2482
2851
4
2482
2867
4
2482
2920
4
2482
3184
4
2482
1749
5
2482
1877
5
2482
2228
5
2482
2482
5
2482
2482
5
2482
2482
5
2482
</TEXT>
</DOC>
<DOC>
<DOCNO>2483</DOCNO>
<TEXT>
coko
iii
the
cooper
koz
chess
program
coko
iii
is
a
chess
player
written
entirely
in
fortran
on
the
ibm
360
65
coko
iii
plays
a
minimal
chess
game
at
the
rate
of
2
sec
cpu
time
per
move
with
a
level
close
to
lower
chess
club
play
a
selective
tree
searching
procedure
controlled
by
tactical
chess
logistics
allows
a
deployment
of
multiple
minimal
game
calculations
to
achieve
some
optimal
move
selection
the
tree
searching
algorithms
are
the
heart
of
coko
effectiveness
yet
they
are
conceptually
simple
in
addition
an
interesting
phenomenon
called
a
tree
searching
catastrophe
has
plagued
coko
entire
development
just
as
it
troubles
a
human
player
standard
exponential
growth
is
curbed
to
a
large
extent
by
the
definition
and
trimming
of
the
fischer
set
a
clear
distinction
between
tree
pruning
and
selective
tree
searching
is
also
made
representation
of
the
chess
environment
is
described
along
with
a
strategical
preanalysis
procedure
that
maps
the
lasker
regions
specific
chess
algorithms
are
described
which
could
be
used
as
a
command
structure
by
anyone
desiring
to
do
some
chess
program
experimentation
a
comparison
is
made
of
some
mysterious
actions
of
human
players
and
coko
iii
cacm
july
1973
kozdrowicki
e
w
cooper
d
w
artificial
intelligence
selective
searching
tree
searching
tree
searching
catastrophe
heuristic
programming
chess
algorithms
lasker
regions
fischer
set
minimal
chess
game
strategical
tactical
tactical
control
mode
game
playing
alpha
beta
machine
learning
concept
formation
command
structure
minimax
computer
chess
tournament
auxiliary
minimal
game
3
60
3
66
3
74
4
22
ca730703
jb
january
23
1978
1
07
pm
2483
5
2483
2483
5
2483
2483
5
2483
</TEXT>
</DOC>
<DOC>
<DOCNO>2484</DOCNO>
<TEXT>
a
note
on
information
organization
and
storage
since
the
logical
structure
of
a
data
base
can
be
represented
by
a
tree
or
graph
it
is
quite
natural
for
us
to
view
the
process
of
designing
a
data
base
as
that
of
constructing
a
tree
or
a
graph
a
general
method
for
constructing
such
a
tree
or
a
graph
is
provided
there
are
three
important
elements
in
this
general
construction
method
namely
a
set
of
binary
relations
an
algorithm
for
constructing
subsets
of
a
set
and
an
algorithm
for
selecting
an
element
from
the
given
set
of
objects
the
use
of
different
relations
and
algorithms
results
in
different
information
structures
as
list
tree
ring
etc
thus
the
problem
of
information
organization
and
storage
is
reduced
to
that
of
defining
relations
and
formulating
algorithms
under
a
given
set
of
constraints
the
results
presented
may
be
valuable
to
designers
as
useful
design
concepts
and
may
serve
as
a
basis
for
developing
a
formal
theory
on
the
subject
cacm
july
1973
huang
j
c
data
base
data
base
management
information
retrieval
information
structure
file
organization
storage
allocation
tree
graph
3
70
3
73
3
74
5
32
ca730702
jb
january
23
1978
1
14
pm
2484
5
2484
2484
5
2484
2484
5
2484
</TEXT>
</DOC>
<DOC>
<DOCNO>2485</DOCNO>
<TEXT>
managing
the
computer
resource
a
stage
hypothesis
based
on
the
study
of
expenditures
for
data
processing
a
descriptive
stage
hypothesis
is
presented
it
is
suggested
that
the
planning
organizing
and
controlling
activities
associated
with
managing
the
computer
resource
will
change
in
character
over
a
period
of
time
and
will
evolve
in
patterns
roughly
correlated
to
four
stages
of
the
computer
budget
stage
i
computer
acquisition
stage
ii
intense
system
development
stage
iii
proliferation
of
controls
and
stage
iv
user
service
orientation
each
stage
is
described
and
related
to
individual
tasks
for
managing
the
computer
resource
cacm
july
1973
nolan
r
l
computer
management
computer
budget
computer
expenditures
stage
hypothesis
planning
organizing
control
computer
resource
2
41
2
43
3
50
ca730701
jb
january
23
1978
1
23
pm
2485
5
2485
2485
5
2485
2485
5
2485
2977
5
2485
2985
5
2485
3011
5
2485
3035
5
2485
2075
6
2485
2302
6
2485
2345
6
2485
2485
6
2485
2485
6
2485
2485
6
2485
2485
6
2485
</TEXT>
</DOC>
<DOC>
<DOCNO>2486</DOCNO>
<TEXT>
computer
photocomposition
of
technical
text
in
computer
assisted
typesetting
by
means
of
photocomposition
special
problems
arise
in
highly
technical
material
such
as
mathematical
formulas
new
solutions
to
several
of
these
problems
have
been
devised
in
the
information
system
of
the
american
institute
of
physics
they
include
the
representation
of
special
characters
foreign
alphabets
mathematical
symbols
etc
not
available
on
input
keyboards
or
on
the
photocomposer
the
generation
of
such
symbols
e
g
by
overprinting
the
precise
positioning
of
accent
marks
floating
diacritics
line
breaks
i
e
words
or
formulas
placed
partly
at
the
end
of
one
line
and
partly
at
the
beginning
of
the
next
and
certain
aspects
of
error
correction
cacm
june
1973
alt
f
l
yuni
kirk
j
photocomposition
typesetting
printing
graphics
text
processing
3
79
3
82
ca730614
jb
january
23
1978
1
30
pm
2486
5
2486
2486
5
2486
2486
5
2486
</TEXT>
</DOC>
<DOC>
<DOCNO>2487</DOCNO>
<TEXT>
cubic
spline
solutions
to
fourth
order
boundary
value
problems
the
cubic
spline
approximation
to
the
fourth
order
differential
equation
y
p
x
y
q
x
y
r
x
y
t
x
is
shown
to
reduce
to
the
solution
of
a
five
term
recurrence
relationship
for
some
special
cases
the
approximation
is
shown
to
be
simply
related
to
a
finite
difference
representation
with
a
local
truncation
error
of
order
y
720
delta
8
cacm
june
1973
hoskins
w
d
cubic
spline
differential
equations
boundary
value
problem
5
13
5
17
ca730613
jb
january
23
1978
1
44
pm
2487
5
2487
2487
5
2487
2487
5
2487
</TEXT>
</DOC>
<DOC>
<DOCNO>2488</DOCNO>
<TEXT>
least
squares
piecewise
cubic
curve
fitting
the
matrices
involved
in
a
linear
least
squares
formulation
are
determined
for
the
problem
of
fitting
piecewise
cubic
functions
those
possessing
a
continuous
derivative
to
arrays
of
planar
data
cacm
june
1973
ferguson
j
staley
p
a
curve
fitting
data
reduction
function
approximation
approximation
splines
5
13
ca730612
jb
january
23
1978
1
47
pm
2488
5
2488
2488
5
2488
2488
5
2488
</TEXT>
</DOC>
<DOC>
<DOCNO>2489</DOCNO>
<TEXT>
number
of
multiply
restricted
partitions
a1
algorithm
a448
cacm
june
1973
beyer
t
swinehart
d
f
partitions
enumeration
change
making
energy
level
degeneracies
molecular
vibrational
energy
levels
3
13
5
30
ca730611
jb
january
23
1978
1
49
pm
2104
4
2489
2489
4
2489
2489
4
2489
1219
5
2489
2104
5
2489
2489
5
2489
2489
5
2489
2489
5
2489
</TEXT>
</DOC>
<DOC>
<DOCNO>2490</DOCNO>
<TEXT>
efficient
algorithms
for
graph
manipulation
h
algorithm
a447
efficient
algorithms
are
presented
for
partitioning
a
graph
into
connected
components
biconnected
components
and
simple
paths
the
algorithm
for
partitioning
of
a
graph
into
simple
paths
is
iterative
and
each
iteration
produces
a
new
path
between
two
vertices
already
on
paths
the
start
vertex
can
be
specified
dynamically
if
v
is
the
number
of
vertices
and
e
is
the
number
of
edges
each
algorithm
requires
time
and
space
proportional
to
max
v
e
when
executed
on
a
random
access
computer
cacm
june
1973
hopcroft
j
tarjan
r
graphs
analysis
of
algorithms
graph
manipulation
5
32
ca730610
jb
january
23
1978
1
55
pm
2490
4
2490
2177
5
2490
2490
5
2490
2490
5
2490
2490
5
2490
</TEXT>
</DOC>
<DOC>
<DOCNO>2491</DOCNO>
<TEXT>
threaded
code
the
concept
of
threaded
code
is
presented
as
an
alternative
to
machine
language
code
hardware
and
software
realizations
of
it
are
given
in
software
it
is
realized
as
interpretive
code
not
needing
an
interpreter
extensions
and
optimizations
are
mentioned
cacm
june
1973
bell
j
r
interpreter
machine
code
time
tradeoff
space
tradeoff
compiled
code
subroutine
calls
threaded
code
4
12
4
13
6
33
ca730609
jb
january
23
1978
2
05
pm
2491
5
2491
2491
5
2491
2491
5
2491
2748
5
2491
3144
5
2491
1471
6
2491
2298
6
2491
2491
6
2491
2491
6
2491
2597
6
2491
2624
6
2491
2625
6
2491
2632
6
2491
</TEXT>
</DOC>
<DOC>
<DOCNO>2492</DOCNO>
<TEXT>
the
development
of
decision
tables
via
parsing
of
complex
decision
situations
a
new
parsing
technique
is
proposed
which
allows
parsing
based
only
on
syntactical
characteristics
of
the
decision
problem
it
requires
a
description
of
the
problem
in
decision
grid
chart
format
and
allows
the
development
of
decision
tables
within
defined
limits
by
avoiding
or
at
least
minimizing
repetition
of
conditions
and
actions
in
the
resulting
tables
cacm
june
1973
strunz
h
decision
tables
parsing
decision
grid
chart
problem
analysis
4
0
4
1
4
2
ca730608
jb
january
23
1978
2
10
pm
2220
4
2492
2492
4
2492
2518
4
2492
2598
4
2492
2616
4
2492
2726
4
2492
1548
5
2492
2492
5
2492
2492
5
2492
2492
5
2492
</TEXT>
</DOC>
<DOC>
<DOCNO>2493</DOCNO>
<TEXT>
optimum
data
base
reorganization
points
in
certain
data
base
organization
schemes
the
cost
per
access
may
increase
due
to
structural
inefficiencies
caused
by
updates
by
reorganizing
the
data
base
the
cost
per
access
may
be
reduced
however
the
high
cost
of
a
reorganization
prohibits
frequent
reorganizations
this
paper
examines
strategies
for
selecting
the
optimum
reorganization
points
cacm
june
1973
shneiderman
b
data
base
reorganization
files
information
retrieval
3
73
ca730607
jb
january
23
1978
2
14
pm
2455
4
2493
2493
4
2493
2889
4
2493
2968
4
2493
2388
5
2493
2493
5
2493
2493
5
2493
2493
5
2493
2816
5
2493
3129
5
2493
2493
6
2493
2493
6
2493
2751
6
2493
2816
6
2493
2829
6
2493
</TEXT>
</DOC>
<DOC>
<DOCNO>2494</DOCNO>
<TEXT>
a
computer
generated
aid
for
cluster
analysis
a
computer
generated
graphic
method
which
can
be
used
in
conjunction
with
any
hierarchical
scheme
of
cluster
analysis
is
described
and
illustrated
the
graphic
principle
used
is
the
representation
of
the
elements
of
a
data
matrix
of
similarities
or
dissimilarities
by
computer
printed
symbols
of
character
overstrikes
of
various
shades
of
darkness
where
a
dark
symbol
corresponds
to
a
small
dissimilarity
the
plots
applied
to
a
data
matrix
before
clustering
and
to
the
rearranged
matrix
after
clustering
show
at
a
glance
whether
clustering
brought
forth
any
distinctive
clusters
a
well
known
set
of
data
consisting
of
the
correlations
of
24
psychological
tests
is
used
to
illustrate
the
comparison
of
groupings
by
four
methods
of
factor
analysis
and
two
methods
of
cluster
analysis
cacm
june
1973
ling
r
f
computer
graphics
cluster
analysis
numerical
taxonomy
hierarchical
clustering
factor
analysis
3
10
3
30
3
36
4
49
ca730606
jb
january
23
1978
2
20
pm
2494
5
2494
2494
5
2494
2494
5
2494
</TEXT>
</DOC>
<DOC>
<DOCNO>2495</DOCNO>
<TEXT>
adapting
optimal
code
generation
for
arithmetic
expressions
to
the
instruction
sets
available
on
present
day
computers
cacm
june
1973
stockhausen
p
f
arithmetic
expressions
code
generation
compilers
object
code
optimization
register
assignment
trees
4
12
5
24
5
32
ca730605
jb
january
23
1978
2
24
pm
2495
5
2495
2495
5
2495
2495
5
2495
</TEXT>
</DOC>
<DOC>
<DOCNO>2496</DOCNO>
<TEXT>
on
the
near
optimality
of
the
shortest
latency
time
first
drum
scheduling
discipline
for
computer
systems
in
which
it
is
practical
to
determine
the
instantaneous
drum
position
a
popular
discipline
for
determining
the
sequence
in
which
the
records
are
to
be
accessed
is
the
so
called
shortest
latency
time
first
sltf
discipline
when
a
collection
of
varying
length
records
is
to
be
accessed
from
specified
drum
positions
it
is
known
that
the
sltf
discipline
does
not
necessarily
minimize
the
drum
latency
time
however
we
show
that
the
total
time
to
access
the
entire
collection
for
any
sltf
schedule
is
never
as
much
as
a
drum
revolution
longer
than
a
minimum
latency
schedule
cacm
june
1973
stone
h
s
fuller
s
h
drum
scheduling
shortest
access
time
first
minimal
latency
scheduling
shortest
latency
time
first
4
31
4
41
6
35
ca730604
jb
january
23
1978
3
12
pm
2496
5
2496
2496
5
2496
2496
5
2496
2628
5
2496
3097
5
2496
2375
6
2496
2496
6
2496
2496
6
2496
</TEXT>
</DOC>
<DOC>
<DOCNO>2497</DOCNO>
<TEXT>
synchronizing
processors
with
memory
content
generated
interrupts
implementations
of
the
lock
unlock
method
of
synchronizing
processors
in
a
multiprocessor
system
usually
require
uninterruptable
memory
pause
type
instructions
an
interlock
scheme
called
read
interlock
which
does
not
require
memory
pause
instructions
has
been
developed
for
a
dual
dec
pdp
10
system
with
real
time
requirements
the
read
interlock
method
does
require
a
special
read
interlock
instruction
in
the
repertoire
of
the
processors
and
a
special
read
interlock
cycle
in
the
repertoire
of
the
memory
modules
when
a
processor
examines
a
lock
a
memory
location
with
a
read
interlock
instruction
it
will
be
interrupted
if
the
lock
was
already
set
examining
a
lock
immediately
sets
it
if
it
was
not
already
set
this
event
sequence
is
a
read
interlock
cycle
writing
into
a
lock
clears
it
having
the
processor
interrupted
upon
encountering
a
set
lock
instead
of
branching
is
advantageous
if
the
branch
would
have
resulted
in
an
effective
interrupt
cacm
june
1973
hill
j
c
interrupts
supervisors
monitors
debugging
parallel
processing
associative
memories
microprogramming
4
32
6
29
ca730603
jb
january
23
1978
3
29
pm
1458
4
2497
1523
4
2497
1603
4
2497
1698
4
2497
1747
4
2497
1748
4
2497
1854
4
2497
1877
4
2497
1960
4
2497
2377
4
2497
2378
4
2497
2497
4
2497
2497
4
2497
2534
4
2497
2558
4
2497
2625
4
2497
2632
4
2497
2840
4
2497
2941
4
2497
3105
4
2497
3144
4
2497
1471
5
2497
2182
5
2497
2497
5
2497
2497
5
2497
2497
5
2497
</TEXT>
</DOC>
<DOC>
<DOCNO>2498</DOCNO>
<TEXT>
minimizing
wasted
space
in
partitioned
segmentation
a
paged
virtual
memory
system
using
a
finite
number
of
page
sizes
is
considered
two
algorithms
for
assigning
pages
to
segments
are
discussed
both
of
these
algorithm
are
simple
to
implement
the
problem
of
choosing
the
page
sizes
to
minimize
the
expected
value
of
total
wasted
space
in
internal
fragmentation
and
in
a
page
table
per
segment
is
then
solved
for
a
probability
density
function
of
segment
size
which
may
be
expressed
as
a
convex
combination
of
erlang
densities
cacm
june
1973
gelenbe
e
dynamic
storage
allocation
virtual
memory
paging
multiple
page
sizes
fragmentation
segmentation
4
0
4
3
4
32
6
34
8
3
ca730602
jb
january
23
1978
3
38
pm
2095
4
2498
2218
4
2498
2498
4
2498
2596
4
2498
2734
4
2498
2902
4
2498
2911
4
2498
3000
4
2498
1879
5
2498
2498
5
2498
2498
5
2498
2498
5
2498
2911
5
2498
1879
6
2498
273
6
2498
2435
6
2498
2498
6
2498
2734
6
2498
2773
6
2498
2983
6
2498
</TEXT>
</DOC>
<DOC>
<DOCNO>2499</DOCNO>
<TEXT>
efficient
multiprogramming
resource
allocation
and
accounting
although
sometimes
thought
of
as
only
a
component
of
time
sharing
operation
multiprogramming
can
involve
broader
questions
of
resource
allocation
since
fairness
is
not
required
to
meet
a
response
criterion
in
a
multiprogrammed
system
it
may
serve
maximal
resource
use
to
be
unfair
for
example
by
holding
an
input
output
channel
idle
for
a
program
while
it
completes
a
small
amount
of
processor
usage
enabling
further
use
of
the
channel
several
applications
of
this
principle
are
given
and
it
is
suggested
that
a
multiprogramming
executive
might
dynamically
adjust
its
allocation
algorithms
to
gain
efficiency
allocation
of
resources
is
closely
connected
to
accounting
for
those
resources
raising
the
problems
of
repeatability
minimal
uncharged
overhead
and
relative
weighting
of
charges
for
dependent
resources
since
weightings
may
depend
on
allocation
algorithms
these
are
not
arbitrary
accounting
parameters
often
the
only
repeatable
accounting
is
one
which
omits
an
extensive
overhead
will
be
paid
and
should
multiprogramming
prove
efficient
overcharges
will
result
multiprogramming
turns
on
allocation
of
the
memory
resource
essential
to
control
of
other
resources
the
general
suggestions
for
allocation
and
accounting
are
applied
to
this
question
and
some
details
provided
for
the
case
of
a
monitor
which
controls
a
virtual
memory
machine
cacm
june
1973
hamlet
r
g
monitor
executive
multiprogramming
efficiency
resource
allocation
resource
accounting
4
32
ca730601
jb
january
23
1978
3
51
pm
1892
4
2499
1901
4
2499
2085
4
2499
2095
4
2499
2218
4
2499
2277
4
2499
2319
4
2499
2329
4
2499
2358
4
2499
2373
4
2499
2380
4
2499
2434
4
2499
2499
4
2499
2501
4
2499
2582
4
2499
2669
4
2499
2828
4
2499
2863
4
2499
2881
4
2499
2928
4
2499
2996
4
2499
3006
4
2499
3067
4
2499
1751
5
2499
2499
5
2499
2499
5
2499
2499
5
2499
3114
5
2499
1502
6
2499
2499
6
2499
2745
6
2499
</TEXT>
</DOC>
<DOC>
<DOCNO>2500</DOCNO>
<TEXT>
a
practical
approach
to
managing
resources
and
avoiding
deadlocks
resource
scheduling
and
allocation
can
be
expensive
with
regard
to
time
and
space
in
multiprogramming
or
time
sharing
environments
involving
large
numbers
of
tasks
and
resources
with
conflicting
requirements
detection
and
or
prevention
of
deadlocks
can
require
massive
amounts
of
additional
overhead
if
efficient
usage
of
resources
is
to
be
maintained
a
resource
management
program
is
described
which
uses
linked
lists
along
with
other
techniques
to
overcome
a
large
portion
of
this
overhead
the
program
which
is
currently
running
as
part
of
a
large
scale
general
purpose
operating
system
keeps
resources
relatively
active
but
does
not
detect
or
prevent
all
deadlocks
in
its
implemented
state
certain
changes
which
would
permit
more
comprehensive
levels
of
deadlock
prevention
detection
at
additional
cost
have
not
been
incorporated
in
the
running
system
due
to
the
infrequency
of
deadlock
situations
cacm
may
1973
frailey
d
j
deadlock
resource
allocation
scheduling
resource
management
multiprogramming
time
sharing
multiprocessing
deadly
embrace
4
30
4
32
ca730520
jb
january
23
1978
4
03
pm
2280
4
2500
2379
4
2500
2482
4
2500
2500
4
2500
2228
5
2500
2500
5
2500
2500
5
2500
2500
5
2500
</TEXT>
</DOC>
<DOC>
<DOCNO>2501</DOCNO>
<TEXT>
wylbur
an
interactive
text
editing
and
remote
job
entry
system
wylbur
is
a
comprehensive
system
for
manipulating
all
kinds
of
text
such
as
computer
programs
letters
and
manuscripts
using
typewriter
terminals
connected
to
a
computer
it
has
facilities
for
remote
job
entry
and
retrieval
as
well
as
facilities
for
text
alignment
and
justification
a
powerful
method
for
addressing
text
by
content
is
provided
this
paper
describes
the
external
appearance
of
wylbur
as
well
as
its
internal
structure
a
short
description
of
the
major
features
of
orvyl
a
general
purpose
time
sharing
system
which
operates
in
conjunction
with
wylbur
is
also
included
cacm
may
1973
fajman
r
borgelt
j
text
editing
time
sharing
on
line
text
editing
interactive
text
editing
terminal
remote
terminal
terminal
system
interactive
terminal
remote
job
entry
remote
job
retrieval
program
preparation
document
preparation
data
entry
content
addressing
3
70
3
79
4
10
4
19
4
41
4
43
4
49
ca730519
jb
january
23
1978
4
11
pm
1892
4
2501
1901
4
2501
2085
4
2501
2095
4
2501
2218
4
2501
2277
4
2501
2299
4
2501
2319
4
2501
2329
4
2501
2358
4
2501
2373
4
2501
2380
4
2501
2434
4
2501
2499
4
2501
2501
4
2501
2501
4
2501
2582
4
2501
2629
4
2501
2669
4
2501
2828
4
2501
2863
4
2501
2881
4
2501
2915
4
2501
2928
4
2501
2996
4
2501
3006
4
2501
3067
4
2501
3114
4
2501
1502
5
2501
1751
5
2501
2501
5
2501
2501
5
2501
2501
5
2501
2623
5
2501
2501
6
2501
2537
6
2501
</TEXT>
</DOC>
<DOC>
<DOCNO>2502</DOCNO>
<TEXT>
a
comment
on
the
practical
aspects
of
computer
science
education
cacm
may
1973
estell
r
g
education
computer
engineering
computer
sciences
curriculum
systems
design
1
52
6
0
ca730518
jb
january
23
1978
4
23
pm
2502
5
2502
2502
5
2502
2502
5
2502
</TEXT>
</DOC>
<DOC>
<DOCNO>2503</DOCNO>
<TEXT>
another
comment
on
computer
music
cacm
may
1973
wexelblat
r
l
ca730517
jb
january
23
1978
4
25
pm
2503
5
2503
2503
5
2503
2503
5
2503
</TEXT>
</DOC>
<DOC>
<DOCNO>2504</DOCNO>
<TEXT>
concerning
music
and
computer
composition
in
computational
linguistics
cacm
may
1973
mcmorrow
c
h
artificial
intelligence
heuristic
programming
models
of
cognitive
processes
computer
music
computer
composition
music
theory
3
44
3
65
ca730516
jb
january
23
1978
4
27
pm
2504
5
2504
2504
5
2504
2504
5
2504
</TEXT>
</DOC>
<DOC>
<DOCNO>2505</DOCNO>
<TEXT>
reflection
free
permutations
rosary
permutations
and
adjacent
transposition
algorithms
cacm
may
1973
roy
m
k
permutation
permutation
generation
scheduling
combinatorial
analysis
5
39
ca730515
jb
january
23
1978
4
29
pm
2044
4
2505
2189
4
2505
2292
4
2505
2417
4
2505
2505
4
2505
2505
4
2505
2505
4
2505
2874
4
2505
2908
4
2505
2189
5
2505
2292
5
2505
2505
5
2505
2505
5
2505
2505
5
2505
2908
5
2505
521
5
2505
2505
6
2505
2884
6
2505
521
6
2505
</TEXT>
</DOC>
<DOC>
<DOCNO>2506</DOCNO>
<TEXT>
a
sparse
matrix
package
algorithm
r408
cacm
may
1973
sale
r
h
j
matrix
sparse
matrix
matrix
manipulation
fortran
standards
5
14
ca730514
jb
january
23
1978
4
30
pm
1613
4
2506
1646
4
2506
1900
4
2506
1955
4
2506
2025
4
2506
2154
4
2506
2365
4
2506
2506
4
2506
3060
4
2506
987
5
2506
2506
5
2506
2506
5
2506
2506
5
2506
</TEXT>
</DOC>
<DOC>
<DOCNO>2507</DOCNO>
<TEXT>
exact
solution
of
linear
equations
using
residue
arithmetic
algorithm
r406
cacm
may
1973
howell
j
residue
arithmetic
symmetric
residue
modulus
mixed
radix
representation
symmetric
mixed
radix
representation
mixed
radix
conversion
prime
number
linear
equations
gaussian
elimination
matrix
inversion
determinant
adjoint
matrix
ill
condition
3
5
5
14
ca730513
jb
january
23
1978
4
34
pm
2507
5
2507
2507
5
2507
2507
5
2507
</TEXT>
</DOC>
<DOC>
<DOCNO>2508</DOCNO>
<TEXT>
increasing
the
efficiency
of
quicksort
algorithm
r402
cacm
may
1973
wheeler
r
e
sorting
quicksort
3
73
4
49
5
31
5
6
ca730512
jb
january
23
1978
4
35
pm
2508
5
2508
2508
5
2508
2508
5
2508
</TEXT>
</DOC>
<DOC>
<DOCNO>2509</DOCNO>
<TEXT>
minit
algorithm
for
linear
programming
algorithm
r333
cacm
may
1973
obradovic
d
ca730511
jb
january
23
1978
4
37
pm
2509
5
2509
2509
5
2509
2509
5
2509
</TEXT>
</DOC>
<DOC>
<DOCNO>2510</DOCNO>
<TEXT>
minit
algorithm
for
linear
programming
algorithm
r333
cacm
may
1973
holmgren
b
obradovic
d
kolm
a
ca730510
jb
january
23
1978
4
38
pm
2510
5
2510
2510
5
2510
2510
5
2510
</TEXT>
</DOC>
<DOC>
<DOCNO>2511</DOCNO>
<TEXT>
maxflow
algorithm
r324
cacm
may
1973
bayer
g
ca730509
jb
january
23
1978
4
39
pm
2511
5
2511
2511
5
2511
2511
5
2511
</TEXT>
</DOC>
<DOC>
<DOCNO>2512</DOCNO>
<TEXT>
coulomb
wave
functions
algorithm
r300
cacm
may
1973
vos
h
coulomb
wave
functions
wave
functions
special
functions
function
evaluation
5
12
ca730508
jb
january
23
1978
4
41
pm
2512
5
2512
2512
5
2512
2512
5
2512
</TEXT>
</DOC>
<DOC>
<DOCNO>2513</DOCNO>
<TEXT>
a
nonrecursive
list
moving
algorithm
an
efficient
nonrecursive
algorithm
is
given
for
moving
any
lisp
type
list
in
particular
the
algorithm
requires
no
storage
other
than
the
new
nodes
into
which
the
list
is
to
be
moved
and
no
additional
bits
per
node
for
marking
the
algorithm
runs
in
time
proportional
to
the
number
of
nodes
in
the
list
the
original
list
structure
is
destroyed
as
it
is
moved
cacm
may
1973
reingold
e
m
list
moving
list
copying
list
traversal
garbage
collection
lisp
4
19
4
49
ca730507
jb
january
23
1978
4
45
pm
1869
4
2513
2156
4
2513
2361
4
2513
2513
4
2513
2513
4
2513
2665
4
2513
2723
4
2513
2736
4
2513
2855
4
2513
2855
4
2513
3074
4
2513
3106
4
2513
3106
4
2513
3112
4
2513
1549
5
2513
1972
5
2513
2513
5
2513
2513
5
2513
2513
5
2513
2855
5
2513
1549
6
2513
1826
6
2513
210
6
2513
1972
6
2513
2513
6
2513
2766
6
2513
2833
6
2513
2998
6
2513
</TEXT>
</DOC>
<DOC>
<DOCNO>2514</DOCNO>
<TEXT>
an
array
grammar
programming
system
a
package
of
fortran
programs
has
been
developed
that
permits
a
user
to
interactively
design
and
test
array
grammars
the
user
can
control
the
rule
selection
procedure
in
a
derivation
or
parse
using
weighted
programming
matrices
he
also
has
a
choice
of
instance
selection
schemes
raster
random
parallel
examples
are
given
involving
array
languages
consisting
of
simple
geometrical
patterns
as
well
as
a
language
of
neuron
pictures
cacm
may
1973
mercer
a
rosenfeld
a
picture
grammars
array
grammars
3
63
5
23
8
2
ca730506
jb
january
23
1978
4
49
pm
2514
5
2514
2514
5
2514
2514
5
2514
</TEXT>
</DOC>
<DOC>
<DOCNO>2515</DOCNO>
<TEXT>
minimal
event
node
network
of
project
precedence
relations
a
procedure
for
constructing
a
minimal
event
node
network
to
represent
a
set
of
precedence
relations
without
parallel
activities
is
presented
a
minimal
event
node
network
is
an
event
node
network
in
which
both
the
number
of
nodes
and
the
number
of
arcs
are
the
minima
to
preserve
the
given
precedence
relations
counterexamples
are
given
to
show
that
the
algorithm
presented
by
a
c
fisher
j
s
liebman
and
g
l
nemhauser
1968
produces
event
node
networks
which
are
not
minimal
since
our
procedure
includes
the
set
covering
problem
the
time
required
may
grow
exponentially
with
the
number
of
given
activities
cacm
may
1973
corneil
d
g
gotlieb
c
c
lee
y
m
network
project
event
node
network
activity
node
network
minimal
event
node
network
dummy
activity
project
precedence
relations
3
57
5
32
8
3
ca730505
jb
january
24
1978
8
42
am
2515
4
2515
1723
5
2515
2515
5
2515
2515
5
2515
2515
5
2515
</TEXT>
</DOC>
<DOC>
<DOCNO>2516</DOCNO>
<TEXT>
hierarchical
storage
in
information
retrieval
a
probabilistic
analysis
is
employed
to
determine
the
effect
of
hierarchical
storage
organizations
on
information
retrieval
operations
the
data
storage
hardware
is
assumed
to
consist
on
n
levels
of
linearly
connected
memory
hardware
with
increasing
data
access
times
and
increasing
data
storage
capabilities
a
system
might
for
example
consist
of
fast
semiconductor
memory
computer
core
memory
extended
core
storage
disk
memory
and
data
cells
equations
are
derived
to
predict
the
effect
of
such
a
system
on
data
access
times
using
sequential
files
random
access
files
and
structured
files
employing
multiple
hierarchical
linked
lists
cacm
may
1973
salasin
j
information
retrieval
hierarchical
storage
3
70
3
72
3
73
3
74
3
79
3
90
6
20
6
34
ca730504
jb
january
24
1978
8
48
am
2516
5
2516
2516
5
2516
2516
5
2516
</TEXT>
</DOC>
<DOC>
<DOCNO>2517</DOCNO>
<TEXT>
some
comments
on
the
use
of
ambiguous
decision
tables
and
their
conversion
to
computer
programs
this
paper
comments
upon
recently
published
work
on
decision
table
translation
using
methods
similar
to
the
rule
mask
technique
the
applicability
of
these
methods
under
various
possible
conventions
on
overall
table
meaning
is
discussed
and
it
is
argued
that
there
is
a
place
both
for
the
multi
rule
and
the
single
rule
or
action
set
convention
in
decision
tale
usage
cacm
may
1973
king
p
j
h
johnson
r
g
decision
tables
systems
analysis
programming
3
50
3
59
4
19
4
29
4
49
ca730503
jb
january
24
1978
8
56
am
2053
4
2517
2221
4
2517
2273
4
2517
2453
4
2517
2517
4
2517
2517
4
2517
2517
4
2517
2518
4
2517
2616
4
2517
2726
4
2517
2856
4
2517
3034
4
2517
3034
4
2517
1684
5
2517
2053
5
2517
2221
5
2517
2517
5
2517
2517
5
2517
2517
5
2517
2616
5
2517
3034
5
2517
931
6
2517
1548
6
2517
1684
6
2517
1684
6
2517
2053
6
2517
2517
6
2517
2517
6
2517
</TEXT>
</DOC>
<DOC>
<DOCNO>2518</DOCNO>
<TEXT>
programming
by
questionnaire
an
effective
way
to
use
decision
tables
programming
by
questionnaire
combines
aspects
of
decision
table
programming
and
general
purpose
programming
by
using
decision
tables
to
construct
an
application
program
through
the
selection
of
certain
source
statements
from
a
predefined
file
it
is
proposed
that
programming
by
questionnairies
a
useful
compromise
between
general
and
special
purpose
programming
for
a
significant
class
of
large
scale
problems
the
elements
of
the
approach
are
discussed
an
existing
application
is
described
cacm
may
1973
low
d
w
customizing
modeling
applications
development
programmer
productivity
simulator
generation
automatic
program
generation
no
reprogramming
4
20
4
22
4
29
ca730502
jb
january
24
1978
9
03
am
2053
4
2518
2220
4
2518
2492
4
2518
2517
4
2518
2518
4
2518
2518
4
2518
2598
4
2518
2616
4
2518
2616
4
2518
2726
4
2518
3034
4
2518
1548
5
2518
1684
5
2518
2518
5
2518
2518
5
2518
2518
5
2518
</TEXT>
</DOC>
<DOC>
<DOCNO>2519</DOCNO>
<TEXT>
on
the
problem
of
communicating
complex
information
the
nature
of
the
difficulty
involved
in
communicating
mathematical
results
between
scientists
using
a
computer
based
information
retrieval
system
is
examined
the
problem
is
analyzed
in
terms
of
psychological
and
information
processing
processes
and
what
turns
out
to
be
a
vicious
circle
of
effects
is
described
these
include
ways
of
augmenting
written
natural
language
by
various
notational
and
linguistic
devices
the
exhibition
of
the
structure
inherent
in
the
information
we
are
communicating
and
a
sophisticated
interactive
system
controlled
by
computer
cacm
may
1973
pager
d
complex
information
information
communication
mathematics
proof
interactive
system
language
1
0
1
1
1
50
1
52
1
59
2
42
3
32
3
51
3
62
3
70
3
81
ca730501
jb
january
24
1978
9
25
am
2519
4
2519
2390
5
2519
2519
5
2519
2519
5
2519
2519
5
2519
</TEXT>
</DOC>
<DOC>
<DOCNO>2520</DOCNO>
<TEXT>
greatest
common
divisor
of
n
integers
and
multipliers
algorithm
c386
cacm
april
1973
ragland
l
c
good
d
i
proof
of
algorithms
greatest
common
divisor
euclidean
algorithm
inductive
assertion
method
3
15
4
42
5
10
5
24
ca730408
jb
january
24
1978
9
27
am
2520
5
2520
2520
5
2520
2520
5
2520
</TEXT>
</DOC>
<DOC>
<DOCNO>2521</DOCNO>
<TEXT>
ten
subroutines
for
the
manipulation
of
chebyshev
series
c1
algorithm
a446
cacm
april
1973
broucke
r
chebyshev
series
differentiation
integration
curve
fitting
approximations
negative
powers
5
12
5
13
5
16
ca730407
jb
january
24
1978
9
29
am
2028
4
2521
2521
4
2521
2521
4
2521
2521
4
2521
3099
4
2521
2028
5
2521
2031
5
2521
2521
5
2521
2521
5
2521
2521
5
2521
2762
5
2521
3135
5
2521
2521
6
2521
</TEXT>
</DOC>
<DOC>
<DOCNO>2522</DOCNO>
<TEXT>
the
design
implementation
and
evaluation
of
a
working
set
dispatcher
the
behavior
of
a
computer
system
is
largely
dependent
upon
the
algorithms
employed
to
allocate
the
system
resources
to
the
processes
competing
for
them
recent
research
in
time
sharing
paging
systems
has
developed
the
working
set
model
for
program
behavior
and
are
source
allocation
strategy
based
on
this
model
has
been
proposed
two
implementations
along
these
principles
have
been
reported
but
it
seems
that
in
neither
case
have
further
results
been
announced
this
report
discusses
the
design
and
implementation
of
a
dispatcher
based
on
the
working
set
principle
presents
data
to
permit
analysis
of
its
behavior
and
indicates
future
directions
of
research
on
methods
of
controlling
a
computer
system
cacm
april
1973
rodriguez
rosell
j
dupuy
j
p
working
set
dispatcher
scheduler
time
sharing
systems
resource
allocation
software
evaluation
operating
systems
supervisory
systems
4
31
4
32
ca730406
jb
january
24
1978
9
36
am
2522
5
2522
2522
5
2522
2522
5
2522
2928
5
2522
1751
6
2522
2277
6
2522
2380
6
2522
2522
6
2522
2569
6
2522
</TEXT>
</DOC>
<DOC>
<DOCNO>2523</DOCNO>
<TEXT>
a
region
coloring
technique
for
scene
analysis
a
method
of
converting
a
picture
into
a
cartoon
or
map
whose
regions
correspond
to
differently
textured
regions
is
described
texture
edges
in
the
picture
are
detected
and
solid
regions
surrounded
by
these
usually
broken
edges
are
colored
in
using
a
propagation
process
the
resulting
map
is
cleaned
by
comparing
the
region
colors
with
the
textures
of
the
corresponding
regions
in
the
picture
and
also
by
merging
some
regions
with
others
according
to
criteria
based
on
topology
and
size
the
method
has
been
applied
to
the
construction
of
cloud
cover
maps
from
cloud
cover
pictures
obtained
by
satellites
cacm
april
1973
strong
iii
j
p
rosenfeld
a
picture
processing
scene
analysis
edge
detection
3
63
8
2
ca730405
jb
january
24
1978
9
48
am
2523
5
2523
2523
5
2523
2523
5
2523
2980
5
2523
2523
6
2523
</TEXT>
</DOC>
<DOC>
<DOCNO>2524</DOCNO>
<TEXT>
some
approaches
to
best
match
file
searching
the
problem
of
searching
the
set
of
keys
in
a
file
to
find
a
key
which
is
closest
to
a
given
query
key
is
discussed
after
closest
in
terms
of
a
metric
on
the
the
key
space
is
suitably
defined
three
file
structures
are
presented
together
with
their
corresponding
search
algorithms
which
are
intended
to
reduce
the
number
of
comparisons
required
to
achieve
the
desired
result
these
methods
are
derived
using
certain
inequalities
satisfied
by
metrics
and
by
graph
theoretic
concepts
some
empirical
results
are
presented
which
compare
the
efficiency
of
the
methods
cacm
april
1973
burkhard
w
a
keller
r
m
matching
file
structuring
file
searching
heuristics
best
match
3
73
3
79
4
9
ca730404
jb
january
24
1978
9
54
am
1676
4
2524
1682
4
2524
1728
4
2524
1860
4
2524
1973
4
2524
2018
4
2524
2032
4
2524
2033
4
2524
2107
4
2524
2109
4
2524
2203
4
2524
2251
4
2524
2359
4
2524
2524
4
2524
2543
4
2524
2552
4
2524
2559
4
2524
2991
4
2524
3053
4
2524
1785
5
2524
2524
5
2524
2524
5
2524
2524
5
2524
2575
5
2524
2966
5
2524
3134
5
2524
1976
6
2524
2160
6
2524
2524
6
2524
2524
6
2524
2524
6
2524
2990
6
2524
</TEXT>
</DOC>
<DOC>
<DOCNO>2525</DOCNO>
<TEXT>
a
statistical
study
of
the
accuracy
of
floating
point
number
systems
this
paper
presents
the
statistical
results
of
tests
of
the
accuracy
of
certain
arithmetic
systems
in
evaluating
sums
products
and
inner
products
and
analytic
error
estimates
for
some
of
the
computations
the
arithmetic
systems
studied
are
6
digit
hexadecimal
and
22
digit
binary
floating
point
number
representations
combined
with
the
usual
chop
and
round
modes
of
arithmetic
with
various
numbers
of
guard
digits
and
with
a
modified
round
mode
with
guard
digits
in
a
certain
sense
arithmetic
systems
differing
only
in
their
use
of
binary
or
hexadecimal
number
representations
are
shown
to
be
approximately
statistically
equivalent
inaccuracy
further
the
usual
round
mode
with
guard
digits
is
shown
to
be
statistically
superior
in
accuracy
to
the
usual
chop
mode
in
all
cases
save
one
the
modified
round
mode
is
found
to
be
superior
to
the
chop
mode
in
all
cases
cacm
april
1973
kuki
h
cody
w
j
error
analysis
floating
point
arithmetic
rounding
guard
digits
number
representation
5
11
5
5
6
32
ca730403
jb
january
24
1978
10
04
am
2525
4
2525
1474
5
2525
2525
5
2525
2525
5
2525
2525
5
2525
</TEXT>
</DOC>
<DOC>
<DOCNO>2526</DOCNO>
<TEXT>
asymmetric
memory
hierarchies
a
study
is
presented
of
some
of
the
system
implications
of
memory
hierarchies
in
which
the
backing
or
secondary
store
has
a
very
small
read
time
relative
of
both
the
time
required
for
writing
and
to
the
read
time
of
conventional
backing
storage
devices
several
analytic
models
are
introduced
and
it
is
shown
that
such
hierarchies
may
operate
in
ways
which
differ
from
those
of
more
conventional
hierarchies
in
particular
it
is
shown
that
it
may
not
be
necessary
to
multiprogram
in
such
a
situation
in
the
past
backing
storage
devices
have
been
roughly
symmetric
with
respect
to
their
read
and
write
times
this
situation
may
not
continue
as
several
devices
are
currently
under
development
which
may
have
a
very
small
read
time
write
time
ratio
this
study
places
particular
emphasis
on
one
such
system
the
rca
read
write
holographic
optical
memory
cacm
april
1973
williams
j
asymmetric
memory
hierarchy
demand
paging
holographic
optical
memory
memory
device
memory
hierarchy
paging
storage
device
storage
hierarchy
virtual
memory
4
3
4
32
5
2
6
2
6
34
ca730402
jb
january
24
1978
10
15
am
1892
4
2526
1924
4
2526
2095
4
2526
2218
4
2526
2297
4
2526
2374
4
2526
2526
4
2526
2667
4
2526
2668
4
2526
2862
4
2526
2863
4
2526
1728
5
2526
2526
5
2526
2526
5
2526
2526
5
2526
</TEXT>
</DOC>
<DOC>
<DOCNO>2527</DOCNO>
<TEXT>
implementation
of
high
level
language
machine
computing
machines
which
directly
execute
the
statements
of
a
high
level
language
have
been
proposed
in
the
past
this
report
describes
the
actual
implementation
of
such
a
machine
it
is
a
computer
whose
machine
language
is
apl
the
machine
is
fully
operational
and
correctly
executes
almost
all
of
the
apl
operations
on
scalars
vectors
and
arrays
the
machine
automatically
allocates
memory
executes
statements
calls
functions
converts
numbers
from
one
type
to
another
checks
subscripts
and
automatically
detects
many
types
of
programmer
errors
cacm
april
1973
hassitt
a
lageschulte
j
w
lyon
l
e
computer
architecture
high
level
language
machine
emulators
microprogramming
interpreters
execution
speed
apl
4
1
6
2
ca730401
jb
january
24
1978
10
21
am
2202
4
2527
2527
4
2527
1542
5
2527
2527
5
2527
2527
5
2527
2527
5
2527
</TEXT>
</DOC>
<DOC>
<DOCNO>2528</DOCNO>
<TEXT>
binary
pattern
reconstruction
from
projections
z
algorithm
r445
cacm
march
1973
lau
j
pattern
reconstruction
image
reconstruction
data
compression
picture
processing
3
63
5
30
ca730311
jb
january
24
1978
10
22
am
2528
5
2528
2528
5
2528
2528
5
2528
</TEXT>
</DOC>
<DOC>
<DOCNO>2529</DOCNO>
<TEXT>
binary
pattern
reconstruction
from
projections
z
algorithm
a445
cacm
march
1973
chang
s
pattern
reconstruction
image
reconstruction
data
compression
picture
processing
3
63
5
30
ca730310
jb
january
24
1978
10
25
am
2142
4
2529
2529
4
2529
2231
5
2529
2529
5
2529
2529
5
2529
2529
5
2529
</TEXT>
</DOC>
<DOC>
<DOCNO>2530</DOCNO>
<TEXT>
an
algorithm
for
extracting
phrases
in
a
space
optimal
fashion
z
algorithm
a444
cacm
march
1973
wagner
r
a
information
retrieval
coding
text
compression
3
70
5
6
ca730309
jb
january
24
1978
10
26
am
1973
4
2530
1992
4
2530
2138
4
2530
2203
4
2530
2251
4
2530
2530
4
2530
2530
4
2530
2537
4
2530
2543
4
2530
2559
4
2530
2573
4
2530
2623
4
2530
2819
4
2530
2991
4
2530
3053
4
2530
3083
4
2530
2107
5
2530
2530
5
2530
2530
5
2530
2530
5
2530
2537
5
2530
2107
6
2530
2530
6
2530
</TEXT>
</DOC>
<DOC>
<DOCNO>2531</DOCNO>
<TEXT>
graduate
education
the
ph
glut
cacm
march
1973
payne
w
h
graduate
education
ph
production
accreditation
1
5
2
2
2
3
ca730308
jb
january
24
1978
10
28
am
2531
5
2531
2531
5
2531
2531
5
2531
2662
5
2531
2531
6
2531
</TEXT>
</DOC>
<DOC>
<DOCNO>2532</DOCNO>
<TEXT>
on
harrison
substring
testing
technique
cacm
march
1973
bookstein
a
string
substring
hashing
information
storage
and
retrieval
3
74
5
30
5
5
ca730307
jb
january
24
1978
10
30
am
2532
4
2532
2631
4
2532
2746
4
2532
3001
4
2532
2139
5
2532
2532
5
2532
2532
5
2532
2532
5
2532
2631
5
2532
2139
6
2532
2532
6
2532
</TEXT>
</DOC>
<DOC>
<DOCNO>2533</DOCNO>
<TEXT>
gray
code
and
the
sign
sequence
when
f
f
f
f
x
is
ordered
cacm
march
1973
salzer
h
e
gray
code
sign
sequences
ordering
positive
monotonic
functions
binary
system
galois
sum
5
10
ca730306
jb
january
24
1978
10
35
am
2533
4
2533
2394
5
2533
2533
5
2533
2533
5
2533
2533
5
2533
</TEXT>
</DOC>
<DOC>
<DOCNO>2534</DOCNO>
<TEXT>
design
and
implementation
of
a
diagnostic
compiler
for
pl
i
pl
c
is
a
compiler
for
a
dialect
for
pl
i
the
design
objective
was
to
provide
a
maximum
degree
of
diagnostic
assistance
in
a
batch
processing
environment
for
the
most
part
this
assistance
is
implicit
and
is
provided
automatically
by
the
compiler
the
most
remarkable
characteristic
of
pl
c
is
its
perseverance
it
completes
translation
of
every
program
submitted
and
continues
execution
until
a
user
established
error
limit
is
reached
this
requires
that
the
compiler
repair
errors
encountered
during
both
translation
and
execution
and
the
design
of
pl
c
is
dominated
by
this
consideration
pl
c
also
introduces
several
explicit
user
controlled
facilities
for
program
testing
to
accommodate
these
extensions
to
pl
i
without
abandoning
compatibility
with
ibm
compiler
pl
c
permits
pseudo
comments
constructions
whose
contents
can
optionally
be
considered
either
source
test
or
comment
in
spite
of
the
diagnostic
effort
pl
c
is
a
fast
and
efficient
processor
it
effectively
demonstrates
that
compilers
can
provide
better
diagnostic
assistance
than
is
customarily
offered
even
when
a
sophisticated
source
language
is
employed
and
that
this
assistance
need
not
be
prohibitively
costly
cacm
march
1973
conway
r
w
wilcox
t
r
compilers
debugging
pl
i
programming
languages
1
5
4
12
4
42
ca730305
jb
january
24
1978
10
45
am
1179
4
2534
1288
4
2534
1323
4
2534
1358
4
2534
1380
4
2534
1544
4
2534
1646
4
2534
1665
4
2534
1781
4
2534
1781
4
2534
1787
4
2534
1989
4
2534
2111
4
2534
2112
4
2534
2182
4
2534
2251
4
2534
2497
4
2534
2534
4
2534
2534
4
2534
2534
4
2534
2534
4
2534
2534
4
2534
2534
4
2534
2534
4
2534
2541
4
2534
2543
4
2534
2556
4
2534
2556
4
2534
2559
4
2534
2650
4
2534
2650
4
2534
2698
4
2534
2708
4
2534
2708
4
2534
2733
4
2534
2770
4
2534
2820
4
2534
2887
4
2534
3053
4
2534
3073
4
2534
3083
4
2534
3155
4
2534
1787
5
2534
1959
5
2534
1973
5
2534
2111
5
2534
2182
5
2534
2534
5
2534
2534
5
2534
2534
5
2534
2708
5
2534
2820
5
2534
2971
5
2534
3045
5
2534
799
5
2534
830
5
2534
1477
6
2534
1477
6
2534
1491
6
2534
1491
6
2534
1787
6
2534
1835
6
2534
1974
6
2534
2111
6
2534
2534
6
2534
2534
6
2534
2534
6
2534
2534
6
2534
2556
6
2534
680
6
2534
799
6
2534
</TEXT>
</DOC>
<DOC>
<DOCNO>2535</DOCNO>
<TEXT>
the
effects
of
multiplexing
on
a
computer
communications
system
a
study
is
made
of
the
way
in
which
asynchronous
time
division
multiplexing
changes
the
stochastic
nature
of
the
arrival
process
from
a
user
to
the
computer
and
consequently
affects
the
performance
of
a
time
shared
computer
communications
system
it
is
concluded
that
while
for
certain
values
of
system
parameters
there
is
noticeable
improvement
in
the
performance
of
the
computer
model
in
the
sense
that
time
shared
scheduling
delays
are
reduced
these
improvements
are
offset
by
the
transmission
delays
imposed
by
multiplexing
so
that
there
may
be
little
or
no
change
in
the
computer
communications
system
performance
analytical
and
simulation
results
are
based
on
the
model
of
the
computer
communications
system
being
an
m
d
1
queue
the
multiplexor
in
tandem
with
a
single
exponential
server
the
computer
analytical
results
include
a
general
description
of
the
output
process
of
an
m
d
1
queue
and
the
conditions
under
which
this
output
process
is
approximately
poisson
cacm
march
1973
pack
c
d
computer
communications
time
sharing
multiplexing
scheduling
algorithms
operating
systems
3
80
3
81
6
20
ca730304
jb
january
24
1978
11
13
am
2535
5
2535
2535
5
2535
2535
5
2535
</TEXT>
</DOC>
<DOC>
<DOCNO>2536</DOCNO>
<TEXT>
telecommunications
using
a
front
end
minicomputer
the
use
of
a
front
end
minicomputer
to
provide
varied
remote
terminal
access
to
a
large
scale
computer
is
considered
the
problems
of
embedding
telecommunications
i
o
within
an
operating
system
are
discussed
and
it
is
shown
how
the
decentralization
of
intelligence
acquired
by
front
end
processing
vastly
simplifies
the
problem
a
specific
implementation
is
discussed
with
emphasis
on
the
main
processor
minicomputer
link
the
hardware
software
implementation
the
effect
of
the
main
processor
operating
system
and
an
assessment
of
the
advantages
over
a
hard
wired
line
controller
cacm
march
1973
feinroth
y
franceschini
e
goldstein
m
telecommunications
minicomputer
front
end
processor
remote
job
entry
remote
terminals
3
81
4
32
4
41
ca730303
jb
january
24
1978
11
23
am
1657
4
2536
2080
4
2536
2357
4
2536
2536
4
2536
1523
5
2536
2536
5
2536
2536
5
2536
2536
5
2536
2919
5
2536
2536
6
2536
2593
6
2536
2629
6
2536
</TEXT>
</DOC>
<DOC>
<DOCNO>2537</DOCNO>
<TEXT>
common
phrases
and
minimum
space
text
storage
a
method
for
saving
storage
space
for
text
strings
such
as
compiler
diagnostic
messages
is
described
the
method
relies
on
hand
selection
of
a
set
of
text
strings
which
are
common
to
one
or
more
messages
these
phrases
are
then
stored
only
once
the
storage
technique
gives
rise
to
a
mathematical
optimization
problem
determine
how
each
message
should
use
the
available
phrases
to
minimize
its
storage
requirement
this
problem
is
nontrivial
when
phrases
which
overlap
exist
however
a
dynamic
programming
algorithm
is
presented
which
solves
the
problem
in
time
which
grows
linearly
with
the
number
of
characters
in
the
text
algorithm
444
applies
to
this
paper
cacm
march
1973
wagner
r
a
diagnostic
messages
error
messages
common
phrases
minimum
space
text
storage
optimization
dynamic
programming
3
73
4
10
5
41
ca730302
jb
january
24
1978
1
12
pm
1973
4
2537
1992
4
2537
2138
4
2537
2203
4
2537
2251
4
2537
2530
4
2537
2537
4
2537
2537
4
2537
2543
4
2537
2559
4
2537
2573
4
2537
2991
4
2537
3053
4
2537
3083
4
2537
2107
5
2537
2530
5
2537
2537
5
2537
2537
5
2537
2537
5
2537
2623
5
2537
2819
5
2537
2107
6
2537
2501
6
2537
2537
6
2537
2537
6
2537
2537
6
2537
</TEXT>
</DOC>
<DOC>
<DOCNO>2538</DOCNO>
<TEXT>
a
computer
science
course
program
for
small
colleges
the
acm
subcommittee
on
small
college
programs
of
the
committee
on
curriculum
in
computer
science
cccs
was
appointed
in
1969
to
consider
the
unique
problems
of
small
colleges
and
universities
and
to
make
recommendations
regarding
computer
science
programs
at
such
schools
this
report
authorized
by
both
the
subcommittee
and
cccs
supplies
a
set
of
recommendations
for
courses
and
necessary
resources
implementation
problems
are
discussed
specifically
within
the
constraints
of
limited
faculty
and
for
the
purposes
of
satisfying
a
wide
variety
of
objectives
detailed
description
of
four
courses
are
given
suggestions
are
made
for
more
advanced
work
and
an
extensive
library
list
is
included
cacm
march
1973
austing
r
h
engel
g
l
computer
science
education
course
proposals
small
colleges
programming
course
social
implications
course
computer
organization
course
file
organization
course
bibliographies
1
52
ca730301
jb
january
24
1978
1
22
pm
2538
5
2538
2538
5
2538
2538
5
2538
2899
5
2538
3003
5
2538
1659
6
2538
1678
6
2538
1771
6
2538
1927
6
2538
1945
6
2538
2097
6
2538
2147
6
2538
2163
6
2538
2187
6
2538
2329
6
2538
2345
6
2538
2367
6
2538
2407
6
2538
2478
6
2538
2479
6
2538
2480
6
2538
2538
6
2538
2538
6
2538
</TEXT>
</DOC>
<DOC>
<DOCNO>2539</DOCNO>
<TEXT>
solution
of
the
transcendental
equation
w
exp
w
x
c5
algorithm
a443
cacm
february
1973
fritsch
f
n
shafer
r
e
crowley
w
p
transcendental
function
evaluation
solution
of
transcendental
equation
5
12
5
15
ca730209
jb
january
24
1978
1
26
pm
2539
5
2539
2539
5
2539
2539
5
2539
</TEXT>
</DOC>
<DOC>
<DOCNO>2540</DOCNO>
<TEXT>
properties
of
the
working
set
model
corrigendum
cacm
february
1973
denning
p
j
schwartz
s
c
ca730208
jb
january
24
1978
1
28
pm
2540
5
2540
2540
5
2540
2540
5
2540
</TEXT>
</DOC>
<DOC>
<DOCNO>2541</DOCNO>
<TEXT>
an
overview
of
the
ispl
computer
system
design
this
paper
explores
the
advantages
of
the
concurrent
design
of
the
language
operating
system
and
machine
via
microcode
to
create
an
interactive
programming
laboratory
it
describes
the
synergistic
effect
that
the
freedom
to
move
and
alter
features
from
one
of
these
domains
to
another
has
had
on
the
design
of
this
system
which
has
not
been
implemented
this
freedom
simplified
both
incremental
compilation
and
the
system
addressing
structure
and
centralized
the
communication
mechanisms
enabling
the
construction
of
hierarchical
subsystems
it
also
suggested
an
important
new
concept
for
operating
systems
separation
of
the
scheduling
from
the
maintenance
functions
in
resource
allocation
this
separation
enables
incorporation
of
new
scheduling
algorithms
decision
of
what
to
do
without
endangering
the
system
integration
correctly
performing
the
scheduling
decisions
cacm
february
1973
balzer
r
m
concurrent
design
operating
system
scheduling
interprogram
communication
incremental
compilation
virtual
addressing
debugging
hierarchical
subsystems
4
0
4
13
4
22
4
30
4
32
4
41
4
42
6
20
ca730207
jb
january
24
1978
1
59
pm
1323
4
2541
1358
4
2541
1380
4
2541
1665
4
2541
1781
4
2541
1787
4
2541
1989
4
2541
2112
4
2541
2193
4
2541
2326
4
2541
2477
4
2541
2534
4
2541
2541
4
2541
2541
4
2541
2594
4
2541
2698
4
2541
2733
4
2541
2820
4
2541
3004
4
2541
3073
4
2541
3155
4
2541
2541
5
2541
2541
5
2541
2541
5
2541
3186
5
2541
799
5
2541
</TEXT>
</DOC>
<DOC>
<DOCNO>2542</DOCNO>
<TEXT>
a
software
design
and
evaluation
system
a
critical
failure
of
current
software
system
design
and
implementation
methodology
is
that
the
performance
of
a
proposed
design
is
not
evaluated
before
it
is
actually
implemented
in
this
paper
the
reasons
for
this
failure
are
explored
and
a
new
methodology
which
overcomes
many
of
the
difficulties
is
proposed
a
system
which
integrates
performance
evaluation
with
design
and
implementation
is
described
this
system
is
based
on
a
simple
high
level
language
which
is
used
to
describe
the
evolving
system
at
all
stages
of
its
development
the
source
language
description
is
used
as
direct
input
to
performance
analysis
and
simulation
routines
using
the
performance
information
obtained
from
these
routines
as
feedback
the
problems
which
adversely
affect
performance
are
detected
early
enough
so
that
they
can
be
corrected
without
costly
major
reimplementation
of
the
proposed
system
cacm
february
1973
graham
r
m
clancy
g
j
jr
devaney
d
b
operating
system
development
language
processing
software
evaluation
compilers
system
programming
supervisory
systems
debugging
program
maintenance
modeling
system
integration
simulation
4
0
4
12
4
22
4
30
4
42
4
43
8
1
ca730206
jb
january
24
1978
2
07
pm
2542
5
2542
2542
5
2542
2542
5
2542
</TEXT>
</DOC>
<DOC>
<DOCNO>2543</DOCNO>
<TEXT>
reducing
the
retrieval
time
of
scatter
storage
techniques
a
new
method
for
entering
and
retrieving
information
in
a
hash
table
is
described
the
method
is
intended
to
be
efficient
if
most
entries
are
looked
up
several
times
the
expected
number
of
probes
to
look
up
an
entry
predicted
theoretically
and
verified
by
monte
carlo
experiments
is
considerably
less
than
for
other
comparable
methods
if
the
table
is
nearly
full
an
example
of
a
possible
fortran
implementation
is
given
cacm
february
1973
brent
r
p
address
calculation
content
addressing
file
searching
hash
addressing
hash
code
linear
probing
linear
quotient
method
scatter
storage
searching
symbol
table
3
7
3
73
3
74
4
1
4
9
ca730205
jb
january
24
1978
2
12
pm
1271
4
2543
1676
4
2543
1682
4
2543
1728
4
2543
1785
4
2543
1860
4
2543
1860
4
2543
1973
4
2543
1973
4
2543
1973
4
2543
1973
4
2543
1992
4
2543
1992
4
2543
2018
4
2543
2018
4
2543
2018
4
2543
2032
4
2543
2033
4
2543
2033
4
2543
2107
4
2543
2107
4
2543
2109
4
2543
2109
4
2543
2138
4
2543
2203
4
2543
2203
4
2543
2203
4
2543
2203
4
2543
2251
4
2543
2251
4
2543
2251
4
2543
2251
4
2543
2251
4
2543
2359
4
2543
2524
4
2543
2530
4
2543
2534
4
2543
2537
4
2543
2543
4
2543
2543
4
2543
2543
4
2543
2543
4
2543
2543
4
2543
2543
4
2543
2552
4
2543
2552
4
2543
2559
4
2543
2559
4
2543
2559
4
2543
2573
4
2543
2573
4
2543
2770
4
2543
2770
4
2543
2770
4
2543
2974
4
2543
2991
4
2543
2991
4
2543
3053
4
2543
3053
4
2543
3053
4
2543
3053
4
2543
3083
4
2543
3083
4
2543
911
4
2543
1785
5
2543
1786
5
2543
1973
5
2543
332
5
2543
2107
5
2543
2109
5
2543
2412
5
2543
2543
5
2543
2543
5
2543
2543
5
2543
3053
5
2543
3083
5
2543
1328
6
2543
1329
6
2543
1785
6
2543
1973
6
2543
1973
6
2543
1992
6
2543
2107
6
2543
2107
6
2543
2109
6
2543
2412
6
2543
2543
6
2543
2543
6
2543
2543
6
2543
2552
6
2543
2673
6
2543
2707
6
2543
2770
6
2543
</TEXT>
</DOC>
<DOC>
<DOCNO>2544</DOCNO>
<TEXT>
automatic
error
bounds
for
simple
zeros
of
analytic
functions
the
cauchy
ostrowski
theorem
on
convergence
of
newton
iterates
for
an
analytic
function
in
one
variable
is
extended
to
include
computational
errors
using
complex
interval
arithmetic
several
numerical
examples
are
given
for
polynomials
with
real
and
complex
roots
and
one
example
for
the
bessel
function
of
the
first
kind
cacm
february
1973
rokne
j
real
intervals
complex
intervals
real
interval
arithmetic
complex
interval
arithmetic
newton
method
cauchy
ostrowski
theorem
zeros
of
polynomials
zeros
of
bessel
functions
5
11
5
12
5
15
ca730204
jb
january
24
1978
2
51
pm
1524
4
2544
1931
4
2544
2214
4
2544
2544
4
2544
2544
4
2544
2544
4
2544
1524
5
2544
311
5
2544
2214
5
2544
2544
5
2544
2544
5
2544
2544
5
2544
</TEXT>
</DOC>
<DOC>
<DOCNO>2545</DOCNO>
<TEXT>
a
theory
of
discrete
patterns
and
their
implementation
in
snobol4
the
notion
of
a
discrete
pattern
is
formalized
and
certain
properties
deduced
a
pattern
is
shown
to
be
a
generalization
of
a
formal
language
algorithms
for
implementing
the
kinds
of
patterns
in
snobol4
are
given
the
general
approach
is
to
create
in
so
far
as
possible
a
bottom
up
parse
from
a
top
down
specification
cacm
february
1973
gimpel
j
f
patterns
snobol4
pattern
theory
parsing
pattern
matching
string
processing
pattern
implementation
4
29
5
39
ca730203
jb
january
24
1978
3
13
pm
1665
4
2545
1768
4
2545
1787
4
2545
1824
4
2545
1825
4
2545
1836
4
2545
1861
4
2545
2015
4
2545
2110
4
2545
2127
4
2545
2187
4
2545
2317
4
2545
2545
4
2545
2545
4
2545
2545
4
2545
2698
4
2545
2733
4
2545
2746
4
2545
1739
5
2545
1781
5
2545
2341
5
2545
2545
5
2545
2545
5
2545
2545
5
2545
2746
5
2545
1665
6
2545
1739
6
2545
2139
6
2545
2545
6
2545
2786
6
2545
</TEXT>
</DOC>
<DOC>
<DOCNO>2546</DOCNO>
<TEXT>
the
use
of
grammatical
inference
for
designing
programming
languages
both
in
designing
a
new
programming
language
and
in
extending
an
existing
language
the
designer
is
faced
with
the
problem
of
deriving
a
natural
grammar
for
the
language
we
are
proposing
an
interactive
approach
to
the
grammar
design
problem
wherein
the
designer
presents
a
sample
of
sentences
and
structures
as
input
to
a
grammatical
inference
algorithm
the
algorithm
then
constructs
a
grammar
which
is
a
reasonable
generalization
of
the
examples
submitted
by
the
designer
the
implementation
is
presently
restricted
to
a
subclass
of
operator
precedence
grammars
but
a
second
algorithm
is
outlined
which
applies
to
a
larger
class
of
context
free
grammars
cacm
february
1973
crespi
reghizzi
s
melkanoff
m
a
lichten
l
grammar
design
language
definition
inference
identification
in
the
limit
extensible
languages
3
61
4
2
5
23
ca730202
jb
january
24
1978
3
20
pm
1046
4
2546
1086
4
2546
1105
4
2546
1132
4
2546
1139
4
2546
1140
4
2546
1234
4
2546
1234
4
2546
1263
4
2546
1263
4
2546
1265
4
2546
1265
4
2546
1270
4
2546
1323
4
2546
1358
4
2546
1379
4
2546
1379
4
2546
1380
4
2546
1453
4
2546
1464
4
2546
1484
4
2546
1491
4
2546
1496
4
2546
1498
4
2546
1542
4
2546
1613
4
2546
1614
4
2546
1683
4
2546
1693
4
2546
1693
4
2546
1781
4
2546
1781
4
2546
1781
4
2546
1781
4
2546
1787
4
2546
1824
4
2546
1825
4
2546
1836
4
2546
1836
4
2546
1860
4
2546
1945
4
2546
1945
4
2546
2015
4
2546
2060
4
2546
2060
4
2546
2061
4
2546
2061
4
2546
2083
4
2546
2082
4
2546
2091
4
2546
2091
4
2546
2126
4
2546
2152
4
2546
2178
4
2546
2179
4
2546
2179
4
2546
2179
4
2546
2252
4
2546
2317
4
2546
2325
4
2546
2341
4
2546
2340
4
2546
2356
4
2546
2546
4
2546
2546
4
2546
2546
4
2546
2546
4
2546
2546
4
2546
464
4
2546
2603
4
2546
2645
4
2546
2652
4
2546
2684
4
2546
2698
4
2546
2698
4
2546
2708
4
2546
2708
4
2546
2824
4
2546
2842
4
2546
2929
4
2546
2934
4
2546
2982
4
2546
2986
4
2546
584
4
2546
3045
4
2546
3045
4
2546
3069
4
2546
3093
4
2546
631
4
2546
653
4
2546
669
4
2546
679
4
2546
680
4
2546
691
4
2546
761
4
2546
763
4
2546
795
4
2546
799
4
2546
945
4
2546
949
4
2546
989
4
2546
1477
5
2546
1491
5
2546
2126
5
2546
2546
5
2546
2546
5
2546
2546
5
2546
404
5
2546
3184
5
2546
</TEXT>
</DOC>
<DOC>
<DOCNO>2547</DOCNO>
<TEXT>
representation
of
contours
ad
regions
for
efficient
computer
search
a
novel
computer
searchable
representation
for
the
three
basic
pictorial
features
contour
maps
region
coverage
and
line
structures
is
described
the
representation
which
has
practical
storage
requirements
provides
a
rapid
mean
of
searching
large
files
for
data
associated
with
geometric
position
as
well
as
with
attribute
value
an
application
of
this
representation
to
handling
terrain
information
illustrates
its
utility
the
algebraic
properties
of
the
data
structure
make
it
computationally
easy
to
determine
whether
a
point
lies
within
a
closed
boundary
compute
the
area
contained
by
a
closed
boundary
generate
the
closed
boundary
representing
the
union
or
intersection
of
two
closed
boundaries
and
determine
the
neighboring
boundaries
to
a
point
and
the
minimum
distances
between
them
and
the
point
cacm
february
1973
merrill
r
d
contour
map
representation
region
boundary
representation
computer
search
able
structure
graphic
data
retrieval
graphic
language
two
dimensional
patterns
computer
graphics
graphic
display
3
21
3
23
3
79
6
35
ca730201
jb
january
24
1978
3
30
pm
1630
4
2547
2287
4
2547
2547
4
2547
2547
4
2547
2987
4
2547
3062
4
2547
3165
4
2547
1326
5
2547
1925
5
2547
2547
5
2547
2547
5
2547
2547
5
2547
2987
5
2547
1326
6
2547
1630
6
2547
2125
6
2547
2547
6
2547
2633
6
2547
421
6
2547
524
6
2547
</TEXT>
</DOC>
<DOC>
<DOCNO>2548</DOCNO>
<TEXT>
normal
deviate
s14
algorithm
a442
cacm
january
1973
hill
g
w
davis
a
w
normal
distribution
inverse
probit
transform
taylor
series
approximation
5
12
5
5
ca730113
jb
january
24
1978
3
39
pm
1157
4
2548
1779
4
2548
1920
4
2548
1944
4
2548
1987
4
2548
2548
4
2548
2548
5
2548
2548
5
2548
2548
5
2548
714
5
2548
</TEXT>
</DOC>
<DOC>
<DOCNO>2549</DOCNO>
<TEXT>
random
deviates
from
the
dipole
distribution
g5
algorithm
a441
cacm
january
1973
knop
r
e
random
number
probability
density
probability
distribution
dipole
distribution
cauchy
distribution
simulation
monte
carlo
3
17
5
5
ca730112
jb
january
24
1978
3
42
pm
2549
5
2549
2549
5
2549
2549
5
2549
</TEXT>
</DOC>
<DOC>
<DOCNO>2550</DOCNO>
<TEXT>
a
multidimensional
monte
carlo
quadrature
with
adaptive
stratified
sampling
d1
algorithm
a440
cacm
january
1973
gallaher
l
j
monte
carloquadrature
stratified
sampling
adaptive
quadrature
sequential
stratification
5
16
5
5
ca730111
jb
january
24
1978
3
44
pm
1352
4
2550
2048
4
2550
2074
4
2550
2093
4
2550
2093
4
2550
2415
4
2550
2550
4
2550
2550
4
2550
2550
4
2550
1573
5
2550
2074
5
2550
2550
5
2550
2550
5
2550
2550
5
2550
429
5
2550
</TEXT>
</DOC>
<DOC>
<DOCNO>2551</DOCNO>
<TEXT>
mutual
recursion
in
algol
60
using
restricted
compilers
cacm
january
1973
atkins
m
s
algol
60
mutual
recursion
compiler
restrictions
4
12
4
22
ca730110
jb
january
24
1978
3
46
pm
2551
5
2551
2551
5
2551
2551
5
2551
2658
5
2551
2551
6
2551
</TEXT>
</DOC>
<DOC>
<DOCNO>2552</DOCNO>
<TEXT>
a
note
on
when
to
chain
overflow
items
within
a
direct
access
table
cacm
january
1973
bays
c
hash
code
open
hash
chaining
information
retrieval
collision
3
7
4
9
ca730109
jb
january
24
1978
4
07
pm
1271
4
2552
1676
4
2552
1682
4
2552
1728
4
2552
1785
4
2552
1785
4
2552
1860
4
2552
1973
4
2552
2018
4
2552
2032
4
2552
2033
4
2552
2107
4
2552
2109
4
2552
2203
4
2552
2203
4
2552
2251
4
2552
2258
4
2552
2319
4
2552
2313
4
2552
2359
4
2552
2359
4
2552
2437
4
2552
2524
4
2552
2543
4
2552
2543
4
2552
2552
4
2552
2552
4
2552
2552
4
2552
2552
4
2552
2559
4
2552
2781
4
2552
2860
4
2552
2991
4
2552
2991
4
2552
3053
4
2552
911
4
2552
911
5
2552
1785
5
2552
332
5
2552
2203
5
2552
2552
5
2552
2552
5
2552
2552
5
2552
3083
5
2552
1328
6
2552
1973
6
2552
2107
6
2552
2543
6
2552
2552
6
2552
</TEXT>
</DOC>
<DOC>
<DOCNO>2553</DOCNO>
<TEXT>
the
practical
aspect
of
computer
science
education
discussion
cacm
january
1973
blount
s
e
education
computer
engineering
computer
science
curriculum
systems
design
1
52
6
0
ca730108
jb
january
24
1978
4
09
pm
2553
5
2553
2553
5
2553
2553
5
2553
</TEXT>
</DOC>
<DOC>
<DOCNO>2554</DOCNO>
<TEXT>
reduction
of
a
band
symmetric
generalized
eigenvalue
problem
an
algorithm
is
described
for
reducing
the
generalized
eigenvalue
problem
ax
lambda
bx
to
an
ordinary
problem
in
case
a
and
b
are
symmetric
band
matrices
with
b
positive
definite
if
n
is
the
order
of
the
matrix
and
m
the
bandwidth
the
matrices
a
and
b
are
partitioned
into
m
by
m
blocks
and
the
algorithm
is
described
in
terms
of
these
blocks
the
algorithm
reduces
the
generalized
problem
to
an
ordinary
eigenvalue
problem
for
a
symmetric
band
matrix
c
whose
bandwidth
is
the
same
as
a
and
b
the
algorithm
is
similar
to
those
of
rutishauser
and
schwartz
for
the
reduction
of
symmetric
matrices
to
band
form
the
calculation
c
requires
order
mn
2
operation
the
round
off
error
in
the
calculation
of
c
is
of
the
same
order
as
the
sum
of
the
errors
at
each
of
the
n
m
steps
of
the
algorithm
the
latter
errors
being
largely
determined
by
the
condition
of
b
with
respect
to
inversion
cacm
january
1973
crawford
c
r
generalized
eigenvalues
symmetric
band
matrices
5
14
ca730107
jb
january
24
1978
4
26
pm
2554
5
2554
2554
5
2554
2554
5
2554
</TEXT>
</DOC>
<DOC>
<DOCNO>2555</DOCNO>
<TEXT>
variable
precision
exponentiation
a
previous
paper
presented
an
efficient
algorithm
called
the
recomputation
algorithm
for
evaluating
a
rational
expression
to
within
any
desired
tolerance
on
a
computer
which
performs
variable
precision
arithmetic
operations
the
recomputation
algorithm
can
be
applied
to
expressions
involving
any
variable
precision
operations
having
o
10
p
sum
ei
error
bounds
where
p
denotes
the
operation
precision
and
ei
denotes
the
error
in
the
operation
ith
argument
this
paper
presents
an
efficient
variable
precision
exponential
operation
with
an
error
bound
of
the
above
order
other
operations
such
as
log
sin
and
cos
which
have
simple
series
expansions
can
be
handled
similarly
cacm
january
1973
richman
p
l
variable
precision
exponential
function
error
analysis
interval
arithmetic
5
11
ca730106
jb
january
24
1978
4
32
pm
2555
4
2555
2605
4
2555
2286
5
2555
2555
5
2555
2555
5
2555
2555
5
2555
</TEXT>
</DOC>
<DOC>
<DOCNO>2556</DOCNO>
<TEXT>
adaptive
correction
of
program
statements
a
method
of
analyzing
statements
in
a
programming
language
which
can
tolerate
a
considerable
inaccuracy
in
their
specification
is
proposed
this
method
involves
principles
at
present
mainly
confined
to
studies
in
the
area
of
artificial
intelligence
such
as
feature
extraction
approximate
tree
matching
and
strategy
improvement
by
feedback
from
the
matching
process
a
pilot
program
incorporating
the
principles
is
described
and
preliminary
operating
results
are
presented
a
final
section
surveys
further
principles
which
are
currently
being
investigated
cacm
january
1973
james
e
b
partridge
d
p
adaptive
linguistic
pattern
matching
automatic
parsing
approximate
match
compiler
program
statement
analysis
syntax
analysis
3
62
3
63
3
65
ca730105
jb
january
24
1978
4
38
pm
1179
4
2556
1288
4
2556
1544
4
2556
1646
4
2556
2111
4
2556
2257
4
2556
2360
4
2556
2451
4
2556
2451
4
2556
2452
4
2556
2534
4
2556
2534
4
2556
2556
4
2556
2556
4
2556
2556
4
2556
2556
4
2556
2650
4
2556
2650
4
2556
2708
4
2556
2765
4
2556
2887
4
2556
2978
4
2556
1935
5
2556
1936
5
2556
2111
5
2556
2556
5
2556
2556
5
2556
2556
5
2556
2698
5
2556
2708
5
2556
830
5
2556
1477
6
2556
1477
6
2556
1491
6
2556
1491
6
2556
1781
6
2556
1787
6
2556
2110
6
2556
2111
6
2556
2534
6
2556
2556
6
2556
2556
6
2556
680
6
2556
680
6
2556
799
6
2556
</TEXT>
</DOC>
<DOC>
<DOCNO>2557</DOCNO>
<TEXT>
on
the
time
required
for
a
sequence
of
matrix
products
this
paper
discusses
the
multiplication
of
conformable
sequences
of
row
vectors
column
vectors
and
square
matrices
the
minimum
time
required
to
evaluate
such
products
on
ordinary
serial
computers
as
well
as
parallel
computers
is
discussed
algorithms
are
presented
which
properly
parse
such
matrix
sequences
subject
to
the
constraints
of
the
machine
organization
cacm
january
1973
muraoka
y
kuck
d
j
matrix
expressions
matrix
multiplication
operation
minimization
parallel
machine
time
minimization
4
22
5
14
ca730104
jb
january
24
1978
4
41
pm
1614
4
2557
2253
4
2557
2557
4
2557
2557
5
2557
2557
5
2557
2557
5
2557
437
5
2557
3075
5
2557
3085
5
2557
2289
6
2557
2557
6
2557
2557
6
2557
2664
6
2557
2714
6
2557
</TEXT>
</DOC>
<DOC>
<DOCNO>2558</DOCNO>
<TEXT>
protection
in
programming
languages
linguistic
mechanisms
which
can
be
used
to
protect
one
subprogram
from
another
malfunctioning
are
described
function
producing
functions
and
various
type
tagging
schemes
are
considered
an
attempt
is
made
to
distinguish
between
access
limitation
and
authentication
cacm
january
1973
morris
j
h
jr
protection
types
environments
trademarks
seals
access
keys
access
control
authentication
secrecy
4
2
4
3
ca730103jb
january
24
1978
4
45
pm
1458
4
2558
1523
4
2558
1603
4
2558
1698
4
2558
1747
4
2558
1748
4
2558
1854
4
2558
1877
4
2558
1960
4
2558
2155
4
2558
2294
4
2558
2377
4
2558
2378
4
2558
2497
4
2558
2558
4
2558
2558
4
2558
2625
4
2558
2632
4
2558
2840
4
2558
2842
4
2558
2941
4
2558
3077
4
2558
3105
4
2558
3144
4
2558
3150
4
2558
1471
5
2558
2060
5
2558
2558
5
2558
2558
5
2558
2558
5
2558
2868
5
2558
2939
5
2558
2941
5
2558
1471
6
2558
2080
6
2558
2204
6
2558
2356
6
2558
2377
6
2558
2380
6
2558
2558
6
2558
2558
6
2558
2558
6
2558
2625
6
2558
2632
6
2558
2651
6
2558
</TEXT>
</DOC>
<DOC>
<DOCNO>2559</DOCNO>
<TEXT>
the
reallocation
of
hash
coded
tables
when
the
space
allocation
for
a
hash
coded
table
is
altered
the
table
entries
must
be
rescattered
over
the
new
space
a
technique
for
accomplishing
this
rescattering
is
presented
the
technique
is
independent
of
both
the
length
of
the
table
and
the
hashing
function
used
and
can
be
utilized
in
conjunction
with
a
linear
reallocation
of
the
table
being
rescattered
moreover
it
can
be
used
to
eliminate
previously
flagged
deletions
from
any
hash
coded
table
or
to
change
from
one
hashing
method
to
another
the
efficiency
of
the
technique
is
discussed
and
theoretical
statistics
are
given
cacm
january
1973
bays
c
reallocation
dynamic
storage
hash
code
scatter
storage
deletions
3
7
3
73
3
74
4
9
ca730102
jb
january
24
1978
4
50
pm
1676
4
2559
1682
4
2559
1728
4
2559
1860
4
2559
1973
4
2559
1973
4
2559
1992
4
2559
2018
4
2559
2032
4
2559
2033
4
2559
2107
4
2559
2109
4
2559
2138
4
2559
2203
4
2559
2203
4
2559
2251
4
2559
2251
4
2559
2251
4
2559
2359
4
2559
2524
4
2559
2530
4
2559
2534
4
2559
2537
4
2559
2543
4
2559
2543
4
2559
2543
4
2559
2552
4
2559
2559
4
2559
2559
4
2559
2559
4
2559
2573
4
2559
2770
4
2559
2991
4
2559
2991
4
2559
3053
4
2559
3053
4
2559
3053
4
2559
3083
4
2559
3083
4
2559
1785
5
2559
1973
5
2559
2107
5
2559
2559
5
2559
2559
5
2559
2559
5
2559
</TEXT>
</DOC>
<DOC>
<DOCNO>2560</DOCNO>
<TEXT>
a
queuing
model
of
a
multiprogrammed
computer
with
a
two
level
storage
system
the
results
are
presented
of
an
analysis
of
a
probabilistic
model
of
a
multiprogrammed
computer
system
with
a
two
level
storage
system
in
which
there
is
sequential
dependency
of
accesses
between
the
devices
expressions
are
obtained
for
the
long
run
probability
that
both
the
cpu
and
each
of
the
storage
devices
are
busy
some
numerical
results
are
given
which
quantify
the
gains
in
cpu
utilization
obtainable
by
multiprogramming
in
the
presence
of
this
type
of
storage
system
cacm
january
1973
shedler
g
s
multiprogrammed
computer
system
storage
system
hierarchical
index
sets
4
32
ca730101
jb
january
24
1978
4
55
pm
2560
5
2560
2560
5
2560
2560
5
2560
</TEXT>
</DOC>
<DOC>
<DOCNO>2561</DOCNO>
<TEXT>
a
heuristic
approach
to
inductive
inference
in
fact
retrieval
systems
heuristic
procedures
are
presented
which
have
been
developed
to
perform
inferences
by
generalizing
from
available
information
the
procedures
make
use
of
a
similarity
structure
which
is
imposed
on
the
data
base
using
nonnumerical
clustering
algorithms
they
are
implemented
in
a
model
fact
retrieval
system
which
uses
a
formal
query
language
and
a
property
list
data
structure
a
program
of
experiments
is
described
wherein
the
procedures
are
used
with
test
data
bases
which
are
altered
by
deleting
part
of
the
data
and
by
purposely
introducing
false
data
it
is
found
that
the
system
can
infer
the
correct
response
under
a
variety
of
conditions
involving
incomplete
and
inconsistent
data
cacm
december
1974
skinner
c
w
inference
inductive
inference
clustering
fact
retrieval
heuristics
3
61
3
71
3
79
ca741213
jb
january
13
1978
3
40
pm
2178
4
2561
2396
4
2561
2561
4
2561
2127
5
2561
2561
5
2561
2561
5
2561
2561
5
2561
</TEXT>
</DOC>
<DOC>
<DOCNO>2562</DOCNO>
<TEXT>
routing
problem
algorithm
r456
cacm
december
1974
tesch
g
ca741212
jb
january
13
1978
3
42
pm
2562
5
2562
2562
5
2562
2562
5
2562
</TEXT>
</DOC>
<DOC>
<DOCNO>2563</DOCNO>
<TEXT>
merge
sort
algorithm
r426
cacm
december
1974
bron
c
ca741211
jb
january
13
1978
3
43
pm
2563
4
2563
2348
5
2563
2563
5
2563
2563
5
2563
2563
5
2563
</TEXT>
</DOC>
<DOC>
<DOCNO>2564</DOCNO>
<TEXT>
hidden
line
plotting
program
algorithm
r420
cacm
december
1974
ellis
t
m
r
ca741210
jb
january
13
1978
3
45
pm
2564
5
2564
2564
5
2564
2564
5
2564
</TEXT>
</DOC>
<DOC>
<DOCNO>2565</DOCNO>
<TEXT>
a
gaussian
pseudo
random
number
generator
algorithm
488
cacm
december
1974
brent
r
p
random
numbers
pseudo
random
numbers
gaussian
distribution
normal
distribution
5
39
5
5
ca741209
jb
january
13
1978
3
57
pm
2349
4
2565
2565
4
2565
2565
4
2565
1716
5
2565
2276
5
2565
2565
5
2565
2565
5
2565
2565
5
2565
</TEXT>
</DOC>
<DOC>
<DOCNO>2566</DOCNO>
<TEXT>
exact
cumulative
distribution
of
the
kolmogorov
smirnov
statistic
for
small
samples
algorithm
a487
cacm
december
1974
pomeranz
j
kolmogorov
smirnov
test
k
s
statistic
goodness
of
fit
testing
8
1
5
5
ca741208
jb
january
13
1978
4
08
pm
2566
5
2566
2566
5
2566
2566
5
2566
</TEXT>
</DOC>
<DOC>
<DOCNO>2567</DOCNO>
<TEXT>
an
exponential
method
for
the
solution
of
systems
of
ordinary
differential
equations
an
explicit
coupled
single
step
method
for
the
numerical
solution
of
initial
value
problems
for
systems
of
ordinary
differential
equations
is
presented
the
method
was
designed
to
be
general
purpose
in
nature
but
to
be
especially
efficient
when
dealing
with
stiff
systems
of
differential
equations
it
is
in
general
second
order
except
for
the
case
of
a
linear
system
with
constant
coefficients
and
linear
forcing
terms
in
that
case
the
method
is
third
order
it
has
been
implemented
and
put
to
routine
usage
in
biological
applications
where
stiffness
frequently
appears
with
favorable
results
when
compared
to
a
standard
fourth
order
runge
kutta
implementation
computation
time
required
by
this
method
has
ranged
from
comparable
for
certain
nonstiff
problems
to
better
than
two
orders
of
magnitude
faster
for
some
highly
stiff
systems
cacm
december
1974
chu
s
c
berman
m
numerical
solution
ordinary
differential
equations
initial
value
problems
stiff
systems
5
17
ca741207
jb
january
13
1978
4
20
pm
2567
4
2567
2567
4
2567
2268
5
2567
2567
5
2567
2567
5
2567
2567
5
2567
755
5
2567
</TEXT>
</DOC>
<DOC>
<DOCNO>2568</DOCNO>
<TEXT>
a
graph
formulation
of
a
school
scheduling
algorithm
the
problem
classically
titled
the
examination
schedule
problem
takes
various
forms
in
the
literature
most
of
these
formulations
can
be
presented
in
the
terminology
of
classical
network
theory
one
such
formulation
is
given
a
nondirected
network
partition
its
nodes
into
a
minimal
number
of
subsets
such
that
no
two
members
of
the
same
subset
are
connected
by
anarc
an
obvious
lower
limit
to
this
number
is
the
size
of
the
largest
strongly
connected
subgraph
kirchgassner
proved
that
an
upper
limit
is
this
size
plus
one
one
logical
extension
of
the
previous
work
is
the
introduction
of
variable
length
examinations
where
w
i
is
the
number
of
periods
for
exam
i
the
object
of
this
paper
is
to
generalize
the
definition
of
largest
strongly
connected
subgraph
to
include
the
weighting
of
nodes
to
present
an
approximate
algorithm
which
usually
finds
the
largest
strongly
connected
subgraph
and
to
discuss
the
application
of
this
algorithm
to
the
solution
of
school
scheduling
and
exam
scheduling
problems
cacm
december
1974
salazar
a
oakford
r
v
scheduling
school
scheduling
examination
scheduling
nondirected
network
graph
subgraph
strongly
connected
subgraph
3
51
3
52
ca741206
jb
january
13
1978
4
37
pm
2568
5
2568
2568
5
2568
2568
5
2568
</TEXT>
</DOC>
<DOC>
<DOCNO>2569</DOCNO>
<TEXT>
computer
generation
of
gamma
random
variates
with
non
integral
shape
parameters
when
the
shape
parameter
a
is
integral
generating
gamma
random
variables
with
a
digital
computer
is
straightforward
there
is
no
simple
method
for
generating
gamma
random
variates
with
non
integral
shape
parameters
a
common
procedure
is
to
approximately
generate
such
random
variables
by
use
of
the
so
called
probability
switch
method
another
procedure
which
is
exact
is
due
to
johnk
this
paper
presents
a
rejection
method
for
exactly
generating
gamma
random
variables
when
a
is
greater
than
1
the
efficiency
of
the
rejection
method
is
shown
to
be
better
than
the
efficiency
of
johnk
method
the
paper
concludes
that
when
a
is
non
integral
the
following
mix
of
procedures
yields
the
best
combination
of
accuracy
and
efficiency
1
when
a
is
less
than
1
use
johnk
method
2
when
1
is
less
than
a
and
a
is
less
than
5
use
the
rejection
method
3
when
a
is
greater
than
5
use
the
probability
switch
method
cacm
december
1974
wallace
n
d
simulation
gamma
random
variables
probability
distribution
random
numbers
5
5
8
1
ca741205
jb
january
16
1978
9
35
am
2569
5
2569
2569
5
2569
2569
5
2569
2847
5
2569
2928
5
2569
3046
5
2569
3098
5
2569
3107
5
2569
1751
6
2569
2277
6
2569
2380
6
2569
2522
6
2569
2569
6
2569
2569
6
2569
2569
6
2569
2569
6
2569
2569
6
2569
2847
6
2569
2847
6
2569
3098
6
2569
</TEXT>
</DOC>
<DOC>
<DOCNO>2570</DOCNO>
<TEXT>
a
comparison
of
list
schedules
for
parallel
processing
systems
the
problem
of
scheduling
two
or
more
processors
to
minimize
the
execution
time
of
a
program
which
consists
of
a
set
of
partially
ordered
tasks
is
studied
cases
where
task
execution
times
are
deterministic
and
others
in
which
execution
times
are
random
variables
are
analyzed
it
is
shown
that
different
algorithms
suggested
in
the
literature
vary
significantly
in
execution
time
and
that
the
b
schedule
of
coffman
and
graham
is
near
optimal
a
dynamic
programming
solution
for
the
case
in
which
execution
times
are
random
variables
is
presented
cacm
december
1974
adam
t
l
chandy
k
m
dickson
j
r
parallel
processing
precedence
graphs
scheduling
list
scheduling
optimization
dynamic
programming
4
3
4
32
4
34
4
35
5
3
5
32
5
4
5
42
8
1
ca741204
jb
january
16
1978
9
42
am
2570
5
2570
2570
5
2570
2570
5
2570
</TEXT>
</DOC>
<DOC>
<DOCNO>2571</DOCNO>
<TEXT>
an
analytic
model
of
the
hasp
execution
task
monitor
the
hasp
execution
task
monitor
periodically
rearranges
the
os
360
dispatching
chain
to
give
tasks
preemptive
execution
priority
in
inverse
order
to
that
of
their
cpu
utilization
history
the
effect
is
to
keep
the
i
o
bound
tasks
active
and
to
prevent
cpu
bound
tasks
from
locking
out
other
tasks
this
paper
develops
a
simple
model
of
the
execution
task
monitor
and
employs
it
to
study
the
effectiveness
of
the
monitor
in
improving
system
performance
a
modified
strategy
monitor
control
is
investigated
for
the
case
of
task
execution
in
a
memory
hierarchy
of
varying
speeds
cacm
december
1974
strauss
j
c
hasp
os
360
dispatching
scheduling
modeling
performance
evaluation
4
32
8
1
ca741203
jb
january
16
1978
9
51
am
2571
4
2571
3072
4
2571
3119
4
2571
2245
5
2571
2571
5
2571
2571
5
2571
2571
5
2571
</TEXT>
</DOC>
<DOC>
<DOCNO>2572</DOCNO>
<TEXT>
arguments
for
a
moratorium
on
the
construction
of
a
community
information
utility
in
this
article
the
author
urges
a
prudent
and
decentralized
approach
to
the
question
of
the
design
and
desirability
of
computerized
community
information
utilities
before
accepting
the
inevitability
and
desirability
of
this
or
any
technology
we
should
1
be
sure
of
the
feasibility
internally
and
externally
of
what
is
proposed
2
project
and
perhaps
wait
for
changes
in
complementary
techniques
3
evaluate
current
and
projected
supplementary
techniques
4
establish
the
existence
of
demand
for
what
is
proposed
5
take
steps
to
involve
a
representative
group
of
ultimate
users
in
systems
design
and
6
carefully
think
through
possible
side
effects
on
man
and
his
world
view
current
proposals
for
community
information
utilities
are
examined
in
this
framework
and
the
conclusion
is
drawn
that
society
is
not
yet
in
a
position
to
justify
either
the
construction
of
an
information
utility
in
a
prototype
community
or
the
acceptance
of
a
policy
in
favor
of
its
widespread
implementation
cacm
december
1974
press
l
i
community
information
utilities
social
implications
public
policy
2
1
2
3
ca741202
jb
january
16
1978
10
02
am
2572
5
2572
2572
5
2572
2572
5
2572
3179
5
2572
2572
6
2572
2607
6
2572
3076
6
2572
</TEXT>
</DOC>
<DOC>
<DOCNO>2573</DOCNO>
<TEXT>
computer
programming
as
an
art
cacm
december
1974
knuth
d
e
ca741201
jb
january
16
1978
10
04
am
1860
4
2573
1973
4
2573
1973
4
2573
1992
4
2573
1992
4
2573
2018
4
2573
2033
4
2573
2107
4
2573
2109
4
2573
2138
4
2573
2203
4
2573
2203
4
2573
2251
4
2573
2251
4
2573
2251
4
2573
2530
4
2573
2537
4
2573
2543
4
2573
2543
4
2573
2559
4
2573
2573
4
2573
2573
4
2573
2573
4
2573
2770
4
2573
2770
4
2573
2991
4
2573
3053
4
2573
3083
4
2573
1786
5
2573
2018
5
2573
2107
5
2573
2573
5
2573
2573
5
2573
2573
5
2573
</TEXT>
</DOC>
<DOC>
<DOCNO>2574</DOCNO>
<TEXT>
multiple
exists
from
a
loop
using
neither
go
to
nor
labels
cacm
november
1974
evans
r
v
goto
free
programming
control
structures
multiple
exists
from
loops
exit
statement
4
20
4
22
ca741110
jb
january
16
1978
10
07
am
2574
4
2574
2709
4
2574
2477
5
2574
2574
5
2574
2574
5
2574
2574
5
2574
</TEXT>
</DOC>
<DOC>
<DOCNO>2575</DOCNO>
<TEXT>
the
best
match
problem
in
document
retrieval
cacm
november
1974
van
rijsbergen
c
j
document
retrieval
best
match
clustering
file
searching
matching
dissimilarity
hierarchy
classification
3
73
3
74
3
79
5
30
ca741109
jb
january
16
1978
10
09
am
2575
4
2575
2966
4
2575
3134
4
2575
2524
5
2575
2575
5
2575
2575
5
2575
2575
5
2575
</TEXT>
</DOC>
<DOC>
<DOCNO>2576</DOCNO>
<TEXT>
a
simple
technique
for
representing
strings
in
fortran
iv
cacm
november
1974
hanson
d
r
string
processing
fortran
iv
string
representation
structured
programming
data
structures
3
70
4
0
4
19
4
9
ca741108
jb
january
16
1978
10
12
am
2576
5
2576
2576
5
2576
2576
5
2576
</TEXT>
</DOC>
<DOC>
<DOCNO>2577</DOCNO>
<TEXT>
an
on
site
data
management
system
application
in
field
archaeology
cacm
november
1974
brown
j
a
werner
b
apl
plus
archaeology
koster
prehistoric
site
data
management
retrieval
systems
3
36
3
70
3
73
3
89
ca741107
jb
january
16
1978
10
15
am
2577
5
2577
2577
5
2577
2577
5
2577
</TEXT>
</DOC>
<DOC>
<DOCNO>2578</DOCNO>
<TEXT>
self
stabilizing
systems
in
spite
of
distributed
control
cacm
november
1974
dijkstra
e
w
multiprocessing
networks
self
stabilization
synchronization
mutual
exclusion
robustness
sharing
error
recovery
distributed
control
harmonious
cooperation
self
repair
4
32
ca741106
jb
january
16
1978
10
18
am
2578
5
2578
2578
5
2578
2578
5
2578
</TEXT>
</DOC>
<DOC>
<DOCNO>2579</DOCNO>
<TEXT>
register
allocation
via
usage
counts
this
paper
introduces
the
notion
of
usage
counts
shows
how
usage
counts
can
be
developed
by
algorithms
that
eliminate
redundant
computations
and
describes
how
usage
counts
can
provide
the
basis
for
register
allocation
the
paper
compares
register
allocation
based
on
usage
counts
to
other
commonly
used
register
allocation
techniques
and
presents
evidence
which
shows
that
the
usage
count
technique
is
significantly
better
than
these
other
techniques
cacm
november
1974
freiburghouse
r
a
optimization
redundant
computations
common
subexpressions
register
allocation
compilers
programming
languages
virtual
memory
demand
paging
4
12
4
2
4
39
ca741105
jb
january
16
1978
10
24
am
1781
4
2579
1807
4
2579
2034
4
2579
2290
4
2579
2579
4
2579
2579
4
2579
2579
4
2579
2923
4
2579
2923
4
2579
2945
4
2579
1535
5
2579
1807
5
2579
1947
5
2579
2579
5
2579
2579
5
2579
2579
5
2579
</TEXT>
</DOC>
<DOC>
<DOCNO>2580</DOCNO>
<TEXT>
a
method
for
composing
simple
traditional
music
by
computer
a
method
is
described
for
composing
musical
rounds
by
computer
this
method
uses
some
music
theory
plus
additional
heuristics
fundamental
to
the
method
is
a
set
of
productions
together
with
sets
of
applicability
rules
and
weight
rules
which
operate
on
the
productions
deciding
when
and
to
what
extent
they
are
available
for
use
several
rounds
generated
by
the
computer
implementation
of
the
method
are
presented
generally
the
resultant
music
sounds
mediocre
to
the
professional
although
usually
pleasing
to
the
layman
it
appears
that
full
blown
music
theory
is
not
needed
for
rounds
all
the
hardware
required
for
structural
levels
is
not
necessary
for
these
pieces
the
author
has
tried
to
address
both
musicians
and
computer
scientists
cacm
november
1974
rader
g
m
artificial
intelligence
heuristic
programming
models
of
cognitive
processes
computer
music
computer
composition
music
theory
formal
languages
probabilistic
grammars
3
44
3
65
5
23
ca741104
jb
january
16
1978
10
35
am
2580
5
2580
2580
5
2580
2580
5
2580
</TEXT>
</DOC>
<DOC>
<DOCNO>2581</DOCNO>
<TEXT>
a
locally
organized
parser
for
spoken
input
this
paper
describes
lpars
a
locally
organized
parsing
system
designed
for
use
in
a
continuous
speech
recognizer
lpars
processes
a
string
of
phonemes
which
contains
ambiguity
and
error
the
system
is
locally
organized
in
the
sense
that
it
builds
local
parse
structures
from
reliable
word
candidates
recognized
anywhere
in
an
input
utterance
these
local
structures
are
used
as
islands
of
reliability
to
guide
the
search
for
more
highly
garbled
words
which
might
complete
the
utterance
cacm
november
1974
miller
p
l
parsing
speech
recognition
speech
understanding
augmented
transition
network
local
parsing
3
42
3
65
3
69
ca741103
jb
january
16
1978
10
41
am
2581
4
2581
2739
4
2581
2795
4
2581
2921
4
2581
3087
4
2581
1989
5
2581
2581
5
2581
2581
5
2581
2581
5
2581
</TEXT>
</DOC>
<DOC>
<DOCNO>2582</DOCNO>
<TEXT>
improving
locality
by
critical
working
sets
a
new
approach
to
program
locality
improvement
via
restructuring
is
described
the
method
is
particularly
suited
to
those
systems
where
primary
memory
is
managed
according
to
a
working
set
strategy
it
is
based
on
the
concept
of
critical
working
set
a
working
set
which
does
not
contain
the
next
memory
reference
the
data
the
method
operates
upon
are
extracted
from
a
trace
of
the
program
to
be
restructured
it
is
shown
that
except
in
some
special
cases
the
method
is
not
optimum
however
the
experimental
results
obtained
by
using
the
method
to
restructure
an
interactive
text
editor
and
the
file
system
module
of
an
operating
system
have
shown
its
substantial
superiority
over
the
other
methods
proposed
in
the
literature
cacm
november
1974
ferrari
d
program
restructuring
program
segmentation
locality
improvement
memory
hierarchies
virtual
memory
multiprogramming
restructuring
techniques
static
restructuring
dynamic
restructuring
working
set
strategy
critical
working
set
4
32
4
39
4
43
4
49
4
9
ca741102
jb
january
16
1978
10
50
am
1892
4
2582
1901
4
2582
2085
4
2582
2095
4
2582
2218
4
2582
2277
4
2582
2319
4
2582
2319
4
2582
2329
4
2582
2358
4
2582
2365
4
2582
2373
4
2582
2380
4
2582
2434
4
2582
2499
4
2582
2501
4
2582
2582
4
2582
2582
4
2582
2582
4
2582
2582
4
2582
2669
4
2582
2669
4
2582
2828
4
2582
2863
4
2582
2881
4
2582
2928
4
2582
2996
4
2582
3006
4
2582
3054
4
2582
3067
4
2582
3152
4
2582
1751
5
2582
1924
5
2582
2017
5
2582
2130
5
2582
2582
5
2582
2582
5
2582
2582
5
2582
</TEXT>
</DOC>
<DOC>
<DOCNO>2583</DOCNO>
<TEXT>
guidelines
for
humanizing
computerized
information
systems
a
report
from
stanley
house
cacm
november
1974
sterling
t
d
humanization
social
implication
management
information
systems
regulations
social
and
behavioral
sciences
philosophy
1
5
2
3
3
3
4
3
5
ca741101
jb
january
16
1978
10
53
am
2583
5
2583
2583
5
2583
2583
5
2583
3142
5
2583
2583
6
2583
3076
6
2583
</TEXT>
</DOC>
<DOC>
<DOCNO>2584</DOCNO>
<TEXT>
enumerating
full
time
programmers
data
from
the
1970
census
and
the
department
of
labor
area
wage
surveys
are
used
to
derive
estimates
of
the
number
of
full
time
programmers
employed
during
the
years
1969
through
1973
the
1973
figure
of
180
000
is
considerably
less
than
suggested
in
earlier
reports
it
is
recommended
that
educational
administrators
consider
whether
the
many
courses
aimed
at
training
programmers
are
justified
on
a
vocational
basis
cacm
october
1974
gilchrist
b
weber
r
e
programmer
employment
1970
census
area
wage
survey
1
50
2
2
2
42
ca741014
jb
january
16
1978
11
00
am
2584
5
2584
2584
5
2584
2584
5
2584
</TEXT>
</DOC>
<DOC>
<DOCNO>2585</DOCNO>
<TEXT>
efficient
implementation
of
a
variable
projection
algorithm
for
nonlinear
least
squares
problems
errata
cacm
october
1974
krogh
f
t
ca741013
jb
january
16
1978
11
02
am
2585
5
2585
2585
5
2585
2585
5
2585
</TEXT>
</DOC>
<DOC>
<DOCNO>2586</DOCNO>
<TEXT>
adapting
optimal
code
generation
for
arithmetic
expressions
to
the
instruction
sets
available
on
present
day
computers
errata
cacm
october
1974
stockhausen
p
f
ca741012
jb
january
16
1978
11
05
am
2586
5
2586
2586
5
2586
2586
5
2586
</TEXT>
</DOC>
<DOC>
<DOCNO>2587</DOCNO>
<TEXT>
on
the
construction
of
a
representative
synthetic
workload
errata
cacm
october
1974
sreenivarsan
k
kleinman
a
j
ca741011
jb
january
16
1978
11
07
am
2587
4
2587
2588
4
2587
2587
5
2587
2587
5
2587
2587
5
2587
2612
5
2587
</TEXT>
</DOC>
<DOC>
<DOCNO>2588</DOCNO>
<TEXT>
rosenbrock
function
minimization
algorithm
r450
cacm
october
1974
klemes
j
klemsa
j
ca741010
jb
january
16
1978
11
09
am
2587
4
2588
2588
4
2588
2588
5
2588
2588
5
2588
2588
5
2588
2612
5
2588
</TEXT>
</DOC>
<DOC>
<DOCNO>2589</DOCNO>
<TEXT>
a
computer
routine
for
quadratic
and
linear
programming
problems
algorithm
r431
cacm
october
1974
proll
l
g
ca741009
jb
january
16
1978
11
10
am
2589
4
2589
1353
5
2589
2589
5
2589
2589
5
2589
2589
5
2589
</TEXT>
</DOC>
<DOC>
<DOCNO>2590</DOCNO>
<TEXT>
hypergeometric
algorithm
c191
cacm
october
1974
kopelaar
h
ca741008
jb
january
16
1978
11
14
am
2590
4
2590
2590
5
2590
2590
5
2590
2590
5
2590
888
5
2590
</TEXT>
</DOC>
<DOC>
<DOCNO>2591</DOCNO>
<TEXT>
numerical
inversion
of
laplace
transform
algorithm
a486
cacm
october
1974
veillon
f
laplace
transform
inversion
5
16
ca741007
jb
january
16
1978
11
17
am
2591
4
2591
2124
5
2591
2591
5
2591
2591
5
2591
2591
5
2591
</TEXT>
</DOC>
<DOC>
<DOCNO>2592</DOCNO>
<TEXT>
on
generation
of
test
problems
for
linear
programming
codes
users
of
linear
programming
computer
codes
have
realized
the
necessity
of
evaluating
the
capacity
effectiveness
and
accuracy
of
the
solutions
provided
by
such
codes
large
scale
linear
programming
codes
at
most
installations
are
assumed
to
be
generating
correct
solutions
without
ever
having
been
bench
marked
by
test
problems
with
known
solutions
the
reason
for
this
failure
to
adequately
test
the
codes
is
that
rarely
are
there
large
problems
with
known
solutions
readily
available
this
paper
presents
a
theoretical
justification
and
an
illustrative
implementation
of
a
method
for
generating
linear
programming
test
problems
with
known
solutions
the
method
permits
the
generation
of
test
problems
that
are
of
arbitrary
size
and
have
a
wide
range
of
numerical
characteristics
cacm
october
1974
charnes
a
raike
w
m
stutz
j
d
walters
a
s
linear
programming
test
problem
generation
lp
program
evaluation
lp
program
validation
5
41
ca741006
jb
january
16
1978
12
28
pm
2592
5
2592
2592
5
2592
2592
5
2592
</TEXT>
</DOC>
<DOC>
<DOCNO>2593</DOCNO>
<TEXT>
a
back
end
computer
for
data
base
management
it
is
proposed
that
the
data
base
management
function
be
placed
on
a
dedicated
back
end
computer
which
accepts
commands
in
a
relatively
high
level
language
such
as
the
codasyl
data
base
task
group
april
1971
report
from
a
host
computer
accesses
the
data
base
on
secondary
storage
and
returns
results
the
advantages
of
such
a
configuration
are
discussed
an
experimental
implementation
called
the
experimental
data
management
system
xdms
is
described
and
certain
conclusions
about
the
back
end
approach
are
drawn
from
this
implementation
cacm
october
1974
canaday
r
h
harrison
r
d
ivie
e
l
ryder
j
l
wehr
l
a
data
base
management
information
retrieval
computer
configurations
computer
networks
data
base
task
group
language
data
base
protection
data
base
portability
back
end
computer
3
79
4
22
4
33
4
35
ca741005
jb
january
16
1978
12
35
pm
2593
5
2593
2593
5
2593
2593
5
2593
2919
5
2593
2536
6
2593
2593
6
2593
2629
6
2593
</TEXT>
</DOC>
<DOC>
<DOCNO>2594</DOCNO>
<TEXT>
structured
data
structures
programming
systems
which
permit
arbitrary
linked
list
structures
enable
the
user
to
create
complicated
structures
without
sufficient
protection
deletions
can
result
in
unreachable
data
elements
and
there
is
no
guarantee
that
additions
will
be
performed
properly
to
remedy
this
situation
this
paper
proposes
a
gauge
which
provides
for
the
creation
of
a
restricted
class
of
data
structures
but
ensures
the
correctness
of
the
program
this
is
accomplished
by
an
explicit
structure
declaration
facility
a
restriction
on
the
permissible
operations
and
execution
time
checks
cacm
october
1974
shneiderman
b
scheuermann
p
structured
programming
data
structures
data
base
management
system
3
50
3
51
3
72
3
73
3
79
4
20
4
22
ca741004
jb
january
16
1978
12
46
pm
1720
4
2594
1927
4
2594
2147
4
2594
2163
4
2594
2193
4
2594
2252
4
2594
2319
4
2594
2326
4
2594
2345
4
2594
2478
4
2594
2477
4
2594
2480
4
2594
2541
4
2594
2594
4
2594
2594
4
2594
2594
4
2594
2594
4
2594
2709
4
2594
2852
4
2594
2899
4
2594
2939
4
2594
2972
4
2594
3004
4
2594
3130
4
2594
3155
4
2594
1771
5
2594
2155
5
2594
2204
5
2594
2594
5
2594
2594
5
2594
2594
5
2594
2975
5
2594
3186
5
2594
2594
6
2594
</TEXT>
</DOC>
<DOC>
<DOCNO>2595</DOCNO>
<TEXT>
a
note
on
the
calculation
working
set
size
finite
length
reference
string
of
arbitrary
structure
are
considered
and
an
exact
expression
for
average
working
set
size
in
terms
of
corrected
interreference
interval
statistics
is
derived
an
example
is
discussed
upper
and
lower
bounds
are
obtained
and
the
average
working
set
size
function
is
shown
to
be
efficiently
obtained
for
a
set
of
page
sizes
in
a
single
pass
of
the
reference
string
this
work
follows
the
developments
of
a
paper
by
denning
and
schwartz
who
consider
infinite
length
reference
strings
which
satisfy
certain
statistical
properties
and
who
derive
an
expression
relating
the
asymptotic
average
working
set
size
to
the
asymptotic
missing
page
rate
function
under
working
set
replacement
cacm
october
1974
slutz
d
r
traiger
i
l
working
set
model
paging
program
behavior
4
3
ca741003
jb
january
16
1978
12
56
pm
2374
4
2595
2380
4
2595
2450
4
2595
2595
4
2595
2996
4
2595
3006
4
2595
3067
4
2595
2373
5
2595
2595
5
2595
2595
5
2595
2595
5
2595
2996
5
2595
3006
5
2595
3067
5
2595
1751
6
2595
1751
6
2595
1751
6
2595
1884
6
2595
2374
6
2595
2374
6
2595
2373
6
2595
2373
6
2595
2373
6
2595
2595
6
2595
2595
6
2595
2595
6
2595
2682
6
2595
2863
6
2595
2864
6
2595
3006
6
2595
</TEXT>
</DOC>
<DOC>
<DOCNO>2596</DOCNO>
<TEXT>
a
weighted
buddy
method
for
dynamic
storage
allocation
an
extension
of
the
buddy
method
called
the
weighted
buddy
method
for
dynamic
storage
allocation
is
presented
the
weighted
buddy
method
allows
block
sizes
of
2
k
and
3
2
k
whereas
the
original
buddy
method
allowed
only
block
sizes
of
2
k
this
extension
is
achieved
at
an
additional
cost
of
only
two
bits
per
block
simulation
results
are
presented
which
compare
this
method
with
the
buddy
method
these
results
indicate
that
for
a
uniform
request
distribution
the
buddy
system
has
less
total
memory
fragmentation
than
the
weighted
buddy
algorithm
however
the
total
fragmentation
is
smaller
for
the
weighted
buddy
method
when
the
requests
are
for
exponentially
distributed
block
sizes
cacm
october
1974
shen
k
k
peterson
j
l
weighted
buddy
algorithm
buddy
systems
memory
allocation
dynamic
storage
allocation
3
89
4
32
4
39
ca741002
jb
january
16
1978
1
07
pm
1389
4
2596
1552
4
2596
2095
4
2596
2162
4
2596
2218
4
2596
2435
4
2596
2498
4
2596
2596
4
2596
2596
4
2596
2596
4
2596
2734
4
2596
2747
4
2596
2768
4
2596
2768
4
2596
2845
4
2596
2845
4
2596
2902
4
2596
2902
4
2596
2902
4
2596
2911
4
2596
2911
4
2596
2955
4
2596
2955
4
2596
3000
4
2596
1184
5
2596
1879
5
2596
2435
5
2596
2596
5
2596
2596
5
2596
2596
5
2596
2902
5
2596
2955
5
2596
1051
6
2596
1062
6
2596
1184
6
2596
1184
6
2596
1211
6
2596
1552
6
2596
1879
6
2596
2435
6
2596
2435
6
2596
2596
6
2596
2596
6
2596
2734
6
2596
2747
6
2596
2747
6
2596
2768
6
2596
2773
6
2596
</TEXT>
</DOC>
<DOC>
<DOCNO>2597</DOCNO>
<TEXT>
monitors
an
operating
system
structuring
concept
this
paper
develops
brinch
hansen
concept
of
a
monitor
as
a
method
of
structuring
an
operating
system
it
introduces
a
form
of
synchronization
describes
a
possible
method
of
implementation
in
terms
of
semaphores
and
gives
a
suitable
proof
rule
illustrative
examples
include
a
single
resource
scheduler
a
bounded
buffer
an
alarm
clock
a
buffer
pool
a
disk
head
optimizer
and
a
version
of
the
problem
of
readers
and
writers
cacm
october
1974
hoare
c
a
r
monitors
operating
systems
scheduling
mutual
exclusion
synchronization
system
implementation
languages
structured
multiprogramming
4
31
4
22
ca741001
jb
january
16
1978
1
23
pm
2320
4
2597
2597
4
2597
2597
4
2597
2777
4
2597
2851
4
2597
2895
4
2597
2912
4
2597
2946
4
2597
3128
4
2597
2150
5
2597
2320
5
2597
2597
5
2597
2597
5
2597
2597
5
2597
2865
5
2597
2866
5
2597
2898
5
2597
2972
5
2597
3043
5
2597
3128
5
2597
3144
5
2597
970
6
2597
1471
6
2597
1834
6
2597
2150
6
2597
2204
6
2597
2298
6
2597
2356
6
2597
2376
6
2597
2436
6
2597
2491
6
2597
2597
6
2597
2597
6
2597
2597
6
2597
2597
6
2597
2597
6
2597
2597
6
2597
2597
6
2597
2624
6
2597
2625
6
2597
2632
6
2597
2732
6
2597
2732
6
2597
2738
6
2597
2796
6
2597
2865
6
2597
2866
6
2597
2870
6
2597
2912
6
2597
2946
6
2597
3082
6
2597
</TEXT>
</DOC>
<DOC>
<DOCNO>2598</DOCNO>
<TEXT>
extending
the
information
theory
approach
to
converting
limited
entry
decision
tables
to
computer
programs
this
paper
modifies
an
earlier
algorithm
for
converting
decision
tables
into
flowcharts
which
minimize
subsequent
execution
time
when
compiled
into
a
computer
program
the
algorithms
considered
in
this
paper
perform
limited
search
and
accordingly
do
not
necessarily
result
in
globally
optimal
solutions
however
the
greater
search
effort
needed
to
obtain
a
globally
optimal
solution
for
complex
decision
tables
is
usually
not
justified
by
sufficient
savings
in
execution
time
there
is
an
analogy
between
the
problem
of
converting
decision
tables
into
efficient
flowcharts
and
the
well
understood
problem
in
information
theory
of
noiseless
coding
the
results
of
the
noiseless
coding
literature
are
used
to
explore
the
limitations
of
algorithms
used
to
solve
the
decision
table
problem
the
analogy
between
the
two
problems
is
also
used
to
develop
improvements
to
the
information
algorithm
in
extending
the
depth
of
search
under
certain
conditions
and
in
proposing
additional
conditions
to
be
added
to
the
decision
table
finally
the
information
algorithm
is
compared
with
an
algorithm
proposed
in
a
recent
paper
by
verhelst
cacm
september
1974
shwayder
k
coding
decision
tables
flowcharting
information
theory
noiseless
channel
sorting
3
50
5
31
ca740910
jb
january
17
1978
8
40
am
1354
4
2598
2053
4
2598
2220
4
2598
2220
4
2598
2273
4
2598
2273
4
2598
2453
4
2598
2453
4
2598
2492
4
2598
2518
4
2598
2598
4
2598
2598
4
2598
2598
4
2598
2598
4
2598
2598
4
2598
2598
4
2598
2616
4
2598
2691
4
2598
2726
4
2598
2726
4
2598
2726
4
2598
2726
4
2598
2856
4
2598
2856
4
2598
2856
4
2598
3113
4
2598
3113
4
2598
1172
5
2598
1548
5
2598
2220
5
2598
2263
5
2598
2453
5
2598
2598
5
2598
2598
5
2598
2598
5
2598
2691
5
2598
2845
5
2598
2856
5
2598
3113
5
2598
1172
6
2598
1184
6
2598
1327
6
2598
1354
6
2598
1354
6
2598
2053
6
2598
2220
6
2598
2263
6
2598
2435
6
2598
2453
6
2598
2598
6
2598
2598
6
2598
2598
6
2598
2691
6
2598
2736
6
2598
2747
6
2598
2768
6
2598
2856
6
2598
</TEXT>
</DOC>
<DOC>
<DOCNO>2599</DOCNO>
<TEXT>
first
order
approximation
to
the
optimum
checkpoint
interval
cacm
september
1974
young
j
w
checkpoint
job
failure
operations
programming
checkpoint
random
failure
operations
programming
2
43
4
0
ca740909
jb
january
17
1978
8
42
am
2599
5
2599
2599
5
2599
2599
5
2599
3089
5
2599
2599
6
2599
</TEXT>
</DOC>
<DOC>
<DOCNO>2600</DOCNO>
<TEXT>
computation
of
g
splines
via
a
factorization
method
e2
algorithm
a485
cacm
september
1974
eidson
h
d
schumaker
l
l
approximation
spline
approximation
5
13
ca740908
jb
january
17
1978
8
44
am
2600
5
2600
2600
5
2600
2600
5
2600
</TEXT>
</DOC>
<DOC>
<DOCNO>2601</DOCNO>
<TEXT>
evaluation
of
the
modified
bessel
functions
k0
z
and
k1
z
for
complex
arguments
s17
algorithm
a484
cacm
september
1974
burrell
k
h
bessel
functions
hankel
functions
modified
bessel
functions
gauss
hermite
quadrature
5
12
ca740907
jb
january
17
1978
8
47
am
2601
5
2601
2601
5
2601
2601
5
2601
</TEXT>
</DOC>
<DOC>
<DOCNO>2602</DOCNO>
<TEXT>
masked
three
dimensional
plot
program
with
rotations
j6
algorithm
a483
cacm
september
1974
watkins
s
l
plotting
three
dimensional
plotting
4
41
ca740906
jb
january
17
1978
8
49
am
2602
5
2602
2602
5
2602
2602
5
2602
</TEXT>
</DOC>
<DOC>
<DOCNO>2603</DOCNO>
<TEXT>
the
equivalence
of
reducing
transition
languages
and
deterministic
languages
the
class
of
reducing
transition
languages
introduced
by
eickel
paul
bauer
and
samelson
was
shown
by
morris
to
be
a
proper
superclass
of
the
simple
precedence
languages
in
this
paper
this
result
is
extended
showing
that
in
fact
the
first
class
is
equivalent
to
the
class
of
deterministic
context
free
languages
cacm
september
1974
schkolnick
m
reducing
transition
languages
syntax
controlled
generators
deterministic
context
free
grammars
4
12
5
23
ca740905
jb
january
17
1978
8
52
am
1215
4
2603
1542
4
2603
1683
4
2603
1693
4
2603
1781
4
2603
1781
4
2603
1787
4
2603
1787
4
2603
1836
4
2603
1945
4
2603
1945
4
2603
2060
4
2603
2061
4
2603
2082
4
2603
2091
4
2603
2152
4
2603
2179
4
2603
2340
4
2603
2356
4
2603
2546
4
2603
2603
4
2603
2603
4
2603
2698
4
2603
2708
4
2603
2824
4
2603
2982
4
2603
2986
4
2603
3045
4
2603
3093
4
2603
1491
5
2603
2603
5
2603
2603
5
2603
2603
5
2603
763
5
2603
</TEXT>
</DOC>
<DOC>
<DOCNO>2604</DOCNO>
<TEXT>
an
interactive
graphic
display
for
region
partitioning
by
linear
programming
using
linear
programming
an
interactive
graphic
display
system
has
been
implemented
to
solve
the
region
design
problem
of
partitioning
a
region
into
n
nonoverlapping
subregions
in
such
a
way
that
their
areas
are
in
specified
proportions
and
that
the
total
cost
of
servicing
them
is
a
minimum
in
a
conversational
manner
a
user
can
easily
obtain
different
partitionings
by
specifying
and
modifying
the
boundary
the
service
centers
locations
the
area
proportions
and
the
cost
functions
examples
are
included
cacm
september
1974
cheung
t
interactive
graphic
display
region
partitioning
area
specification
linear
programming
5
41
8
2
8
3
ca740904
jb
january
17
1978
8
56
am
2604
4
2604
1977
5
2604
2604
5
2604
2604
5
2604
2604
5
2604
</TEXT>
</DOC>
<DOC>
<DOCNO>2605</DOCNO>
<TEXT>
a
precise
numerical
analysis
program
a
description
is
given
of
a
program
for
computing
the
solution
to
a
small
number
of
standard
numerical
analysis
problems
to
any
specified
accuracy
up
to
a
limit
of
2000
correct
decimal
places
each
computed
number
is
bounded
in
an
interval
with
a
multiple
precision
midpoint
arithmetic
operations
involving
these
numbers
are
executed
according
to
interval
arithmetic
concepts
with
non
significant
digits
automatically
discarded
details
are
supplied
of
problem
specification
and
problem
computation
cacm
september
1974
aberth
o
interval
arithmetic
multiple
precision
list
structure
error
control
4
49
5
10
5
11
5
12
5
14
5
19
ca740903
jb
january
17
1978
9
01
am
1258
4
2605
1292
4
2605
1497
4
2605
1975
4
2605
2555
4
2605
2605
4
2605
2605
4
2605
1026
5
2605
2286
5
2605
2605
5
2605
2605
5
2605
2605
5
2605
</TEXT>
</DOC>
<DOC>
<DOCNO>2606</DOCNO>
<TEXT>
a
new
integration
algorithm
for
ordinary
differential
equations
based
on
continued
fraction
approximations
a
new
integration
algorithm
is
found
and
an
implementation
is
compared
with
other
programmed
algorithms
the
new
algorithm
is
a
step
by
step
procedure
for
solving
the
initial
value
problem
in
ordinary
differential
equations
it
is
designed
to
approximate
poles
of
small
integer
order
in
the
solutions
of
the
differential
equations
by
continued
fractions
obtained
by
manipulating
the
sums
of
truncated
taylor
series
expansions
the
new
method
is
compared
with
gragg
bulirsh
stoer
and
the
taylor
series
method
the
taylor
series
method
and
the
new
method
are
shown
to
be
superior
in
speed
and
accuracy
while
the
new
method
is
shown
to
be
most
superior
when
the
solution
is
required
near
a
singularity
the
new
method
can
finally
be
seen
to
pass
automatically
through
singularities
where
all
the
other
methods
which
are
discussed
will
have
failed
cacm
september
1974
willers
i
m
ordinary
differential
equations
initial
value
problem
integration
taylor
series
singularities
continued
fractions
program
comparison
5
17
ca740902
jb
january
17
1978
9
06
am
2606
5
2606
2606
5
2606
2606
5
2606
</TEXT>
</DOC>
<DOC>
<DOCNO>2607</DOCNO>
<TEXT>
a
problem
list
of
issues
concerning
computers
and
public
policy
cacm
september
1974
acm
committee
economic
and
sociological
effects
the
public
and
computers
2
11
2
12
ca740901
jb
january
17
1978
9
08
am
2607
5
2607
2607
5
2607
2607
5
2607
2756
5
2607
3076
5
2607
3179
5
2607
2572
6
2607
2607
6
2607
2607
6
2607
2607
6
2607
2840
6
2607
3076
6
2607
</TEXT>
</DOC>
<DOC>
<DOCNO>2608</DOCNO>
<TEXT>
recurrence
relations
for
the
fresnel
integral
and
similar
integrals
cacm
august
1974
acton
f
s
recurrence
relations
fresnel
integral
exponential
integral
5
12
ca740816
jb
january
17
1978
9
14
am
2608
5
2608
2608
5
2608
2608
5
2608
</TEXT>
</DOC>
<DOC>
<DOCNO>2609</DOCNO>
<TEXT>
interpolation
with
rounded
ramp
functions
a
new
interpolation
function
is
introduced
it
has
infinitely
many
continuous
derivatives
and
is
a
composition
of
ramp
functions
with
smoothed
bends
called
rounded
ramp
functions
how
the
interpolation
function
can
be
extended
to
more
than
one
variable
is
shown
an
efficient
fortran
program
is
given
by
which
the
interpolation
function
can
be
obtained
for
a
given
point
set
cacm
august
1974
lagerlof
r
o
e
interpolation
approximation
smooth
interpolation
multi
variable
interpolation
interpolation
function
approximation
function
spline
like
function
5
13
ca740815
jb
january
17
1978
9
18
am
2609
5
2609
2609
5
2609
2609
5
2609
</TEXT>
</DOC>
<DOC>
<DOCNO>2610</DOCNO>
<TEXT>
gauss
harmonic
interpolation
formulas
let
r
be
an
open
bounded
simply
connected
region
in
the
x
y
plane
and
let
x
y
be
a
point
in
r
assuming
r
is
starlike
with
respect
to
x
y
we
discuss
a
method
for
computing
gauss
harmonic
interpolation
formulas
for
r
and
the
point
x
y
such
formulas
approximate
a
harmonic
function
at
x
y
in
terms
of
a
linear
combination
of
its
values
at
certain
selected
points
on
the
boundary
of
r
such
formulas
are
useful
for
approximating
the
solution
of
the
dirichlet
problem
for
r
cacm
august
1974
stroud
a
h
interpolation
quadrature
harmonic
interpolation
harmonic
quadrature
dirichlet
problem
5
13
5
16
5
17
ca740814
jb
january
17
1978
9
23
am
2610
5
2610
2610
5
2610
2610
5
2610
</TEXT>
</DOC>
<DOC>
<DOCNO>2611</DOCNO>
<TEXT>
the
complex
method
for
constrained
optimization
algorithm
r454
cacm
august
1974
shere
k
d
ca740813
jb
january
17
1978
9
28
am
2611
5
2611
2611
5
2611
2611
5
2611
</TEXT>
</DOC>
<DOC>
<DOCNO>2612</DOCNO>
<TEXT>
rosenbrock
function
minimization
algorithm
r450
cacm
august
1974
bultheel
a
ca740812
jb
january
17
1978
9
33
am
2587
5
2612
2588
5
2612
2612
5
2612
2612
5
2612
2612
5
2612
2612
6
2612
2612
6
2612
</TEXT>
</DOC>
<DOC>
<DOCNO>2613</DOCNO>
<TEXT>
transitivity
sets
g7
algorithm
a482
cacm
august
1974
mckay
j
regener
e
transitivity
sets
5
39
ca740811
jb
january
17
1978
9
35
am
2613
5
2613
2613
5
2613
2613
5
2613
</TEXT>
</DOC>
<DOC>
<DOCNO>2614</DOCNO>
<TEXT>
arrow
to
precedence
network
transformation
h
algorithm
a481
cacm
august
1974
crandall
k
c
critical
path
networks
precedence
networks
3
23
5
40
ca740810
jb
january
17
1978
9
37
am
2614
5
2614
2614
5
2614
2614
5
2614
</TEXT>
</DOC>
<DOC>
<DOCNO>2615</DOCNO>
<TEXT>
procedures
for
computing
smoothing
and
interpolating
natural
splines
e1
algorithm
a480
cacm
august
1974
lyche
t
schumaker
l
l
approximation
interpolation
spline
natural
spline
spline
smoothing
5
13
ca740809
jb
january
17
1978
9
40
am
2615
5
2615
2615
5
2615
2615
5
2615
</TEXT>
</DOC>
<DOC>
<DOCNO>2616</DOCNO>
<TEXT>
on
the
conversion
of
programs
to
decision
tables
method
and
objectives
the
problems
of
converting
programs
to
decision
tables
are
investigated
objectives
of
these
conversions
are
mainly
program
debugging
and
optimization
in
practice
extensions
to
the
theory
of
computation
and
computability
are
suggested
cacm
august
1974
cavouras
j
c
decision
tables
program
optimization
debugging
semantics
theory
of
programming
systems
analysis
4
19
4
42
4
43
5
21
5
29
ca740808
jb
january
17
1978
9
43
am
2053
4
2616
2220
4
2616
2492
4
2616
2517
4
2616
2518
4
2616
2518
4
2616
2598
4
2616
2616
4
2616
2616
4
2616
2616
4
2616
2616
4
2616
2726
4
2616
3034
4
2616
3034
4
2616
795
4
2616
931
5
2616
1548
5
2616
1684
5
2616
2517
5
2616
2616
5
2616
2616
5
2616
2616
5
2616
</TEXT>
</DOC>
<DOC>
<DOCNO>2617</DOCNO>
<TEXT>
a
note
on
subexpression
ordering
in
the
evaluation
of
arithmetic
expressions
cacm
august
1974
denning
p
j
graham
g
s
ca740807
jb
january
17
1978
9
44
am
2617
5
2617
2617
5
2617
2617
5
2617
</TEXT>
</DOC>
<DOC>
<DOCNO>2618</DOCNO>
<TEXT>
a
new
solution
of
dijkstra
concurrent
programming
problem
a
simple
solution
to
the
mutual
exclusion
problem
is
presented
which
allows
the
system
to
continue
to
operate
despite
the
failure
of
any
individual
component
cacm
august
1974
lamport
l
critical
section
concurrent
programming
multiprocessing
semaphores
4
32
ca740806
jb
january
17
1978
9
48
am
1781
4
2618
1828
4
2618
1854
4
2618
1877
4
2618
1960
4
2618
2150
4
2618
2150
4
2618
2150
4
2618
2228
4
2618
2228
4
2618
2256
4
2618
2256
4
2618
2317
4
2618
2317
4
2618
2319
4
2618
2377
4
2618
2342
4
2618
2342
4
2618
2342
4
2618
2376
4
2618
2376
4
2618
2379
4
2618
2424
4
2618
2482
4
2618
2618
4
2618
2618
4
2618
2618
4
2618
2618
4
2618
2632
4
2618
2704
4
2618
2723
4
2618
2738
4
2618
2740
4
2618
2741
4
2618
2867
4
2618
3184
4
2618
3184
4
2618
1198
5
2618
1338
5
2618
1749
5
2618
2256
5
2618
2618
5
2618
2618
5
2618
2618
5
2618
2895
5
2618
2150
6
2618
2618
6
2618
</TEXT>
</DOC>
<DOC>
<DOCNO>2619</DOCNO>
<TEXT>
graph
coloring
conditions
for
the
existence
of
solutions
to
the
timetable
problem
a
necessary
and
sufficient
condition
is
presented
for
the
existence
of
a
solution
to
the
gotlieb
class
teacher
timetable
problem
several
relationships
are
established
between
the
class
teacher
timetable
problem
and
graphs
with
preconditions
these
preconditions
place
additional
restrictions
on
the
coloration
of
a
graph
the
preconditions
correspond
to
the
unavailability
constraints
and
preassigned
meetings
in
the
class
teacher
timetable
problem
using
some
recent
results
that
convert
graphs
with
preconditions
to
graphs
without
them
it
is
shown
that
the
existence
of
a
coloration
of
a
graph
is
the
required
necessary
and
sufficient
condition
cacm
august
1974
neufeld
g
a
tartar
j
graphs
coloration
preassignment
prevention
of
assignment
class
teacher
timetables
3
9
5
30
5
32
5
59
ca740805
jb
january
17
1978
9
55
am
1355
4
2619
2619
4
2619
2619
4
2619
2772
4
2619
2787
4
2619
1419
5
2619
1429
5
2619
2619
5
2619
2619
5
2619
2619
5
2619
</TEXT>
</DOC>
<DOC>
<DOCNO>2620</DOCNO>
<TEXT>
execution
time
requirements
for
encipherment
programs
although
encipherment
has
often
been
discussed
as
a
means
to
protect
computer
data
its
costs
are
not
well
established
five
experiments
were
conducted
to
measure
the
cpu
time
on
a
cdc
6400
required
by
additive
ciphers
programmed
both
in
assembly
language
and
in
fortran
a
null
transformation
to
measure
the
time
to
move
data
without
encipherment
encipherment
with
one
word
key
encipherment
with
a
125
word
key
double
key
encipherment
and
encipherment
using
a
pseudo
random
key
the
results
were
analyzed
for
consistency
over
100
runs
and
the
effects
of
constant
and
intermittent
errors
were
considered
timing
rates
for
assembly
language
encipherment
ranged
from
498
800
characters
per
second
for
a
pseudo
random
key
cipher
to
2
092
000
characters
per
second
for
a
constant
one
word
key
cipher
the
latter
is
almost
equivalent
to
the
rate
required
simply
to
move
data
without
encipherment
fortran
tests
required
over
four
times
as
much
cpu
time
this
paper
introduces
the
idea
on
enciphering
time
coefficient
the
ratio
of
enciphering
time
to
the
time
taken
to
fetch
and
store
data
without
encipherment
cacm
august
1974
friedman
t
d
offman
l
j
encipherment
ciphers
security
privacy
transformations
protection
cryptography
cryptology
2
12
2
43
3
70
3
81
4
32
4
39
ca740804
jb
january
17
1978
10
05
am
2620
5
2620
2620
5
2620
2620
5
2620
</TEXT>
</DOC>
<DOC>
<DOCNO>2621</DOCNO>
<TEXT>
a
high
security
log
in
procedure
the
protection
of
time
sharing
systems
from
unauthorized
users
is
often
achieved
by
the
use
of
passwords
by
using
one
way
ciphers
to
code
the
passwords
the
risks
involved
with
storing
the
passwords
in
the
computer
can
be
avoided
we
discuss
the
selection
of
a
suitable
one
way
cipher
and
suggest
that
for
this
purpose
polynomials
over
a
prime
modulus
are
superior
to
one
way
ciphers
derived
from
sannon
codes
cacm
august
1974
purdy
g
b
operating
systems
time
sharing
systems
security
cryptography
4
35
ca740803
jb
january
17
1978
10
10
am
2621
5
2621
2621
5
2621
2621
5
2621
</TEXT>
</DOC>
<DOC>
<DOCNO>2622</DOCNO>
<TEXT>
a
user
authentication
scheme
not
requiring
secrecy
in
the
computer
in
many
computer
operating
systems
a
user
authenticates
himself
by
entering
a
secret
password
known
solely
to
himself
and
the
system
the
system
compares
this
password
with
one
recorded
in
a
password
table
which
is
available
to
only
the
authentication
program
the
integrity
of
the
system
depends
on
keeping
the
table
secret
in
this
paper
a
password
scheme
is
presented
which
does
not
require
secrecy
in
the
computer
all
aspects
of
the
system
including
all
relevant
code
and
data
bases
may
be
known
by
anyone
attempting
to
intrude
the
scheme
is
based
on
using
a
function
h
which
the
would
be
intruder
is
unable
to
invert
this
function
is
applied
to
the
user
password
and
the
result
compared
to
a
table
entry
a
match
being
interpreted
as
authentication
of
the
user
the
intruder
may
know
all
about
h
and
have
access
to
the
table
but
he
can
penetrate
the
system
only
if
he
can
invert
h
to
determine
an
input
that
produces
a
given
output
this
paper
discusses
issues
surrounding
selection
of
a
suitable
h
two
different
plausible
arguments
are
given
that
penetration
would
be
exceedingly
difficult
and
it
is
then
argued
that
more
rigorous
results
are
unlikely
finally
some
human
engineering
problems
relating
to
the
scheme
are
discussed
cacm
august
1974
evans
a
jr
kantrowitz
w
weiss
e
operating
system
security
security
authentication
passwords
one
way
encryption
cryptology
4
39
5
39
ca740802
jb
january
17
1978
10
19
am
2622
5
2622
2622
5
2622
2622
5
2622
</TEXT>
</DOC>
<DOC>
<DOCNO>2623</DOCNO>
<TEXT>
a
new
technique
for
compression
and
storage
of
data
the
widespread
tendency
toward
storage
of
large
programs
and
blocks
off
text
has
produced
a
need
for
efficient
methods
of
compressing
and
storing
data
this
paper
describes
techniques
that
can
in
most
cases
decrease
storage
size
by
a
factor
of
from
two
to
four
the
techniques
involve
special
handling
of
leading
and
trailing
blanks
and
the
encoding
of
other
symbols
in
groups
of
fixed
size
as
unique
fixed
point
numbers
the
efficiency
of
the
system
is
considered
and
pertinent
statistics
are
given
and
compared
with
statistics
for
other
information
coding
techniques
cacm
august
1974
hahn
b
file
maintenance
information
retrieval
utility
programs
text
compression
coding
techniques
data
storage
data
management
3
70
3
73
4
49
ca740801
jb
january
17
1978
10
25
am
2530
4
2623
2623
4
2623
2623
4
2623
2819
4
2623
2501
5
2623
2537
5
2623
2623
5
2623
2623
5
2623
2623
5
2623
</TEXT>
</DOC>
<DOC>
<DOCNO>2624</DOCNO>
<TEXT>
formal
requirements
for
virtualizable
third
generation
architectures
virtual
machine
systems
have
been
implemented
on
a
limited
number
of
third
generation
computer
systems
e
g
cp
67
on
the
ibm
360
67
from
previous
empirical
studies
it
is
known
that
certain
third
generation
computer
systems
e
g
the
dec
pdp
10
cannot
support
a
virtual
machine
system
in
this
paper
model
of
a
third
generation
like
computer
system
is
developed
formal
techniques
are
used
to
derive
precise
sufficient
conditions
to
test
whether
such
an
architecture
can
support
virtual
machines
cacm
july
1974
popek
g
j
goldberg
r
p
operating
system
third
generation
architecture
sensitive
instruction
formal
requirements
abstract
model
proof
virtual
machine
virtual
memory
hypervisor
virtual
machine
monitor
4
32
4
35
5
21
5
22
ca740707
jb
january
17
1978
11
19
am
2624
5
2624
2624
5
2624
2624
5
2624
3144
5
2624
1471
6
2624
2298
6
2624
2491
6
2624
2597
6
2624
2624
6
2624
2625
6
2624
2632
6
2624
</TEXT>
</DOC>
<DOC>
<DOCNO>2625</DOCNO>
<TEXT>
capability
based
addressing
various
addressing
schemes
making
use
of
segment
tables
are
examined
the
inadequacies
of
these
schemes
when
dealing
with
shared
addresses
are
explained
these
inadequacies
are
traced
to
the
lack
of
an
efficient
absolute
address
for
objects
in
these
systems
the
direct
use
of
a
capability
as
an
address
is
shown
to
overcome
these
difficulties
because
it
provides
the
needed
absolute
address
implementation
of
capability
based
addressing
is
discussed
it
is
predicted
that
the
use
of
tags
to
identify
capabilities
will
dominate
a
hardware
address
translation
scheme
which
never
requires
the
modification
of
the
representation
of
capabilities
is
suggested
the
scheme
uses
a
main
memory
hash
table
for
obtaining
a
segment
location
in
main
memory
given
its
unique
code
the
hash
table
is
avoided
for
recently
accessed
segments
by
means
of
a
set
of
associative
registers
a
computer
using
capability
based
addressing
may
be
substantially
superior
to
present
systems
on
the
basis
of
protection
simplicity
of
programming
conventions
and
efficient
implementation
cacm
july
1974
fabry
r
s
addressing
capabilities
addressing
hardware
protection
protection
hardware
shared
addresses
information
sharing
operating
systems
computer
utility
segmentation
tagged
architecture
4
30
4
32
4
34
6
21
ca740706
jb
january
17
1978
12
39
pm
1458
4
2625
1523
4
2625
1603
4
2625
1698
4
2625
1747
4
2625
1748
4
2625
1854
4
2625
1877
4
2625
1960
4
2625
2317
4
2625
2358
4
2625
2377
4
2625
2377
4
2625
2378
4
2625
2497
4
2625
2558
4
2625
2625
4
2625
2625
4
2625
2625
4
2625
2625
4
2625
2626
4
2625
2632
4
2625
2669
4
2625
2840
4
2625
2922
4
2625
2941
4
2625
3081
4
2625
3101
4
2625
3105
4
2625
3112
4
2625
3144
4
2625
1471
5
2625
1753
5
2625
2358
5
2625
2438
5
2625
2625
5
2625
2625
5
2625
2625
5
2625
2626
5
2625
2868
5
2625
3105
5
2625
3144
5
2625
1471
6
2625
1471
6
2625
1746
6
2625
2080
6
2625
2298
6
2625
2358
6
2625
2377
6
2625
2377
6
2625
2380
6
2625
2491
6
2625
2558
6
2625
2597
6
2625
2624
6
2625
2625
6
2625
2625
6
2625
2625
6
2625
2625
6
2625
2629
6
2625
2632
6
2625
2632
6
2625
2632
6
2625
2868
6
2625
2939
6
2625
3068
6
2625
</TEXT>
</DOC>
<DOC>
<DOCNO>2626</DOCNO>
<TEXT>
protection
and
the
control
of
information
sharing
in
multics
the
design
of
mechanisms
to
control
the
sharing
of
information
in
the
multics
system
is
described
five
design
principles
help
provide
insight
into
the
tradeoffs
among
different
possible
designs
the
key
mechanisms
described
include
access
control
lists
hierarchical
control
of
access
specifications
identification
and
authentication
of
users
and
primary
memory
protection
the
paper
ends
with
a
discussion
of
several
known
weaknesses
in
the
current
protection
mechanism
design
cacm
july
1974
saltzer
j
h
multics
protection
security
privacy
access
control
authentication
computer
utilities
time
sharing
systems
proprietary
programs
protected
subsystems
virtual
memory
descriptors
3
70
4
30
6
2
ca740705
jb
january
17
1978
12
49
pm
1753
4
2626
2358
4
2626
2377
4
2626
2377
4
2626
2372
4
2626
2436
4
2626
2625
4
2626
2626
4
2626
2626
4
2626
2626
4
2626
2626
4
2626
2626
4
2626
2669
4
2626
2786
4
2626
2840
4
2626
2840
4
2626
2868
4
2626
2868
4
2626
2870
4
2626
2919
4
2626
3017
4
2626
3105
4
2626
3110
4
2626
3144
4
2626
3174
4
2626
1746
5
2626
2358
5
2626
2377
5
2626
2625
5
2626
2626
5
2626
2626
5
2626
2626
5
2626
2629
5
2626
2840
5
2626
1471
6
2626
1746
6
2626
2436
6
2626
2626
6
2626
2629
6
2626
</TEXT>
</DOC>
<DOC>
<DOCNO>2627</DOCNO>
<TEXT>
scheduling
independent
tasks
to
reduce
mean
finishing
time
sequencing
to
minimize
mean
finishing
time
or
mean
time
in
system
is
not
only
desirable
to
the
user
but
it
also
tends
to
minimize
at
each
point
in
time
the
storage
required
to
hold
incomplete
tasks
in
this
paper
a
deterministic
model
of
independent
tasks
is
introduced
and
new
results
are
derived
which
extend
and
generalize
the
algorithms
known
for
minimizing
mean
finishing
time
in
addition
to
presenting
and
analyzing
new
algorithms
it
is
shown
that
the
most
general
mean
finishing
time
problem
for
independent
tasks
is
polynomial
complete
and
hence
unlikely
to
admit
of
a
non
enumerative
solution
cacm
july
1974
bruno
j
coffman
e
g
jr
sethi
r
minimizing
mean
finishing
time
minimizing
mean
flow
time
sequencing
algorithms
optimal
scheduling
algorithms
deterministic
scheduling
models
4
32
5
39
ca740704
jb
january
17
1978
12
56
pm
2627
5
2627
2627
5
2627
2627
5
2627
</TEXT>
</DOC>
<DOC>
<DOCNO>2628</DOCNO>
<TEXT>
minimal
total
processing
time
drum
and
disk
scheduling
disciplines
this
article
investigates
the
application
of
minimal
total
processing
time
mtpt
scheduling
disciplines
to
rotating
storage
units
when
random
arrival
of
requests
is
allowed
fixed
head
drum
and
moving
head
drum
and
moving
head
disk
storage
units
are
considered
and
emphasis
is
placed
on
the
relative
merits
of
the
mtpt
scheduling
discipline
with
respect
to
the
shortest
latency
time
first
sltf
scheduling
discipline
the
results
of
the
simulation
studies
presented
show
that
neither
scheduling
discipline
is
unconditionally
superior
to
the
other
for
most
fixed
head
drum
applications
the
sltf
discipline
is
preferable
to
mtpt
but
for
intra
cylinder
disk
scheduling
the
mtpt
discipline
offers
a
distinct
advantage
over
the
sltf
discipline
the
computational
requirements
of
an
algorithm
that
implements
the
mtpt
scheduling
discipline
are
shown
to
be
comparable
to
sltf
algorithms
in
both
cases
the
sorting
procedure
is
the
most
time
consuming
phase
of
the
algorithm
cacm
july
1974
fuller
s
h
drum
scheduling
disk
scheduling
shortest
latency
time
first
sltf
minimal
total
processing
time
mtpt
rotating
storage
units
4
31
4
41
6
34
6
35
ca740703
jb
january
17
1978
1
07
pm
2628
4
2628
2628
4
2628
2891
4
2628
3072
4
2628
3097
4
2628
2375
5
2628
2496
5
2628
2628
5
2628
2628
5
2628
2628
5
2628
2891
5
2628
2375
6
2628
2628
6
2628
</TEXT>
</DOC>
<DOC>
<DOCNO>2629</DOCNO>
<TEXT>
the
unix
time
sharing
system
unix
is
a
general
purpose
multi
user
interactive
operating
system
for
the
digital
equipment
corporation
pdp
11
40
and
11
45
computers
it
offers
a
number
of
features
seldom
found
even
in
larger
operating
systems
including
1
a
hierarchical
file
system
incorporating
demountable
volumes
2
compatible
file
device
and
inter
process
i
o
3
the
ability
to
initiate
asynchronous
processes
4
system
command
language
selectable
on
a
per
user
basis
and
5
over
100
subsystems
including
a
dozen
languageshis
paper
discusses
the
nature
and
implementation
of
the
file
system
and
of
the
user
command
interface
cacm
july
1974
ritchie
d
m
thompson
k
time
sharing
operating
system
file
system
command
language
pdp
11
4
30
4
32
ca740702
jb
january
17
1978
1
40
pm
2299
4
2629
2501
4
2629
2629
4
2629
2629
4
2629
2868
4
2629
2915
4
2629
2928
4
2629
2951
4
2629
3114
4
2629
1502
5
2629
2380
5
2629
2626
5
2629
2629
5
2629
2629
5
2629
2629
5
2629
2786
5
2629
2840
5
2629
2919
5
2629
3017
5
2629
3110
5
2629
3174
5
2629
1471
6
2629
1746
6
2629
1746
6
2629
2194
6
2629
2358
6
2629
2377
6
2629
2436
6
2629
2536
6
2629
2593
6
2629
2625
6
2629
2626
6
2629
2629
6
2629
2629
6
2629
2629
6
2629
2629
6
2629
2629
6
2629
2629
6
2629
2629
6
2629
2858
6
2629
</TEXT>
</DOC>
<DOC>
<DOCNO>2630</DOCNO>
<TEXT>
on
computing
sets
of
shortest
paths
in
a
graph
two
algorithms
are
presented
that
construct
the
k
shortest
paths
between
every
pair
of
vertices
in
a
directed
graph
these
algorithms
generalize
the
floyd
algorithm
and
the
dantzig
algorithm
for
finding
the
shortest
path
between
every
pair
of
vertices
in
a
directed
graph
cacm
june
1974
minieka
e
graph
network
shortest
path
algorithm
5
32
ca740616
jb
january
17
1978
1
55
pm
1846
4
2630
2630
4
2630
2650
4
2630
2630
5
2630
2630
5
2630
2630
5
2630
2757
5
2630
2933
5
2630
576
5
2630
1059
6
2630
2630
6
2630
2630
6
2630
2757
6
2630
</TEXT>
</DOC>
<DOC>
<DOCNO>2631</DOCNO>
<TEXT>
an
information
theoretic
approach
to
text
searching
in
direct
access
systems
using
direct
access
computer
files
of
bibliographic
information
an
attempt
is
made
to
overcome
one
of
the
problems
often
associated
with
information
retrieval
namely
the
maintenance
and
use
of
large
dictionaries
the
greater
part
of
which
is
used
only
infrequently
a
novel
method
is
presented
which
maps
the
hyperbolic
frequency
distribution
this
is
more
suited
to
implementation
on
storage
devices
this
method
treats
text
as
a
string
of
characters
rather
than
words
bounded
by
spaces
and
chooses
subsets
of
strings
such
that
their
frequencies
of
occurrence
are
more
even
than
those
of
word
types
the
members
of
this
subset
are
then
used
as
index
keys
for
retrieval
the
rectangular
distribution
of
key
frequencies
results
in
a
much
simplified
file
organization
and
promises
considerable
cost
advantages
cacm
june
1974
barton
i
j
creasey
s
e
lynch
m
f
snell
m
j
text
searching
information
theory
file
organization
direct
access
information
retrieval
character
string
bit
vector
3
42
3
70
3
73
3
74
5
6
ca740615
jb
january
17
1978
2
07
pm
2532
4
2631
2631
4
2631
2631
4
2631
2746
4
2631
3001
4
2631
2139
5
2631
2532
5
2631
2631
5
2631
2631
5
2631
2631
5
2631
</TEXT>
</DOC>
<DOC>
<DOCNO>2632</DOCNO>
<TEXT>
hydra
the
kernel
of
a
multiprocessor
operating
system
this
paper
describes
the
design
philosophy
of
hydra
the
kernel
of
an
operating
system
for
c
mmp
the
carnegie
mellon
multi
mini
processor
this
philosophy
is
realized
through
the
introduction
of
a
generalized
notion
of
resource
both
physical
and
virtual
called
an
object
mechanisms
are
presented
for
dealing
with
objects
including
the
creation
of
new
types
specification
of
new
operations
applicable
to
a
given
type
sharing
and
protection
of
any
reference
to
a
given
object
against
improper
application
of
any
of
the
operations
defined
with
respect
to
that
type
of
object
the
mechanisms
provide
a
coherent
basis
for
extension
of
the
system
in
two
directions
the
introduction
of
new
facilities
and
the
creation
of
highly
secure
systems
cacm
june
1974
wulf
w
cohen
e
corwin
w
jones
a
levin
r
pierson
c
pollack
f
operating
system
kernel
nucleus
protection
security
4
3
6
2
ca740614
jb
january
17
1978
2
40
pm
1458
4
2632
1523
4
2632
1603
4
2632
1698
4
2632
1747
4
2632
1748
4
2632
1828
4
2632
1854
4
2632
1854
4
2632
1877
4
2632
1877
4
2632
1960
4
2632
1960
4
2632
2150
4
2632
2317
4
2632
2319
4
2632
2319
4
2632
2377
4
2632
2377
4
2632
2378
4
2632
2378
4
2632
2342
4
2632
2376
4
2632
2379
4
2632
2320
4
2632
2424
4
2632
2482
4
2632
2497
4
2632
2558
4
2632
2618
4
2632
2625
4
2632
2632
4
2632
2632
4
2632
2632
4
2632
2704
4
2632
2723
4
2632
2738
4
2632
2738
4
2632
2740
4
2632
2740
4
2632
2741
4
2632
2840
4
2632
2867
4
2632
2868
4
2632
2941
4
2632
3105
4
2632
3127
4
2632
3144
4
2632
3184
4
2632
1471
5
2632
1749
5
2632
2080
5
2632
2632
5
2632
2632
5
2632
2632
5
2632
2868
5
2632
2870
5
2632
2876
5
2632
3105
5
2632
3144
5
2632
953
6
2632
1471
6
2632
1471
6
2632
2080
6
2632
2298
6
2632
2377
6
2632
2377
6
2632
2380
6
2632
2491
6
2632
2558
6
2632
2597
6
2632
2624
6
2632
2625
6
2632
2625
6
2632
2625
6
2632
2632
6
2632
2632
6
2632
2632
6
2632
2632
6
2632
2632
6
2632
2685
6
2632
2868
6
2632
2939
6
2632
3068
6
2632
</TEXT>
</DOC>
<DOC>
<DOCNO>2633</DOCNO>
<TEXT>
compact
representation
of
contour
plots
for
phone
line
transmission
methods
for
the
compact
representation
of
contour
plots
are
described
and
tested
these
are
intended
to
reduce
the
cost
of
transmitting
contour
plots
over
phone
lines
we
feel
some
of
these
methods
could
be
used
to
transmit
contour
plots
over
voice
grade
phone
lines
cacm
june
1974
adams
j
gary
j
contour
plotting
data
transmission
remote
terminal
data
compaction
4
41
5
13
ca740613
jb
january
17
1978
2
48
pm
2633
4
2633
2633
5
2633
2633
5
2633
2633
5
2633
2987
5
2633
699
5
2633
1326
6
2633
1630
6
2633
2125
6
2633
2547
6
2633
2633
6
2633
421
6
2633
524
6
2633
</TEXT>
</DOC>
<DOC>
<DOCNO>2634</DOCNO>
<TEXT>
an
evaluation
of
statistical
software
in
the
social
sciences
several
hundred
college
and
university
computer
installations
now
offer
various
types
of
statistical
packages
for
general
use
among
those
most
widely
available
are
osiris
spss
bmd
data
text
and
tsar
in
order
to
provide
users
with
a
basis
for
selection
and
use
tests
were
made
for
each
of
these
systems
and
the
results
are
summarized
as
to
cost
and
performance
cacm
june
1974
slysz
w
d
statistical
computation
statistical
software
descriptive
statistics
bivariate
tables
pearson
correlation
regression
factor
analysis
one
way
analysis
of
variance
1
3
3
30
4
19
4
22
4
49
5
5
ca740612
jb
january
17
1978
2
54
pm
2634
5
2634
2634
5
2634
2634
5
2634
</TEXT>
</DOC>
<DOC>
<DOCNO>2635</DOCNO>
<TEXT>
exact
probabilities
for
r
x
c
contingency
tables
algorithm
r434
cacm
june
1974
boulton
d
m
ca740611
jb
january
17
1978
2
56
pm
2635
5
2635
2635
5
2635
2635
5
2635
</TEXT>
</DOC>
<DOC>
<DOCNO>2636</DOCNO>
<TEXT>
generation
of
random
correlated
normal
variables
algorithm
r425
cacm
june
1974
page
r
l
ca740610
jb
january
17
1978
2
57
pm
2636
5
2636
2636
5
2636
2636
5
2636
</TEXT>
</DOC>
<DOC>
<DOCNO>2637</DOCNO>
<TEXT>
hidden
line
plotting
program
algorithm
r420
cacm
june
1974
ellis
t
m
r
ca740609
jb
january
17
1978
2
59
pm
2637
5
2637
2637
5
2637
2637
5
2637
</TEXT>
</DOC>
<DOC>
<DOCNO>2638</DOCNO>
<TEXT>
hidden
line
plotting
program
algorithm
r420
cacm
june
1974
gaither
b
ca740608
jb
january
17
1978
3
00
pm
2638
5
2638
2638
5
2638
2638
5
2638
</TEXT>
</DOC>
<DOC>
<DOCNO>2639</DOCNO>
<TEXT>
calculation
of
fourier
integrals
algorithm
r418
cacm
june
1974
piessens
r
ca740607
jb
january
17
1978
3
01
pm
2639
5
2639
2639
5
2639
2639
5
2639
</TEXT>
</DOC>
<DOC>
<DOCNO>2640</DOCNO>
<TEXT>
modified
havie
integration
algorithm
r400
cacm
june
1974
piessens
r
ca740606
jb
january
17
1978
3
04
pm
2350
4
2640
2354
4
2640
2640
4
2640
2355
5
2640
2640
5
2640
2640
5
2640
2640
5
2640
</TEXT>
</DOC>
<DOC>
<DOCNO>2641</DOCNO>
<TEXT>
a
minimal
spanning
tree
clustering
method
z
algorithm
a479
cacm
june
1974
page
r
l
clustering
pattern
recognition
feature
selection
minimal
spanning
trees
3
63
5
39
5
5
ca740605
jb
january
17
1978
3
06
pm
2641
4
2641
2363
5
2641
2641
5
2641
2641
5
2641
2641
5
2641
</TEXT>
</DOC>
<DOC>
<DOCNO>2642</DOCNO>
<TEXT>
solution
of
an
overdetermined
system
of
equations
in
the
l1
norm
f4
algorithm
a478
cacm
june
1974
barrodale
i
roberts
f
d
k
l1
approximation
l1
norm
overdetermined
system
of
equations
linear
programming
simplex
method
5
13
5
41
ca740604
jb
january
17
1978
3
25
pm
2642
5
2642
2642
5
2642
2642
5
2642
2759
5
2642
2642
6
2642
</TEXT>
</DOC>
<DOC>
<DOCNO>2643</DOCNO>
<TEXT>
the
minimization
of
spatially
multiplexed
character
sets
the
paper
describes
a
technique
for
compacting
character
sets
in
a
digital
computer
while
retaining
fast
access
to
individual
bits
it
considers
the
problem
of
minimizing
the
storage
needed
to
contain
such
tables
reduction
techniques
are
developed
and
the
problem
is
shown
to
reduce
to
a
covering
problem
cacm
june
1974
gimpel
j
f
parsing
lexical
analysis
scanning
string
processing
spatial
multiplexing
4
9
ca740603
jb
january
17
1978
3
31
pm
2643
5
2643
2643
5
2643
2643
5
2643
2706
5
2643
2643
6
2643
</TEXT>
</DOC>
<DOC>
<DOCNO>2644</DOCNO>
<TEXT>
a
theorem
proving
language
for
experimentation
because
of
the
large
number
of
strategies
and
inference
rules
presently
under
consideration
in
automated
theorem
proving
there
is
a
need
for
developing
a
language
especially
oriented
toward
automated
theorem
proving
this
paper
discusses
some
of
the
features
and
instructions
of
this
language
the
use
of
this
language
permits
easy
extension
of
automated
theorem
proving
programs
to
include
new
strategies
and
or
new
inference
rules
such
extend
ability
will
permit
general
experimentation
with
the
various
alternative
systems
cacm
june
1974
henschen
l
overbeek
r
wos
l
theorem
proving
resolution
factoring
paramodulation
programming
languages
3
60
4
22
5
21
ca740602
jb
january
17
1978
3
37
pm
2644
5
2644
2644
5
2644
2644
5
2644
</TEXT>
</DOC>
<DOC>
<DOCNO>2645</DOCNO>
<TEXT>
two
languages
for
estimating
program
efficiency
two
languages
enabling
their
users
to
estimate
the
efficiency
of
computer
programs
are
presented
the
program
whose
efficiency
one
wishes
to
estimate
is
written
in
the
first
language
a
go
to
less
programming
language
which
includes
most
of
the
features
of
algol
60
the
second
language
consists
of
interactive
commands
enabling
its
users
to
provide
additional
information
about
the
program
written
in
the
first
language
and
to
output
results
estimating
its
efficiency
processors
for
the
two
languages
are
also
described
the
first
processor
is
a
syntax
directed
translator
which
compiles
a
program
into
a
symbolic
formula
representing
the
execution
time
for
that
program
the
sound
processor
is
a
set
of
procedures
for
that
program
the
second
processor
is
a
set
of
procedures
for
algebraic
manipulation
which
can
be
called
by
the
user
to
operate
on
the
formula
produced
by
the
first
processor
examples
of
the
usage
of
the
two
languages
are
included
the
limitations
of
the
present
system
its
relation
to
knuth
work
on
the
analysis
of
algorithms
and
some
of
the
directions
for
further
research
are
also
discussed
cacm
june
1974
ccohen
j
zuckerman
c
programming
languages
syntax
directed
translation
symbolic
manipulation
program
efficiency
analysis
of
algorithms
4
12
4
20
5
24
5
25
ca740601
jb
january
17
1978
3
48
pm
1086
4
2645
1132
4
2645
1234
4
2645
1263
4
2645
1265
4
2645
1270
4
2645
1323
4
2645
1358
4
2645
1379
4
2645
1380
4
2645
1453
4
2645
1464
4
2645
1484
4
2645
1491
4
2645
1498
4
2645
1613
4
2645
1614
4
2645
1781
4
2645
1825
4
2645
1860
4
2645
2083
4
2645
2178
4
2645
2179
4
2645
2252
4
2645
2325
4
2645
2341
4
2645
2546
4
2645
2645
4
2645
2652
4
2645
2684
4
2645
2842
4
2645
2929
4
2645
2934
4
2645
3069
4
2645
669
4
2645
679
4
2645
691
4
2645
761
4
2645
949
4
2645
989
4
2645
2645
5
2645
2645
5
2645
2645
5
2645
2719
5
2645
3094
5
2645
3184
5
2645
1265
6
2645
1626
6
2645
210
6
2645
2151
6
2645
2167
6
2645
2179
6
2645
2210
6
2645
2645
6
2645
2645
6
2645
2657
6
2645
</TEXT>
</DOC>
<DOC>
<DOCNO>2646</DOCNO>
<TEXT>
a
model
for
masking
rotational
latency
by
dynamic
disk
allocation
this
paper
presents
the
background
and
algorithms
for
masking
the
rotational
latency
of
a
disk
or
drum
it
discusses
the
anticipatory
input
and
output
of
blocks
of
data
to
buffer
and
primary
memories
for
a
mono
programmed
computer
system
a
basic
permutation
algorithm
and
several
variations
are
given
because
of
the
anticipatory
nature
of
the
i
o
scheduling
these
algorithms
are
restricted
to
classes
of
programs
with
predictable
behavior
while
the
methods
are
not
restricted
to
numerical
computations
matrix
and
partial
differential
equation
methods
are
typical
examples
of
their
use
it
is
shown
that
latency
may
be
masked
using
a
small
amount
of
buffer
memory
the
methods
discussed
are
independent
of
the
overall
size
of
the
data
base
being
considered
cacm
may
1974
gold
d
e
kuck
d
j
buffer
memory
memory
hierarchy
permutation
algorithm
rotational
latency
staging
storage
allocation
4
41
6
20
ca740507
jb
january
17
1978
3
59
pm
2646
5
2646
2646
5
2646
2646
5
2646
</TEXT>
</DOC>
<DOC>
<DOCNO>2647</DOCNO>
<TEXT>
more
on
algorithms
that
reveal
properties
of
floating
point
arithmetic
units
cacm
may
1974
gentleman
w
m
marovich
s
b
floating
point
arithmetic
high
level
languages
philosophy
of
language
design
4
9
5
19
ca740506
jb
january
17
1978
4
04
pm
2647
4
2647
2792
4
2647
2267
5
2647
2647
5
2647
2647
5
2647
2647
5
2647
2792
5
2647
2267
6
2647
2647
6
2647
</TEXT>
</DOC>
<DOC>
<DOCNO>2648</DOCNO>
<TEXT>
a
design
for
a
number
theory
package
with
an
optimized
trial
division
routine
a
number
theory
package
is
described
which
uses
doubly
linked
list
structures
for
storing
multiprecise
integers
the
package
has
been
coded
in
ibm
basic
assembly
language
and
makes
heavy
use
of
the
macro
language
and
conditional
assembly
an
optimally
coded
trial
division
routine
is
also
described
which
can
be
used
to
determine
the
unique
factorization
of
large
integers
cacm
may
1974
wunderlich
m
c
selfridge
j
l
number
theory
package
trial
division
multiprecise
arithmetic
factorization
doubly
linked
lists
pseudoprime
3
15
ca740505
jb
january
17
1978
4
09
pm
2648
5
2648
2648
5
2648
2648
5
2648
</TEXT>
</DOC>
<DOC>
<DOCNO>2649</DOCNO>
<TEXT>
on
the
distributions
of
significant
digits
and
roundoff
errors
generalized
logarithmic
law
is
derived
for
the
distribution
of
the
first
t
significant
digits
of
a
random
digital
integer
this
result
is
then
used
to
determine
the
distribution
of
the
roundoff
errors
in
floating
point
operations
which
is
a
mixture
of
uniform
and
reciprocal
distributions
cacm
may
1974
tsao
n
significant
digits
floating
point
operations
roundoff
errors
uniform
distribution
reciprocal
distribution
variance
mean
valve
5
10
5
11
ca740504
jb
january
17
1978
4
12
pm
2649
5
2649
2649
5
2649
2649
5
2649
</TEXT>
</DOC>
<DOC>
<DOCNO>2650</DOCNO>
<TEXT>
order
n
correction
for
regular
languages
a
method
is
presented
for
calculating
a
string
b
belonging
to
a
given
regular
language
l
which
is
nearest
in
number
of
edit
operations
to
a
given
input
string
a
b
is
viewed
as
a
reasonable
correction
for
the
possibly
erroneous
string
a
where
a
was
originally
intended
to
be
a
string
of
l
the
calculation
of
b
by
the
method
presented
requires
time
proportional
to
a
the
number
of
characters
in
a
the
method
should
find
applications
in
information
retrieval
artificial
intelligence
and
spelling
correction
systems
cacm
may
1974
wagner
r
a
error
correction
regular
languages
regular
events
finite
state
automata
compiler
error
recovery
spelling
correction
string
best
match
problem
correction
corrector
errors
nondeterministic
finite
state
automata
4
12
4
20
5
22
5
23
5
42
ca740503
jb
january
17
1978
4
26
pm
1179
4
2650
1225
4
2650
1288
4
2650
1350
4
2650
1544
4
2650
1646
4
2650
1646
4
2650
1781
4
2650
1846
4
2650
1945
4
2650
2111
4
2650
2534
4
2650
2534
4
2650
2556
4
2650
2556
4
2650
2630
4
2650
2650
4
2650
2650
4
2650
2650
4
2650
2650
4
2650
2698
4
2650
2708
4
2650
2708
4
2650
2887
4
2650
3093
4
2650
2111
5
2650
2650
5
2650
2650
5
2650
2650
5
2650
576
5
2650
680
5
2650
830
5
2650
</TEXT>
</DOC>
<DOC>
<DOCNO>2651</DOCNO>
<TEXT>
the
treatment
of
data
types
in
el1
in
constructing
a
general
purpose
programming
language
a
key
issue
is
providing
a
sufficient
set
of
data
types
and
associated
operations
in
a
manner
that
permits
both
natural
problem
oriented
notation
and
efficient
implementation
the
el1
language
contains
a
number
of
features
specifically
designed
to
simultaneously
satisfy
both
requirements
the
resulting
treatment
of
data
types
includes
provision
for
programmer
defined
data
types
data
types
and
generic
routines
programmer
control
over
type
conversion
and
very
flexible
data
type
behavior
in
a
context
that
allows
efficient
compiled
code
and
compact
data
representation
cacm
may
1974
wegbreit
b
data
types
modes
mode
unions
type
conversion
coercion
generic
functions
extensible
languages
data
type
definition
data
description
language
compilation
4
12
4
13
4
22
ca740502
jb
january
17
1978
4
32
pm
2651
5
2651
2651
5
2651
2651
5
2651
2723
5
2651
2941
5
2651
2956
5
2651
3030
5
2651
1379
6
2651
1471
6
2651
1549
6
2651
1749
6
2651
1826
6
2651
210
6
2651
2247
6
2651
2356
6
2651
2356
6
2651
2457
6
2651
2558
6
2651
2651
6
2651
2651
6
2651
2651
6
2651
2651
6
2651
2958
6
2651
2972
6
2651
627
6
2651
731
6
2651
</TEXT>
</DOC>
<DOC>
<DOCNO>2652</DOCNO>
<TEXT>
reduction
of
compilation
costs
through
language
contraction
programming
languages
tailored
to
particular
groups
of
users
can
often
be
constructed
by
removing
unwanted
features
from
a
general
purpose
language
this
paper
describes
the
use
of
simulation
techniques
to
predict
the
savings
in
compilation
cost
achievable
by
such
an
approach
the
results
suggest
a
function
which
describes
the
effect
of
changes
in
the
power
of
a
language
on
the
compilation
cost
of
an
algorithm
expressed
in
that
language
when
features
not
actually
used
by
the
algorithm
are
removed
from
the
language
the
cost
of
compiling
the
algorithm
decreases
moderately
but
when
features
that
are
needed
are
removed
the
compilation
cost
increases
sharply
cacm
may
1974
shaw
m
design
of
programming
languages
language
contraction
compiler
design
compilation
cost
algol
4
12
4
20
ca740501
jb
january
17
1978
4
39
pm
1086
4
2652
1132
4
2652
1234
4
2652
1263
4
2652
1265
4
2652
1270
4
2652
1323
4
2652
1358
4
2652
1379
4
2652
1380
4
2652
1453
4
2652
1464
4
2652
1484
4
2652
1491
4
2652
1498
4
2652
1613
4
2652
1614
4
2652
1781
4
2652
1825
4
2652
1860
4
2652
2083
4
2652
2178
4
2652
2179
4
2652
2252
4
2652
2325
4
2652
2341
4
2652
2546
4
2652
2645
4
2652
2652
4
2652
2684
4
2652
2842
4
2652
2929
4
2652
2934
4
2652
3069
4
2652
669
4
2652
679
4
2652
691
4
2652
761
4
2652
949
4
2652
989
4
2652
2652
5
2652
2652
5
2652
2652
5
2652
3184
5
2652
</TEXT>
</DOC>
<DOC>
<DOCNO>2653</DOCNO>
<TEXT>
solution
of
the
transcendental
equation
w
exp
x
x
algorithm
r443
cacm
april
1974
einarsson
b
ca740417
jb
january
17
1978
4
44
pm
2653
4
2653
2654
4
2653
1955
5
2653
2653
5
2653
2653
5
2653
2653
5
2653
</TEXT>
</DOC>
<DOC>
<DOCNO>2654</DOCNO>
<TEXT>
generator
of
set
partitions
to
exactly
r
subsets
g7
algorithm
a477
cacm
april
1974
ehrich
g
partitions
subset
generation
permutations
5
39
ca740416
jb
january
17
1978
4
46
pm
2653
4
2654
2654
4
2654
1955
5
2654
2654
5
2654
2654
5
2654
2654
5
2654
</TEXT>
</DOC>
<DOC>
<DOCNO>2655</DOCNO>
<TEXT>
six
subprograms
for
curve
fitting
using
splines
under
tension
e2
algorithm
a476
cacm
april
1974
cline
a
k
interpolation
splines
contouring
curve
fitting
5
13
8
2
ca740415
jb
january
17
1978
4
48
pm
2655
4
2655
2655
5
2655
2655
5
2655
2655
5
2655
2656
5
2655
2655
6
2655
</TEXT>
</DOC>
<DOC>
<DOCNO>2656</DOCNO>
<TEXT>
scalar
and
planar
valued
curve
fitting
using
splines
under
tension
the
spline
under
tension
was
introduced
by
schweikert
in
an
attempt
to
imitate
cubic
splines
but
avoid
the
spurious
critical
points
they
induce
the
defining
equations
are
presented
here
together
with
an
efficient
method
for
determining
the
necessary
parameters
and
computing
the
resultant
spline
the
standard
scalar
valued
curve
fitting
problem
is
discussed
as
well
as
the
fitting
of
open
and
closed
curves
in
the
plane
the
use
of
these
curves
and
the
importance
of
the
tension
in
the
fitting
of
contour
lines
are
mentioned
as
application
cacm
april
1974
cline
a
k
interpolation
splines
contouring
curve
fitting
5
13
8
2
ca740414
jb
january
18
1978
9
23
am
2656
4
2656
2655
5
2656
2656
5
2656
2656
5
2656
2656
5
2656
2656
6
2656
</TEXT>
</DOC>
<DOC>
<DOCNO>2657</DOCNO>
<TEXT>
an
improved
program
synthesizing
algorithm
and
its
correctness
an
improved
program
synthesizing
algorithm
based
on
the
algorithm
proposed
by
waldinger
and
lee
in
1969
is
given
in
the
old
algorithm
the
program
synthesizing
problem
is
translated
into
a
theorem
proving
problem
and
a
program
is
obtained
by
analyzing
a
proof
for
the
improved
algorithm
the
analysis
is
not
necessary
and
a
program
is
obtained
as
soon
as
the
proof
is
completed
this
is
achieved
by
using
a
modified
variable
tracing
mechanism
invented
by
green
in
1969
the
correctness
of
the
improved
algorithm
is
also
proved
i
e
the
program
thus
obtained
always
satisfies
the
specification
cacm
april
1974
lee
r
c
t
chang
c
l
waldinger
r
j
program
synthesizing
algorithms
theorem
proving
consequence
finding
primitive
resolutions
3
60
3
64
4
20
4
42
5
21
5
22
5
24
ca740413
jb
january
18
1978
9
32
am
2657
4
2657
2719
4
2657
2210
5
2657
2657
5
2657
2657
5
2657
2657
5
2657
2719
5
2657
1626
6
2657
210
6
2657
2151
6
2657
2167
6
2657
2210
6
2657
2645
6
2657
2657
6
2657
</TEXT>
</DOC>
<DOC>
<DOCNO>2658</DOCNO>
<TEXT>
an
alternative
approach
to
mutual
recursion
in
algol
60
using
restricted
compilers
cacm
april
1974
balfour
a
algol
60
mutual
recursion
compiler
restrictions
4
12
4
22
ca740412
jb
february
1
1978
10
32
am
2658
4
2658
2551
5
2658
2658
5
2658
2658
5
2658
2658
5
2658
</TEXT>
</DOC>
<DOC>
<DOCNO>2659</DOCNO>
<TEXT>
some
remarks
on
lookup
of
structured
variables
cacm
april
1974
abrahams
p
w
pl
1
symbol
table
structured
variables
qualified
references
compilers
4
12
4
22
ca740411
jb
february
1
1978
10
34
am
2659
4
2659
2449
5
2659
2659
5
2659
2659
5
2659
2659
5
2659
</TEXT>
</DOC>
<DOC>
<DOCNO>2660</DOCNO>
<TEXT>
addendum
to
m
l
patrick
paper
cacm
april
1974
simmons
g
c
parallelism
polynomial
root
finding
real
zeros
5
15
ca740410
jb
february
1
1978
10
36
am
2660
4
2660
2266
5
2660
2660
5
2660
2660
5
2660
2660
5
2660
</TEXT>
</DOC>
<DOC>
<DOCNO>2661</DOCNO>
<TEXT>
ideal
teaching
machines
a
solution
to
the
pedagogic
language
problem
cacm
april
1974
sterling
t
d
pollack
s
v
education
programming
languages
simulators
1
52
4
2
ca740409
jb
february
1
1978
10
38
am
2661
5
2661
2661
5
2661
2661
5
2661
</TEXT>
</DOC>
<DOC>
<DOCNO>2662</DOCNO>
<TEXT>
graduate
education
the
ph
glut
response
and
rebuttal
cacm
april
1974
freeman
p
malcolm
m
a
payne
w
h
graduate
education
ph
production
accreditation
1
5
2
2
2
3
ca740408
jb
february
1
1978
10
40
am
2662
4
2662
2531
5
2662
2662
5
2662
2662
5
2662
2662
5
2662
</TEXT>
</DOC>
<DOC>
<DOCNO>2663</DOCNO>
<TEXT>
a
study
of
computer
use
in
a
graduate
school
of
business
cacm
april
1974
lucas
h
c
jr
montgomery
d
b
larreche
j
c
education
management
business
schools
1
50
1
52
ca740407
jb
january
18
1978
9
35
am
2663
5
2663
2663
5
2663
2663
5
2663
</TEXT>
</DOC>
<DOC>
<DOCNO>2664</DOCNO>
<TEXT>
parallelism
in
tape
sorting
two
methods
for
employing
parallelism
in
tape
sorting
are
presented
method
a
is
the
natural
way
to
use
parallelism
method
b
is
new
both
approximately
achieve
the
goal
of
reducing
the
processing
time
by
a
divisor
which
is
the
number
of
processors
cacm
april
1974
even
s
tape
sorting
parallelism
external
sorting
queues
stacks
5
31
6
22
ca740406
jb
january
18
1978
9
44
am
2664
5
2664
2664
5
2664
2664
5
2664
2714
5
2664
3075
5
2664
2289
6
2664
2557
6
2664
2664
6
2664
2664
6
2664
2714
6
2664
</TEXT>
</DOC>
<DOC>
<DOCNO>2665</DOCNO>
<TEXT>
copying
list
structures
using
bounded
workspace
two
new
algorithms
are
presented
for
list
structure
copying
using
bounded
workspace
the
first
of
primarily
theoretical
interest
shows
that
without
cell
tag
bits
the
task
can
be
performed
in
time
n
2
the
second
algorithm
assuming
one
tag
bit
in
each
cell
delivers
attractive
practical
speed
any
noncyclic
structure
is
copied
in
linear
speed
while
cyclic
structures
are
copied
in
average
time
less
than
nlogn
no
foreknowledge
of
cycle
absence
is
necessary
to
achieve
linear
speed
a
variation
of
the
second
algorithm
solves
an
open
problem
concerning
list
structure
marking
that
result
demonstrates
that
marking
can
be
done
in
average
time
nlogn
without
the
aid
of
supplemental
tag
bits
or
stacks
cacm
april
1974
lindstrom
g
list
processing
copying
marking
space
complexity
4
34
5
25
ca740405
jb
january
18
1978
9
55
am
1869
4
2665
2513
4
2665
2665
4
2665
2665
4
2665
2723
4
2665
2855
4
2665
3106
4
2665
1383
5
2665
1549
5
2665
2665
5
2665
2665
5
2665
2665
5
2665
2766
5
2665
2954
5
2665
3106
5
2665
1549
6
2665
210
6
2665
1972
6
2665
2665
6
2665
2665
6
2665
2665
6
2665
2766
6
2665
2766
6
2665
2855
6
2665
2954
6
2665
2998
6
2665
</TEXT>
</DOC>
<DOC>
<DOCNO>2666</DOCNO>
<TEXT>
on
lions
counter
example
for
gotlieb
method
for
the
construction
of
school
timetables
the
timetable
problem
is
an
essentially
discrete
problem
although
the
discrete
problem
may
have
no
feasible
solution
there
may
exist
a
solution
to
the
equivalent
continuous
problem
an
example
is
given
for
which
the
nondiscrete
solution
can
be
interpreted
as
a
set
of
timetables
differing
from
week
to
week
which
together
satisfy
the
long
term
requirements
of
the
timetable
problem
cacm
april
1974
smith
g
sefton
i
m
combinatorial
multi
index
problem
necessary
conditions
schedule
school
timetable
timetable
3
51
5
39
ca740404
jb
january
18
1978
10
02
am
2666
5
2666
2666
5
2666
2666
5
2666
</TEXT>
</DOC>
<DOC>
<DOCNO>2667</DOCNO>
<TEXT>
execution
characteristics
of
programs
in
a
page
on
demand
system
data
are
presented
which
show
the
execution
characteristics
of
two
types
of
commonly
used
programs
in
a
large
scale
time
shared
computer
system
a
software
monitoring
facility
built
into
the
supervisor
was
used
for
data
collection
during
normal
system
operation
these
data
were
analyzed
and
results
of
this
analysis
are
presented
for
a
fortran
compiler
and
an
interactive
line
file
editor
probability
distribution
functions
and
other
data
are
given
for
such
things
as
cpu
intervals
i
o
intervals
and
the
number
of
such
intervals
during
execution
empirical
distributions
are
compared
with
simple
theoretical
distributions
exponential
hyperexponential
and
geometric
other
data
show
paging
characteristics
of
tasks
as
a
function
of
the
number
of
pages
those
tasks
have
in
core
cacm
april
1974
boyse
j
w
program
behavior
virtual
memory
paging
demand
paging
software
monitor
program
execution
characteristics
compiler
execution
behavior
editor
execution
behavior
4
12
4
19
4
32
4
39
4
9
8
1
ca740403
jb
january
18
1978
10
12
am
1533
4
2667
1892
4
2667
1924
4
2667
1951
4
2667
2095
4
2667
2218
4
2667
2297
4
2667
2374
4
2667
2526
4
2667
2667
4
2667
2667
4
2667
2667
4
2667
2668
4
2667
2668
4
2667
2668
4
2667
2862
4
2667
2863
4
2667
1604
5
2667
1728
5
2667
1827
5
2667
2667
5
2667
2667
5
2667
2667
5
2667
</TEXT>
</DOC>
<DOC>
<DOCNO>2668</DOCNO>
<TEXT>
computation
of
page
fault
probability
from
program
transition
diagram
an
algorithm
is
given
for
calculating
page
fault
probability
in
a
virtual
memory
system
operating
under
demand
paging
with
various
memory
sizes
and
replacement
rules
a
first
order
markov
model
of
program
behavior
is
assumed
and
a
representation
of
the
system
based
on
memory
states
control
states
and
memory
substates
is
presented
the
algorithm
is
general
in
the
sense
that
the
page
fault
probabilities
can
be
calculated
for
nonpredictive
replacement
rules
applied
to
any
program
represented
by
a
one
step
markov
chain
a
detailed
example
is
given
to
illustrate
the
algorithm
for
random
and
least
recently
used
lru
replacement
rules
cacm
april
1974
franklin
m
a
gupta
r
k
virtual
memory
demand
paging
replacement
rule
program
model
program
behavior
markov
model
page
fault
page
fault
probability
4
30
6
20
ca740402
jb
january
18
1978
10
31
am
1533
4
2668
1892
4
2668
1924
4
2668
1951
4
2668
2095
4
2668
2218
4
2668
2297
4
2668
2374
4
2668
2526
4
2668
2667
4
2668
2667
4
2668
2667
4
2668
2668
4
2668
2668
4
2668
2668
4
2668
2668
4
2668
2668
4
2668
2862
4
2668
2863
4
2668
1604
5
2668
1728
5
2668
1761
5
2668
1827
5
2668
2668
5
2668
2668
5
2668
2668
5
2668
2677
5
2668
</TEXT>
</DOC>
<DOC>
<DOCNO>2669</DOCNO>
<TEXT>
a
simple
linear
model
of
demand
paging
performance
predicting
the
performance
of
a
proposed
automatically
managed
multilevel
memory
system
requires
a
model
of
the
patterns
by
which
programs
refer
to
the
information
stored
in
the
memory
some
recent
experimental
measurements
on
the
multics
virtual
memory
suggest
that
for
rough
approximations
a
remarkably
simple
program
reference
model
will
suffice
the
simple
model
combines
the
effect
of
the
information
reference
pattern
with
the
effect
of
the
automatic
management
algorithm
to
produce
a
single
composite
statement
the
mean
number
of
memory
references
between
paging
exceptions
increases
linearly
with
the
size
of
the
paging
memory
the
resulting
model
is
easy
to
manipulate
and
is
applicable
to
such
diverse
problems
as
choosing
an
optimum
size
for
a
paging
memory
arranging
for
reproducible
memory
usage
charges
and
estimating
the
amount
of
core
memory
sharing
cacm
april
1974
saltzer
j
h
paging
demand
paging
memory
models
program
models
performance
measurement
multilevel
memory
systems
virtual
memory
associative
memory
memory
usage
accounting
multics
3
79
4
30
4
32
ca740401
jb
january
18
1978
10
41
am
1892
4
2669
1901
4
2669
2085
4
2669
2095
4
2669
2218
4
2669
2277
4
2669
2319
4
2669
2319
4
2669
2329
4
2669
2358
4
2669
2377
4
2669
2373
4
2669
2374
4
2669
2380
4
2669
2434
4
2669
2499
4
2669
2481
4
2669
2501
4
2669
2582
4
2669
2582
4
2669
2625
4
2669
2626
4
2669
2669
4
2669
2669
4
2669
2669
4
2669
2669
4
2669
2828
4
2669
2863
4
2669
2863
4
2669
2881
4
2669
2928
4
2669
2996
4
2669
3006
4
2669
3016
4
2669
3052
4
2669
3054
4
2669
3067
4
2669
1751
5
2669
1901
5
2669
2017
5
2669
2358
5
2669
2669
5
2669
2669
5
2669
2669
5
2669
</TEXT>
</DOC>
<DOC>
<DOCNO>2670</DOCNO>
<TEXT>
efficient
implementation
of
a
variable
projection
algorithm
for
nonlinear
least
squares
problems
nonlinear
least
squares
frequently
arise
for
which
the
variables
to
be
solved
for
can
be
separated
into
a
linear
and
a
nonlinear
part
a
variable
projection
algorithm
has
been
developed
recently
which
is
designed
to
take
advantage
of
the
structure
of
a
problem
whose
variables
separate
in
this
way
this
paper
gives
a
slightly
more
efficient
and
slightly
more
general
version
of
this
algorithm
than
has
appeared
earlier
cacm
march
1974
krogh
f
t
nonlinear
least
squares
parameter
estimation
variable
projection
5
14
5
15
ca740313
jb
january
18
1978
10
49
am
2670
5
2670
2670
5
2670
2670
5
2670
</TEXT>
</DOC>
<DOC>
<DOCNO>2671</DOCNO>
<TEXT>
a
note
on
a
combinatorial
problem
of
burnett
and
coffman
cacm
march
1974
stone
h
s
memories
interleaving
derangements
rencontres
combinatorial
analysis
5
39
6
34
ca740312
jb
january
18
1978
10
54
am
2671
5
2671
2671
5
2671
2671
5
2671
</TEXT>
</DOC>
<DOC>
<DOCNO>2672</DOCNO>
<TEXT>
emotional
content
considered
dangerous
cacm
march
1974
smoliar
s
w
artificial
intelligence
heuristic
programming
models
of
cognitive
processes
computer
music
computer
composition
music
theory
3
44
3
65
ca740311
jb
january
18
1978
10
56
am
2672
5
2672
2672
5
2672
2672
5
2672
</TEXT>
</DOC>
<DOC>
<DOCNO>2673</DOCNO>
<TEXT>
quadratic
search
for
hash
tables
of
size
p
n
cacm
march
1974
ackerman
a
f
hashing
quadratic
search
4
10
ca740310
jb
january
18
1978
10
58
am
2673
5
2673
2673
5
2673
2673
5
2673
2704
5
2673
2770
5
2673
3053
5
2673
1247
6
2673
1329
6
2673
1552
6
2673
1749
6
2673
1785
6
2673
1786
6
2673
1869
6
2673
1973
6
2673
1973
6
2673
1992
6
2673
1992
6
2673
2018
6
2673
2107
6
2673
2109
6
2673
2109
6
2673
2356
6
2673
2379
6
2673
2412
6
2673
2543
6
2673
2673
6
2673
2673
6
2673
2673
6
2673
2707
6
2673
2770
6
2673
</TEXT>
</DOC>
<DOC>
<DOCNO>2674</DOCNO>
<TEXT>
scan
conversion
algorithms
for
a
cell
organized
raster
display
raster
scan
computer
graphics
with
real
time
character
generators
have
previously
been
limited
to
alphanumeric
characters
a
display
has
been
described
which
extends
the
capabilities
of
this
organization
to
include
general
graphics
two
fundamentally
different
scan
conversion
algorithms
which
have
been
developed
to
support
this
display
are
presented
one
is
most
suitable
to
non
interactive
applications
and
the
other
to
interactive
applications
the
algorithms
were
implemented
in
fortran
on
the
cdc
6400
computer
results
obtained
from
the
implementations
show
that
the
noninteractive
algorithms
can
significantly
reduce
display
file
storage
requirements
at
little
cost
in
execution
time
over
that
of
a
conventional
raster
display
the
interactive
algorithm
can
improve
response
time
and
reduce
storage
requirements
cacm
march
1974
barrett
r
c
fordan
b
w
jr
graphics
scan
conversion
raster
display
line
drawing
discrete
image
dot
generation
matrix
displays
4
41
6
35
8
2
ca740309
jb
january
18
1978
11
08
am
1891
4
2674
2211
4
2674
2421
4
2674
2674
4
2674
2674
4
2674
2674
4
2674
2674
4
2674
2687
4
2674
2687
4
2674
2828
4
2674
1741
5
2674
2004
5
2674
2421
5
2674
2674
5
2674
2674
5
2674
2674
5
2674
2687
5
2674
</TEXT>
</DOC>
<DOC>
<DOCNO>2675</DOCNO>
<TEXT>
a
computer
routine
for
quadratic
and
linear
programming
problems
algorithm
r431
cacm
march
1974
ravindran
a
ca740308
jb
january
18
1978
11
10
am
2675
5
2675
2675
5
2675
2675
5
2675
</TEXT>
</DOC>
<DOC>
<DOCNO>2676</DOCNO>
<TEXT>
zeros
of
a
complex
polynomial
algorithm
r419
cacm
march
1973
withers
d
h
ca740307
jb
january
18
1978
11
11
am
2676
5
2676
2676
5
2676
2676
5
2676
</TEXT>
</DOC>
<DOC>
<DOCNO>2677</DOCNO>
<TEXT>
incomplete
beta
ratio
algorithm
r179
cacm
march
1974
bosten
n
e
battiste
e
l
ca740306
jb
january
18
1978
11
13
am
2668
5
2677
2677
5
2677
2677
5
2677
2677
5
2677
1604
6
2677
1728
6
2677
1761
6
2677
1827
6
2677
2677
6
2677
</TEXT>
</DOC>
<DOC>
<DOCNO>2678</DOCNO>
<TEXT>
visible
surface
plotting
program
j6
algorithm
a475
cacm
march
1974
wright
t
hidden
line
problem
computer
graphics
contour
surface
3
65
4
41
8
2
ca740305
jb
january
18
1978
11
18
am
2678
5
2678
2678
5
2678
2678
5
2678
</TEXT>
</DOC>
<DOC>
<DOCNO>2679</DOCNO>
<TEXT>
some
performance
tests
of
quicksort
and
descendants
detailed
performance
evaluations
are
presented
for
six
acm
algorithms
quicksort
no
64
shellsort
no
201
stringsort
no
207
treesort3
no
245
quickersort
no
271
and
qsort
no
402
algorithms
271
and
402
are
refinements
of
algorithm
64
and
all
three
are
discussed
in
some
detail
the
evidence
given
here
demonstrates
that
qsort
no
402
requires
many
more
comparisons
than
its
author
claims
of
all
these
algorithms
quickersort
requires
the
fewest
comparisons
to
sort
random
arrays
cacm
march
1974
loeser
r
sorting
in
place
sorting
sorting
efficiency
sorting
performance
tests
quicksort
quickersort
qsort
shellsort
stringsort
treesort3
utility
sort
algorithm
general
purpose
sort
algorithm
sorting
algorithm
documentation
4
49
5
31
ca740304
jb
january
18
1978
11
26
am
1175
4
2679
1663
4
2679
1919
4
2679
1919
4
2679
1919
4
2679
1969
4
2679
1969
4
2679
1997
4
2679
1997
4
2679
2042
4
2679
2042
4
2679
2118
4
2679
2191
4
2679
2195
4
2679
2216
4
2679
2216
4
2679
2222
4
2679
2222
4
2679
2356
4
2679
2388
4
2679
2348
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2679
4
2679
2844
4
2679
2972
4
2679
3054
4
2679
3054
4
2679
3054
4
2679
3054
4
2679
3121
4
2679
970
5
2679
1175
5
2679
1190
5
2679
1228
5
2679
1969
5
2679
1997
5
2679
308
5
2679
2042
5
2679
2679
5
2679
2679
5
2679
2679
5
2679
507
5
2679
3054
5
2679
3187
5
2679
716
5
2679
783
5
2679
1175
6
2679
1880
6
2679
1919
6
2679
1969
6
2679
1980
6
2679
1997
6
2679
307
6
2679
308
6
2679
309
6
2679
2017
6
2679
2679
6
2679
776
6
2679
</TEXT>
</DOC>
<DOC>
<DOCNO>2680</DOCNO>
<TEXT>
optimal
space
allocation
on
disk
storage
devices
when
the
amount
of
space
required
for
file
storage
exceeds
the
amount
which
can
be
kept
on
line
decisions
must
be
made
as
to
which
files
are
to
be
permanently
resident
and
which
mountable
these
decisions
will
affect
the
number
of
mount
requests
issued
to
the
operators
this
is
often
a
bottleneck
in
a
computing
facility
and
reducing
the
number
of
mounts
thus
decreases
turnaround
time
an
optimization
model
for
the
assignment
of
files
to
disk
packs
and
packs
to
either
resident
or
nonresident
status
is
presented
heuristics
are
suggested
for
those
cases
in
which
it
is
inefficient
to
compute
the
actual
optimum
cacm
march
1974
morgan
h
l
disk
analysis
disk
optimization
disk
files
file
systems
file
scheduling
space
allocation
memory
hierarchy
3
72
3
73
4
39
ca740303
jb
january
18
1978
12
32
pm
2680
5
2680
2680
5
2680
2680
5
2680
</TEXT>
</DOC>
<DOC>
<DOCNO>2681</DOCNO>
<TEXT>
dynamic
memory
repacking
a
probabilistic
model
of
a
multiprogramming
system
is
exercised
in
order
to
determine
the
conditions
under
which
the
dynamic
repacking
of
main
memory
is
beneficial
an
expression
is
derived
for
the
maximum
interference
that
a
repacking
process
may
introduce
before
the
original
performance
of
the
system
is
degraded
alternative
approaches
to
repacking
are
discussed
and
the
operating
conditions
that
lead
to
improved
system
throughput
through
repacking
are
delineated
cacm
march
1974
balkovich
e
chiu
w
presser
l
wood
r
dynamic
memory
repacking
memory
compaction
storage
fragmentation
multiprogramming
system
model
probabilistic
model
central
processor
productivity
resource
utilization
system
throughput
4
32
5
5
6
20
ca740302
jb
january
18
1978
12
37
pm
2681
4
2681
2218
5
2681
2681
5
2681
2681
5
2681
2681
5
2681
</TEXT>
</DOC>
<DOC>
<DOCNO>2682</DOCNO>
<TEXT>
on
the
construction
of
a
representative
synthetic
workload
a
general
method
of
constructing
a
drive
workload
representative
of
a
real
workload
is
described
the
real
workload
is
characterized
by
its
demands
on
the
various
system
resources
these
characteristics
of
the
real
workload
are
obtained
from
the
system
accounting
data
the
characteristics
of
the
drive
workload
are
determined
by
matching
the
joint
probability
density
of
the
real
workload
with
that
of
the
drive
workload
the
drive
workload
is
realized
by
using
a
synthetic
program
in
which
the
characteristics
can
be
varied
by
varying
the
appropriate
parameters
calibration
experiments
are
conducted
to
determine
expressions
relating
the
synthetic
program
parameters
with
the
workload
characteristics
the
general
method
is
applied
to
the
case
of
two
variables
cpu
seconds
and
number
of
i
o
activities
and
synthetic
workload
with
88
jobs
is
constructed
to
represent
a
month
workload
consisting
of
about
6000
jobs
cacm
march
1974
sreenivasan
k
kleinman
a
j
benchmarks
calibration
drive
workload
input
to
simulation
probability
distribution
representative
workload
synthetic
workload
workload
characteristics
5
5
5
9
8
1
ca740301
jb
january
18
1978
12
46
pm
2682
5
2682
2682
5
2682
2682
5
2682
3067
5
2682
1751
6
2682
2374
6
2682
2373
6
2682
2595
6
2682
2682
6
2682
2863
6
2682
2864
6
2682
3006
6
2682
</TEXT>
</DOC>
<DOC>
<DOCNO>2683</DOCNO>
<TEXT>
the
synthesis
of
loop
predicates
current
methods
for
mechanical
program
verification
require
a
complete
predicate
specification
on
each
loop
because
this
is
tedious
and
error
prone
producing
a
program
with
complete
correct
predicates
is
reasonably
difficult
and
would
be
facilitated
by
machine
assistance
this
paper
discusses
techniques
for
mechanically
synthesizing
loop
predicates
two
classes
of
techniques
are
considered
1
heuristic
methods
which
derive
loop
predicates
from
boundary
conditions
and
or
partially
specified
inductive
assertions
2
extraction
methods
which
use
input
predicates
and
appropriate
weak
interpretations
to
obtain
certain
classes
of
loop
predicates
by
an
evaluation
on
the
weak
interpretation
cacm
march
1974
wegbreit
b
program
verification
loop
predicates
inductive
assertions
synthesis
of
loop
predicates
weak
interpretations
well
founded
sets
property
extraction
theorem
proving
3
64
4
19
4
22
5
24
ca740206
jb
january
18
1978
12
55
pm
2683
5
2683
2683
5
2683
2683
5
2683
2874
5
2683
3104
5
2683
1682
6
2683
2227
6
2683
2317
6
2683
2457
6
2683
2683
6
2683
2683
6
2683
2871
6
2683
521
6
2683
</TEXT>
</DOC>
<DOC>
<DOCNO>2684</DOCNO>
<TEXT>
production
systems
or
can
we
do
better
than
bnf
since
the
development
of
bnf
the
definition
of
the
syntax
of
programming
languages
has
been
almost
universally
associated
with
context
free
requirements
yet
numerous
interesting
and
difficult
issues
in
syntax
stem
from
the
context
sensitive
requirements
notably
the
compatibility
between
the
declaration
of
an
identifier
and
its
uses
the
correspondence
between
actual
and
formal
parameters
and
issues
arising
from
block
structure
this
paper
explores
the
use
of
a
formal
notation
called
production
systems
in
providing
a
readable
and
complete
formal
definition
of
syntax
as
a
practical
illustration
a
small
but
significant
subset
of
pl
i
is
considered
a
more
detailed
presentation
as
well
as
the
application
to
define
abstract
syntax
and
translations
between
languages
is
given
in
a
previous
paper
by
the
author
cacm
february
1974
ledgard
h
f
syntax
translation
context
sensitive
grammars
compilers
formal
definition
pl
i
standards
4
2
5
21
5
23
ca740205
jb
january
18
1978
1
07
pm
1086
4
2684
1132
4
2684
1234
4
2684
1263
4
2684
1265
4
2684
1270
4
2684
1323
4
2684
1358
4
2684
1379
4
2684
1380
4
2684
1453
4
2684
1464
4
2684
1469
4
2684
1484
4
2684
1486
4
2684
1491
4
2684
1491
4
2684
1498
4
2684
1613
4
2684
1614
4
2684
1781
4
2684
1781
4
2684
1781
4
2684
1825
4
2684
1860
4
2684
2083
4
2684
2178
4
2684
2178
4
2684
2178
4
2684
2179
4
2684
2252
4
2684
2325
4
2684
2326
4
2684
2326
4
2684
2341
4
2684
2470
4
2684
2546
4
2684
2645
4
2684
2652
4
2684
2684
4
2684
2684
4
2684
2684
4
2684
2842
4
2684
2929
4
2684
2934
4
2684
3044
4
2684
3069
4
2684
669
4
2684
679
4
2684
691
4
2684
761
4
2684
949
4
2684
989
4
2684
1303
5
2684
1323
5
2684
2684
5
2684
2684
5
2684
2684
5
2684
3184
5
2684
</TEXT>
</DOC>
<DOC>
<DOCNO>2685</DOCNO>
<TEXT>
the
parallel
execution
of
do
loops
methods
are
developed
for
the
parallel
execution
of
different
iterations
of
a
do
loop
both
asynchronous
multiprocessor
computers
and
array
computers
are
considered
practical
application
to
the
design
of
compilers
for
such
computers
is
discussed
cacm
february
1974
lamport
l
parallel
computing
multiprocessor
computers
array
computers
vector
computers
loops
4
12
5
24
ca740204
jb
january
18
1978
1
14
pm
2685
5
2685
2685
5
2685
2685
5
2685
2785
5
2685
2876
5
2685
2433
6
2685
2632
6
2685
2685
6
2685
2685
6
2685
</TEXT>
</DOC>
<DOC>
<DOCNO>2686</DOCNO>
<TEXT>
an
approximate
method
for
generating
asymmetric
random
variables
tukey
lambda
distribution
is
generalized
to
provide
an
algorithm
for
generating
values
of
unimodal
asymmetric
random
variables
this
algorithm
has
the
same
advantages
as
the
symmetric
random
variable
generator
previously
given
by
the
authors
except
that
the
addition
of
another
parameter
complicates
the
problem
of
finding
the
parameter
values
to
fit
a
distribution
cacm
february
1974
ramberg
j
s
schmeiser
b
w
simulation
monte
carlo
probability
statistics
approximations
random
variables
random
numbers
moments
distribution
5
5
8
1
ca740203
jb
january
18
1978
1
19
pm
2686
4
2686
2261
5
2686
2686
5
2686
2686
5
2686
2686
5
2686
</TEXT>
</DOC>
<DOC>
<DOCNO>2687</DOCNO>
<TEXT>
a
cell
organized
raster
display
for
line
drawings
raster
scan
computer
graphics
displays
with
real
time
character
generators
have
previously
been
limited
to
alphanumeric
characters
a
display
is
described
which
extends
the
capabilities
of
this
organization
to
include
general
graphics
the
feasibility
of
such
a
display
is
shown
by
deriving
the
minimum
number
of
patterns
required
in
the
read
only
memory
of
the
character
generator
to
synthesize
an
arbitrary
line
the
synthesis
process
does
not
compromise
picture
quality
since
the
resulting
dot
patterns
are
identical
with
those
of
a
conventional
raster
display
furthermore
the
time
constraints
of
a
raster
display
are
shown
to
be
satisfied
for
a
typical
design
for
very
complex
line
drawings
cacm
february
1974
jordan
b
w
jr
barrett
r
c
graphics
raster
display
line
drawing
discrete
image
dot
generation
matrix
displays
4
41
6
35
8
2
ca740202
jb
january
18
1978
1
28
pm
1891
4
2687
2004
4
2687
2211
4
2687
2421
4
2687
2674
4
2687
2674
4
2687
2687
4
2687
2687
4
2687
2687
4
2687
2692
4
2687
2828
4
2687
1741
5
2687
1915
5
2687
2004
5
2687
2674
5
2687
2687
5
2687
2687
5
2687
2687
5
2687
1741
6
2687
2004
6
2687
2421
6
2687
2687
6
2687
</TEXT>
</DOC>
<DOC>
<DOCNO>2688</DOCNO>
<TEXT>
attribute
based
file
organization
in
a
paged
memory
environment
the
high
cost
of
page
accessing
implies
a
need
for
more
careful
data
organization
in
a
paged
memory
than
is
typical
of
most
inverted
file
and
similar
approaches
to
multi
key
retrieval
this
article
analyses
that
cost
and
proposes
a
method
called
multiple
key
hashing
which
attempts
to
minimize
it
since
this
approach
is
not
always
preferable
to
inversion
a
combined
method
is
described
the
exact
specifications
of
this
combination
for
a
file
with
given
data
and
traffic
characteristics
is
formulated
as
a
mathematical
program
the
proposed
heuristic
solution
to
this
program
can
often
improve
on
a
simple
inversion
technique
by
a
factor
of
2
or
3
cacm
february
1974
rothnie
j
b
jr
lozano
t
file
organization
paging
retrieval
algorithm
inverted
file
multiple
key
hashing
3
70
3
73
3
74
3
79
ca740201
jb
january
18
1978
1
37
pm
2160
4
2688
2688
4
2688
2114
5
2688
2688
5
2688
2688
5
2688
2688
5
2688
2976
5
2688
2688
6
2688
2765
6
2688
2882
6
2688
</TEXT>
</DOC>
<DOC>
<DOCNO>2689</DOCNO>
<TEXT>
a
crt
report
generating
system
cacm
january
1974
lucas
h
c
jr
report
generation
automated
systems
design
data
processing
management
3
50
4
12
4
22
ca740110
jb
january
18
1978
1
40
pm
2689
5
2689
2689
5
2689
2689
5
2689
</TEXT>
</DOC>
<DOC>
<DOCNO>2690</DOCNO>
<TEXT>
a
numbering
systems
for
combinations
cacm
january
1974
knott
g
d
combinatorics
coding
system
storage
mapping
function
4
9
5
30
ca740109
jb
january
18
1978
1
42
pm
2690
4
2690
2690
4
2690
2853
4
2690
3115
4
2690
203
5
2690
2690
5
2690
2690
5
2690
2690
5
2690
2853
5
2690
579
5
2690
2690
6
2690
579
6
2690
</TEXT>
</DOC>
<DOC>
<DOCNO>2691</DOCNO>
<TEXT>
comments
on
the
algorithms
of
verhelst
for
the
conversion
of
limited
entry
decision
tables
to
flowcharts
cacm
january
1974
king
p
j
h
johnson
r
g
decision
table
flowcharting
preprocessor
optimal
programs
search
3
50
3
59
4
19
4
29
4
49
5
31
ca740108
jb
january
18
1978
1
45
pm
2598
4
2691
2691
4
2691
2726
4
2691
3113
4
2691
2263
5
2691
2598
5
2691
2691
5
2691
2691
5
2691
2691
5
2691
3113
5
2691
1172
6
2691
1354
6
2691
1548
6
2691
2220
6
2691
2263
6
2691
2263
6
2691
2453
6
2691
2598
6
2691
2691
6
2691
2691
6
2691
2856
6
2691
</TEXT>
</DOC>
<DOC>
<DOCNO>2692</DOCNO>
<TEXT>
reentrant
polygon
clipping
a
new
family
of
clipping
algorithms
is
described
these
algorithms
are
able
to
clip
polygons
against
irregular
convex
plane
faced
volumes
in
three
dimensions
removing
the
parts
of
the
polygon
which
lie
outside
the
volume
in
two
dimensions
the
algorithms
permit
clipping
against
irregular
convex
windows
polygons
to
be
clipped
are
represented
as
an
ordered
sequence
of
vertices
without
repetition
of
first
and
last
in
marked
contrast
to
representation
as
a
collection
of
edges
as
was
heretofore
the
common
procedure
output
polygons
have
an
identical
format
with
new
vertices
introduced
in
sequence
to
describe
any
newly
cut
edge
or
edges
the
algorithms
easily
handle
the
particularly
difficult
problem
of
detecting
that
a
new
vertex
may
be
required
at
a
corner
of
the
clipping
window
the
algorithms
described
achieve
considerable
simplicity
by
clipping
separately
against
each
clipping
plane
or
window
boundary
code
capable
of
clipping
the
polygon
against
a
single
boundary
is
reentered
to
clip
against
subsequent
boundaries
each
such
reentrant
stage
of
clipping
need
store
only
two
vertex
values
and
may
begin
its
processing
as
soon
as
the
first
output
vertex
from
the
proceeding
stage
is
ready
because
the
same
code
is
reentered
for
clipping
against
subsequent
boundaries
clipping
against
very
complex
window
shapes
is
practical
for
perspective
applications
in
three
dimentions
a
six
plane
truncated
pyramid
is
chosen
as
the
clipping
volume
the
two
additional
planes
parallel
to
the
projection
screen
serve
to
limit
the
range
of
depth
preserved
through
the
projection
a
perspective
projection
method
which
provides
for
arbitrary
view
angles
and
depth
of
field
in
spite
of
simple
fixed
clipping
planes
is
described
this
method
is
ideal
for
subsequent
hidden
surface
computations
cacm
january
1974
sutherland
i
e
hodgman
g
w
computer
graphics
hidden
surface
clipping
5
31
6
32
6
35
ca740107
jb
january
18
1978
2
04
pm
2004
4
2692
2687
4
2692
2692
4
2692
1915
5
2692
2692
5
2692
2692
5
2692
2692
5
2692
</TEXT>
</DOC>
<DOC>
<DOCNO>2693</DOCNO>
<TEXT>
bivariate
interpolation
and
smooth
surface
fitting
based
on
local
procedures
e2
algorithm
a474
cacm
january
1974
akima
h
bivariate
interpolation
interpolation
partial
derivative
polynomial
smooth
surface
fitting
5
13
ca740106
jb
january
18
1978
2
07
pm
1845
4
2693
1900
4
2693
2083
4
2693
2154
4
2693
2270
4
2693
2693
4
2693
2693
4
2693
2693
4
2693
2696
4
2693
988
5
2693
2270
5
2693
2693
5
2693
2693
5
2693
2693
5
2693
2696
5
2693
2270
6
2693
2693
6
2693
</TEXT>
</DOC>
<DOC>
<DOCNO>2694</DOCNO>
<TEXT>
computation
of
legendre
series
coefficients
c6
algorithm
a473
cacm
january
1974
piessens
r
legendre
series
chebyshev
series
5
13
ca740105
jb
january
18
1978
2
21
pm
2694
4
2694
1478
5
2694
2694
5
2694
2694
5
2694
2694
5
2694
</TEXT>
</DOC>
<DOC>
<DOCNO>2695</DOCNO>
<TEXT>
tridiagonalization
by
permutations
tridiagonalizing
a
matrix
by
similarity
transformations
is
an
important
computational
tool
in
numerical
linear
algebra
consider
the
class
of
sparse
matrices
which
can
be
tridiagonalized
using
only
row
and
corresponding
column
permutations
the
advantages
of
using
such
a
transformation
include
the
absence
of
round
off
errors
and
improved
computation
time
when
compared
with
standard
transformations
a
graph
theoretic
algorithm
which
examines
an
arbitrary
n
x
n
matrix
and
determines
whether
or
not
it
can
be
permuted
into
tridiagonal
form
is
given
the
algorithm
requires
no
arithmetic
while
the
number
of
comparisons
the
number
of
assignments
and
the
number
of
increments
are
linear
in
n
this
compares
very
favorably
with
standard
transformation
methods
if
the
matrix
is
permutable
into
tridiagonal
form
the
algorithm
gives
the
explicit
tridiagonal
form
otherwise
early
rejection
will
occur
cacm
january
1974
gibbs
n
e
poole
w
g
jr
tridiagonal
matrix
permutation
algorithm
eigenvalues
graph
bandwidth
sparse
matrix
5
14
5
32
ca740104
jb
january
18
1978
2
31
pm
2695
5
2695
2695
5
2695
2695
5
2695
</TEXT>
</DOC>
<DOC>
<DOCNO>2696</DOCNO>
<TEXT>
a
method
of
bivariate
interpolation
and
smooth
surface
fitting
based
on
local
procedures
a
method
is
designed
for
interpolating
values
given
at
points
of
a
rectangular
grid
in
a
plane
by
a
smooth
bivariate
function
z
z
x
y
the
interpolating
function
is
a
bicubic
polynomial
in
each
cell
of
the
rectangular
grid
emphasis
is
an
avoiding
excessive
undulation
between
given
grid
points
the
proposed
method
is
an
extension
of
the
method
of
univariate
interpolation
developed
earlier
by
the
author
and
is
likewise
based
on
local
procedures
cacm
january
1974
akima
h
bivariate
interpolation
interpolation
partial
derivative
polynomial
smooth
surface
fitting
5
13
ca740103
jb
january
18
1978
2
38
pm
2693
4
2696
2696
4
2696
2696
4
2696
2270
5
2696
2693
5
2696
2696
5
2696
2696
5
2696
2696
5
2696
988
6
2696
2270
6
2696
2696
6
2696
</TEXT>
</DOC>
<DOC>
<DOCNO>2697</DOCNO>
<TEXT>
a
fast
method
for
solving
a
class
of
tridiagonal
linear
systems
the
solution
of
linear
systems
having
real
symmetric
diagonally
dominant
tridiagonal
coefficient
matrices
with
constant
diagonals
is
considered
it
is
proved
that
the
diagonals
of
the
lu
decomposition
converges
when
floating
point
precision
it
is
also
proved
that
the
computed
lu
decomposition
converges
when
floating
point
arithmetic
is
used
and
that
the
limits
of
the
lu
diagonals
using
floating
point
are
roughly
within
machine
precision
of
the
limits
using
real
arithmetic
this
fact
is
exploited
to
reduce
the
number
of
floating
point
operations
required
to
solve
a
linear
system
from
8n
7
to
5n
2k
3
where
k
is
much
less
than
n
the
order
of
the
matrix
if
the
elements
of
the
subdiagonals
and
superdiagonals
are
1
then
only
4n
2k
3
operations
are
needed
the
entire
lu
decomposition
takes
k
words
of
storage
and
considerable
savings
in
array
subscripting
are
achieved
upper
and
lower
bounds
on
k
are
obtained
in
terms
of
the
ratio
of
the
coefficient
matrix
diagonal
constants
and
parameters
of
the
floating
point
number
system
various
generalizations
of
these
results
are
discussed
cacm
january
1974
malcolm
m
a
palmer
j
numerical
linear
algebra
linear
systems
toeplitz
matrices
tridiagonal
matrices
5
5
1
5
11
5
14
5
17
ca740102
jb
january
18
1978
2
50
pm
2697
5
2697
2697
5
2697
2697
5
2697
</TEXT>
</DOC>
<DOC>
<DOCNO>2698</DOCNO>
<TEXT>
syntax
directed
least
errors
analysis
for
context
free
languages
a
practical
approach
a
least
errors
recognizer
is
developed
informally
using
the
well
known
recognizer
of
earley
along
with
elements
of
bellman
dynamic
programming
the
analyzer
takes
a
general
class
of
context
free
grammars
as
drivers
and
any
finite
string
as
input
recognition
consists
of
a
least
errors
count
for
a
corrected
version
of
the
input
relative
to
the
driver
grammar
the
algorithm
design
emphasizes
practical
aspects
which
help
in
programming
it
cacm
january
1974
lyon
g
arbitrary
input
strings
context
free
grammars
parsing
dynamic
programming
stored
subanalyses
separability
state
merging
least
errors
correction
4
12
5
23
5
42
ca740101
jb
january
18
1978
2
57
pm
1225
4
2698
1323
4
2698
1350
4
2698
1358
4
2698
1379
4
2698
1380
4
2698
1542
4
2698
1646
4
2698
1665
4
2698
1665
4
2698
1683
4
2698
1693
4
2698
1693
4
2698
1768
4
2698
1781
4
2698
1781
4
2698
1781
4
2698
1781
4
2698
1787
4
2698
1787
4
2698
1787
4
2698
1824
4
2698
1825
4
2698
1836
4
2698
1836
4
2698
1836
4
2698
1861
4
2698
1945
4
2698
1945
4
2698
1945
4
2698
1989
4
2698
1989
4
2698
2015
4
2698
2015
4
2698
2060
4
2698
2060
4
2698
2060
4
2698
2061
4
2698
2061
4
2698
2082
4
2698
2091
4
2698
2091
4
2698
2110
4
2698
2112
4
2698
2127
4
2698
2152
4
2698
2179
4
2698
2179
4
2698
2179
4
2698
2187
4
2698
2317
4
2698
2340
4
2698
2356
4
2698
2534
4
2698
2541
4
2698
2545
4
2698
2546
4
2698
2546
4
2698
2603
4
2698
2650
4
2698
2698
4
2698
2698
4
2698
2698
4
2698
2698
4
2698
2698
4
2698
2698
4
2698
2698
4
2698
2708
4
2698
2708
4
2698
2708
4
2698
2708
4
2698
2733
4
2698
2733
4
2698
2820
4
2698
2824
4
2698
2921
4
2698
2982
4
2698
2986
4
2698
3045
4
2698
3045
4
2698
3073
4
2698
3093
4
2698
3093
4
2698
3155
4
2698
3154
4
2698
1477
5
2698
1491
5
2698
1781
5
2698
2110
5
2698
2556
5
2698
2698
5
2698
2698
5
2698
2698
5
2698
680
5
2698
799
5
2698
</TEXT>
</DOC>
<DOC>
<DOCNO>2699</DOCNO>
<TEXT>
automatic
data
structure
choice
in
a
language
of
very
high
level
setl
is
a
set
theoretically
oriented
language
of
very
high
level
whose
repertoire
of
semantic
objects
includes
finite
sets
ordered
n
tuples
and
sets
of
ordered
n
tuples
usable
as
mappings
this
paper
describes
the
structure
of
an
optimizer
for
this
language
among
other
methods
of
interest
the
optimizer
uses
techniques
which
allow
relations
of
inclusion
and
membership
to
be
established
the
domains
and
ranges
of
tabulated
mappings
to
be
estimated
from
above
and
below
and
the
single
valuedness
of
tabulated
mappings
to
be
proved
once
facts
of
this
kind
have
been
established
automatic
choice
of
data
structures
becomes
possible
the
methods
employed
are
based
upon
and
extend
known
techniques
of
data
flow
analysis
cacm
december
1975
schwartz
j
t
program
optimization
automatic
programming
high
level
languages
set
theoretic
languages
data
structure
choice
4
12
4
20
4
22
ca751208
jb
january
5
1978
3
53
pm
2699
5
2699
2699
5
2699
2699
5
2699
</TEXT>
</DOC>
<DOC>
<DOCNO>2700</DOCNO>
<TEXT>
reduction
a
method
of
proving
properties
of
parallel
programs
when
proving
that
a
parallel
program
has
a
given
property
it
is
often
convenient
to
assume
that
a
statement
is
indivisible
i
e
that
the
statement
cannot
be
interleaved
with
the
rest
of
the
program
here
sufficient
conditions
are
obtained
to
show
that
the
assumption
that
a
statement
is
indivisible
can
be
relaxed
and
still
preserve
properties
such
as
halting
thus
correctness
proofs
of
a
parallel
system
can
often
be
greatly
simplified
cacm
december
1975
lipton
r
j
deadlock
free
reduction
interruptible
indivisible
parallel
program
semaphore
verification
method
process
computation
sequence
4
32
4
35
5
24
ca751207
jb
january
5
1978
3
59
pm
2700
4
2700
3128
4
2700
2376
5
2700
2700
5
2700
2700
5
2700
2700
5
2700
</TEXT>
</DOC>
<DOC>
<DOCNO>2701</DOCNO>
<TEXT>
a
fast
and
usually
linear
algorithm
for
global
flow
analysis
abstract
only
complete
paper
jacm
23
1
january
1976
a
new
algorithm
for
global
flow
analysis
on
reducible
graphs
is
presented
the
algorithm
is
shown
to
treat
a
very
general
class
of
function
spaces
for
a
graph
of
e
edges
the
algorithm
has
a
worst
case
time
bound
of
o
e
log
e
function
operations
it
is
also
shown
that
in
programming
terms
the
number
of
operations
is
proportional
to
e
plus
the
number
of
exits
from
program
loops
consequently
a
restriction
to
one
entry
one
exit
control
structures
linearity
the
algorithm
can
be
extended
to
yet
larger
classes
of
function
spaces
and
graphs
by
relaxing
the
time
bound
examples
are
given
of
code
improvement
problems
which
can
be
solved
using
the
algorithm
cacm
december
1975
graham
s
l
wegman
m
global
flow
analysis
data
flow
code
optimization
common
subexpression
elimination
live
dead
analysis
information
propagation
flow
graph
reducibility
go
to
less
programming
depth
first
search
path
compression
4
12
5
24
5
25
5
32
ca751206
jb
january
5
1978
4
08
pm
2701
5
2701
2701
5
2701
2701
5
2701
</TEXT>
</DOC>
<DOC>
<DOCNO>2702</DOCNO>
<TEXT>
on
the
complexity
of
lr
k
testing
the
problem
of
determining
whether
an
arbitrary
context
free
grammar
is
a
member
of
some
easily
parsed
subclass
of
grammars
such
as
the
lr
k
grammars
is
considered
the
time
complexity
of
this
problem
is
analyzed
both
when
k
is
considered
to
be
a
fixed
integer
and
when
k
is
considered
to
be
a
parameter
of
the
test
in
the
first
case
it
is
shown
that
for
every
k
there
exists
an
o
n
k
2
algorithm
for
testing
the
lr
k
property
where
n
is
the
size
of
the
grammar
in
question
on
the
other
hand
if
both
k
and
the
subject
grammar
are
problem
parameters
then
the
complexity
of
the
problem
depends
very
strongly
on
the
representation
chosen
for
k
more
specifically
it
is
shown
that
this
problem
is
np
complete
when
k
is
expressed
in
unary
when
k
is
expressed
in
binary
the
problem
is
complete
for
nondeterministic
exponential
time
these
results
carry
over
to
many
other
parameterized
classes
of
grammars
such
as
the
ll
k
strong
ll
k
slr
k
lc
k
and
strong
lc
k
grammars
cacm
december
1975
hunt
h
b
iii
szymanski
t
g
ullman
j
d
computational
complexity
context
free
grammars
parsing
lr
k
grammars
np
complete
problems
4
12
5
23
5
25
ca751205
jb
january
5
1978
4
28
pm
2702
5
2702
2702
5
2702
2702
5
2702
</TEXT>
</DOC>
<DOC>
<DOCNO>2703</DOCNO>
<TEXT>
the
intrinsically
exponential
complexity
of
the
circularity
problem
for
attribute
grammars
attribute
grammars
are
an
extension
of
context
free
grammars
devised
by
knuth
as
a
mechanism
for
including
the
semantics
of
a
context
free
language
with
the
syntax
of
the
language
the
circularity
problem
for
a
grammar
is
to
determine
whether
the
semantics
for
all
possible
sentences
programs
in
fact
will
be
well
defined
it
is
proved
that
this
problem
is
in
general
computationally
intractable
specifically
it
is
shown
that
any
deterministic
algorithm
which
solves
the
problem
must
for
infinitely
many
cases
use
an
exponential
amount
of
timen
improved
version
of
knuth
circularity
testing
algorithm
is
also
given
which
actually
solves
the
problem
within
exponential
time
cacm
december
1975
jazayeri
m
ogden
w
f
rounds
w
c
attribute
grammars
circularity
problem
context
free
grammars
computational
complexity
exponential
time
semantics
4
12
5
25
ca751204
jb
january
5
1978
4
38
pm
2703
4
2703
2703
5
2703
2703
5
2703
2703
5
2703
2886
5
2703
</TEXT>
</DOC>
<DOC>
<DOCNO>2704</DOCNO>
<TEXT>
exception
handling
issues
and
a
proposed
notation
this
paper
defines
exception
conditions
discusses
the
requirements
exception
handling
language
features
must
satisfy
and
proposes
some
new
language
features
for
dealing
with
exceptions
in
an
orderly
and
reliable
way
the
proposed
language
features
serve
to
highlight
exception
handling
issues
by
showing
how
deficiencies
in
current
approaches
can
be
remedied
cacm
december
1975
goodenough
j
b
multilevel
exit
goto
statement
error
conditions
structured
programming
on
conditions
programming
languages
4
22
ca751203
jb
january
5
1978
4
47
pm
1397
4
2704
1828
4
2704
1854
4
2704
1877
4
2704
1960
4
2704
2150
4
2704
2317
4
2704
2319
4
2704
2377
4
2704
2342
4
2704
2376
4
2704
2379
4
2704
2424
4
2704
2482
4
2704
2618
4
2704
2632
4
2704
2704
4
2704
2704
4
2704
2704
4
2704
2704
4
2704
2704
4
2704
2704
4
2704
2723
4
2704
2738
4
2704
2738
4
2704
2740
4
2704
2741
4
2704
2770
4
2704
2866
4
2704
2867
4
2704
2867
4
2704
2869
4
2704
2902
4
2704
2941
4
2704
2958
4
2704
3004
4
2704
3030
4
2704
3053
4
2704
3184
4
2704
1247
5
2704
1552
5
2704
1749
5
2704
2356
5
2704
2379
5
2704
2673
5
2704
2704
5
2704
2704
5
2704
2704
5
2704
2945
5
2704
3150
5
2704
1947
6
2704
2060
6
2704
2704
6
2704
2704
6
2704
2842
6
2704
2870
6
2704
2939
6
2704
2940
6
2704
2941
6
2704
2943
6
2704
3073
6
2704
3148
6
2704
</TEXT>
</DOC>
<DOC>
<DOCNO>2705</DOCNO>
<TEXT>
programming
languages
natural
languages
and
mathematics
some
social
aspects
of
programming
are
illuminated
through
analogies
with
similar
aspects
of
mathematics
and
natural
languages
the
split
between
pure
and
applied
mathematics
is
found
similarly
in
programming
the
development
of
natural
languages
toward
flexion
less
word
order
based
language
types
speaks
for
programming
language
design
based
on
general
abstract
constructs
by
analogy
with
incidents
of
the
history
of
artificial
auxiliary
languages
it
is
suggested
that
fortran
and
cobol
will
remain
dominant
for
a
long
time
to
come
the
most
promising
avenues
for
further
work
of
wide
influence
are
seen
to
be
high
quality
program
literature
i
e
programs
of
general
utility
and
studies
of
questions
related
to
program
style
cacm
december
1975
naur
p
analogies
related
to
social
aspects
pure
and
applied
mathematics
language
quality
language
development
artificial
auxiliary
languages
literature
style
descriptive
and
prescriptive
attitudes
4
20
ca751202
jb
january
6
1978
8
30
am
2705
4
2705
2705
4
2705
2984
4
2705
3101
4
2705
1908
5
2705
2705
5
2705
2705
5
2705
2705
5
2705
3185
5
2705
</TEXT>
</DOC>
<DOC>
<DOCNO>2706</DOCNO>
<TEXT>
a
note
on
the
set
basis
problem
related
to
the
compaction
of
character
sets
this
note
discusses
the
reduction
of
the
set
basis
problem
to
the
clique
cover
problem
cacm
november
1975
kou
l
t
wong
c
k
compaction
of
character
sets
set
basis
set
covering
computational
complexity
polynomial
completeness
clique
cover
4
9
5
25
5
39
ca751106
jb
january
6
1978
8
55
am
2706
4
2706
2643
5
2706
2706
5
2706
2706
5
2706
2706
5
2706
</TEXT>
</DOC>
<DOC>
<DOCNO>2707</DOCNO>
<TEXT>
backtrack
programming
techniques
the
purpose
of
this
paper
is
twofold
first
a
brief
exposition
of
the
general
backtrack
technique
and
its
history
is
given
second
it
is
shown
how
the
use
of
macros
can
considerably
shorten
the
computation
time
in
many
cases
in
particular
this
technique
has
allowed
the
solution
of
two
previously
open
combinatorial
problems
the
computation
of
new
terms
in
a
well
known
series
and
the
substantial
reduction
in
computation
time
for
the
solution
to
another
combinatorial
problem
cacm
november
1975
bitner
j
r
reingold
e
m
backtrack
depth
first
search
exhaustive
search
macros
combinatorial
computing
non
attacking
queen
problem
difference
preserving
codes
pentominoes
tiling
problems
squaring
the
square
5
30
ca751105
jb
january
6
1978
9
03
am
1531
4
2707
2707
4
2707
2753
4
2707
1185
5
2707
2707
5
2707
2707
5
2707
2707
5
2707
3053
5
2707
1329
6
2707
1785
6
2707
1973
6
2707
1992
6
2707
2107
6
2707
2109
6
2707
2412
6
2707
2543
6
2707
2673
6
2707
2707
6
2707
2770
6
2707
</TEXT>
</DOC>
<DOC>
<DOCNO>2708</DOCNO>
<TEXT>
practical
syntactic
error
recovery
this
paper
describes
a
recovery
scheme
for
syntax
errors
which
provides
automatically
generated
high
quality
recovery
with
good
diagnostic
information
at
relatively
low
cost
previous
recovery
techniques
are
summarized
and
empirical
comparisons
are
made
suggestions
for
further
research
on
this
topic
conclude
the
paper
cacm
november
1975
graham
s
l
rhodes
s
p
syntax
errors
error
recovery
error
correction
parsing
simple
precedence
compilers
debugging
4
12
4
42
5
23
ca751104
jb
january
6
1978
9
42
am
1225
4
2708
1350
4
2708
1379
4
2708
1542
4
2708
1646
4
2708
1683
4
2708
1693
4
2708
1693
4
2708
1781
4
2708
1781
4
2708
1781
4
2708
1781
4
2708
1787
4
2708
1836
4
2708
1836
4
2708
1945
4
2708
1945
4
2708
1945
4
2708
2015
4
2708
2060
4
2708
2060
4
2708
2061
4
2708
2061
4
2708
2082
4
2708
2091
4
2708
2091
4
2708
2152
4
2708
2179
4
2708
2179
4
2708
2340
4
2708
2356
4
2708
2534
4
2708
2534
4
2708
2546
4
2708
2546
4
2708
2556
4
2708
2603
4
2708
2650
4
2708
2650
4
2708
2698
4
2708
2698
4
2708
2698
4
2708
2698
4
2708
2708
4
2708
2708
4
2708
2708
4
2708
2708
4
2708
2708
4
2708
2708
4
2708
2708
4
2708
2820
4
2708
2824
4
2708
2887
4
2708
2971
4
2708
2982
4
2708
2986
4
2708
3045
4
2708
3045
4
2708
3045
4
2708
3093
4
2708
3093
4
2708
1477
5
2708
1491
5
2708
1787
5
2708
2111
5
2708
2534
5
2708
2556
5
2708
2708
5
2708
2708
5
2708
2708
5
2708
3093
5
2708
680
5
2708
1491
6
2708
2179
6
2708
2708
6
2708
680
6
2708
</TEXT>
</DOC>
<DOC>
<DOCNO>2709</DOCNO>
<TEXT>
a
genealogy
of
control
structures
the
issue
of
program
control
structures
has
had
a
history
of
heated
controversy
to
put
this
issue
on
a
solid
footing
this
paper
reviews
numerous
theoretical
results
on
control
structures
and
explores
their
practical
implications
the
classic
result
of
bohm
and
jacopini
on
the
theoretical
completeness
of
if
then
else
and
while
do
is
discussed
several
recent
ideas
on
control
structures
are
then
explored
these
include
a
review
of
various
other
control
structures
results
on
time
space
limitations
and
theorems
relating
the
relative
power
of
control
structures
under
notions
of
equivalence
in
conclusion
the
impact
of
theoretical
results
on
the
practicing
programmer
and
the
importance
of
one
in
one
out
control
structures
as
operational
abstractions
are
discussed
it
is
argued
further
that
there
is
insufficient
evidence
to
warrant
more
than
if
then
else
while
do
and
their
variants
cacm
november
1975
ledgard
h
f
marcotty
m
structured
programming
control
structures
goto
statements
language
design
pascal
4
2
5
24
ca751103
jb
january
6
1978
9
53
am
2319
4
2709
2411
4
2709
2480
4
2709
2574
4
2709
2594
4
2709
2709
4
2709
2709
4
2709
2709
4
2709
2709
4
2709
2709
4
2709
2802
4
2709
2889
4
2709
2937
4
2709
2939
4
2709
2972
4
2709
2989
4
2709
3004
4
2709
3004
4
2709
3005
4
2709
3025
4
2709
3101
4
2709
3121
4
2709
3155
4
2709
1425
5
2709
2138
5
2709
2204
5
2709
2456
5
2709
2477
5
2709
2709
5
2709
2709
5
2709
2709
5
2709
2821
5
2709
3121
5
2709
1312
6
2709
308
6
2709
309
6
2709
2456
6
2709
2709
6
2709
2709
6
2709
</TEXT>
</DOC>
<DOC>
<DOCNO>2710</DOCNO>
<TEXT>
specifying
queries
as
relational
expressions
the
square
data
sublanguage
this
paper
presents
a
data
sublanguage
called
square
intended
for
use
in
ad
hoc
interactive
problem
solving
by
non
computer
specialists
square
is
based
on
the
relational
model
of
data
and
is
shown
to
be
relationally
complete
however
it
avoids
the
quantifiers
and
bound
variables
required
by
languages
based
on
the
relational
calculus
facilities
for
query
insertion
deletion
and
update
on
tabular
data
bases
are
described
a
syntax
is
given
and
suggestions
are
made
for
alternative
syntaxes
including
a
syntax
based
on
english
key
words
for
users
with
limited
mathematical
background
cacm
november
1975
boyce
r
f
chamberlin
d
d
king
w
f
iii
database
data
sublanguages
relations
query
languages
casual
user
relational
data
model
tabular
data
interactive
problem
solving
nonprocedural
languages
relational
completeness
3
50
3
70
4
20
ca751102
jb
january
6
1978
10
04
am
1135
4
2710
1136
4
2710
2046
4
2710
2155
4
2710
2406
4
2710
493
4
2710
2710
4
2710
2710
4
2710
2710
4
2710
2710
4
2710
2715
4
2710
2716
4
2710
2716
4
2710
2717
4
2710
2718
4
2710
2765
4
2710
2765
4
2710
2817
4
2710
2888
4
2710
2888
4
2710
2901
4
2710
2901
4
2710
2906
4
2710
2957
4
2710
2959
4
2710
2965
4
2710
3087
4
2710
3154
4
2710
729
4
2710
1515
5
2710
2046
5
2710
2710
5
2710
2710
5
2710
2710
5
2710
2715
5
2710
616
5
2710
</TEXT>
</DOC>
<DOC>
<DOCNO>2711</DOCNO>
<TEXT>
a
vector
space
model
for
automatic
indexing
in
a
document
retrieval
or
other
pattern
matching
environment
where
stored
entities
documents
are
compared
with
each
other
or
with
incoming
patterns
search
requests
it
appears
that
the
best
indexing
property
space
is
one
where
each
entity
lies
as
far
away
from
the
others
as
possible
in
these
circumstances
the
value
of
an
indexing
system
may
be
expressible
as
a
function
of
the
density
of
the
object
space
in
particular
retrieval
performance
may
correlate
inversely
with
space
density
an
approach
based
on
space
density
computations
is
used
to
choose
an
optimum
indexing
vocabulary
for
a
collection
of
documents
typical
evaluation
results
are
shown
demonstrating
the
usefulness
of
the
model
cacm
november
1975
salton
g
wong
a
yang
c
s
automatic
information
retrieval
automatic
indexing
content
analysis
document
space
3
71
3
73
3
74
3
75
ca751101
jb
january
6
1978
10
14
am
2711
5
2711
2711
5
2711
2711
5
2711
</TEXT>
</DOC>
<DOC>
<DOCNO>2712</DOCNO>
<TEXT>
horner
rule
for
the
evaluation
of
general
closed
queueing
networks
the
solution
of
separable
closed
queueing
networks
requires
the
evaluation
of
homogeneous
multinomial
expressions
the
number
of
terms
in
those
expressions
grows
combinatorially
with
the
size
of
the
network
such
that
a
direct
summation
may
become
impractical
an
algorithm
is
given
which
does
not
show
a
combinatorial
operation
count
the
algorithm
is
based
on
a
generalization
of
horner
rule
for
polynomials
it
is
also
shown
how
mean
queue
size
and
throughput
an
be
obtained
at
negligible
extra
cost
once
the
normalization
constant
is
evaluated
cacm
october
1975
reiser
m
kobayashi
h
queueing
networks
queueing
theory
horner
rule
evaluation
of
multinomial
sums
load
dependent
service
rate
5
12
5
5
8
1
8
3
ca751007
jb
january
6
1978
10
35
am
2712
4
2712
2741
4
2712
3070
4
2712
2454
5
2712
2712
5
2712
2712
5
2712
2712
5
2712
</TEXT>
</DOC>
<DOC>
<DOCNO>2713</DOCNO>
<TEXT>
remark
on
stably
updating
mean
and
standard
deviation
of
data
corrigendum
cacm
october
1975
cotton
i
ca751006
jb
january
6
1978
10
38
am
2713
5
2713
2713
5
2713
2713
5
2713
</TEXT>
</DOC>
<DOC>
<DOCNO>2714</DOCNO>
<TEXT>
merging
with
parallel
processors
consider
two
linearly
ordered
sets
a
b
a
m
b
n
m
n
and
p
p
m
parallel
processors
working
synchronously
the
paper
presents
an
algorithm
for
merging
a
and
b
with
the
p
parallel
processors
which
requires
at
most
2
log2
2m
1
3m
p
m
p
log2
n
m
steps
if
n
2
b
m
b
an
integer
the
algorithm
requires
at
most
2
log2
m
1
m
p
2
b
steps
in
the
case
where
m
and
n
are
of
the
same
order
of
magnitude
i
e
n
km
with
k
being
a
constant
the
algorithm
requires
2
log2
m
1
m
p
3
k
steps
these
performances
compare
very
favorably
with
the
previous
best
parallel
merging
algorithm
batcher
algorithm
which
requires
n
p
m
n
2p
log2
m
steps
in
the
general
case
and
km
p
k
1
2
m
p
log2
m
in
the
special
case
where
n
km
cacm
october
1975
gavril
f
parallel
processing
parallel
merging
parallel
binary
insertion
5
31
ca751005
jb
january
6
1978
10
50
am
2714
4
2714
3075
4
2714
2664
5
2714
2714
5
2714
2714
5
2714
2714
5
2714
3075
5
2714
2289
6
2714
2557
6
2714
2664
6
2714
2714
6
2714
</TEXT>
</DOC>
<DOC>
<DOCNO>2715</DOCNO>
<TEXT>
implementation
of
a
structured
english
query
language
the
relational
model
of
data
the
xrm
relational
memory
system
and
the
sequel
language
have
been
covered
in
previous
papers
and
are
reviewed
sequel
is
a
relational
data
sublanguages
intended
for
the
ad
hoc
interactive
problem
solving
by
non
computer
specialists
a
version
of
sequel
that
has
been
implemented
in
a
prototype
interpreter
is
described
the
interpreter
is
designed
to
minimize
the
data
accessing
operations
required
to
respond
to
an
arbitrary
query
the
optimization
algorithms
designed
for
this
purpose
are
described
cacm
october
1975
astrahan
m
m
chamberlin
d
d
relational
model
query
language
nonprocedural
language
database
data
structure
data
organization
3
74
3
75
4
22
4
33
4
34
ca751004
jb
january
6
1978
11
02
am
2155
4
2715
2406
4
2715
2710
4
2715
2715
4
2715
2716
4
2715
2717
4
2715
2718
4
2715
2765
4
2715
2817
4
2715
2888
4
2715
2901
4
2715
2957
4
2715
2959
4
2715
2965
4
2715
3087
4
2715
3154
4
2715
2046
5
2715
2710
5
2715
2715
5
2715
2715
5
2715
2715
5
2715
2716
5
2715
2901
5
2715
1515
6
2715
1976
6
2715
2046
6
2715
2046
6
2715
2046
6
2715
2715
6
2715
2715
6
2715
2715
6
2715
616
6
2715
</TEXT>
</DOC>
<DOC>
<DOCNO>2716</DOCNO>
<TEXT>
optimizing
the
performance
of
a
relational
algebra
database
interface
an
approach
for
implementing
a
smart
interface
to
support
a
relational
view
of
data
is
proposed
the
basic
idea
is
to
employ
automatic
programming
techniques
so
that
the
interface
analyzes
and
efficiently
refines
the
high
level
query
specification
supplied
by
the
user
a
relational
algebra
interface
called
squiral
which
was
designed
using
this
approach
is
described
in
detail
squiral
seeks
to
minimize
query
response
time
and
space
utilization
by
1
performing
global
query
optimization
2
exploiting
disjoint
and
pipelined
concurrency
3
coordinating
sort
orders
in
temporary
relations
4
employing
directory
analysis
and
5
maintaining
locality
in
page
references
algorithms
for
implementing
the
operators
of
e
f
codd
relational
algebra
are
presented
and
a
methodology
for
composing
them
to
optimize
the
performance
of
a
particular
user
query
is
described
cacm
october
1975
smith
j
m
yen
tang
chang
p
relational
database
database
optimization
inverted
file
automatic
programming
query
language
data
manipulation
language
very
high
level
language
3
70
4
13
4
33
ca751003
jb
january
6
1978
11
19
am
2155
4
2716
2406
4
2716
2710
4
2716
2710
4
2716
2715
4
2716
2716
4
2716
2716
4
2716
2717
4
2716
2718
4
2716
2765
4
2716
2817
4
2716
2888
4
2716
2901
4
2716
2901
4
2716
2957
4
2716
2959
4
2716
2965
4
2716
3087
4
2716
3154
4
2716
2046
5
2716
2715
5
2716
2716
5
2716
2716
5
2716
2716
5
2716
</TEXT>
</DOC>
<DOC>
<DOCNO>2717</DOCNO>
<TEXT>
convert
a
high
level
translation
definition
language
for
data
conversion
this
paper
describes
a
high
level
and
nonprocedural
translation
definition
language
convert
which
provides
very
powerful
and
highly
flexible
data
restructuring
capabilities
its
design
is
based
on
the
simple
underlying
concept
of
a
form
which
enables
the
users
to
visualize
the
translation
processes
and
thus
makes
data
translation
a
much
simpler
task
convert
has
been
chosen
for
conveying
the
purpose
of
the
language
and
should
not
be
confused
with
any
other
language
or
program
bearing
the
same
name
cacm
october
1975
shu
n
c
housel
b
c
lum
v
y
data
conversion
data
restructuring
data
translation
database
reorganization
translation
definition
utility
program
programming
languages
nonprocedural
languages
3
50
3
75
4
29
4
4
4
9
ca751002
jb
january
6
1978
1
45
pm
2155
4
2717
2406
4
2717
2710
4
2717
2715
4
2717
2716
4
2717
2717
4
2717
2717
4
2717
2718
4
2717
2765
4
2717
2817
4
2717
2888
4
2717
2901
4
2717
2957
4
2717
2959
4
2717
2965
4
2717
3087
4
2717
3154
4
2717
2046
5
2717
2406
5
2717
2717
5
2717
2717
5
2717
2717
5
2717
</TEXT>
</DOC>
<DOC>
<DOCNO>2718</DOCNO>
<TEXT>
a
preliminary
system
for
the
design
of
dbtg
data
structures
the
functional
approach
to
database
design
is
introduced
in
this
approach
the
goal
of
design
is
to
derive
a
data
structure
which
is
capable
of
supporting
a
set
of
anticipated
queries
rather
than
a
structure
which
models
the
business
in
some
other
way
an
operational
computer
program
is
described
which
utilizers
the
functional
approach
to
design
data
structures
conforming
to
the
data
base
task
group
specifications
the
automatic
programming
technology
utilized
by
this
program
although
typically
used
to
generate
procedure
is
here
used
to
generate
declaratives
cacm
october
1975
gerritsen
r
network
model
of
databases
data
base
task
group
database
design
data
structure
automatic
programming
translation
nonprocedural
languages
3
5
3
64
3
7
4
2
5
23
ca751001
jb
january
6
1978
2
02
pm
2155
4
2718
2406
4
2718
2710
4
2718
2715
4
2718
2716
4
2718
2717
4
2718
2718
4
2718
2765
4
2718
2817
4
2718
2888
4
2718
2901
4
2718
2957
4
2718
2959
4
2718
2965
4
2718
3087
4
2718
3154
4
2718
2046
5
2718
2718
5
2718
2718
5
2718
2718
5
2718
3147
5
2718
2718
6
2718
</TEXT>
</DOC>
<DOC>
<DOCNO>2719</DOCNO>
<TEXT>
mechanical
program
analysis
one
means
of
analyzing
program
performance
is
by
deriving
closed
form
expressions
for
their
execution
behavior
this
paper
discusses
the
mechanization
of
such
analysis
and
describes
a
system
metric
which
is
able
to
analyze
simple
lisp
programs
and
produce
for
example
closed
form
expressions
for
their
running
time
expressed
in
terms
of
size
of
input
this
paper
presents
the
reasons
for
mechanizing
program
analysis
describes
the
operation
of
metric
explains
its
implementation
and
discusses
its
limitations
cacm
september
1975
wegbreit
b
analysis
of
programs
performance
analysis
execution
time
execution
behavior
difference
equations
generating
functions
list
processing
lisp
algebraic
manipulation
programming
languages
analysis
of
algorithms
3
69
4
22
5
24
5
25
ca750905
jb
january
6
1978
2
11
pm
1024
4
2719
1051
4
2719
1102
4
2719
1132
4
2719
1390
4
2719
1486
4
2719
1549
4
2719
1706
4
2719
1708
4
2719
1781
4
2719
1826
4
2719
1826
4
2719
1860
4
2719
1878
4
2719
378
4
2719
2060
4
2719
2155
4
2719
2156
4
2719
2168
4
2719
2168
4
2719
2164
4
2719
2170
4
2719
2249
4
2719
2314
4
2719
2323
4
2719
2657
4
2719
2719
4
2719
2719
4
2719
2719
4
2719
2719
4
2719
2719
4
2719
2719
4
2719
2719
4
2719
2723
4
2719
2736
4
2719
2833
4
2719
2838
4
2719
2842
4
2719
2855
4
2719
2879
4
2719
2967
4
2719
3077
4
2719
3080
4
2719
3094
4
2719
3106
4
2719
627
4
2719
106
4
2719
210
5
2719
1626
5
2719
2151
5
2719
2167
5
2719
2210
5
2719
2645
5
2719
2657
5
2719
2719
5
2719
2719
5
2719
2719
5
2719
</TEXT>
</DOC>
<DOC>
<DOCNO>2720</DOCNO>
<TEXT>
optimal
balancing
of
i
o
requests
to
disks
determining
a
policy
for
efficient
allocation
and
utilization
of
a
set
of
disk
drives
with
differing
operational
characteristics
is
examined
using
analytical
techniques
using
standard
queueing
theory
each
disk
drive
is
characterized
by
a
queueing
model
with
service
time
of
a
disk
drive
represented
by
the
probability
density
function
of
the
sum
of
two
uniform
distributions
total
response
time
of
the
set
of
disk
models
is
then
minimized
under
varying
load
conditions
the
results
indicate
that
faster
devices
should
have
higher
utilization
factors
and
that
the
number
of
different
device
types
utilized
tends
to
decrease
with
decreasing
load
specific
examples
using
2314
and
3330
combinations
are
examined
cacm
september
1975
piepmeier
w
f
disk
drive
hierarchies
system
evaluation
input
output
modeling
queueing
theory
balancing
scheduling
device
assignment
2
44
4
35
5
15
5
5
6
35
8
1
8
3
ca750904
jb
january
6
1978
2
42
pm
2720
5
2720
2720
5
2720
2720
5
2720
</TEXT>
</DOC>
<DOC>
<DOCNO>2721</DOCNO>
<TEXT>
the
digital
simulation
of
river
plankton
population
dynamics
this
paper
deals
with
the
development
of
a
mathematical
model
for
and
the
digital
simulation
in
fortran
iv
of
phytoplankton
and
zooplankton
population
densities
in
a
river
using
previously
developed
rate
expressions
in
order
to
study
the
relationships
between
the
ecological
mechanisms
involved
the
simulation
parameters
were
varied
illustrating
the
response
of
the
ecosystem
to
different
conditions
including
those
corresponding
to
certain
types
of
chemical
and
thermal
pollution
as
an
investigation
of
the
accuracy
of
the
simulation
methods
a
simulation
of
the
actual
population
dynamics
of
asterionella
in
the
columbia
river
was
made
based
on
approximations
of
conditions
in
that
river
although
not
totally
accurate
the
simulation
was
found
to
predict
the
general
annual
pattern
of
plankton
growth
fairly
well
and
specifically
revealed
the
importance
of
the
annual
velocity
cycle
in
determining
such
patterns
in
addition
the
study
demonstrates
the
usefulness
of
digital
simulations
in
the
examinations
of
certain
aquatic
ecosystems
as
well
as
in
environmental
planning
involving
such
examinations
cacm
september
1975
claudson
r
m
digital
simulation
mathematical
modeling
plankton
population
dynamics
phytoplankton
zooplankton
river
ecosystems
ecological
mechanisms
environmental
simulation
modeling
ecosystems
pollution
environmental
impact
environmental
planning
3
12
3
19
ca750903
jb
january
6
1978
2
55
pm
2721
5
2721
2721
5
2721
2721
5
2721
</TEXT>
</DOC>
<DOC>
<DOCNO>2722</DOCNO>
<TEXT>
multidimensional
binary
search
trees
used
for
associative
searching
this
paper
develops
the
multidimensional
binary
search
tree
or
k
d
tree
where
k
is
the
dimensionality
of
the
search
space
as
a
data
structure
for
storage
of
information
to
be
retrieved
by
associative
searches
the
k
d
tree
is
defined
and
examples
are
given
it
is
shown
to
be
quite
in
its
storage
requirements
a
significant
advantage
of
this
structure
is
that
a
single
data
structure
can
handle
many
types
of
queries
very
efficiently
various
utility
algorithms
are
developed
their
proven
average
running
times
in
an
n
record
file
are
insertion
o
log
n
deletion
of
the
root
o
n
k
1
k
deletion
of
a
random
node
o
log
n
and
optimization
guarantees
logarithmic
performance
of
searches
o
n
log
n
search
algorithms
are
given
for
partial
match
queries
with
t
keys
specified
proven
maximum
running
time
of
o
n
k
t
k
and
for
nearest
neighbor
queries
empirically
observed
average
running
time
of
o
log
n
these
performances
far
surpass
the
best
currently
known
algorithms
for
these
tasks
an
algorithm
is
presented
to
handle
any
general
intersection
query
the
main
focus
of
this
paper
theoretical
it
is
felt
however
that
k
d
trees
could
be
quite
useful
in
many
applications
and
examples
of
potential
uses
are
given
cacm
september
1975
bently
j
l
associative
retrieval
binary
search
trees
key
attribute
information
retrieval
system
nearest
neighbor
queries
partial
match
queries
intersection
queries
binary
tree
insertion
3
63
3
70
3
74
4
49
ca750902
jb
january
6
1978
3
22
pm
2722
5
2722
2722
5
2722
2722
5
2722
</TEXT>
</DOC>
<DOC>
<DOCNO>2723</DOCNO>
<TEXT>
multiprocessing
compactifying
garbage
collection
algorithms
for
a
multiprocessing
compactifying
garbage
collector
are
presented
and
discussed
the
simple
case
of
two
processors
one
performing
lisp
like
list
operations
and
the
other
performing
garbage
collection
continuously
is
thoroughly
examined
the
necessary
capabilities
of
each
processor
are
defined
as
well
as
interprocessor
communication
and
interlocks
complete
procedures
for
garbage
collection
and
for
standard
list
processing
primitives
are
presented
and
thoroughly
explained
particular
attention
is
given
to
the
problems
of
marking
and
relocating
list
cells
while
another
processor
may
be
operating
on
them
the
primary
aim
throughout
is
to
allow
the
list
processor
to
run
unimpeded
while
the
other
processor
reclaims
list
storage
the
more
complex
cases
involving
several
list
processors
and
one
or
more
garbage
collection
processors
are
also
briefly
discussed
cacm
september
1975
steele
g
l
jr
garbage
collection
storage
reclamation
reclaimer
storage
allocation
multiprocessing
synchronization
semaphores
parallel
processing
compactification
relocation
lisp
list
processing
free
storage
pointers
data
structures
gc
processor
4
19
4
32
4
40
4
49
4
9
ca750901
jb
january
6
1978
3
39
pm
1024
4
2723
1024
4
2723
1050
4
2723
1051
4
2723
1051
4
2723
1098
4
2723
1102
4
2723
1132
4
2723
1214
4
2723
1380
4
2723
1388
4
2723
1390
4
2723
1393
4
2723
1485
4
2723
1486
4
2723
1487
4
2723
1549
4
2723
1549
4
2723
1549
4
2723
1570
4
2723
1706
4
2723
1826
4
2723
1828
4
2723
1854
4
2723
1869
4
2723
1877
4
2723
1878
4
2723
1878
4
2723
1946
4
2723
1957
4
2723
1960
4
2723
1972
4
2723
378
4
2723
2060
4
2723
2150
4
2723
2155
4
2723
2156
4
2723
2168
4
2723
2168
4
2723
2168
4
2723
2317
4
2723
2319
4
2723
2377
4
2723
2342
4
2723
2376
4
2723
2379
4
2723
2424
4
2723
2438
4
2723
2482
4
2723
2513
4
2723
2618
4
2723
2632
4
2723
2665
4
2723
2704
4
2723
2719
4
2723
2723
4
2723
2723
4
2723
2723
4
2723
2723
4
2723
2723
4
2723
2723
4
2723
2723
4
2723
2736
4
2723
2738
4
2723
2740
4
2723
2741
4
2723
2833
4
2723
2838
4
2723
2842
4
2723
2855
4
2723
2855
4
2723
2855
4
2723
2857
4
2723
2867
4
2723
2879
4
2723
2882
4
2723
2941
4
2723
2956
4
2723
3030
4
2723
3074
4
2723
3077
4
2723
3080
4
2723
3106
4
2723
3106
4
2723
3112
4
2723
3112
4
2723
3184
4
2723
627
4
2723
731
4
2723
793
4
2723
106
4
2723
210
5
2723
1549
5
2723
1749
5
2723
1826
5
2723
2651
5
2723
2723
5
2723
2723
5
2723
2723
5
2723
2838
5
2723
2896
5
2723
3039
5
2723
3074
5
2723
3112
5
2723
627
5
2723
731
5
2723
106
6
2723
1380
6
2723
1826
6
2723
1826
6
2723
210
6
2723
1834
6
2723
1853
6
2723
1972
6
2723
1972
6
2723
2438
6
2723
2723
6
2723
2723
6
2723
2723
6
2723
2723
6
2723
2723
6
2723
2732
6
2723
2732
6
2723
2736
6
2723
2833
6
2723
2838
6
2723
2896
6
2723
731
6
2723
</TEXT>
</DOC>
<DOC>
<DOCNO>2724</DOCNO>
<TEXT>
the
lemniscate
constants
corrigendum
cacm
august
1975
todd
j
ca750811
jb
january
6
1978
3
44
pm
2724
5
2724
2724
5
2724
2724
5
2724
</TEXT>
</DOC>
<DOC>
<DOCNO>2725</DOCNO>
<TEXT>
a
comparison
of
simulation
event
list
algorithms
corrigendum
cacm
august
1975
vaucher
j
c
duval
p
ca750810
jb
january
6
1978
3
43
pm
2725
5
2725
2725
5
2725
2725
5
2725
</TEXT>
</DOC>
<DOC>
<DOCNO>2726</DOCNO>
<TEXT>
combining
decision
rules
in
a
decision
table
the
techniques
for
minimizing
logic
circuits
are
applied
to
the
simplification
of
decision
tables
by
the
combining
of
decision
rules
this
method
is
logically
equivalent
to
the
quien
mccluskey
method
for
finding
prime
implicants
if
some
of
the
decision
rules
implied
in
the
else
rule
occur
with
low
frequency
then
the
else
rule
can
be
used
to
further
simplify
the
decision
table
several
objectives
merit
consideration
in
optimizing
a
decision
table
1
reducing
machine
execution
time
2
reducing
preprocessing
time
3
reducing
required
machine
memory
4
reducing
the
number
of
decision
rules
this
often
improves
the
clarity
of
the
decision
table
to
a
human
reader
it
will
be
shown
that
objectives
3
and
4
can
be
furthered
with
the
above
methods
objective
1
is
also
attained
if
overspecified
decision
rules
are
not
combined
objective
2
must
be
compared
against
the
potential
benefits
of
objectives
1
3
and
4
in
deciding
whether
to
use
the
above
methods
cacm
august
1975
shwayder
k
the
quine
mccluskey
method
prime
implicants
minimization
maximization
logic
circuit
boolean
method
coding
decision
tables
flowcharting
sorting
3
5
3
74
4
12
5
31
5
6
ca750809
jb
january
6
1978
3
53
pm
1354
4
2726
1354
4
2726
1488
4
2726
1548
4
2726
1548
4
2726
1684
4
2726
2053
4
2726
2053
4
2726
2053
4
2726
2220
4
2726
2220
4
2726
2220
4
2726
2220
4
2726
2220
4
2726
2273
4
2726
2273
4
2726
2273
4
2726
2273
4
2726
2453
4
2726
2453
4
2726
2453
4
2726
2492
4
2726
2517
4
2726
2518
4
2726
2598
4
2726
2598
4
2726
2598
4
2726
2598
4
2726
2616
4
2726
2691
4
2726
2726
4
2726
2726
4
2726
2726
4
2726
2726
4
2726
2726
4
2726
2726
4
2726
2726
4
2726
2726
4
2726
2726
4
2726
2856
4
2726
2856
4
2726
2856
4
2726
2856
4
2726
3113
4
2726
3113
4
2726
1172
5
2726
1327
5
2726
1354
5
2726
1488
5
2726
1489
5
2726
1548
5
2726
2220
5
2726
2221
5
2726
2263
5
2726
2726
5
2726
2726
5
2726
2726
5
2726
</TEXT>
</DOC>
<DOC>
<DOCNO>2727</DOCNO>
<TEXT>
multiple
byte
processing
with
full
word
instructions
a
method
is
described
which
allows
parallel
processing
of
packed
data
items
using
only
ordinary
full
word
computer
instructions
even
though
the
processing
requires
operations
whose
execution
is
contingent
upon
the
value
of
a
datum
it
provides
a
useful
technique
for
processing
small
data
items
such
as
alphanumeric
characters
cacm
august
1975
lamport
l
byte
processing
character
processing
packed
data
4
9
ca750808
jb
january
6
1978
4
21
pm
2727
5
2727
2727
5
2727
2727
5
2727
2952
5
2727
142
6
2727
162
6
2727
163
6
2727
192
6
2727
2185
6
2727
2727
6
2727
</TEXT>
</DOC>
<DOC>
<DOCNO>2728</DOCNO>
<TEXT>
consecutive
storage
of
relevant
records
with
redundancy
this
paper
studies
the
properties
of
a
new
class
of
file
organizations
crwr
where
records
relevant
to
every
query
are
stored
in
consecutive
storage
locations
but
the
organizations
contain
redundancy
some
theorems
which
provide
tools
for
reducing
redundancy
in
crwr
organizations
have
been
also
developed
redundancies
obtained
by
the
application
of
these
theorems
are
compared
with
that
of
query
inverted
file
organizations
some
crwr
organization
with
minimum
redundancy
have
also
been
developed
for
queries
which
specify
sets
of
keys
cacm
august
1975
ghosh
s
p
consecutive
retrieval
storage
file
records
query
redundancy
key
3
70
3
73
3
74
ca750807
jb
january
6
1978
4
34
pm
2728
5
2728
2728
5
2728
2728
5
2728
</TEXT>
</DOC>
<DOC>
<DOCNO>2729</DOCNO>
<TEXT>
comments
on
a
paper
by
t
c
chen
and
i
t
ho
cacm
august
1975
smith
a
j
binary
coded
decimal
digits
decimal
data
storage
data
compression
huffman
codes
variable
length
codes
6
32
6
34
ca750806
jb
january
6
1978
4
37
pm
2729
4
2729
2729
4
2729
2288
5
2729
2729
5
2729
2729
5
2729
2729
5
2729
2801
5
2729
</TEXT>
</DOC>
<DOC>
<DOCNO>2730</DOCNO>
<TEXT>
interactive
consulting
via
natural
language
interactive
programming
systems
often
contain
help
commands
to
give
the
programmer
on
line
instruction
regarding
the
use
of
the
various
systems
commands
it
is
argued
that
it
would
be
relatively
easy
to
make
these
help
commands
significantly
more
helpful
by
having
them
accept
requests
in
natural
language
as
a
demonstration
weizenbaum
eliza
program
has
been
provided
with
a
script
that
turns
it
into
a
natural
language
system
consultant
cacm
august
1975
sharo
s
c
kwasny
s
c
interactive
programming
time
sharing
systems
natural
language
processing
computer
assisted
instruction
3
32
3
42
3
79
4
49
ca750805
dmm
january
30
1978
4
13
pm
1400
4
2730
1553
4
2730
1945
4
2730
2127
4
2730
2396
4
2730
2730
4
2730
1487
5
2730
2730
5
2730
2730
5
2730
2730
5
2730
</TEXT>
</DOC>
<DOC>
<DOCNO>2731</DOCNO>
<TEXT>
remark
on
stably
updating
mean
and
standard
deviation
of
data
cacm
august
1975
cotton
i
w
mean
standard
deviation
5
5
5
19
ca750804
jb
january
6
1978
4
40
pm
2731
4
2731
3159
4
2731
3166
4
2731
3167
4
2731
2731
5
2731
2731
5
2731
2731
5
2731
2799
5
2731
3159
5
2731
3166
5
2731
3167
5
2731
1411
6
2731
2731
6
2731
2731
6
2731
2731
6
2731
2799
6
2731
2799
6
2731
2799
6
2731
3159
6
2731
3167
6
2731
3166
6
2731
</TEXT>
</DOC>
<DOC>
<DOCNO>2732</DOCNO>
<TEXT>
guarded
commands
nondeterminacy
and
formal
derivation
of
programs
so
called
guarded
commands
are
introduced
as
a
building
block
for
alternative
and
repetitive
constructs
that
allow
nondeterministic
program
components
for
which
at
least
the
activity
evoked
but
possible
even
the
final
state
is
not
necessarily
uniquely
determined
by
the
initial
state
for
the
formal
derivation
of
programs
expressed
in
terms
of
these
constructs
a
calculus
will
be
shown
cacm
august
1975
dijkstra
e
w
programming
languages
sequencing
primitives
program
semantics
programming
language
semantics
nondeterminacy
case
construction
repetition
termination
correctness
proof
derivation
of
programs
programming
methodology
4
20
4
22
ca750803
jb
january
6
1978
4
46
pm
249
4
2732
254
4
2732
272
4
2732
1102
4
2732
1109
4
2732
1140
4
2732
1188
4
2732
1306
4
2732
1464
4
2732
1491
4
2732
1767
4
2732
1781
4
2732
1787
4
2732
1949
4
2732
321
4
2732
2021
4
2732
2059
4
2732
2126
4
2732
2222
4
2732
2227
4
2732
2315
4
2732
2326
4
2732
2470
4
2732
435
4
2732
437
4
2732
463
4
2732
483
4
2732
491
4
2732
2732
4
2732
2732
4
2732
2865
4
2732
2896
4
2732
2943
4
2732
560
4
2732
583
4
2732
3014
4
2732
3068
4
2732
3073
4
2732
3077
4
2732
3143
4
2732
627
4
2732
631
4
2732
632
4
2732
642
4
2732
644
4
2732
653
4
2732
680
4
2732
761
4
2732
762
4
2732
763
4
2732
123
4
2732
140
4
2732
919
4
2732
989
4
2732
196
5
2732
1834
5
2732
2732
5
2732
2732
5
2732
2732
5
2732
2896
5
2732
2972
5
2732
3037
5
2732
3039
5
2732
3043
5
2732
3073
5
2732
196
6
2732
970
6
2732
1834
6
2732
2204
6
2732
2597
6
2732
2597
6
2732
2723
6
2732
2723
6
2732
2732
6
2732
2732
6
2732
2732
6
2732
2732
6
2732
2732
6
2732
2732
6
2732
2738
6
2732
2896
6
2732
2927
6
2732
799
6
2732
</TEXT>
</DOC>
<DOC>
<DOCNO>2733</DOCNO>
<TEXT>
deterministic
parsing
of
ambiguous
grammars
methods
of
describing
the
syntax
of
programming
languages
in
ways
that
are
more
flexible
and
natural
than
conventional
bnf
descriptions
are
considered
these
methods
involve
the
use
of
ambiguous
context
free
grammars
together
with
rules
to
resolve
syntactic
ambiguities
it
is
shown
how
efficient
lr
and
ll
parsers
can
be
constructed
directly
from
certain
classes
of
these
specifications
cacm
august
1975
aho
a
v
johnson
s
c
ullman
j
d
programming
language
specification
parser
generation
translator
writing
systems
syntax
analysis
lr
parsing
ll
parsing
ambiguous
grammars
4
12
4
22
5
23
ca750802
jb
january
9
1978
9
28
am
1323
4
2733
1358
4
2733
1380
4
2733
1665
4
2733
1665
4
2733
1768
4
2733
1781
4
2733
1787
4
2733
1787
4
2733
1824
4
2733
1825
4
2733
1836
4
2733
1861
4
2733
1989
4
2733
2015
4
2733
2110
4
2733
2112
4
2733
2127
4
2733
2187
4
2733
2317
4
2733
2534
4
2733
2541
4
2733
2545
4
2733
2698
4
2733
2698
4
2733
2733
4
2733
2733
4
2733
2733
4
2733
2733
4
2733
2733
4
2733
2746
4
2733
2820
4
2733
2986
4
2733
3073
4
2733
3093
4
2733
3094
4
2733
3155
4
2733
1781
5
2733
2179
5
2733
2423
5
2733
2733
5
2733
2733
5
2733
2733
5
2733
2786
5
2733
799
5
2733
</TEXT>
</DOC>
<DOC>
<DOCNO>2734</DOCNO>
<TEXT>
on
the
external
storage
fragmentation
produced
by
first
fit
and
best
fit
allocation
strategies
published
comparisons
of
the
external
fragmentation
produced
by
first
fit
and
best
fit
memory
allocation
have
not
been
consistent
through
simulation
a
series
of
experiments
were
performed
in
order
to
obtain
better
data
on
the
relative
performance
of
first
fit
and
best
fit
and
a
better
understanding
of
the
reasons
underlying
observed
differences
the
time
memory
product
efficiencies
of
first
fit
and
best
fit
were
generally
within
1
to
3
percent
of
each
other
except
for
small
populations
the
size
of
the
request
population
had
little
effect
on
allocation
efficiency
for
exponential
and
hyperexponential
distributions
of
requests
first
fit
outperformed
best
fit
but
for
normal
and
uniform
distributions
and
for
exponential
distributions
distorted
in
various
ways
best
fit
outperformed
first
fit
it
is
hypothesized
that
when
first
fit
outperforms
best
fit
it
does
so
because
first
fit
by
preferentially
allocating
toward
one
end
of
memory
encourages
large
blocks
to
grow
at
the
other
end
sufficient
contiguous
space
is
thereby
more
likely
to
be
available
for
relatively
large
requests
results
of
simulation
experiments
supported
this
hypothesis
and
showed
that
the
relative
performance
of
first
fit
and
best
fit
depends
on
the
frequency
of
request
when
the
coefficient
of
variation
of
the
request
distribution
is
greater
than
or
approximately
equal
to
unity
first
fit
outperformed
best
fit
cacm
august
1975
shore
j
e
storage
fragmentation
dynamic
memory
allocation
first
fit
best
fit
3
73
4
32
4
35
ca750801
jb
january
9
1978
9
41
am
2095
4
2734
2218
4
2734
2218
4
2734
2498
4
2734
2596
4
2734
2734
4
2734
2734
4
2734
2902
4
2734
2911
4
2734
3000
4
2734
3000
4
2734
1879
5
2734
2095
5
2734
2734
5
2734
2734
5
2734
2734
5
2734
2902
5
2734
2911
5
2734
2983
5
2734
1051
6
2734
1062
6
2734
1184
6
2734
1211
6
2734
1552
6
2734
1879
6
2734
1879
6
2734
273
6
2734
2435
6
2734
2435
6
2734
2498
6
2734
2596
6
2734
2734
6
2734
2734
6
2734
2734
6
2734
2747
6
2734
2768
6
2734
2773
6
2734
2983
6
2734
</TEXT>
</DOC>
<DOC>
<DOCNO>2735</DOCNO>
<TEXT>
discrimination
in
the
employment
of
women
in
the
computer
industry
cacm
july
1975
weber
r
e
gilchrist
b
discrimination
against
women
salaries
employment
programmers
systems
analysis
keypunch
operators
machine
operators
2
40
2
41
2
42
ca750707
jb
january
9
1978
9
55
am
2735
5
2735
2735
5
2735
2735
5
2735
2823
5
2735
2735
6
2735
</TEXT>
</DOC>
<DOC>
<DOCNO>2736</DOCNO>
<TEXT>
a
note
on
hash
linking
cacm
july
1975
bobrow
d
g
hash
search
address
space
extension
implicit
pointers
monitor
conditions
3
7
3
73
4
1
ca750706
jb
january
9
1978
9
59
am
1708
4
2736
1781
4
2736
1826
4
2736
1860
4
2736
1972
4
2736
1972
4
2736
2156
4
2736
2156
4
2736
2156
4
2736
2168
4
2736
2168
4
2736
2249
4
2736
2249
4
2736
2314
4
2736
2361
4
2736
2438
4
2736
2513
4
2736
2719
4
2736
2723
4
2736
2736
4
2736
2736
4
2736
2736
4
2736
2736
4
2736
2833
4
2736
2833
4
2736
2855
4
2736
2855
4
2736
3074
4
2736
3074
4
2736
3074
4
2736
3106
4
2736
3112
4
2736
3112
4
2736
1626
5
2736
1826
5
2736
1853
5
2736
1972
5
2736
2736
5
2736
2736
5
2736
2736
5
2736
2833
5
2736
2845
5
2736
3112
5
2736
106
6
2736
1184
6
2736
1380
6
2736
1626
6
2736
1826
6
2736
1826
6
2736
1972
6
2736
2435
6
2736
2438
6
2736
2598
6
2736
2723
6
2736
2736
6
2736
2736
6
2736
2736
6
2736
2747
6
2736
2768
6
2736
2833
6
2736
2838
6
2736
731
6
2736
</TEXT>
</DOC>
<DOC>
<DOCNO>2737</DOCNO>
<TEXT>
determining
the
minimum
area
encasing
rectangle
for
an
arbitrary
closed
curve
this
paper
describes
a
method
for
finding
the
rectangle
of
minimum
area
in
which
a
given
arbitrary
plane
curve
can
be
contained
the
method
is
of
interest
in
certain
packing
and
optimum
layout
problems
it
consists
of
first
determining
the
minimal
perimeter
convex
polygon
that
encloses
the
given
curve
and
then
selecting
the
rectangle
of
minimum
area
capable
of
containing
this
polygon
three
theorems
are
introduced
to
show
that
one
side
of
the
minimum
area
rectangle
must
be
colinear
with
an
edge
of
the
enclosed
polygon
and
that
the
minimum
area
encasing
rectangle
for
the
convex
polygon
is
also
the
minimum
area
rectangle
for
the
curve
cacm
july
1975
freeman
h
shapira
r
enclosed
curve
optimum
layout
optimum
packing
minimum
area
encasing
rectangle
5
19
5
49
ca750705
jb
january
9
1978
10
08
am
2737
5
2737
2737
5
2737
2737
5
2737
2997
5
2737
2737
6
2737
</TEXT>
</DOC>
<DOC>
<DOCNO>2738</DOCNO>
<TEXT>
use
of
the
concept
of
transparency
in
the
design
of
hierarchically
structured
systems
this
paper
deals
with
the
design
of
hierarchically
structured
programming
systems
it
develops
a
method
for
evaluating
the
cost
of
requiring
programmers
to
work
with
an
abstraction
of
a
real
machine
a
number
of
examples
from
hardware
and
software
are
given
as
illustrations
of
the
method
cacm
july
1975
parnas
d
l
siewiorek
d
p
hierarchical
systems
bottom
up
design
levels
of
abstraction
synchronization
primitives
4
20
4
30
6
1
6
20
ca750704
dmm
january
31
1978
3
46
pm
1828
4
2738
1854
4
2738
1877
4
2738
1960
4
2738
2150
4
2738
2317
4
2738
2319
4
2738
2319
4
2738
2377
4
2738
2378
4
2738
2342
4
2738
2376
4
2738
2379
4
2738
2320
4
2738
2424
4
2738
2482
4
2738
2480
4
2738
2618
4
2738
2632
4
2738
2632
4
2738
2704
4
2738
2704
4
2738
2723
4
2738
2738
4
2738
2738
4
2738
2738
4
2738
2738
4
2738
2738
4
2738
2740
4
2738
2740
4
2738
2741
4
2738
2866
4
2738
2867
4
2738
2867
4
2738
2868
4
2738
2869
4
2738
2941
4
2738
2958
4
2738
3004
4
2738
3004
4
2738
3030
4
2738
3030
4
2738
3127
4
2738
3155
4
2738
3184
4
2738
1749
5
2738
2080
5
2738
2247
5
2738
2356
5
2738
2738
5
2738
2738
5
2738
2738
5
2738
2777
5
2738
2972
5
2738
970
6
2738
2204
6
2738
2597
6
2738
2732
6
2738
2738
6
2738
</TEXT>
</DOC>
<DOC>
<DOCNO>2739</DOCNO>
<TEXT>
the
restriction
language
for
computer
grammars
of
natural
language
over
the
past
few
years
a
number
of
systems
for
the
computer
analysis
of
natural
language
sentences
have
been
based
on
augmented
context
free
grammars
a
context
free
grammar
which
defines
a
set
of
parse
trees
for
a
sentence
plus
a
group
of
restrictions
to
which
a
tree
must
conform
in
order
to
be
a
valid
sentence
analysis
as
the
coverage
of
the
grammar
is
increased
an
efficient
representation
becomes
essential
for
further
development
this
paper
presents
a
programming
language
designed
specifically
for
the
compact
and
perspicuous
statement
of
restrictions
of
a
natural
language
grammar
it
is
based
on
ten
years
experience
parsing
text
sentences
with
the
comprehensive
english
grammar
of
the
n
linguistic
string
project
and
embodies
in
its
syntax
and
routines
the
relations
which
were
found
to
be
useful
and
adequate
for
computerized
natural
language
analysis
the
language
is
used
in
the
current
implementation
of
the
linguistic
string
parser
cacm
july
1975
sager
n
grishman
r
natural
language
parsing
grammar
programming
languages
3
42
3
79
4
22
ca750703
jb
january
9
1978
10
17
am
2581
4
2739
2739
4
2739
2795
4
2739
2921
4
2739
3087
4
2739
1989
5
2739
2739
5
2739
2739
5
2739
2739
5
2739
</TEXT>
</DOC>
<DOC>
<DOCNO>2740</DOCNO>
<TEXT>
a
large
semaphore
based
operating
system
the
paper
describes
the
internal
structure
of
a
large
operating
system
as
a
set
of
cooperating
sequential
processes
the
processes
synchronize
by
means
of
semaphores
and
extended
semaphores
queue
semaphores
the
number
of
parallel
processes
is
carefully
justified
and
the
various
semaphore
constructions
are
explained
the
system
is
proved
to
be
free
of
deadly
embrace
deadlock
the
design
principle
is
an
alternative
to
dijkstra
hierarchical
structuring
of
operating
systems
the
project
management
and
the
performance
are
discussed
too
the
operating
system
is
the
first
large
one
using
the
rc
4000
multiprogramming
system
cacm
july
1975
lauesen
s
cooperating
processes
operating
system
semaphores
semaphore
applications
queue
semaphores
deadlock
deadly
embrace
hierarchical
structuring
multiprogramming
operating
system
structure
asynchronous
structuring
buffering
parallel
processes
synchronizing
primitives
reentrant
code
rc
4000
project
management
time
schedule
debugging
project
planning
project
scheduling
reliability
program
proving
coroutines
correctness
program
maintenance
software
paging
4
30
4
31
4
32
4
42
4
43
5
24
ca750702
jb
january
9
1978
10
32
am
1828
4
2740
1854
4
2740
1877
4
2740
1960
4
2740
2150
4
2740
2228
4
2740
2280
4
2740
2317
4
2740
2319
4
2740
2319
4
2740
2377
4
2740
2378
4
2740
2342
4
2740
2376
4
2740
2379
4
2740
2379
4
2740
2320
4
2740
2424
4
2740
2482
4
2740
2482
4
2740
2618
4
2740
2632
4
2740
2632
4
2740
2704
4
2740
2723
4
2740
2738
4
2740
2738
4
2740
2740
4
2740
2740
4
2740
2740
4
2740
2741
4
2740
2851
4
2740
2867
4
2740
2868
4
2740
2920
4
2740
3127
4
2740
3184
4
2740
1749
5
2740
1877
5
2740
2080
5
2740
2740
5
2740
2740
5
2740
2740
5
2740
</TEXT>
</DOC>
<DOC>
<DOCNO>2741</DOCNO>
<TEXT>
decomposability
instabilities
and
saturation
in
multiprogramming
systems
a
step
by
step
approach
to
model
the
dynamic
behavior
and
evaluate
the
performance
of
computing
systems
is
proposed
it
is
based
on
a
technique
of
variable
aggregation
and
the
concept
of
nearly
decomposable
system
both
borrowed
from
econometrics
this
approach
is
taken
in
order
to
identify
in
multiprogramming
paging
systems
i
unstable
regimes
of
operations
and
ii
critical
computing
loads
which
bring
the
system
into
states
of
saturation
this
analysis
leads
to
a
more
complete
definition
of
the
circumstances
in
which
thrashing
can
set
in
cacm
july
1975
courtois
p
j
multiprogramming
paging
performance
evaluation
saturation
instabilities
thrashing
aggregation
system
levels
hierarchy
networks
of
queues
4
31
4
32
8
1
8
2
ca750701
jb
january
9
1978
10
39
am
1828
4
2741
1854
4
2741
1877
4
2741
1892
4
2741
1960
4
2741
2068
4
2741
2150
4
2741
2317
4
2741
2319
4
2741
2377
4
2741
2342
4
2741
2376
4
2741
2379
4
2741
2424
4
2741
2482
4
2741
2618
4
2741
2632
4
2741
2704
4
2741
2712
4
2741
2723
4
2741
2738
4
2741
2740
4
2741
2741
4
2741
2741
4
2741
2741
4
2741
2867
4
2741
3070
4
2741
3184
4
2741
1526
5
2741
1749
5
2741
2454
5
2741
2741
5
2741
2741
5
2741
2741
5
2741
3016
5
2741
3070
5
2741
3153
5
2741
1805
6
2741
1901
6
2741
2454
6
2741
2741
6
2741
2741
6
2741
2741
6
2741
2891
6
2741
2988
6
2741
</TEXT>
</DOC>
<DOC>
<DOCNO>2742</DOCNO>
<TEXT>
improved
event
scanning
mechanisms
for
discrete
event
simulation
simulation
models
of
large
complex
real
world
applications
have
occasionally
earned
the
reputation
of
eating
up
hours
of
computer
time
this
problem
may
be
attributed
in
part
to
difficulties
such
as
slow
stochastic
convergence
however
an
additional
problem
lies
in
the
fact
that
a
significant
amount
of
bookkeeping
time
is
required
to
keep
future
events
in
their
proper
sequence
this
paper
presents
a
method
for
significantly
reducing
the
time
spent
scanning
future
event
lists
in
discrete
event
simulations
there
models
are
presented
all
of
which
improve
in
effectiveness
as
the
events
list
scan
problem
becomes
more
burdensome
cacm
june
1975
wyman
f
p
discrete
event
simulation
simulation
event
scanning
mechanisms
4
34
5
5
8
1
ca750611
jb
january
9
1978
12
43
pm
2742
5
2742
2742
5
2742
2742
5
2742
2844
5
2742
2936
5
2742
3064
5
2742
970
6
2742
1059
6
2742
1846
6
2742
1939
6
2742
2742
6
2742
2742
6
2742
2742
6
2742
2767
6
2742
2767
6
2742
2767
6
2742
2936
6
2742
</TEXT>
</DOC>
<DOC>
<DOCNO>2743</DOCNO>
<TEXT>
sorting
x
y
cacm
june
1975
harper
l
h
payne
t
h
savage
j
e
straus
e
merge
sorting
computational
complexity
data
modeling
computing
models
binary
comparisons
5
25
5
31
ca750610
jb
january
9
1978
12
45
pm
2743
5
2743
2743
5
2743
2743
5
2743
</TEXT>
</DOC>
<DOC>
<DOCNO>2744</DOCNO>
<TEXT>
addition
in
an
arbitrary
base
without
radix
conversion
this
paper
presents
a
generalization
of
an
old
programming
technique
using
it
one
may
add
and
subtract
numbers
represented
in
any
radix
including
a
mixed
radix
and
stored
one
digit
per
byte
in
bytes
of
sufficient
size
radix
conversion
is
unnecessary
no
looping
is
required
and
numbers
may
even
be
stored
in
a
display
i
o
format
applications
to
cobol
mix
and
hexadecimal
sums
are
discussed
cacm
june
1975
soule
s
addition
subtraction
decimal
arithmetic
arbitrary
radix
arithmetic
radix
conversion
mix
arithmetic
cobol
display
arithmetic
mixed
radix
arithmetic
4
49
4
9
5
9
ca750609
jb
january
9
1978
12
52
pm
2744
5
2744
2744
5
2744
2744
5
2744
</TEXT>
</DOC>
<DOC>
<DOCNO>2745</DOCNO>
<TEXT>
a
linear
space
algorithm
for
computing
maximal
common
subsequences
the
problem
of
finding
a
longest
common
subsequence
of
two
strings
has
been
solved
in
quadratic
time
and
space
an
algorithm
is
presented
which
will
solve
this
problem
in
quadratic
time
and
in
linear
space
cacm
june
1975
hirschberg
d
s
subsequence
longest
common
subsequence
string
correction
editing
3
63
3
73
3
79
4
22
5
25
ca750608
jb
january
9
1978
12
56
pm
2745
5
2745
2745
5
2745
2745
5
2745
2963
5
2745
3114
5
2745
1502
6
2745
2499
6
2745
2745
6
2745
2745
6
2745
</TEXT>
</DOC>
<DOC>
<DOCNO>2746</DOCNO>
<TEXT>
efficient
string
matching
an
aid
to
bibliographic
search
this
paper
describes
a
simple
efficient
algorithm
to
locate
all
occurrences
of
any
of
a
finite
number
of
keywords
in
a
string
of
text
the
algorithm
consists
of
constructing
a
finite
state
pattern
matching
machine
from
the
keywords
and
then
using
the
pattern
matching
machine
to
process
the
text
string
in
a
single
pass
construction
of
the
pattern
matching
machine
takes
time
proportional
to
the
sum
of
the
lengths
of
the
keywords
the
number
of
state
transitions
made
by
the
pattern
matching
machine
in
processing
the
text
string
is
independent
of
the
number
of
keywords
the
algorithm
has
been
used
to
improve
the
speed
of
a
library
bibliographic
search
program
by
a
factor
of
5
to
10
cacm
june
1975
aho
a
v
corasick
m
j
keywords
and
phrases
string
pattern
matching
bibliographic
search
information
retrieval
text
editing
finite
state
machines
computational
complexity
3
74
3
71
5
22
5
25
ca750607
jb
january
9
1978
1
03
pm
2532
4
2746
2545
4
2746
2631
4
2746
2733
4
2746
2746
4
2746
2746
4
2746
2746
4
2746
2746
4
2746
2746
4
2746
3001
4
2746
1665
5
2746
1739
5
2746
2139
5
2746
2545
5
2746
2746
5
2746
2746
5
2746
2746
5
2746
2786
5
2746
2916
5
2746
2746
6
2746
</TEXT>
</DOC>
<DOC>
<DOCNO>2747</DOCNO>
<TEXT>
a
simplified
recombination
scheme
for
the
fibonacci
buddy
system
a
simplified
recombination
scheme
for
the
fibonacci
buddy
system
which
requires
neither
tables
nor
repetitive
calculations
and
uses
only
two
additional
bits
per
buffer
is
presented
cacm
june
1975
cranston
b
thomas
r
fibonacci
buddy
system
dynamic
storage
allocation
buddy
system
3
89
4
32
4
39
ca750606
jb
january
9
1978
1
07
pm
2596
4
2747
2747
4
2747
2768
4
2747
2845
4
2747
2902
4
2747
2911
4
2747
2955
4
2747
2435
5
2747
2747
5
2747
2747
5
2747
2747
5
2747
2773
5
2747
2845
5
2747
2902
5
2747
2955
5
2747
1051
6
2747
1062
6
2747
1184
6
2747
1184
6
2747
1184
6
2747
1211
6
2747
1552
6
2747
1879
6
2747
2435
6
2747
2435
6
2747
2435
6
2747
2596
6
2747
2596
6
2747
2598
6
2747
2734
6
2747
2736
6
2747
2747
6
2747
2747
6
2747
2747
6
2747
2747
6
2747
2768
6
2747
2768
6
2747
2773
6
2747
</TEXT>
</DOC>
<DOC>
<DOCNO>2748</DOCNO>
<TEXT>
indirect
threaded
code
an
efficient
arrangement
for
interpretive
code
is
described
it
is
related
to
bell
notion
of
threaded
code
but
requires
less
space
and
is
more
amenable
to
machine
independent
implementations
cacm
june
1975
dewar
r
b
k
threaded
code
snobol4
interpretors
code
generation
4
12
4
13
ca750605
jb
january
9
1978
1
11
pm
2748
4
2748
3144
4
2748
2491
5
2748
2748
5
2748
2748
5
2748
2748
5
2748
</TEXT>
</DOC>
<DOC>
<DOCNO>2749</DOCNO>
<TEXT>
significant
event
simulation
this
paper
compares
a
new
method
of
simulation
organization
called
the
significant
event
method
with
an
old
one
called
the
clock
pulse
method
using
as
examples
two
automobile
traffic
models
the
significant
event
method
is
found
to
be
more
efficient
than
the
clock
pulse
method
at
low
levels
of
system
interaction
and
less
efficient
at
high
levels
a
simple
mathematical
model
for
the
trade
off
in
the
relative
running
time
of
the
two
methods
is
developed
the
model
aids
in
choosing
between
the
two
simulation
methods
for
a
particular
experiment
it
is
concluded
that
the
significant
event
method
can
be
of
value
in
the
simulation
of
some
systems
when
computational
efficiency
is
of
sufficient
importance
cacm
june
1975
babich
a
f
grason
j
parnas
d
l
simulation
organization
event
simulation
clock
pulse
simulation
significant
event
simulation
8
1
ca750604
jb
january
9
1978
1
20
pm
2749
5
2749
2749
5
2749
2749
5
2749
</TEXT>
</DOC>
<DOC>
<DOCNO>2750</DOCNO>
<TEXT>
a
cost
oriented
algorithm
for
data
set
allocation
in
storage
hierarchies
data
set
allocation
in
today
multilevel
storage
systems
is
usually
based
on
qualitative
ad
hoc
decisions
while
it
would
be
desirable
to
obtain
an
optimal
solution
to
this
allocation
problem
it
is
clear
that
the
number
of
parameters
involved
makes
it
intractable
to
straight
forward
solution
in
such
a
situation
we
must
find
a
set
of
assumptions
which
simplify
the
problem
greatly
but
which
still
provide
a
basis
for
considering
all
significant
cost
elements
this
paper
presents
such
a
first
quantitative
allocation
step
it
considers
many
of
the
significant
detailed
costs
of
system
utilization
data
storage
data
staging
and
data
migration
although
many
avenues
of
further
improvement
are
available
the
present
algorithm
seems
to
be
usefully
accurate
as
such
it
can
aid
in
quantifying
the
problems
of
data
set
allocation
storage
system
configuration
and
new
device
designs
cacm
june
1975
lum
v
y
senko
m
e
wang
c
p
ling
h
data
set
allocation
hierarchical
storage
storage
system
configuration
data
staging
data
migration
storage
allocation
analysis
3
5
3
9
6
2
ca750603
jb
january
9
1978
1
31
pm
2750
5
2750
2750
5
2750
2750
5
2750
</TEXT>
</DOC>
<DOC>
<DOCNO>2751</DOCNO>
<TEXT>
illumination
for
computer
generated
pictures
the
quality
of
computer
generated
images
of
three
dimensional
scenes
depends
on
the
shading
technique
used
to
paint
the
objects
on
the
cathode
ray
tube
screen
the
shading
algorithm
itself
depends
in
part
on
the
method
for
modeling
the
object
which
also
determines
the
hidden
surface
algorithm
the
various
methods
of
object
modeling
shading
and
hidden
surface
removal
are
thus
strongly
interconnected
several
shading
techniques
corresponding
to
different
methods
of
object
modeling
and
the
related
hidden
surface
algorithms
are
presented
here
human
visual
perception
and
the
fundamental
laws
of
optics
are
considered
in
the
development
of
a
shading
rule
that
provides
better
quality
and
increased
realism
in
generated
images
cacm
june
1975
phong
b
t
computer
graphics
graphic
display
hidden
surface
removal
3
26
3
41
8
2
ca750602
jb
january
9
1978
1
46
pm
2751
5
2751
2751
5
2751
2751
5
2751
2816
5
2751
2827
5
2751
2828
5
2751
2913
5
2751
3047
5
2751
1751
6
2751
2004
6
2751
2493
6
2751
2751
6
2751
2751
6
2751
2751
6
2751
2751
6
2751
2751
6
2751
2771
6
2751
2829
6
2751
2829
6
2751
2841
6
2751
</TEXT>
</DOC>
<DOC>
<DOCNO>2752</DOCNO>
<TEXT>
generation
of
all
the
cycles
of
a
graph
from
a
set
of
basic
cycles
h
algorithm
492
cacm
june
1975
gibbs
n
e
basic
cycle
cycle
graph
5
32
3
24
ca750601
jb
january
9
1978
1
55
pm
2752
5
2752
2752
5
2752
2752
5
2752
</TEXT>
</DOC>
<DOC>
<DOCNO>2753</DOCNO>
<TEXT>
a
heuristic
problem
solving
design
system
for
equipment
or
furniture
layouts
the
designer
problem
solver
dps
demonstrates
that
the
computer
can
perform
simple
design
tasks
in
particular
it
designs
furniture
and
equipment
layouts
this
task
was
chosen
because
it
is
simple
well
defined
and
characteristic
of
many
design
tasks
in
architecture
engineering
urban
planning
and
natural
resource
management
these
space
planning
tasks
usually
involve
manipulating
two
dimensional
representations
of
objects
to
create
feasible
or
optimal
solutions
for
problems
involving
topological
and
metric
spatial
constraints
the
paper
describes
extensive
tests
performed
on
the
program
dps
is
a
heuristic
problem
solver
with
a
planning
phase
prefixed
to
it
it
uses
the
planning
process
to
give
it
a
sense
of
direction
diagnostic
procedures
to
locate
difficulties
and
remedial
actions
to
recover
from
difficulties
it
uses
a
convex
polygon
representation
to
accurately
describe
the
objects
and
the
layout
this
representation
allows
topological
and
metric
constraints
to
be
tested
and
the
design
to
be
easily
updated
dps
has
been
applied
to
50
problems
while
it
is
slow
and
limited
in
scope
the
ideas
behind
it
are
general
it
demonstrates
the
need
for
selectivity
in
controlling
search
and
the
methods
used
to
achieve
it
task
specific
information
planning
diagnostic
procedures
remedial
actions
and
selective
alternative
generators
cacm
may
1975
pfefferkorn
c
e
artificial
intelligence
computer
aided
design
design
synthesis
diagnostic
search
heuristics
planning
problem
solving
representations
search
strategies
space
planning
spatial
representations
3
20
3
25
3
64
3
66
ca750514
jb
january
9
1978
2
10
pm
1531
4
2753
2707
4
2753
2753
4
2753
1185
5
2753
2753
5
2753
2753
5
2753
2753
5
2753
</TEXT>
</DOC>
<DOC>
<DOCNO>2754</DOCNO>
<TEXT>
a
syntactic
algorithm
for
peak
detection
in
waveforms
with
applications
to
cardiography
peaks
in
a
digitized
waveform
are
detected
by
an
algorithm
incorporating
piecewise
linear
approximation
and
tabular
parsing
techniques
several
parameters
serve
to
identify
the
waveform
context
enabling
accurate
measurement
of
peak
amplitude
duration
and
shape
the
algorithm
is
of
sufficient
speed
to
allow
on
line
real
time
processing
an
example
of
its
application
is
demonstrated
on
an
electrocardiogram
cacm
may
1975
horowitz
s
l
peak
detection
digitized
waveform
piecewise
linear
approximation
context
free
grammar
bottom
up
parsing
electrocardiogram
3
12
3
24
3
34
3
63
4
19
5
13
5
23
ca750513
jb
january
9
1978
2
18
pm
2754
5
2754
2754
5
2754
2754
5
2754
</TEXT>
</DOC>
<DOC>
<DOCNO>2755</DOCNO>
<TEXT>
the
new
math
of
computer
programming
corrigendum
cacm
may
1975
mills
h
d
ca750512
jb
january
9
1978
2
20
pm
2755
5
2755
2755
5
2755
2755
5
2755
</TEXT>
</DOC>
<DOC>
<DOCNO>2756</DOCNO>
<TEXT>
a
problem
list
of
public
policy
issues
concerning
computers
and
health
care
cacm
may
1975
wasserman
a
i
economic
and
social
implications
the
public
and
computing
medicine
and
health
care
2
11
2
12
3
34
ca750511
jb
january
9
1978
2
22
pm
2756
4
2756
3076
4
2756
3179
4
2756
2607
5
2756
2756
5
2756
2756
5
2756
2756
5
2756
</TEXT>
</DOC>
<DOC>
<DOCNO>2757</DOCNO>
<TEXT>
more
on
kth
shortest
paths
cacm
may
1975
fox
b
networks
kth
shortest
paths
5
32
ca750510
jb
january
9
1978
2
24
pm
2757
4
2757
2757
4
2757
2844
4
2757
2933
4
2757
1059
5
2757
2630
5
2757
2757
5
2757
2757
5
2757
2757
5
2757
2933
5
2757
2630
6
2757
2757
6
2757
</TEXT>
</DOC>
<DOC>
<DOCNO>2758</DOCNO>
<TEXT>
a
note
on
the
lu
factorization
of
a
symmetric
matrix
cacm
may
1975
evans
d
j
hatzopoulos
m
symmetric
matrices
factorization
test
matrices
matrix
inversion
separable
systems
5
14
ca750509
jb
january
9
1978
2
26
pm
2758
5
2758
2758
5
2758
2758
5
2758
</TEXT>
</DOC>
<DOC>
<DOCNO>2759</DOCNO>
<TEXT>
solution
of
an
overdetermined
system
of
equations
in
the
l1
norm
algorithm
r478
cacm
may
1975
fritsch
f
n
hindmarsh
a
c
ca750508
jb
january
9
1978
2
32
pm
2759
4
2759
2642
5
2759
2759
5
2759
2759
5
2759
2759
5
2759
</TEXT>
</DOC>
<DOC>
<DOCNO>2760</DOCNO>
<TEXT>
visible
surface
plotting
program
algorithm
r475
cacm
may
1975
doran
c
j
ca750507
jb
january
9
1978
2
2
33
pm
2760
5
2760
2760
5
2760
2760
5
2760
</TEXT>
</DOC>
<DOC>
<DOCNO>2761</DOCNO>
<TEXT>
visible
surface
plotting
program
algorithm
r475
cacm
may
1975
mashburn
r
g
ca750506
jb
january
9
1978
2
35
pm
2761
5
2761
2761
5
2761
2761
5
2761
</TEXT>
</DOC>
<DOC>
<DOCNO>2762</DOCNO>
<TEXT>
ten
subroutines
for
the
manipulation
of
chebyshev
series
algorithm
r446
c446
cacm
may
1975
piessens
r
mertens
i
ca750505
jb
january
9
1978
2
37
pm
2762
4
2762
2521
5
2762
2762
5
2762
2762
5
2762
2762
5
2762
</TEXT>
</DOC>
<DOC>
<DOCNO>2763</DOCNO>
<TEXT>
basic
cycle
generation
h
algorithm
491
cacm
may
1975
gibbs
n
e
graph
basic
cycles
fundamental
cycle
spanning
tree
vertex
adjacency
matrix
5
32
3
24
ca750504
jb
january
9
1978
2
39
pm
1961
4
2763
2177
4
2763
2763
4
2763
1847
5
2763
2763
5
2763
2763
5
2763
2763
5
2763
</TEXT>
</DOC>
<DOC>
<DOCNO>2764</DOCNO>
<TEXT>
an
intelligent
analyzer
and
understander
of
english
the
paper
describes
a
working
analysis
and
generation
program
for
natural
language
which
handles
paragraph
length
input
its
core
is
a
system
of
preferential
choice
between
deep
semantic
patterns
based
on
what
we
call
semantic
density
the
system
is
contrasted
1
with
syntax
oriented
linguistic
approaches
and
2
with
theorem
proving
approaches
to
the
understanding
problem
cacm
may
1975
wilks
y
artificial
intelligence
computational
linguistics
template
paraplate
stereotype
machine
translation
understanding
natural
language
processing
semantic
preference
semantic
density
3
36
3
42
3
63
ca750503
jb
january
9
1978
3
00
pm
2764
5
2764
2764
5
2764
2764
5
2764
</TEXT>
</DOC>
<DOC>
<DOCNO>2765</DOCNO>
<TEXT>
analysis
and
performance
of
inverted
data
base
structures
the
need
to
envision
and
architecture
data
base
systems
in
a
hierarchical
level
by
level
framework
is
stressed
the
inverted
data
base
file
organization
is
then
analyzed
considering
implementation
oriented
aspects
the
inverted
directory
is
viewed
realistically
as
another
large
data
base
which
itself
is
subjected
to
inversion
formulations
are
derived
to
estimate
average
access
time
read
only
and
storage
requirements
formalizing
the
interaction
of
data
base
content
characteristics
logical
complexity
of
queries
and
machine
timing
and
blocking
specifications
identified
as
having
a
first
order
effect
on
performance
the
formulations
presented
are
necessary
to
be
used
in
conjunction
with
any
index
selection
criteria
to
determine
the
optimum
set
of
index
keys
cacm
may
1975
cardenas
a
f
data
base
architecture
inverted
file
organization
data
base
performance
and
measurement
secondary
index
organization
information
storage
and
retrieval
query
answering
3
70
3
71
3
72
3
74
3
79
4
0
ca750502
jb
january
9
1978
3
15
pm
1135
4
2765
1136
4
2765
2140
4
2765
2155
4
2765
2257
4
2765
2360
4
2765
2406
4
2765
2451
4
2765
2452
4
2765
2452
4
2765
2556
4
2765
493
4
2765
2710
4
2765
2710
4
2765
2715
4
2765
2716
4
2765
2717
4
2765
2718
4
2765
2765
4
2765
2765
4
2765
2765
4
2765
2765
4
2765
2765
4
2765
2765
4
2765
2817
4
2765
2882
4
2765
2888
4
2765
2888
4
2765
2901
4
2765
2901
4
2765
2906
4
2765
2957
4
2765
2959
4
2765
2965
4
2765
2965
4
2765
3087
4
2765
3134
4
2765
3154
4
2765
729
4
2765
1936
5
2765
1976
5
2765
2046
5
2765
2451
5
2765
2452
5
2765
2765
5
2765
2765
5
2765
2765
5
2765
2976
5
2765
616
5
2765
2688
6
2765
2765
6
2765
2882
6
2765
</TEXT>
</DOC>
<DOC>
<DOCNO>2766</DOCNO>
<TEXT>
copying
cyclic
list
structures
in
linear
time
using
bounded
workspace
a
bounded
workspace
copying
algorithm
for
arbitrary
list
structures
is
given
this
algorithm
operates
in
linear
time
and
does
not
require
tag
bits
the
best
previous
bounded
workspace
copying
algorithms
achieved
n
2
time
without
tag
bits
and
n
log
n
time
with
one
tag
the
only
restriction
on
the
algorithm
given
here
is
that
the
copy
must
be
placed
into
a
contiguous
section
of
memory
the
method
is
applicable
to
fixed
or
variable
size
nodes
cacm
may
1975
fisher
d
a
list
processing
copying
linear
time
space
complexity
4
49
5
25
ca750501
jb
january
9
1978
3
22
pm
2766
4
2766
2954
4
2766
3106
4
2766
2665
5
2766
2766
5
2766
2766
5
2766
2766
5
2766
2855
5
2766
2954
5
2766
3106
5
2766
1549
6
2766
1549
6
2766
1826
6
2766
210
6
2766
210
6
2766
1972
6
2766
1972
6
2766
2513
6
2766
2665
6
2766
2665
6
2766
2766
6
2766
2766
6
2766
2766
6
2766
2833
6
2766
2855
6
2766
2954
6
2766
2998
6
2766
2998
6
2766
</TEXT>
</DOC>
<DOC>
<DOCNO>2767</DOCNO>
<TEXT>
a
comparison
of
simulation
event
list
algorithms
four
algorithms
are
considered
which
can
be
used
to
schedule
events
in
a
general
purpose
discrete
simulation
system
two
of
the
algorithms
are
new
one
is
based
on
an
end
order
tree
structure
for
event
notices
and
another
uses
an
indexed
linear
list
the
algorithms
are
tested
with
a
set
of
typical
stochastic
scheduling
distributions
especially
chosen
to
show
the
advantages
and
limitations
of
the
algorithms
the
end
order
tree
algorithm
is
shown
to
be
an
advantageous
immediate
replacement
for
the
algorithm
in
use
with
current
simulation
languages
the
most
promising
algorithm
uses
the
indexed
list
concept
it
will
require
an
adaptive
routine
before
it
can
be
employed
in
general
purpose
simulators
but
its
performance
is
such
that
further
study
would
be
fruitful
cacm
april
1975
vaucher
j
g
duval
p
simulation
time
flow
mechanisms
event
list
algorithm
simulation
time
flow
mechanisms
event
list
algorithm
simulation
executive
event
scheduling
routine
discrete
system
simulation
sorting
3
74
4
22
8
1
ca750410
jb
january
9
1978
3
43
pm
2767
4
2767
3064
4
2767
1939
5
2767
2767
5
2767
2767
5
2767
2767
5
2767
2844
5
2767
2936
5
2767
3051
5
2767
3064
5
2767
3109
5
2767
970
6
2767
1059
6
2767
1846
6
2767
1939
6
2767
2742
6
2767
2742
6
2767
2742
6
2767
2767
6
2767
2767
6
2767
2767
6
2767
2767
6
2767
2767
6
2767
2844
6
2767
2844
6
2767
2936
6
2767
</TEXT>
</DOC>
<DOC>
<DOCNO>2768</DOCNO>
<TEXT>
an
algorithm
for
locating
adjacent
storage
blocks
in
the
buddy
system
a
simple
scheme
for
the
determination
of
the
location
of
a
block
of
storage
relative
to
other
blocks
is
described
this
scheme
is
applicable
to
the
buddy
type
storage
allocation
systems
cacm
april
1975
hinds
j
a
dynamic
storage
allocation
buddy
system
generalized
fibonacci
sequences
3
89
4
32
4
39
ca750409
jb
january
9
1978
3
46
pm
1389
4
2768
1552
4
2768
2162
4
2768
2435
4
2768
2596
4
2768
2596
4
2768
2747
4
2768
2768
4
2768
2768
4
2768
2845
4
2768
2845
4
2768
2902
4
2768
2902
4
2768
2911
4
2768
2955
4
2768
2955
4
2768
1184
5
2768
2435
5
2768
2768
5
2768
2768
5
2768
2768
5
2768
2845
5
2768
2902
5
2768
1051
6
2768
1062
6
2768
1184
6
2768
1184
6
2768
1211
6
2768
1552
6
2768
1879
6
2768
2435
6
2768
2435
6
2768
2596
6
2768
2598
6
2768
2734
6
2768
2736
6
2768
2747
6
2768
2747
6
2768
2768
6
2768
2768
6
2768
</TEXT>
</DOC>
<DOC>
<DOCNO>2769</DOCNO>
<TEXT>
a
modification
of
warshall
algorithm
for
the
transitive
closure
of
binary
relations
an
algorithm
is
given
for
computing
the
transitive
closure
of
a
binary
relation
that
is
represented
by
a
boolean
matrix
the
algorithm
is
similar
to
warshall
although
it
executes
faster
for
sparse
matrices
on
most
computers
particularly
in
a
paging
environment
cacm
april
1975
warren
h
s
jr
warshall
algorithm
transitive
closure
reachability
matrix
directed
graph
digraph
boolean
matrix
binary
relation
5
30
5
32
ca750408
jb
january
9
1978
3
49
pm
1151
4
2769
1265
4
2769
2769
4
2769
2769
5
2769
2769
5
2769
2769
5
2769
635
5
2769
</TEXT>
</DOC>
<DOC>
<DOCNO>2770</DOCNO>
<TEXT>
the
quadratic
hash
method
when
the
table
size
is
not
a
prime
number
previous
work
on
quadratic
hash
methods
is
limited
mainly
to
the
case
where
the
table
size
is
a
prime
number
here
certain
results
are
derived
for
composite
numbers
it
is
shown
that
all
composite
numbers
containing
at
least
the
square
of
one
of
the
component
primes
have
full
period
integer
coefficient
quadratic
hash
functions
cacm
april
1975
batagelj
v
quadratic
search
hash
code
scatter
storage
table
size
3
74
4
10
ca750407
jb
january
9
1978
3
54
pm
1860
4
2770
1973
4
2770
1973
4
2770
1992
4
2770
2018
4
2770
2018
4
2770
2033
4
2770
2060
4
2770
2107
4
2770
2109
4
2770
2203
4
2770
2203
4
2770
2251
4
2770
2251
4
2770
2251
4
2770
2251
4
2770
2534
4
2770
2543
4
2770
2543
4
2770
2543
4
2770
2559
4
2770
2573
4
2770
2573
4
2770
2704
4
2770
2770
4
2770
2770
4
2770
2770
4
2770
2770
4
2770
2770
4
2770
2770
4
2770
2770
4
2770
2974
4
2770
3053
4
2770
3053
4
2770
3053
4
2770
3053
4
2770
3083
4
2770
1786
5
2770
1869
5
2770
1973
5
2770
1992
5
2770
2018
5
2770
2109
5
2770
2673
5
2770
2770
5
2770
2770
5
2770
2770
5
2770
3053
5
2770
1329
6
2770
1785
6
2770
1973
6
2770
1992
6
2770
2107
6
2770
2109
6
2770
2412
6
2770
2543
6
2770
2673
6
2770
2707
6
2770
2770
6
2770
</TEXT>
</DOC>
<DOC>
<DOCNO>2771</DOCNO>
<TEXT>
the
synthesis
of
solids
bounded
by
many
faces
a
technique
is
presented
which
allows
a
class
of
solid
objects
to
be
synthesized
and
stored
using
a
computer
synthesis
begins
with
primitive
solids
like
a
cube
wedge
or
cylinder
any
solid
can
be
moved
scaled
or
rotated
solids
may
also
be
added
together
or
subtracted
two
algorithms
to
perform
addition
are
described
for
practical
designers
the
technique
has
the
advantage
that
operations
are
concise
readily
composed
and
are
given
in
terms
of
easily
imagined
solidsuite
short
sequences
of
operations
suffice
to
build
up
complex
solids
bounded
by
many
faces
cacm
april
1975
braid
i
c
computational
geometry
computer
aided
design
graphics
machined
components
polyhedra
shape
synthesis
three
dimensional
modeling
3
2
8
2
ca750406
jb
january
9
1978
3
59
pm
2771
5
2771
2771
5
2771
2771
5
2771
2827
5
2771
3116
5
2771
2751
6
2771
2771
6
2771
2771
6
2771
</TEXT>
</DOC>
<DOC>
<DOCNO>2772</DOCNO>
<TEXT>
on
maintenance
of
the
opportunity
list
for
class
teacher
timetable
problems
one
of
the
principal
components
of
procedures
for
the
solution
of
class
teacher
timetable
problems
is
that
for
maintenance
of
the
opportunity
list
opportunity
list
maintenance
methods
are
based
on
necessary
conditions
for
the
existence
of
a
solution
a
general
framework
for
necessary
conditions
together
with
four
specific
sets
of
necessary
conditions
is
given
cacm
april
1975
smith
g
combinatorial
necessary
conditions
opportunity
list
schedule
school
timetable
timetable
3
51
5
39
ca750405
jb
january
9
1978
4
03
pm
1367
4
2772
2619
4
2772
2772
4
2772
2772
4
2772
2787
4
2772
2787
4
2772
1116
5
2772
1429
5
2772
2772
5
2772
2772
5
2772
2772
5
2772
</TEXT>
</DOC>
<DOC>
<DOCNO>2773</DOCNO>
<TEXT>
a
weighted
buddy
method
for
dynamic
storage
allocation
corrigendum
cacm
april
1975
shen
k
k
peterson
j
l
ca750404
jb
january
9
1978
4
06
pm
2773
4
2773
2845
4
2773
2902
4
2773
2955
4
2773
2747
5
2773
2773
5
2773
2773
5
2773
2773
5
2773
2911
5
2773
2955
5
2773
1184
6
2773
1879
6
2773
273
6
2773
2435
6
2773
2435
6
2773
2498
6
2773
2596
6
2773
2734
6
2773
2747
6
2773
2773
6
2773
2773
6
2773
2983
6
2773
</TEXT>
</DOC>
<DOC>
<DOCNO>2774</DOCNO>
<TEXT>
remark
on
algorithm
475
cacm
april
1975
frederick
l
w
ca750403
jb
january
9
1978
4
07
pm
2774
5
2774
2774
5
2774
2774
5
2774
</TEXT>
</DOC>
<DOC>
<DOCNO>2775</DOCNO>
<TEXT>
the
dilogarithm
function
of
a
real
argument
s22
algorithm
490
cacm
april
1975
ginsberg
e
s
zaborowski
d
dilogarithm
5
12
ca750402
jb
january
9
1978
4
09
pm
2775
5
2775
2775
5
2775
2775
5
2775
</TEXT>
</DOC>
<DOC>
<DOCNO>2776</DOCNO>
<TEXT>
computer
networks
in
higher
education
socio
economic
political
factors
this
study
presents
the
results
of
a
nationwide
survey
of
computer
networks
in
higher
education
conducted
during
1971
73
five
major
and
18
minor
networks
were
identified
the
five
major
networks
included
the
arpa
net
the
california
state
college
network
the
university
of
iowa
iowa
state
university
network
the
michigan
educational
research
information
triad
inc
and
the
triangle
universities
computation
center
network
in
north
carolina
in
depth
studies
were
conducted
of
the
latter
two
nets
based
on
the
experiences
of
these
operating
networks
a
number
of
factors
are
identified
for
consideration
in
developing
networks
finally
recommendations
are
advanced
regarding
the
development
of
networks
in
higher
education
in
the
future
cacm
april
1975
chambers
j
a
poore
r
v
networks
higher
education
1
3
2
45
ca750401
jb
january
9
1978
4
17
pm
2776
5
2776
2776
5
2776
2776
5
2776
</TEXT>
</DOC>
<DOC>
<DOCNO>2777</DOCNO>
<TEXT>
on
a
solution
to
the
cigarette
smoker
problem
without
conditional
statements
this
report
discusses
a
problem
first
introduced
by
patil
who
has
claimed
that
the
cigarette
smoker
problem
cannot
be
solved
using
the
p
and
v
operations
introduced
by
dijkstra
unless
conditional
statements
are
used
an
examination
of
patil
proof
shows
that
he
has
established
this
claim
only
under
strong
restrictions
on
the
use
of
p
and
v
these
restrictions
eliminate
programming
techniques
used
by
dijkstra
and
others
since
the
first
introduction
of
the
semaphore
concept
this
paper
contains
a
solution
to
the
problem
it
also
discusses
the
need
for
the
generalized
operators
suggested
by
patil
cacm
march
1975
parnas
d
l
operating
systems
co
operating
processes
process
synchronization
primitives
4
3
ca750311
jb
january
9
1978
4
24
pm
2320
4
2777
2597
4
2777
2777
4
2777
2851
4
2777
2895
4
2777
2912
4
2777
2946
4
2777
3128
4
2777
2150
5
2777
2738
5
2777
2777
5
2777
2777
5
2777
2777
5
2777
1749
6
2777
2080
6
2777
2247
6
2777
2356
6
2777
2777
6
2777
</TEXT>
</DOC>
<DOC>
<DOCNO>2778</DOCNO>
<TEXT>
perturbations
of
eigenvalues
of
non
normal
matrices
corrigendum
cacm
march
1975
sluis
a
ca750310
jb
january
9
1978
4
26
pm
2778
5
2778
2778
5
2778
2778
5
2778
</TEXT>
</DOC>
<DOC>
<DOCNO>2779</DOCNO>
<TEXT>
discrete
least
squares
polynomial
fits
the
recurrence
relation
between
orthogonal
polynomials
is
widely
used
for
discrete
least
squares
data
fitting
a
variant
of
the
classical
algorithm
which
has
better
numerical
properties
is
presented
and
the
reason
for
its
improved
performance
is
explained
cacm
march
1975
shampine
l
f
orthogonal
polynomials
data
fitting
least
squares
recurrence
relation
between
orthogonal
polynomials
residual
5
11
5
13
ca750309
jb
january
9
1978
4
29
pm
2779
5
2779
2779
5
2779
2779
5
2779
</TEXT>
</DOC>
<DOC>
<DOCNO>2780</DOCNO>
<TEXT>
on
computing
certain
elements
of
the
inverse
of
a
sparse
matrix
a
recursive
algorithm
for
computing
the
inverse
of
a
matrix
from
the
lu
factors
based
on
relationships
in
takahashi
et
al
is
examined
the
formulas
for
the
algorithm
are
given
the
dependency
relationships
are
derived
the
computational
costs
are
developed
and
some
general
comments
on
application
and
stability
are
made
cacm
march
1975
erisman
e
m
tinney
w
f
sparse
matrices
triangular
factorization
elements
of
inverse
tridiagonal
matrix
sensitivities
3
24
5
14
ca750308
jb
january
9
1978
4
34
pm
2780
5
2780
2780
5
2780
2780
5
2780
</TEXT>
</DOC>
<DOC>
<DOCNO>2781</DOCNO>
<TEXT>
the
algorithm
sequential
access
method
an
alternative
to
index
sequential
cacm
march
1975
whitt
j
d
sullenberger
a
g
keys
direct
access
method
sequential
access
method
randomizing
information
retrieval
3
7
ca750307
jb
january
9
1978
4
37
pm
2258
4
2781
2319
4
2781
2313
4
2781
2359
4
2781
2437
4
2781
2552
4
2781
2781
4
2781
2860
4
2781
2991
4
2781
2203
5
2781
2781
5
2781
2781
5
2781
2781
5
2781
</TEXT>
</DOC>
<DOC>
<DOCNO>2782</DOCNO>
<TEXT>
a
reply
to
gentleman
and
marovich
cacm
march
1975
karp
r
a
high
level
languages
philosophy
of
language
design
4
22
5
19
ca750306
jb
january
9
1978
4
38
pm
2782
5
2782
2782
5
2782
2782
5
2782
</TEXT>
</DOC>
<DOC>
<DOCNO>2783</DOCNO>
<TEXT>
the
algorithm
select
for
finding
the
ith
smallest
of
n
elements
m1
algorithm
489
cacm
march
1975
floyd
r
w
rivest
r
l
selection
medians
quantiles
5
30
5
39
ca750305
jb
january
9
1978
4
43
pm
1919
4
2783
2191
4
2783
2227
4
2783
2388
4
2783
2783
4
2783
2783
4
2783
2784
4
2783
3054
4
2783
3054
4
2783
3121
4
2783
864
4
2783
307
5
2783
309
5
2783
2783
5
2783
2783
5
2783
2783
5
2783
2784
5
2783
1729
6
2783
309
6
2783
2783
6
2783
</TEXT>
</DOC>
<DOC>
<DOCNO>2784</DOCNO>
<TEXT>
expected
time
bounds
for
selection
a
new
selection
algorithm
is
presented
which
is
shown
to
be
very
efficient
on
the
average
both
theoretically
and
practically
the
number
of
comparisons
used
to
select
the
ith
smallest
of
n
numbers
is
n
min
i
n
i
o
n
a
lower
bound
within
9
percent
of
the
above
formula
is
also
derived
cacm
march
1975
floyd
r
w
rivest
r
l
selection
computational
complexity
medians
tournaments
quantiles
5
30
5
39
ca750304
jb
january
9
1978
4
52
pm
1919
4
2784
2191
4
2784
2388
4
2784
2783
4
2784
2784
4
2784
2784
4
2784
2784
4
2784
3054
4
2784
3121
4
2784
864
4
2784
1729
5
2784
309
5
2784
2783
5
2784
2784
5
2784
2784
5
2784
2784
5
2784
2837
5
2784
2784
6
2784
2842
6
2784
</TEXT>
</DOC>
<DOC>
<DOCNO>2785</DOCNO>
<TEXT>
glypnir
a
programming
language
for
illiac
iv
glypnir
is
one
of
the
earliest
existing
languages
designed
for
programming
the
illiac
iv
computer
the
syntax
of
the
language
is
based
on
algol
60
but
has
been
extended
to
allow
the
programmer
explicitly
to
specify
the
parallelism
of
his
algorithm
in
terms
of
64
word
vectors
this
paper
describes
the
characteristics
goals
and
philosophy
of
the
language
and
discusses
some
of
the
problems
associated
with
parallel
computer
architectures
cacm
march
1975
lawrie
d
h
layman
t
baer
d
randal
j
m
glypnir
illiac
iv
programming
language
parallel
computation
parallel
architecture
4
2
4
21
4
22
ca750303jb
january
9
1978
4
57
pm
2785
4
2785
2785
4
2785
2876
4
2785
2433
5
2785
2685
5
2785
2785
5
2785
2785
5
2785
2785
5
2785
</TEXT>
</DOC>
<DOC>
<DOCNO>2786</DOCNO>
<TEXT>
a
system
for
typesetting
mathematics
this
paper
describes
the
design
and
implementation
of
a
system
for
typesetting
mathematics
the
language
has
been
designed
to
be
easy
to
learn
and
to
use
by
people
for
example
secretaries
and
mathematical
typists
who
know
neither
mathematics
nor
typesetting
experience
indicates
that
the
language
can
be
learned
in
an
hour
or
so
for
it
has
few
rules
and
fewer
exceptions
for
typical
expressions
the
size
and
font
changes
positioning
line
drawing
and
the
like
necessary
to
print
according
to
mathematical
conventions
are
all
done
automatically
for
example
the
input
sum
from
i
o
to
infinity
x
sub
i
pi
over
2
produces
formula
the
syntax
of
the
language
is
specified
by
a
small
context
free
grammar
a
compiler
compiler
is
used
to
make
a
compiler
that
translates
this
language
into
typesetting
commands
output
maybe
produced
on
either
a
phototypesetter
or
on
a
terminal
with
forward
and
reverse
half
line
motions
the
system
interfaces
directly
with
text
formatting
programs
so
mixtures
of
text
and
mathematics
may
be
handled
simply
this
paper
was
typeset
by
the
authors
using
the
system
described
cacm
march
1975
kernighan
b
w
cherry
l
l
typesetting
photocomposition
compiler
compiler
graphics
printing
text
processing
4
12
4
22
8
2
ca750302
jb
january
10
1978
8
56
am
2626
4
2786
2786
4
2786
2840
4
2786
2919
4
2786
3017
4
2786
3110
4
2786
3174
4
2786
2629
5
2786
2733
5
2786
2746
5
2786
2786
5
2786
2786
5
2786
2786
5
2786
1665
6
2786
1739
6
2786
1781
6
2786
2139
6
2786
2179
6
2786
2423
6
2786
2545
6
2786
2786
6
2786
2786
6
2786
799
6
2786
</TEXT>
</DOC>
<DOC>
<DOCNO>2787</DOCNO>
<TEXT>
matrix
reduction
an
efficient
method
the
paper
describes
an
efficient
method
for
reduction
of
the
binary
matrices
which
arise
in
some
school
time
tabling
problems
it
is
a
development
of
that
described
by
john
lions
it
has
been
generalized
and
adapted
to
fit
into
the
complete
timetabling
process
to
use
a
more
compact
data
representation
and
more
efficient
processing
techniques
to
take
fuller
advantage
of
possible
available
previous
knowledge
about
the
matrix
and
it
is
designed
as
a
structured
program
which
can
readily
be
coded
by
the
reader
in
the
high
level
or
low
level
programming
language
of
his
choice
practical
tests
of
the
method
have
shown
it
to
be
a
good
basis
for
a
realistic
timetabling
algorithm
cacm
march
1975
johnston
h
c
hoare
c
a
r
binary
matrices
matrix
reduction
tight
set
school
timetable
construction
structured
programming
3
51
4
9
5
39
ca750301
jb
january
10
1978
9
03
am
1367
4
2787
2619
4
2787
2772
4
2787
2772
4
2787
2787
4
2787
2787
4
2787
1116
5
2787
1429
5
2787
2787
5
2787
2787
5
2787
2787
5
2787
</TEXT>
</DOC>
<DOC>
<DOCNO>2788</DOCNO>
<TEXT>
finding
circles
by
an
array
of
accumulators
cacm
february
1975
kimme
c
balard
d
sklansky
j
picture
processing
pattern
recognition
curve
detection
line
fitting
3
63
ca750211
jb
january
10
1978
9
15
am
2788
4
2788
2910
4
2788
2400
5
2788
2788
5
2788
2788
5
2788
2788
5
2788
2910
5
2788
2400
6
2788
2788
6
2788
</TEXT>
</DOC>
<DOC>
<DOCNO>2789</DOCNO>
<TEXT>
a
minimal
spanning
tree
clustering
method
algorithm
r479
cacm
february
1975
magnuski
h
s
ca750210
jb
january
12
1978
2
52
pm
2789
5
2789
2789
5
2789
2789
5
2789
</TEXT>
</DOC>
<DOC>
<DOCNO>2790</DOCNO>
<TEXT>
the
elementary
circuits
of
a
graph
algorithm
r459
cacm
february
1975
syslo
m
m
ca750209
jb
january
12
1978
2
54
pm
2790
5
2790
2790
5
2790
2790
5
2790
</TEXT>
</DOC>
<DOC>
<DOCNO>2791</DOCNO>
<TEXT>
exact
probabilities
for
r
x
c
contingency
tables
algorithm
r434
cacm
february
1975
hancock
t
w
ca750208
jb
january
12
1978
2
55
pm
2791
5
2791
2791
5
2791
2791
5
2791
</TEXT>
</DOC>
<DOC>
<DOCNO>2792</DOCNO>
<TEXT>
jacobi
polynomials
algorithm
r332
cacm
february
1975
skovgaard
o
ca750207
jb
january
10
1978
9
32
am
2647
4
2792
2792
4
2792
2792
4
2792
2267
5
2792
2647
5
2792
2792
5
2792
2792
5
2792
2792
5
2792
</TEXT>
</DOC>
<DOC>
<DOCNO>2793</DOCNO>
<TEXT>
chi
square
quantiles
algorithm
c451
cacm
february
1975
knight
w
ca750206
jb
january
10
1978
9
40
am
2467
4
2793
2793
4
2793
1606
5
2793
2793
5
2793
2793
5
2793
2793
5
2793
</TEXT>
</DOC>
<DOC>
<DOCNO>2794</DOCNO>
<TEXT>
state
space
problem
reduction
and
theorem
proving
some
relationships
this
paper
suggests
a
bidirectional
relationship
between
state
space
and
problem
reduction
representations
it
presents
a
formalism
based
on
multiple
input
and
multiple
output
operators
which
provides
a
basis
for
viewing
the
two
types
of
representations
in
this
manner
a
representation
of
the
language
recognition
problem
which
is
based
on
the
cocke
parsing
algorithm
is
used
as
an
illustration
a
method
for
representing
problems
in
first
order
logic
in
such
a
way
that
the
inference
system
employed
by
a
resolution
based
theorem
prover
determines
whether
the
set
of
clauses
is
interpreted
in
the
state
spacer
mode
or
in
the
problem
reduction
mode
is
presented
the
analogous
concepts
in
problem
reduction
and
theorem
proving
and
the
terminology
used
to
refer
to
them
are
noted
the
relationship
between
problem
reduction
input
resolution
and
linear
resolution
is
discussed
cacm
february
1975
vanderbrug
g
j
minker
j
artificial
intelligence
state
space
representation
problem
reduction
representation
theorem
proving
language
recognition
3
64
ca750205
jb
january
12
1978
8
27
am
2794
5
2794
2794
5
2794
2794
5
2794
</TEXT>
</DOC>
<DOC>
<DOCNO>2795</DOCNO>
<TEXT>
sentence
paraphrasing
from
a
conceptual
base
a
model
of
natural
language
based
on
an
underlying
language
free
representation
of
meaning
is
described
a
program
based
on
this
model
is
able
to
produce
sentence
paraphrases
which
demonstrate
understanding
with
respect
to
a
given
context
this
generator
operates
in
conjunction
with
a
natural
language
analyzer
and
a
combined
memory
and
inference
model
in
generating
sentences
from
meaning
structures
the
program
employs
both
the
information
retrieval
and
deduction
capabilities
of
the
memory
model
the
model
encompasses
several
diverse
classes
of
linguistic
knowledge
which
include
1
executable
tests
of
conceptual
properties
stored
in
discrimination
nets
2
information
relating
conceptual
to
syntactic
roles
stored
in
a
word
sense
dictionary
and
3
surface
grammatical
knowledge
stored
in
a
formal
grammar
cacm
february
1975
goldman
n
m
artificial
intelligence
natural
language
processing
language
generation
models
of
cognitive
processes
semantic
representation
3
42
3
60
3
65
ca750204
jb
january
12
1978
8
43
am
1885
4
2795
2581
4
2795
2739
4
2795
2795
4
2795
2795
4
2795
2795
4
2795
2921
4
2795
3087
4
2795
1928
5
2795
1989
5
2795
2274
5
2795
2795
5
2795
2795
5
2795
2795
5
2795
</TEXT>
</DOC>
<DOC>
<DOCNO>2796</DOCNO>
<TEXT>
monitors
an
operating
system
structuring
concept
corrigendum
cacm
february
1975
hoare
c
a
r
ca750203
jb
january
12
1978
8
45
am
2796
5
2796
2796
5
2796
2796
5
2796
2866
5
2796
2356
6
2796
2597
6
2796
2796
6
2796
</TEXT>
</DOC>
<DOC>
<DOCNO>2797</DOCNO>
<TEXT>
a
first
order
approximation
to
the
optimal
checkpoint
interval
corrigendum
cacm
february
1975
young
j
w
ca750202
jb
january
12
1978
8
47
am
2797
5
2797
2797
5
2797
2797
5
2797
</TEXT>
</DOC>
<DOC>
<DOCNO>2798</DOCNO>
<TEXT>
analysis
of
interleaved
memory
systems
using
blockage
buffers
a
model
of
interleaved
memory
systems
is
presented
and
the
analysis
of
the
model
by
monte
carlo
simulation
is
discussed
the
simulations
investigate
the
performance
of
various
system
structures
i
e
schemes
for
sending
instruction
and
data
requests
to
the
memory
system
performance
is
measured
by
determining
the
distribution
of
the
number
of
memory
modules
in
operation
during
a
memory
cycle
an
important
observation
from
these
investigations
is
that
separately
grouping
instruction
and
data
requests
for
memory
can
substantially
increase
the
average
number
of
memory
modules
in
operation
during
a
memory
cycle
results
of
the
simulations
and
an
analytical
study
are
displayed
for
various
system
structures
cacm
february
1975
burnett
g
j
coffman
e
g
jr
interleaved
memory
systems
modular
memory
systems
memory
performance
analysis
blockage
buffer
conflict
buffer
simulation
monte
carolo
simulation
5
5
6
34
ca750201
jb
january
12
1978
8
54
am
2798
5
2798
2798
5
2798
2798
5
2798
3119
5
2798
2245
6
2798
2798
6
2798
2849
6
2798
2859
6
2798
</TEXT>
</DOC>
<DOC>
<DOCNO>2799</DOCNO>
<TEXT>
stably
updating
mean
and
standard
deviation
of
data
by
considering
the
sample
mean
of
a
set
of
data
as
a
fit
to
this
data
by
a
constant
function
a
computational
method
is
given
based
on
a
matrix
formulation
and
givens
transformations
the
sample
mean
and
standard
deviation
can
be
updated
as
data
accumulates
the
procedure
is
numerically
stable
and
does
not
require
storage
of
the
data
methods
for
dealing
with
weighted
data
and
data
removal
are
presented
when
updating
the
mean
and
square
of
the
standard
deviation
the
process
requires
no
square
roots
cacm
january
1975
hanson
r
j
mean
standard
deviation
least
squares
givens
transformation
updating
estimates
removing
data
5
5
5
19
ca750112
jb
january
12
1978
9
05
am
2731
5
2799
2799
5
2799
2799
5
2799
2799
5
2799
3159
5
2799
3166
5
2799
3167
5
2799
1411
6
2799
2731
6
2799
2731
6
2799
2731
6
2799
2799
6
2799
2799
6
2799
2799
6
2799
2799
6
2799
3159
6
2799
3167
6
2799
3166
6
2799
</TEXT>
</DOC>
<DOC>
<DOCNO>2800</DOCNO>
<TEXT>
connections
between
accuracy
and
stability
properties
of
linear
multistep
formulas
this
paper
is
concerned
with
stability
and
accuracy
of
families
of
linear
k
step
formulas
depending
on
parameters
with
particular
emphasis
on
the
numerical
solution
of
stiff
ordinary
differential
equations
an
upper
bound
p
k
is
derived
for
the
order
of
accuracy
of
a
inf
stable
formulas
three
criteria
are
given
for
a
0
stability
it
is
shown
that
1
for
p
k
k
arbitrary
a
inf
stability
implies
certain
necessary
conditions
for
a
0
stability
and
for
strict
stability
meaning
that
the
extraneous
roots
of
p
psi
satisfy
psi
1
2
for
p
k
2
3
4
and
5
a
inf
stability
for
k
5
together
with
another
constraint
implies
strict
stability
and
3
for
certain
one
parameter
classes
of
formulas
with
p
k
3
4
and
or
5
a
inf
stability
implies
a
0
stability
cacm
january
1975
liniger
w
stiff
equations
parametrized
linear
multistep
formulas
order
of
accuracy
a
0
stability
a
inf
stability
strict
stability
5
17
ca750111
jb
january
12
1978
9
26
am
2800
5
2800
2800
5
2800
2800
5
2800
</TEXT>
</DOC>
<DOC>
<DOCNO>2801</DOCNO>
<TEXT>
storage
efficient
representation
of
decimal
data
usually
n
decimal
digits
are
represented
by
4n
bits
in
computers
actually
two
bcd
digits
can
be
compressed
optimally
and
reversibly
into
7
bits
and
three
digits
into
10
bits
by
a
very
simple
algorithm
based
on
the
fixed
length
combination
of
two
variable
field
length
encodings
in
over
half
of
the
cases
the
compressed
code
results
from
the
conventional
bcd
code
by
simple
removal
of
redundant
0
bits
a
long
decimal
message
can
be
subdivided
into
three
digit
blocks
and
separately
compressed
the
result
differs
from
the
asymptotic
minimum
length
by
only
0
34
percent
the
hardware
requirement
is
small
and
the
mappings
can
be
done
manually
cacm
january
1975
chi
chen
t
ho
i
t
binary
coded
decimal
digits
decimal
data
storage
6
32
6
34
ca750110
jb
january
12
1978
9
42
am
2729
5
2801
2801
5
2801
2801
5
2801
2801
5
2801
2288
6
2801
2801
6
2801
</TEXT>
</DOC>
<DOC>
<DOCNO>2802</DOCNO>
<TEXT>
the
new
math
of
computer
programming
structured
programming
has
proved
to
be
an
important
methodology
for
systematic
program
design
and
development
structured
programs
are
identified
as
compound
function
expressions
in
the
algebra
of
functions
the
algebraic
properties
of
these
function
expressions
permit
the
reformulation
expansion
as
well
as
reduction
of
a
nested
subexpression
independently
of
its
environment
thus
modeling
what
is
known
as
stepwise
program
refinement
as
well
as
program
execution
finally
structured
programming
is
characterized
in
terms
of
the
selection
and
solution
of
certain
elementary
equations
defined
in
the
algebra
of
functions
these
solutions
can
be
given
in
general
formulas
each
involving
a
single
parameter
which
display
the
entire
freedom
available
in
creating
correct
structured
programs
cacm
january
1975
mills
h
d
structured
programming
algebra
of
functions
stepwise
refinement
program
correctness
4
6
5
21
5
24
ca750109
jb
january
12
1978
9
50
am
2709
4
2802
2802
4
2802
3004
4
2802
1425
5
2802
2802
5
2802
2802
5
2802
2802
5
2802
</TEXT>
</DOC>
<DOC>
<DOCNO>2803</DOCNO>
<TEXT>
pseudoinverses
and
conjugate
gradients
this
paper
is
devoted
to
the
study
of
connections
between
pseudoinverses
of
matrices
and
conjugate
gradients
and
conjugate
direction
routines
cacm
january
1975
hestenes
m
r
pseudoinverse
conjugate
gradients
hermitian
matrix
minimization
5
14
ca750108
jb
january
12
1978
10
08
am
2803
5
2803
2803
5
2803
2803
5
2803
</TEXT>
</DOC>
<DOC>
<DOCNO>2804</DOCNO>
<TEXT>
elementary
divisors
of
tensor
products
the
elementary
divisors
of
a
tensor
product
of
linear
transformations
have
been
known
for
40
years
this
paper
provides
a
short
easily
accessible
proof
of
these
results
and
points
out
an
interesting
combinatorial
consequence
of
the
proof
cacm
january
1975
marcus
m
robinson
h
elementary
divisors
tensor
products
linear
transformations
5
14
ca750107
jb
january
12
1978
10
13
am
2804
5
2804
2804
5
2804
2804
5
2804
</TEXT>
</DOC>
<DOC>
<DOCNO>2805</DOCNO>
<TEXT>
perturbations
of
eigenvalues
of
non
normal
matrices
the
problem
considered
is
to
give
bounds
for
finite
perturbations
of
simple
and
multiple
eigenvalues
of
nonnormal
matrices
where
these
bounds
are
in
terms
of
the
eigenvalues
the
departure
from
normality
and
the
frobenius
norm
of
the
perturbation
matrix
but
not
in
terms
of
the
eigen
system
the
bounds
which
are
derived
are
shown
to
be
almost
attainable
for
any
set
of
matrices
cacm
january
1975
van
der
sluis
a
perturbation
of
eigenvalues
non
normal
matrices
departure
from
normality
gershgorin
circles
5
14
ca750106
jb
january
12
1978
10
31
am
2805
5
2805
2805
5
2805
2805
5
2805
</TEXT>
</DOC>
<DOC>
<DOCNO>2806</DOCNO>
<TEXT>
two
hadamard
numbers
for
matrices
a
discussion
is
given
of
two
functions
of
the
entries
of
a
square
matrix
both
related
to
hadamard
determinant
theorem
which
have
some
merits
as
alternatives
to
norm
bound
condition
numbers
one
for
linear
systems
is
known
the
other
for
eigen
systems
seems
to
be
new
cacm
january
1975
birkhoff
g
matrices
eigenvalues
norms
condition
numbers
error
analysis
gram
schmidt
orthogonalization
5
11
5
14
ca750105
jb
january
12
1978
10
37
am
2806
5
2806
2806
5
2806
2806
5
2806
</TEXT>
</DOC>
<DOC>
<DOCNO>2807</DOCNO>
<TEXT>
on
the
stability
of
gauss
jordan
elimination
with
pivoting
the
stability
of
the
gauss
jordan
algorithm
with
partial
pivoting
for
the
solution
of
general
systems
of
linear
equations
is
commonly
regarded
as
suspect
it
is
shown
that
in
many
respects
suspicions
are
unfounded
and
in
general
the
absolute
error
in
the
solution
is
strictly
comparable
with
that
corresponding
to
gaussian
elimination
with
partial
pivoting
plus
back
substitution
however
when
a
is
ill
conditioned
the
residual
corresponding
to
the
gauss
jordan
solution
will
often
be
much
greater
than
that
corresponding
to
the
gaussian
elimination
solution
cacm
january
1975
peters
g
wilkinson
j
h
gauss
jordan
algorithm
gaussian
elimination
back
substitution
backward
error
analysis
bounds
for
error
in
solution
bound
for
residual
5
11
5
14
ca750104
jb
january
12
1978
10
44
am
2807
5
2807
2807
5
2807
2807
5
2807
</TEXT>
</DOC>
<DOC>
<DOCNO>2808</DOCNO>
<TEXT>
the
lemniscate
constants
the
lemniscate
constants
and
indeed
some
of
the
methods
used
for
actually
computing
them
have
played
an
enormous
part
in
the
development
of
mathematics
an
account
is
given
here
of
some
of
the
methods
used
most
of
the
derivations
can
be
made
by
elementary
methods
this
material
can
be
used
for
teaching
purposes
and
there
is
much
relevant
and
interesting
historical
material
the
acceleration
methods
developed
for
the
purpose
of
evaluating
these
constants
are
useful
in
other
problems
cacm
january
1975
todd
j
lemniscate
acceleration
elliptic
functions
euler
transformation
1
2
5
0
ca750103
jb
january
12
1978
10
51
am
2808
5
2808
2808
5
2808
2808
5
2808
</TEXT>
</DOC>
<DOC>
<DOCNO>2809</DOCNO>
<TEXT>
positivity
and
norms
following
some
lines
of
joint
work
with
a
s
householder
the
character
and
use
of
algebraic
methods
in
the
theory
of
norms
is
demonstrated
new
results
concerning
norms
with
values
in
an
archimedian
vector
lattice
not
necessarily
being
totally
ordered
are
given
in
particular
for
the
generalization
of
order
unit
norms
l
norms
and
m
norms
an
example
of
application
to
operator
norms
is
given
concerning
contraction
properties
of
positive
operators
cacm
january
1975
bauer
f
l
matrices
norms
positivity
numerical
range
positivity
cones
vector
lattice
absolute
monotonic
5
11
5
14
ca750102
jb
january
12
1978
10
56
am
2809
5
2809
2809
5
2809
2809
5
2809
</TEXT>
</DOC>
<DOC>
<DOCNO>2810</DOCNO>
<TEXT>
professionalism
in
the
computing
field
the
term
professional
means
different
things
to
different
people
nevertheless
there
are
certain
general
technical
and
social
standards
normally
associated
with
a
professional
further
the
term
is
more
generally
applied
to
the
practitioner
rather
than
to
the
researcher
but
within
the
rather
broad
definition
specified
the
computing
practitioner
is
as
yet
not
regarded
as
a
professional
each
of
the
four
types
of
institutions
academic
industry
government
and
the
professional
society
that
educate
employ
regulate
and
mold
the
practitioner
contributes
to
the
nonprofessional
status
of
the
computing
practitioner
the
roles
of
these
institutions
are
examined
various
shortcomings
are
noted
and
recommended
changes
are
suggested
in
the
last
analysis
professional
status
is
not
bestowed
it
is
earned
however
universities
and
industry
specifically
can
make
certain
improvements
to
help
the
computing
practitioner
achieve
professional
status
cacm
january
1975
finerman
a
professional
aspects
educational
programs
industry
attitudes
professional
societies
licensing
and
certification
1
50
2
10
2
2
ca750101
jb
january
12
1978
11
05
am
2810
5
2810
2810
5
2810
2810
5
2810
</TEXT>
</DOC>
<DOC>
<DOCNO>2811</DOCNO>
<TEXT>
structural
pattern
recognition
of
carotid
pulse
waves
using
a
general
waveform
parsing
system
a
general
waveform
parsing
system
with
application
to
structural
pattern
recognition
of
carotid
pulse
waves
is
described
the
carotid
arterial
pulse
wave
is
of
medical
importance
because
of
variation
in
its
structure
induced
by
arterial
aging
and
cardiovascular
disease
the
syntax
driven
waveform
analysis
system
has
been
applied
with
good
results
to
these
pulse
waves
to
detect
and
measure
structural
variations
the
waveform
parsing
system
is
modeled
on
a
compiler
compiler
system
and
allows
the
user
to
enter
application
specific
information
as
data
it
is
thus
general
enough
to
be
applicable
to
other
waveforms
cacm
december
1976
stockman
g
kanal
l
kyle
m
c
structural
pattern
recognition
parsing
waveform
analysis
pulse
waves
3
12
3
34
3
63
4
12
ca761204
jb
january
3
1978
1
43
pm
2811
5
2811
2811
5
2811
2811
5
2811
</TEXT>
</DOC>
<DOC>
<DOCNO>2812</DOCNO>
<TEXT>
computer
aided
analysis
and
design
of
information
systems
this
paper
describes
the
use
of
computer
aided
analysis
for
the
design
and
development
of
an
integrated
financial
management
system
by
the
navy
material
command
support
activity
nmcsa
computer
aided
analysis
consists
of
a
set
of
procedures
and
computer
programs
specifically
designed
to
aid
in
the
process
of
applications
software
design
computer
selection
and
performance
evaluation
there
are
four
major
components
problem
statement
language
problem
statement
analyzer
generator
of
alternative
designs
and
performance
evaluator
the
statement
of
requirements
was
written
in
ads
accurately
defined
systems
and
analyzed
by
a
problem
statement
analyzer
for
ads
the
ads
problem
definition
was
supplemented
with
additional
information
in
order
to
create
a
complete
problem
definition
the
analyzed
problem
statement
was
translated
to
the
form
necessary
for
use
by
the
soda
systems
optimization
and
design
algorithm
program
for
the
generation
of
alternative
specifications
of
program
modules
and
logical
database
structures
cacm
december
1976
nunamaker
j
f
jr
konsynski
b
r
jr
ho
t
singer
c
computer
aided
analysis
information
systems
logical
system
design
problem
statement
language
problem
statement
analyzer
physical
system
design
accurately
defined
systems
systems
optimization
and
design
algorithm
2
44
3
50
4
33
4
9
8
1
ca761203
jb
january
3
1978
2
31
pm
2812
5
2812
2812
5
2812
2812
5
2812
</TEXT>
</DOC>
<DOC>
<DOCNO>2813</DOCNO>
<TEXT>
the
computer
science
and
engineering
research
study
cosers
the
computer
science
and
engineering
research
study
cosers
is
briefly
described
the
motivation
organization
and
schedule
for
this
nsf
supported
study
are
given
for
possible
further
reference
the
subject
area
panel
chairmen
and
the
members
of
the
steering
committee
are
identified
cacm
december
1976
arden
b
computer
science
research
computer
engineering
research
national
research
study
1
0
1
52
ca761202
jb
january
3
1978
2
35
pm
2813
5
2813
2813
5
2813
2813
5
2813
</TEXT>
</DOC>
<DOC>
<DOCNO>2814</DOCNO>
<TEXT>
roster
of
programming
languages
for
1974
75
cacm
december
1976
sammet
j
e
ca761201
jb
january
3
1978
2
38
pm
2814
5
2814
2814
5
2814
2814
5
2814
</TEXT>
</DOC>
<DOC>
<DOCNO>2815</DOCNO>
<TEXT>
high
level
binding
with
low
level
linkers
an
easy
to
implement
scheme
is
described
by
which
a
compiler
can
enforce
agreement
between
complex
data
types
in
separately
compiled
modules
the
scheme
is
designed
to
work
with
any
existing
link
editor
or
linking
loader
no
matter
how
deficient
obscure
run
time
errors
caused
by
inconsistent
usages
are
forestalled
by
static
errors
detected
at
linking
time
cacm
november
1976
hamlet
r
g
separate
compilation
binding
linking
strong
typing
4
10
4
22
ca761108
jb
january
3
1978
2
44
pm
2815
5
2815
2815
5
2815
2815
5
2815
</TEXT>
</DOC>
<DOC>
<DOCNO>2816</DOCNO>
<TEXT>
optimal
reorganization
of
distributed
space
disk
files
in
most
database
organizations
the
cost
of
accessing
the
database
will
increase
due
to
structural
changes
caused
by
updates
and
insertions
by
reorganizing
the
database
the
access
costs
can
be
reduced
a
basic
problem
is
to
establish
the
proper
tradeoff
between
performance
storage
costs
and
reorganization
costs
this
paper
considers
the
optimum
points
at
which
to
reorganize
a
database
a
disk
file
organization
which
allows
for
distributed
free
space
is
described
a
cost
function
describing
the
excess
costs
due
to
physical
disorganization
is
defined
and
this
function
is
minimized
to
obtain
the
optimum
reorganization
points
numerical
examples
based
on
the
characteristics
of
existing
disk
storage
devices
are
given
cacm
november
1976
maruyama
k
smith
s
e
disk
file
free
space
retrieval
insertion
deterioration
reorganization
3
70
3
73
ca761107
jb
january
3
1978
2
59
pm
2816
4
2816
2816
4
2816
2816
4
2816
2828
4
2816
2827
4
2816
2913
4
2816
3047
4
2816
3047
4
2816
3129
4
2816
2493
5
2816
2751
5
2816
2816
5
2816
2816
5
2816
2816
5
2816
2829
5
2816
3129
5
2816
2493
6
2816
2816
6
2816
</TEXT>
</DOC>
<DOC>
<DOCNO>2817</DOCNO>
<TEXT>
the
notions
of
consistency
and
predicate
locks
in
a
database
system
in
database
systems
users
access
shared
data
under
the
assumption
that
the
data
satisfies
certain
consistency
constraints
this
paper
defines
the
concepts
of
transaction
consistency
and
schedule
and
shows
that
consistency
requires
that
a
transaction
cannot
request
new
locks
after
releasing
a
lock
then
it
is
argued
that
a
transaction
needs
to
lock
a
logical
rather
than
a
physical
subset
of
the
database
these
subsets
may
be
specified
by
predicates
an
implementation
of
predicate
locks
which
satisfies
the
consistency
condition
is
suggested
cacm
november
1976
eswarran
k
gray
j
lorie
r
traiger
i
l
consistency
lock
database
concurrency
transaction
4
32
4
33
ca761106
jb
january
3
1978
3
14
pm
2155
4
2817
2406
4
2817
2710
4
2817
2715
4
2817
2716
4
2817
2717
4
2817
2718
4
2817
2765
4
2817
2817
4
2817
2888
4
2817
2901
4
2817
2957
4
2817
2959
4
2817
2965
4
2817
3087
4
2817
3154
4
2817
2046
5
2817
2817
5
2817
2817
5
2817
2817
5
2817
3148
5
2817
1860
6
2817
2817
6
2817
2865
6
2817
2939
6
2817
3073
6
2817
</TEXT>
</DOC>
<DOC>
<DOCNO>2818</DOCNO>
<TEXT>
interference
in
multiprocessor
computer
systems
with
interleaved
memory
corrigendum
cacm
november
1976
baskett
f
smith
a
j
ca761105
jb
january
3
1978
3
18
pm
2818
5
2818
2818
5
2818
2818
5
2818
</TEXT>
</DOC>
<DOC>
<DOCNO>2819</DOCNO>
<TEXT>
experiments
in
text
file
compression
a
system
for
the
compression
of
data
files
viewed
as
strings
of
characters
is
presented
the
method
is
general
and
applies
equally
well
to
english
to
pl
i
or
to
digital
data
the
system
consists
of
an
encoder
an
analysis
program
and
a
decoder
two
algorithms
for
encoding
a
string
differ
slightly
from
earlier
proposals
the
analysis
program
attempts
to
find
an
optimal
set
of
codes
for
representing
substrings
of
the
file
four
new
algorithms
for
this
operation
are
described
and
compared
various
parameters
in
the
algorithms
are
optimized
to
obtain
a
high
degree
of
compression
for
sample
texts
cacm
november
1976
rubin
f
text
compression
data
file
compaction
huffman
codes
n
gram
encoding
comparison
of
algorithms
3
7
3
73
4
33
ca761104
jb
january
3
1978
3
26
pm
2530
4
2819
2623
4
2819
2819
4
2819
2537
5
2819
2819
5
2819
2819
5
2819
2819
5
2819
</TEXT>
</DOC>
<DOC>
<DOCNO>2820</DOCNO>
<TEXT>
the
design
and
implementation
of
a
table
driven
interactive
diagnostic
programming
system
caps
is
a
highly
interactive
diagnostic
compiler
interpreter
that
allows
beginning
programmers
to
prepare
debug
and
execute
fairly
simple
programs
at
a
graphics
display
terminal
complete
syntax
checking
and
most
semantic
analysis
is
performed
as
the
program
is
entered
and
as
it
is
subsequently
edited
analysis
is
performed
character
by
character
the
most
remarkable
feature
of
caps
is
its
ability
to
automatically
diagnose
errors
both
at
compile
time
and
at
run
time
errors
are
not
automatically
corrected
instead
caps
interacts
with
the
student
to
help
him
find
the
cause
of
his
error
most
components
of
caps
are
table
driven
both
to
reduce
the
space
needed
for
implementation
and
to
increase
the
flexibility
of
the
multilingual
system
over
500
students
have
used
caps
to
learn
fortran
pl
i
or
cobolin
conjunction
with
a
computer
assisted
course
on
introductory
computer
science
cacm
november
1976
wilcox
t
r
davis
a
m
tindall
m
h
interactive
programming
table
driven
compilers
error
correction
interpreters
debugging
computer
assisted
instruction
computer
science
education
1
5
4
12
4
13
4
42
8
2
ca761103
jb
january
3
1978
3
37
pm
1323
4
2820
1358
4
2820
1380
4
2820
1665
4
2820
1781
4
2820
1787
4
2820
1989
4
2820
2112
4
2820
2534
4
2820
2541
4
2820
2698
4
2820
2708
4
2820
2733
4
2820
2820
4
2820
2820
4
2820
2971
4
2820
3045
4
2820
3073
4
2820
3155
4
2820
2534
5
2820
2820
5
2820
2820
5
2820
2820
5
2820
799
5
2820
</TEXT>
</DOC>
<DOC>
<DOCNO>2821</DOCNO>
<TEXT>
cobol
under
control
a
sample
set
of
cobol
programming
standards
is
offered
these
standards
constrain
code
to
be
developed
in
a
structured
form
for
both
data
and
control
structures
they
do
not
require
syntax
beyond
the
existing
cobol
language
and
in
fact
utilize
a
typical
limited
subset
of
the
1974
ans
cobol
standard
these
standards
have
proved
extremely
valuable
in
practice
and
have
reduced
the
cost
and
time
to
produce
and
maintain
large
software
systems
that
have
been
deployed
in
live
multiple
customer
environments
cacm
november
1976
ledgard
h
f
cave
w
c
cobol
structured
programming
software
development
program
standards
3
5
4
22
4
43
ca761102
jb
january
3
1978
3
43
pm
2821
4
2821
3121
4
2821
2709
5
2821
2821
5
2821
2821
5
2821
2821
5
2821
</TEXT>
</DOC>
<DOC>
<DOCNO>2822</DOCNO>
<TEXT>
homilies
for
humble
standards
copyright
1976
association
for
computing
machinery
inc
general
permission
to
republish
but
not
for
profit
all
or
part
of
this
material
is
granted
provided
that
acm
copyright
notice
is
given
and
that
reference
is
made
to
the
publication
to
its
data
of
issue
and
to
the
fact
that
reprinting
privileges
were
granted
by
permission
of
the
association
for
computing
machinery
cacm
november
1976
ross
d
t
standards
case
standards
criteria
for
standards
standardization
1
3
2
1
2
3
ca761101
jb
january
3
1978
3
47
pm
2822
5
2822
2822
5
2822
2822
5
2822
</TEXT>
</DOC>
<DOC>
<DOCNO>2823</DOCNO>
<TEXT>
the
status
of
women
and
minorities
in
academic
computer
science
the
results
of
a
survey
concerning
women
and
minority
students
and
faculty
in
computer
science
during
the
years
1971
to
1975
are
presented
analysis
of
the
data
indicated
that
effective
affirmative
action
programs
for
recruitment
into
graduate
degree
programs
are
needed
to
enlarge
the
number
of
women
and
minorities
qualified
for
later
employment
in
computer
science
also
possible
discrimination
in
employment
of
women
and
minority
graduate
students
was
revealed
cacm
october
1976
montanelli
r
g
jr
mamrak
s
a
discrimination
against
women
discrimination
against
minorities
graduate
students
undergraduate
students
academic
employment
faculty
computer
science
degree
programs
affirmative
action
title
vii
title
ix
1
52
1
53
2
2
2
3
ca761008
jb
january
3
1978
4
10
pm
2823
4
2823
2735
5
2823
2823
5
2823
2823
5
2823
2823
5
2823
3022
5
2823
3123
5
2823
2823
6
2823
2823
6
2823
2861
6
2823
2962
6
2823
3022
6
2823
</TEXT>
</DOC>
<DOC>
<DOCNO>2824</DOCNO>
<TEXT>
an
improvement
to
martin
algorithm
for
computation
of
linear
precedence
functions
cacm
october
1976
duong
kien
c
hoffmann
h
j
muth
d
syntax
analysis
precedence
functions
boolean
matrices
4
12
ca761007
jb
january
3
1978
4
13
pm
1542
4
2824
1683
4
2824
1693
4
2824
1781
4
2824
1787
4
2824
1836
4
2824
1945
4
2824
2060
4
2824
2061
4
2824
2082
4
2824
2091
4
2824
2152
4
2824
2179
4
2824
2221
4
2824
2340
4
2824
2340
4
2824
2356
4
2824
2546
4
2824
2603
4
2824
2698
4
2824
2708
4
2824
2824
4
2824
2824
4
2824
2824
4
2824
2982
4
2824
2982
4
2824
2986
4
2824
2986
4
2824
2986
4
2824
3045
4
2824
3093
4
2824
1491
5
2824
1683
5
2824
2340
5
2824
2824
5
2824
2824
5
2824
2824
5
2824
</TEXT>
</DOC>
<DOC>
<DOCNO>2825</DOCNO>
<TEXT>
the
bmd
and
bmdp
series
of
statistical
computer
programs
cacm
october
1976
frane
j
w
analysis
of
variance
cluster
analysis
contingency
tables
data
analysis
discriminant
analysis
factor
analysis
graphics
outliers
regression
time
series
transformations
1
3
3
3
4
0
5
5
ca761006
jb
january
3
1978
4
18
pm
2825
4
2825
2419
5
2825
2825
5
2825
2825
5
2825
2825
5
2825
</TEXT>
</DOC>
<DOC>
<DOCNO>2826</DOCNO>
<TEXT>
interactive
skeleton
techniques
for
enhancing
motion
dynamics
in
key
frame
animation
a
significant
increase
in
the
capability
for
controlling
motion
dynamics
in
key
frame
animation
is
achieved
through
skeleton
control
this
technique
allows
an
animator
to
develop
a
complex
motion
sequence
by
animating
a
stick
figure
representation
of
an
image
this
control
sequence
is
then
used
to
drive
an
image
sequence
through
the
same
movement
the
simplicity
of
the
stick
figure
image
encourages
a
high
level
of
interaction
during
the
design
stage
its
compatibility
with
the
basic
key
frame
animation
technique
permits
skeleton
control
to
be
applied
selectively
to
only
those
components
of
a
composite
image
sequence
that
require
enhancement
cacm
october
1976
burtnyk
n
wein
m
interactive
graphics
computer
generated
animation
key
frame
animation
interactive
skeleton
control
stick
figure
animation
3
41
3
49
4
9
8
2
ca761005
jb
january
3
1978
4
24
pm
2826
5
2826
2826
5
2826
2826
5
2826
</TEXT>
</DOC>
<DOC>
<DOCNO>2827</DOCNO>
<TEXT>
a
parametric
algorithm
for
drawing
pictures
of
solid
objects
composed
of
quadric
surfaces
an
algorithm
for
drawing
pictures
of
three
dimensional
objects
with
surfaces
made
up
of
patches
of
quadric
surfaces
is
described
the
emphasis
of
this
algorithm
is
on
calculating
the
intersections
of
quadric
surfaces
a
parameterization
scheme
is
used
each
quadric
surface
intersection
curve
qsic
is
represented
as
a
set
of
coefficients
and
parameter
limits
each
value
of
the
parameter
represents
at
most
two
points
and
these
may
easily
be
distinguished
this
scheme
can
find
the
coordinates
of
points
of
even
quartic
fourth
order
intersection
curves
using
equations
of
no
more
than
second
order
methods
of
parameterization
for
each
type
of
osic
are
discussed
as
well
as
surface
bounding
and
hidden
surface
removal
cacm
october
1976
levin
j
computer
graphics
hidden
surface
removal
quadric
surface
intersection
curves
3
41
5
12
5
13
5
19
8
2
ca761004
jb
january
3
1978
4
32
pm
2816
4
2827
2828
4
2827
2827
4
2827
2827
4
2827
2913
4
2827
3047
4
2827
3116
4
2827
2751
5
2827
2771
5
2827
2827
5
2827
2827
5
2827
2827
5
2827
</TEXT>
</DOC>
<DOC>
<DOCNO>2828</DOCNO>
<TEXT>
hierarchical
geometric
models
for
visible
surface
algorithms
the
geometric
structure
inherent
in
the
definition
of
the
shapes
of
three
dimensional
objects
and
environments
is
used
not
just
to
define
their
relative
motion
and
placement
but
also
to
assist
in
solving
many
other
problems
of
systems
for
producing
pictures
by
computer
by
using
an
extension
of
traditional
structure
information
or
a
geometric
hierarchy
five
significant
improvements
to
current
techniques
are
possible
first
the
range
of
complexity
of
an
environment
is
greatly
increased
while
the
visible
complexity
of
any
given
scene
is
kept
within
a
fixed
upper
limit
second
a
meaningful
way
is
provided
to
vary
the
amount
of
detail
presented
in
a
scene
third
clipping
becomes
a
very
fast
logarithmic
search
for
the
resolvable
parts
of
the
environment
within
the
field
of
view
fourth
frame
to
frame
coherence
and
clipping
define
a
graphical
working
set
or
fraction
of
the
total
structure
that
should
be
present
in
primary
store
for
immediate
access
by
the
visible
surface
algorithm
finally
the
geometric
structure
suggests
a
recursive
descent
visible
surface
algorithm
in
which
the
computation
time
potentially
grows
linearly
with
the
visible
complexity
of
the
scene
cacm
october
1976
clark
j
h
visible
surface
algorithms
hidden
surface
algorithms
hierarchical
data
structures
geometric
models
5
31
8
2
ca761003
jb
january
3
1978
4
42
pm
1892
4
2828
1901
4
2828
2085
4
2828
2095
4
2828
2218
4
2828
2277
4
2828
2319
4
2828
2329
4
2828
2358
4
2828
2373
4
2828
2380
4
2828
2434
4
2828
2499
4
2828
2501
4
2828
2582
4
2828
2669
4
2828
2674
4
2828
2687
4
2828
2816
4
2828
2828
4
2828
2828
4
2828
2828
4
2828
2828
4
2828
2827
4
2828
2863
4
2828
2881
4
2828
2913
4
2828
2928
4
2828
2996
4
2828
3006
4
2828
3047
4
2828
3067
4
2828
1751
5
2828
2004
5
2828
2751
5
2828
2828
5
2828
2828
5
2828
2828
5
2828
2841
5
2828
</TEXT>
</DOC>
<DOC>
<DOCNO>2829</DOCNO>
<TEXT>
texture
and
reflection
in
computer
generated
images
in
1974
catmull
developed
a
new
algorithm
for
rendering
images
of
bivariate
surface
patches
this
paper
describes
extensions
of
this
algorithm
in
the
areas
of
texture
simulation
and
lighting
models
the
parameterization
of
a
patch
defines
a
coordinate
system
which
is
used
as
a
key
for
mapping
patterns
onto
the
surface
the
intensity
of
the
pattern
at
each
picture
element
is
computed
as
a
weighted
average
of
regions
of
the
pattern
definition
function
the
shape
and
size
of
this
weighting
function
are
chosen
using
digital
signal
processing
theory
the
patch
rendering
algorithm
allows
accurate
computation
of
the
surface
normal
to
the
patch
at
each
picture
element
permitting
the
simulation
of
the
mirror
reflections
the
amount
of
light
coming
from
a
given
direction
is
modeled
in
a
similar
manner
to
the
texture
mapping
and
then
added
to
the
intensity
obtained
from
the
texture
mapping
several
examples
of
images
synthesized
using
these
new
techniques
are
included
cacm
october
1976
blinn
j
f
newell
m
e
computer
graphics
graphic
display
shading
hidden
surface
removal
3
41
5
12
5
15
8
2
ca761002
jb
january
4
1978
8
36
am
2816
5
2829
2829
5
2829
2829
5
2829
2829
5
2829
3047
5
2829
2493
6
2829
2751
6
2829
2751
6
2829
2829
6
2829
2829
6
2829
</TEXT>
</DOC>
<DOC>
<DOCNO>2830</DOCNO>
<TEXT>
a
practitioner
guide
to
addressing
algorithms
corrigendum
cacm
september
1976
severance
d
g
duhne
r
a
ca760909
jb
january
4
1978
8
43
am
2830
5
2830
2830
5
2830
2830
5
2830
</TEXT>
</DOC>
<DOC>
<DOCNO>2831</DOCNO>
<TEXT>
analysis
of
the
pff
replacement
algorithm
via
a
semi
markov
model
corrigendum
cacm
september
1976
chu
w
w
opderbeck
h
ca760908
dmm
february
1
1978
9
54
am
2831
5
2831
2831
5
2831
2831
5
2831
</TEXT>
</DOC>
<DOC>
<DOCNO>2832</DOCNO>
<TEXT>
faster
retrieval
from
context
trees
corrigendum
context
trees
provide
a
convenient
way
of
storing
data
which
is
to
be
viewed
as
a
hierarchy
of
contexts
this
note
presents
an
algorithm
which
improves
on
previous
context
tree
retrieval
algorithms
it
is
based
on
the
observation
that
in
typical
uses
context
changes
are
infrequent
relative
to
retrievals
so
that
data
can
be
cached
to
speed
up
retrieval
a
retrieval
is
started
from
the
position
of
the
previous
retrieval
and
auxiliary
structures
are
built
up
to
make
the
search
rapid
algorithms
for
addition
and
deletion
of
data
and
for
garbage
collection
are
outlined
cacm
september
1976
wegbreit
b
context
trees
frame
problem
variable
bindings
data
structures
3
69
3
74
4
10
ca760907
jb
january
4
1978
8
49
am
2832
5
2832
2832
5
2832
2832
5
2832
</TEXT>
</DOC>
<DOC>
<DOCNO>2833</DOCNO>
<TEXT>
an
efficient
incremental
automatic
garbage
collector
this
paper
describes
a
new
way
of
solving
the
storage
reclamation
problem
for
a
system
such
as
lisp
that
allocates
storage
automatically
from
a
heap
and
does
not
require
the
programmer
to
give
any
indication
that
particular
items
are
no
longer
useful
or
accessible
a
reference
count
scheme
for
reclaiming
non
self
referential
structures
and
a
linearizing
compacting
copying
scheme
to
reorganize
all
storage
at
the
users
discretion
are
proposed
the
algorithms
are
designed
to
work
well
in
systems
which
use
multiple
levels
of
storage
and
large
virtual
address
space
they
depend
on
the
fact
that
most
cells
are
referenced
exactly
once
and
that
reference
counts
need
only
be
accurate
when
storage
is
about
to
be
reclaimed
a
transaction
file
stores
changes
to
reference
counts
and
a
multiple
reference
table
stores
the
count
for
items
which
are
referenced
more
than
once
cacm
september
1976
deutsch
l
p
bobrow
d
g
storage
management
garbage
collection
lisp
4
19
ca760906
jb
january
4
1978
8
58
am
1708
4
2833
1781
4
2833
1826
4
2833
1860
4
2833
1972
4
2833
2156
4
2833
2156
4
2833
2168
4
2833
2168
4
2833
2249
4
2833
2314
4
2833
2438
4
2833
2719
4
2833
2723
4
2833
2736
4
2833
2736
4
2833
2833
4
2833
2833
4
2833
2833
4
2833
2845
4
2833
2855
4
2833
3074
4
2833
3112
4
2833
3112
4
2833
1626
5
2833
1826
5
2833
2736
5
2833
2833
5
2833
2833
5
2833
2833
5
2833
2855
5
2833
2944
5
2833
3112
5
2833
106
6
2833
1380
6
2833
1549
6
2833
1826
6
2833
1826
6
2833
210
6
2833
1972
6
2833
1972
6
2833
2438
6
2833
2513
6
2833
2723
6
2833
2736
6
2833
2766
6
2833
2833
6
2833
2833
6
2833
2833
6
2833
2838
6
2833
2998
6
2833
2998
6
2833
731
6
2833
</TEXT>
</DOC>
<DOC>
<DOCNO>2834</DOCNO>
<TEXT>
efficient
generation
of
the
binary
reflected
gray
code
and
its
applications
algorithms
are
presented
to
generate
the
n
bit
binary
reflected
gray
code
and
codewords
of
fixed
weight
in
that
code
both
algorithms
are
efficient
in
that
the
time
required
to
generate
the
next
element
from
the
current
one
is
constant
applications
to
the
generation
of
the
combinations
of
n
things
taken
k
at
a
time
the
compositions
of
integers
and
the
permutations
of
a
multiset
are
discussed
cacm
september
1976
bitner
j
r
ehrlich
g
reingold
e
m
gray
code
combinations
subsets
compositions
combinatorial
computing
5
39
ca760905
jb
january
4
1978
9
14
am
2466
4
2834
2834
4
2834
2834
4
2834
2834
4
2834
2834
4
2834
2884
4
2834
3115
4
2834
3115
4
2834
3115
4
2834
969
5
2834
2045
5
2834
2417
5
2834
2466
5
2834
2834
5
2834
2834
5
2834
2834
5
2834
</TEXT>
</DOC>
<DOC>
<DOCNO>2835</DOCNO>
<TEXT>
recursion
analysis
for
compiler
optimization
a
relatively
simple
method
for
the
detection
of
recursive
use
of
procedures
is
presented
for
use
in
compiler
optimization
implementation
considerations
are
discussed
and
a
modification
of
the
algorithm
is
given
to
further
improve
optimization
this
analysis
can
also
be
used
to
determine
what
possible
subset
of
values
could
be
assumed
by
variables
which
can
only
take
on
a
relatively
small
discrete
set
of
values
the
most
common
are
parameters
of
variables
assuming
values
of
label
procedure
or
pascal
enumerated
type
cacm
september
1976
walter
k
g
recursion
compiler
optimization
4
12
ca760904
jb
january
4
1978
9
36
am
2835
5
2835
2835
5
2835
2835
5
2835
</TEXT>
</DOC>
<DOC>
<DOCNO>2836</DOCNO>
<TEXT>
weighted
derivation
trees
the
nodes
of
a
weighted
derivation
tree
are
associated
with
weighting
functions
over
the
vocabulary
of
a
context
free
grammar
an
algorithm
is
presented
for
constructing
the
optimal
derivation
tree
having
the
same
structure
as
a
given
weighted
derivation
tree
in
addition
the
correctness
of
the
algorithm
is
established
the
method
may
be
applied
to
problems
involving
probabilistic
parsing
or
combinatorial
optimization
cacm
september
1976
loui
m
c
derivation
tree
parse
tree
probabilistic
grammar
structural
ambiguity
combinatorial
optimization
5
23
5
49
ca760903
jb
january
4
1978
9
41
am
2836
5
2836
2836
5
2836
2836
5
2836
</TEXT>
</DOC>
<DOC>
<DOCNO>2837</DOCNO>
<TEXT>
new
upper
bounds
for
selection
the
worst
case
minimum
number
of
comparisons
complexity
vi
n
of
the
i
th
selection
problem
is
considered
a
new
upper
bound
for
vi
n
improves
the
bound
given
by
the
standard
hadian
sobel
algorithm
by
a
generalization
of
the
kirkpatrick
hadian
sobel
algorithm
and
extends
kirkpatrick
method
to
a
much
wider
range
of
application
this
generalization
compares
favorably
with
a
recent
algorithm
by
hyafil
cacm
september
1976
yap
c
k
selection
problem
algorithms
comparison
problems
concrete
computational
complexity
upper
bounds
worst
case
analysis
5
25
5
31
ca760902
jb
january
4
1978
9
48
am
2837
4
2837
2837
4
2837
3150
4
2837
2784
5
2837
2837
5
2837
2837
5
2837
2837
5
2837
2842
5
2837
</TEXT>
</DOC>
<DOC>
<DOCNO>2838</DOCNO>
<TEXT>
analysis
of
an
algorithm
for
real
time
garbage
collection
a
real
time
garbage
collection
system
avoids
suspending
the
operations
of
a
list
processor
for
the
long
times
that
garbage
collection
normally
requires
by
performing
garbage
collection
on
a
second
processor
in
parallel
with
list
processing
operations
or
on
a
single
processor
time
shared
with
them
algorithms
for
recovering
discarded
list
structures
in
this
manner
are
presented
and
analyzed
to
determine
sufficient
conditions
under
which
the
list
processor
never
needs
to
wait
on
the
collector
these
techniques
are
shown
to
require
at
most
twice
as
much
processing
power
as
regular
garbage
collectors
if
they
are
used
efficiently
the
average
behavior
of
the
program
is
shown
to
be
very
nearly
equal
to
the
worst
case
performance
so
that
the
sufficient
conditions
are
also
suitable
for
measuring
the
typical
behavior
of
the
algorithm
cacm
september
1976
wadler
p
l
garbage
collection
storage
reclamation
list
processing
lisp
time
sharing
multiprocessing
parallel
processing
real
time
data
structures
analysis
of
algorithms
3
69
3
89
4
19
4
29
4
32
4
34
4
9
5
25
ca760901
jb
january
4
1978
9
57
am
1024
4
2838
1051
4
2838
1102
4
2838
1132
4
2838
1390
4
2838
1486
4
2838
1549
4
2838
1706
4
2838
1826
4
2838
1878
4
2838
378
4
2838
2060
4
2838
2155
4
2838
2168
4
2838
2719
4
2838
2723
4
2838
2838
4
2838
2838
4
2838
2842
4
2838
2855
4
2838
2879
4
2838
2896
4
2838
3039
4
2838
3074
4
2838
3077
4
2838
3080
4
2838
3106
4
2838
3112
4
2838
627
4
2838
106
4
2838
210
5
2838
2723
5
2838
2838
5
2838
2838
5
2838
2838
5
2838
3112
5
2838
106
6
2838
1380
6
2838
1826
6
2838
1972
6
2838
2438
6
2838
2723
6
2838
2736
6
2838
2833
6
2838
2838
6
2838
731
6
2838
</TEXT>
</DOC>
<DOC>
<DOCNO>2839</DOCNO>
<TEXT>
an
insertion
technique
for
one
sided
height
balanced
trees
a
restriction
on
height
balanced
binary
trees
is
presented
it
is
seen
that
this
restriction
reduces
the
extra
memory
requirements
by
half
from
two
extra
bits
per
node
to
one
and
maintains
fast
search
capabilities
at
a
cost
of
increased
time
requirements
for
inserting
new
nodes
cacm
august
1976
hirschberg
d
s
balanced
binary
search
trees
3
73
3
74
4
34
5
25
5
31
ca760805
jb
january
4
1978
10
04
am
2839
4
2839
3042
4
2839
3096
4
2839
3163
4
2839
2839
5
2839
2839
5
2839
2839
5
2839
2889
5
2839
3009
5
2839
3042
5
2839
3065
5
2839
3096
5
2839
3163
5
2839
2455
6
2839
2839
6
2839
2839
6
2839
2839
6
2839
2839
6
2839
2839
6
2839
2889
6
2839
2889
6
2839
2889
6
2839
2968
6
2839
3009
6
2839
3009
6
2839
3065
6
2839
3096
6
2839
3096
6
2839
</TEXT>
</DOC>
<DOC>
<DOCNO>2840</DOCNO>
<TEXT>
protection
in
operating
systems
a
model
of
protection
mechanisms
in
computing
systems
is
presented
and
its
appropriateness
is
argued
the
safety
problem
for
protection
systems
under
this
model
is
to
determine
in
a
given
situation
whether
a
subject
can
acquire
a
particular
right
to
an
object
in
restricted
cases
it
can
be
shown
that
this
problem
is
decidable
i
e
there
is
an
algorithm
to
determine
whether
a
system
in
a
particular
configuration
is
safe
in
general
and
under
surprisingly
weak
assumptions
it
cannot
be
decided
if
a
situation
is
safe
various
implications
of
this
fact
are
discussed
cacm
august
1976
harrison
m
a
ruzzo
w
l
ullman
j
d
protection
protection
system
operating
system
decidability
turing
machine
4
30
4
31
5
24
ca760804
jb
january
4
1978
10
12
am
1458
4
2840
1523
4
2840
1603
4
2840
1698
4
2840
1747
4
2840
1748
4
2840
1753
4
2840
1854
4
2840
1877
4
2840
1960
4
2840
2358
4
2840
2377
4
2840
2377
4
2840
2378
4
2840
2372
4
2840
2497
4
2840
2558
4
2840
2625
4
2840
2626
4
2840
2626
4
2840
2632
4
2840
2786
4
2840
2840
4
2840
2840
4
2840
2840
4
2840
2840
4
2840
2840
4
2840
2869
4
2840
2919
4
2840
2941
4
2840
3017
4
2840
3105
4
2840
3110
4
2840
3128
4
2840
3144
4
2840
3158
4
2840
3174
4
2840
1471
5
2840
1746
5
2840
2436
5
2840
2626
5
2840
2629
5
2840
2840
5
2840
2840
5
2840
2840
5
2840
3076
5
2840
2607
6
2840
2840
6
2840
</TEXT>
</DOC>
<DOC>
<DOCNO>2841</DOCNO>
<TEXT>
designing
surfaces
in
3
d
an
experimental
system
for
computer
aided
design
of
free
form
surfaces
in
three
dimensions
is
described
the
surfaces
are
represented
in
the
system
as
parametric
basis
splines
the
principal
features
of
the
system
are
1
the
surfaces
are
rendered
as
isoparametric
line
drawings
on
a
head
mounted
display
and
they
are
designed
with
the
aid
of
a
three
dimensional
wand
which
allows
3
d
movements
of
the
points
controlling
the
shapes
of
the
surfaces
2
all
of
the
interactions
with
the
surfaces
are
in
real
time
and
3
the
mathematical
formulations
used
assume
no
knowledge
of
them
by
the
user
of
the
system
also
examined
are
some
of
the
features
that
should
be
part
of
a
practical
3
d
system
for
designing
space
forms
cacm
august
1976
clark
j
h
real
time
graphics
computer
aided
design
picture
processing
b
splines
3
d
displays
3
80
6
22
8
2
ca760803
jb
january
4
1978
10
25
am
2828
5
2841
2841
5
2841
2841
5
2841
2841
5
2841
1751
6
2841
2004
6
2841
2751
6
2841
2841
6
2841
</TEXT>
</DOC>
<DOC>
<DOCNO>2842</DOCNO>
<TEXT>
the
denotational
semantics
of
programming
languages
this
paper
is
a
tutorial
introduction
to
the
theory
of
programming
language
semantics
developed
by
d
scott
and
c
strachey
the
application
of
the
theory
to
formal
language
specification
is
demonstrated
and
other
applications
are
surveyed
the
first
language
considered
loop
is
very
elementary
and
its
definition
merely
introduces
the
notation
and
methodology
of
the
approach
then
the
semantic
concepts
of
environments
stores
and
continuations
are
introduced
to
model
classes
of
programming
language
features
and
the
underlying
mathematical
theory
of
computation
due
to
scott
is
motivated
and
outlined
finally
the
paper
presents
a
formal
definition
of
the
language
gedanken
cacm
august
1976
tennent
r
d
semantics
programming
language
applicative
imperative
environment
store
continuation
theory
of
computation
higher
order
function
recursive
definition
loop
gedanken
4
22
5
24
ca760802
jb
january
4
1978
10
33
am
1024
4
2842
1051
4
2842
1086
4
2842
1102
4
2842
1132
4
2842
1132
4
2842
1234
4
2842
1263
4
2842
1265
4
2842
1270
4
2842
1323
4
2842
1358
4
2842
1379
4
2842
1380
4
2842
1390
4
2842
1453
4
2842
1464
4
2842
1484
4
2842
1486
4
2842
1491
4
2842
1498
4
2842
1549
4
2842
1613
4
2842
1614
4
2842
1706
4
2842
1781
4
2842
1825
4
2842
1826
4
2842
1860
4
2842
1878
4
2842
378
4
2842
2060
4
2842
2083
4
2842
2155
4
2842
2155
4
2842
2168
4
2842
2178
4
2842
2179
4
2842
2252
4
2842
2294
4
2842
2314
4
2842
2317
4
2842
2325
4
2842
2326
4
2842
2341
4
2842
2457
4
2842
2546
4
2842
2558
4
2842
2645
4
2842
2652
4
2842
2684
4
2842
2719
4
2842
2723
4
2842
2838
4
2842
2842
4
2842
2842
4
2842
2842
4
2842
2842
4
2842
2842
4
2842
2855
4
2842
2879
4
2842
2903
4
2842
2929
4
2842
2934
4
2842
3069
4
2842
3077
4
2842
3077
4
2842
3080
4
2842
3106
4
2842
3150
4
2842
627
4
2842
669
4
2842
679
4
2842
691
4
2842
761
4
2842
106
4
2842
949
4
2842
989
4
2842
210
5
2842
2060
5
2842
2148
5
2842
2192
5
2842
2837
5
2842
2842
5
2842
2842
5
2842
2842
5
2842
3150
5
2842
3184
5
2842
2060
6
2842
2704
6
2842
2784
6
2842
2842
6
2842
2842
6
2842
2939
6
2842
2940
6
2842
2941
6
2842
2943
6
2842
3073
6
2842
3148
6
2842
</TEXT>
</DOC>
<DOC>
<DOCNO>2843</DOCNO>
<TEXT>
tools
and
philosophy
for
software
education
this
paper
describes
a
set
of
tools
and
a
philosophy
for
teaching
software
that
have
been
found
very
useful
in
course
at
mit
over
the
past
seven
years
the
tools
include
programs
such
as
simulators
graders
compilers
and
monitor
these
allow
the
instructor
to
augment
the
basic
concepts
with
relevant
exciting
and
economical
student
project
activities
cacm
august
1976
donovan
j
j
software
education
simulators
grading
programs
student
assignments
1
5
4
0
ca760801
jb
january
4
1978
10
39
am
2843
5
2843
2843
5
2843
2843
5
2843
</TEXT>
</DOC>
<DOC>
<DOCNO>2844</DOCNO>
<TEXT>
heaps
applied
to
event
driven
mechanisms
cacm
july
1976
gonnet
g
h
discrete
event
simulation
event
scanning
mechanisms
priority
queues
heaps
4
34
8
1
ca760709
jb
january
4
1978
11
05
am
2042
4
2844
2222
4
2844
2356
4
2844
2679
4
2844
2757
4
2844
2844
4
2844
2844
4
2844
2844
4
2844
2844
4
2844
2936
4
2844
2936
4
2844
2972
4
2844
3051
4
2844
3064
4
2844
3064
4
2844
3109
4
2844
970
5
2844
1059
5
2844
2742
5
2844
2767
5
2844
2844
5
2844
2844
5
2844
2844
5
2844
3051
5
2844
3109
5
2844
2767
6
2844
2767
6
2844
2844
6
2844
2844
6
2844
</TEXT>
</DOC>
<DOC>
<DOCNO>2845</DOCNO>
<TEXT>
a
buddy
system
variation
for
disk
storage
allocation
a
generalization
of
the
buddy
system
for
storage
allocation
is
described
the
set
of
permitted
block
sizes
size
i
i
0
n
must
satisfy
the
condition
size
i
size
i
1
size
i
k
i
where
k
may
be
any
meaningful
integral
valued
function
this
makes
it
possible
to
force
logical
storage
blocks
to
coincide
with
physical
storage
blocks
such
as
tracks
and
cylinders
cacm
july
1976
burton
w
buddy
system
dynamic
storage
allocation
3
89
4
32
4
39
ca760708
jb
january
4
1978
11
24
am
1389
4
2845
1552
4
2845
2162
4
2845
2435
4
2845
2596
4
2845
2596
4
2845
2747
4
2845
2768
4
2845
2768
4
2845
2773
4
2845
2833
4
2845
2845
4
2845
2845
4
2845
2845
4
2845
2845
4
2845
2845
4
2845
2845
4
2845
2856
4
2845
2902
4
2845
2902
4
2845
2902
4
2845
2902
4
2845
2911
4
2845
2955
4
2845
2955
4
2845
2955
4
2845
3112
4
2845
3113
4
2845
1184
5
2845
2435
5
2845
2598
5
2845
2736
5
2845
2747
5
2845
2768
5
2845
2845
5
2845
2845
5
2845
2845
5
2845
</TEXT>
</DOC>
<DOC>
<DOCNO>2846</DOCNO>
<TEXT>
compressed
tries
this
paper
presents
a
new
data
structure
called
a
compressed
trie
or
c
trie
to
be
used
in
information
retrieval
systems
it
has
the
same
underlying
m
ary
tree
structure
as
a
trie
where
m
is
a
parameter
of
the
trie
but
whereas
the
fields
of
the
nodes
in
a
trie
have
to
be
large
enough
to
hold
a
key
or
at
least
a
pointer
the
fields
in
a
c
trie
are
only
one
bit
long
in
the
analysis
part
of
the
paper
it
will
be
shown
that
for
a
collection
of
n
keys
the
retrieval
time
measured
in
terms
of
bit
inspections
of
one
key
is
of
the
order
logm
n
and
the
storage
requirement
of
the
order
n
m
log2
n
bits
this
improvement
in
storage
requirements
and
retrieval
time
is
achieved
at
the
cost
of
decreasing
the
flexibility
of
the
structure
and
therefore
updating
costs
are
increased
first
the
c
trie
is
analyzed
as
a
data
structure
and
then
several
methods
of
its
use
for
relatively
static
databases
are
discussed
cacm
july
1976
maly
k
data
structure
database
m
ary
tree
trie
retrieval
time
storage
requirement
keys
3
70
3
74
3
75
ca760707
jb
january
4
1978
12
26
pm
2846
4
2846
849
4
2846
944
4
2846
155
5
2846
2846
5
2846
2846
5
2846
2846
5
2846
3041
5
2846
2846
6
2846
2905
6
2846
</TEXT>
</DOC>
<DOC>
<DOCNO>2847</DOCNO>
<TEXT>
sampling
from
the
gamma
distribution
on
a
computer
this
paper
describes
a
method
of
generating
gamma
variates
that
appears
to
be
less
costly
than
wallace
recently
suggested
method
for
large
shape
parameter
a
the
cost
of
computation
is
proportional
to
a
whereas
wallace
method
is
proportional
to
a
experimentation
by
robinson
and
lewis
indicates
that
for
small
a
the
method
suggested
here
also
dominates
methods
recently
suggested
by
dieter
and
ahrens
albeit
those
methods
dominate
for
large
a
the
method
suggested
here
uses
the
rejection
technique
cacm
july
1976
fishman
g
s
gamma
variates
reflection
method
sampling
5
5
8
1
8
3
ca760706
jb
january
4
1978
12
34
pm
2847
4
2847
2928
4
2847
3046
4
2847
3098
4
2847
3107
4
2847
2569
5
2847
2847
5
2847
2847
5
2847
2847
5
2847
3046
5
2847
3098
5
2847
2569
6
2847
2569
6
2847
2847
6
2847
2847
6
2847
3098
6
2847
</TEXT>
</DOC>
<DOC>
<DOCNO>2848</DOCNO>
<TEXT>
synthesis
of
decision
rules
decision
tables
can
be
used
as
an
effective
tool
during
an
interview
to
record
the
logic
of
processes
to
be
automated
the
result
of
such
an
interview
is
not
a
structure
of
complete
decision
tables
but
rather
sets
of
decision
rules
the
purpose
of
this
paper
is
to
provide
a
procedure
for
synthesizing
the
decision
rules
and
thus
provide
an
aid
in
developing
a
structure
of
complete
decision
tables
cacm
july
1976
cheng
c
rabin
j
decision
rules
decision
tables
logical
tables
logical
design
system
design
specification
language
3
50
4
33
ca760705
jb
january
4
1978
12
39
pm
2848
5
2848
2848
5
2848
2848
5
2848
</TEXT>
</DOC>
<DOC>
<DOCNO>2849</DOCNO>
<TEXT>
ethernet
distributed
packet
switching
for
local
computer
networks
ethernet
is
a
branching
broadcast
communication
system
for
carrying
digital
data
packets
among
locally
distributed
computing
stations
the
packet
transport
mechanism
provided
by
ethernet
has
been
used
to
build
systems
which
can
be
viewed
as
either
local
computer
networks
or
loosely
coupled
multiprocessors
an
ethernet
shared
communication
facility
its
ether
is
a
passive
broadcast
medium
with
no
central
control
coordination
of
access
to
the
ether
for
packet
broadcasts
is
distributed
among
the
contending
transmitting
stations
using
controlled
statistical
arbitration
switching
of
packets
to
their
destinations
on
the
ether
is
distributed
among
the
receiving
stations
using
packet
address
recognition
design
principles
and
implementation
are
described
based
on
experience
with
an
operating
ethernet
of
100
nodes
along
a
kilometer
of
coaxial
cable
a
model
for
estimating
performance
under
heavy
loads
and
a
packet
protocol
for
error
controlled
communication
are
included
for
completeness
cacm
july
1976
metcalfe
r
m
boggs
d
r
computer
networks
packet
switching
multiprocessing
distributed
control
distributed
computing
broadcast
communication
statistical
arbitration
3
81
4
32
6
35
ca760704
jb
january
4
1978
12
49
pm
2849
4
2849
2371
5
2849
2849
5
2849
2849
5
2849
2849
5
2849
3032
5
2849
3119
5
2849
2245
6
2849
2798
6
2849
2849
6
2849
2849
6
2849
2859
6
2849
</TEXT>
</DOC>
<DOC>
<DOCNO>2850</DOCNO>
<TEXT>
symbolic
execution
and
program
testing
this
paper
describes
the
symbolic
execution
of
programs
instead
of
supplying
the
normal
inputs
to
a
program
e
g
numbers
one
supplies
symbols
representing
arbitrary
values
the
execution
proceeds
as
in
a
normal
execution
except
that
values
may
be
symbolic
formulas
over
the
input
symbols
the
difficult
yet
interesting
issues
arise
during
the
symbolic
execution
of
conditional
branch
type
statements
a
particular
system
called
effigy
which
provides
symbolic
execution
for
program
testing
and
debugging
is
also
described
it
interpretively
executes
programs
written
in
a
simple
pl
i
style
programming
language
it
includes
many
standard
debugging
features
the
ability
to
manage
and
to
prove
things
about
symbolic
expressions
a
simple
program
testing
manager
and
a
program
verifier
a
brief
discussion
of
the
relationship
between
symbolic
execution
and
program
proving
is
also
included
cacm
july
1976
king
j
c
symbolic
execution
program
testing
program
debugging
program
proving
program
verification
symbolic
interpretation
4
13
5
21
5
24
ca760703
jb
january
4
1978
12
59
pm
2850
5
2850
2850
5
2850
2850
5
2850
3080
5
2850
210
6
2850
2850
6
2850
</TEXT>
</DOC>
<DOC>
<DOCNO>2851</DOCNO>
<TEXT>
formal
verification
of
parallel
programs
two
formal
models
for
parallel
computation
are
presented
an
abstract
conceptual
model
and
a
parallel
program
model
the
former
model
does
not
distinguish
between
control
and
data
states
the
latter
model
includes
the
capability
for
the
representation
of
an
infinite
set
of
control
states
by
allowing
there
to
be
arbitrarily
many
instruction
pointers
or
processes
executing
the
program
an
induction
principle
is
presented
which
treats
the
control
and
data
state
sets
on
the
same
ground
through
the
use
of
place
variables
it
is
observed
that
certain
correctness
conditions
can
be
expressed
without
enumeration
of
the
set
of
all
possible
control
states
examples
are
presented
in
which
the
induction
principle
is
used
to
demonstrate
proofs
of
mutual
exclusion
it
is
shown
that
assertions
oriented
proof
methods
are
special
cases
of
the
induction
principle
a
special
case
of
the
assertions
method
which
is
called
parallel
place
assertions
is
shown
to
be
incomplete
a
formalization
of
deadlock
is
then
presented
the
concept
of
a
norm
is
introduced
which
yields
an
extension
to
the
deadlock
problem
of
floyd
technique
for
proving
termination
also
discussed
is
an
extension
of
the
program
model
which
allows
each
process
to
have
its
own
local
variables
and
permits
shared
global
variables
correctness
of
certain
forms
of
implementation
is
also
discussed
an
appendix
is
included
which
relates
this
work
to
previous
work
on
the
satisfiability
of
certain
logical
formulas
cacm
july
1976
keller
r
m
parallel
program
correctness
verification
assertions
deadlock
mutual
exclusion
petrinet
4
6
5
2
6
9
8
1
ca760702
jb
january
4
1978
1
20
pm
2228
4
2851
2280
4
2851
2379
4
2851
2320
4
2851
2482
4
2851
2597
4
2851
2740
4
2851
2777
4
2851
2851
4
2851
2851
4
2851
2895
4
2851
2912
4
2851
2920
4
2851
2946
4
2851
3128
4
2851
1877
5
2851
2150
5
2851
2851
5
2851
2851
5
2851
2851
5
2851
</TEXT>
</DOC>
<DOC>
<DOCNO>2852</DOCNO>
<TEXT>
the
technology
of
computer
center
management
a
proposed
course
for
graduate
professional
programs
in
computer
science
or
in
information
systems
mcfarlan
and
nolan
have
made
a
strong
case
for
adding
a
course
on
information
systems
administration
to
the
13
courses
proposed
by
the
acm
curriculum
committee
on
computer
education
for
management
for
graduate
professional
programs
in
information
systems
this
paper
is
a
report
on
a
course
entitled
the
technology
of
computer
center
management
which
has
been
offered
at
purdue
for
the
past
four
years
the
course
is
suitable
either
for
graduate
professional
programs
in
information
systems
or
for
graduate
professional
programs
in
computer
science
cacm
july
1976
conte
s
d
halstead
m
h
education
information
systems
administration
computer
center
management
computer
system
performance
1
52
2
4
3
51
4
6
ca760701
jb
january
4
1978
1
31
pm
1653
4
2852
1720
4
2852
1927
4
2852
2147
4
2852
2163
4
2852
2345
4
2852
2387
4
2852
2407
4
2852
2478
4
2852
2594
4
2852
2852
4
2852
2852
4
2852
2852
4
2852
2852
4
2852
2852
4
2852
2899
4
2852
3003
4
2852
3003
4
2852
3011
4
2852
3050
4
2852
3050
4
2852
3130
4
2852
1417
5
2852
1771
5
2852
2345
5
2852
2387
5
2852
2479
5
2852
2852
5
2852
2852
5
2852
2852
5
2852
</TEXT>
</DOC>
<DOC>
<DOCNO>2853</DOCNO>
<TEXT>
a
numbering
system
for
permutations
of
combinations
cacm
june
1976
knott
g
d
combinatorics
coding
systems
storage
mapping
functions
4
9
5
30
ca760609
jb
january
4
1978
1
33
pm
2690
4
2853
2853
4
2853
2853
4
2853
3115
4
2853
2690
5
2853
2853
5
2853
2853
5
2853
2853
5
2853
579
5
2853
</TEXT>
</DOC>
<DOC>
<DOCNO>2854</DOCNO>
<TEXT>
multiprocessing
compactifying
garbage
collection
corrigendum
cacm
june
1976
steele
g
l
jr
ca760608
jb
january
4
1978
1
36
pm
2854
5
2854
2854
5
2854
2854
5
2854
</TEXT>
</DOC>
<DOC>
<DOCNO>2855</DOCNO>
<TEXT>
an
efficient
list
moving
algorithm
using
constant
workspace
an
efficient
algorithm
is
presented
for
moving
arbitrary
list
structures
using
no
storage
apart
from
program
variables
other
than
that
required
to
hold
the
original
list
and
the
copy
the
original
list
is
destroyed
as
it
is
moved
no
mark
bits
are
necessary
but
pointers
to
the
copy
must
be
distinguishable
from
pointers
to
the
original
the
algorithm
is
superior
in
execution
speed
to
previous
algorithms
for
the
same
problem
some
variations
and
extensions
of
the
algorithm
are
discussed
cacm
june
1976
clark
d
w
list
moving
list
copying
lisp
space
complexity
constant
workspace
4
34
4
49
5
25
ca760607
jb
january
4
1978
1
43
pm
1024
4
2855
1051
4
2855
1102
4
2855
1132
4
2855
1390
4
2855
1486
4
2855
1549
4
2855
1706
4
2855
1826
4
2855
1869
4
2855
1878
4
2855
1972
4
2855
378
4
2855
2060
4
2855
2155
4
2855
2156
4
2855
2156
4
2855
2168
4
2855
2168
4
2855
2361
4
2855
2438
4
2855
2513
4
2855
2513
4
2855
2665
4
2855
2719
4
2855
2723
4
2855
2723
4
2855
2723
4
2855
2736
4
2855
2736
4
2855
2833
4
2855
2838
4
2855
2842
4
2855
2855
4
2855
2855
4
2855
2855
4
2855
2855
4
2855
2855
4
2855
2855
4
2855
2855
4
2855
2855
4
2855
2879
4
2855
2944
4
2855
2944
4
2855
2954
4
2855
3074
4
2855
3074
4
2855
3077
4
2855
3080
4
2855
3106
4
2855
3106
4
2855
3106
4
2855
3106
4
2855
3106
4
2855
3112
4
2855
3112
4
2855
3112
4
2855
627
4
2855
106
4
2855
210
5
2855
1549
5
2855
1826
5
2855
1972
5
2855
2513
5
2855
2766
5
2855
2833
5
2855
2855
5
2855
2855
5
2855
2855
5
2855
2998
5
2855
3106
5
2855
1549
6
2855
210
6
2855
1972
6
2855
2665
6
2855
2766
6
2855
2855
6
2855
2954
6
2855
2998
6
2855
</TEXT>
</DOC>
<DOC>
<DOCNO>2856</DOCNO>
<TEXT>
the
synthetic
approach
to
decision
table
conversion
previous
approaches
to
the
problem
of
automatically
converting
decision
tables
to
computer
programs
have
been
based
on
decomposition
at
any
stage
one
condition
is
selected
for
testing
and
two
smaller
problems
decision
tables
with
one
less
condition
are
created
an
optimal
program
with
respect
to
average
execution
time
or
storage
space
for
example
is
located
only
through
implicit
enumeration
of
all
possible
decision
trees
using
a
technique
such
as
branch
and
bound
the
new
approach
described
in
this
paper
uses
dynamic
programming
to
synthesize
an
optimal
decision
tree
from
which
a
program
can
be
created
using
this
approach
the
efficiency
of
creating
an
optimal
program
is
increased
substantially
permitting
generation
of
optimal
programs
for
decision
tables
with
as
many
as
ten
to
twelve
conditions
cacm
june
1976
schumacher
h
sevcik
k
c
decision
tables
decision
trees
dynamic
programming
optimal
programs
3
50
4
12
5
30
8
3
ca760606
jb
january
4
1978
1
50
pm
1354
4
2856
1354
4
2856
1488
4
2856
1684
4
2856
2053
4
2856
2053
4
2856
2053
4
2856
2220
4
2856
2220
4
2856
2220
4
2856
2221
4
2856
2273
4
2856
2273
4
2856
2273
4
2856
2273
4
2856
2273
4
2856
2453
4
2856
2453
4
2856
2453
4
2856
2453
4
2856
2517
4
2856
2598
4
2856
2598
4
2856
2598
4
2856
2726
4
2856
2726
4
2856
2726
4
2856
2726
4
2856
2845
4
2856
2856
4
2856
2856
4
2856
2856
4
2856
2856
4
2856
2856
4
2856
2856
4
2856
2856
4
2856
3034
4
2856
3113
4
2856
3113
4
2856
1172
5
2856
1327
5
2856
1354
5
2856
2053
5
2856
2220
5
2856
2453
5
2856
2598
5
2856
2856
5
2856
2856
5
2856
2856
5
2856
3033
5
2856
3113
5
2856
1354
6
2856
2263
6
2856
2598
6
2856
2691
6
2856
2856
6
2856
2856
6
2856
</TEXT>
</DOC>
<DOC>
<DOCNO>2857</DOCNO>
<TEXT>
referencing
lists
by
an
edge
an
edge
reference
into
a
list
structure
is
a
pair
of
pointers
to
adjacent
nodes
such
a
reference
often
requires
little
additional
space
but
its
use
can
yield
efficient
algorithms
for
instance
a
circular
link
between
the
ends
of
a
list
is
redundant
if
the
list
is
always
referenced
by
that
edge
and
list
traversal
is
easier
when
that
link
is
null
edge
references
also
allow
threading
of
nonrecursive
lists
can
replace
some
header
cells
and
enhance
the
famous
exclusive
or
trick
to
double
link
lists
cacm
june
1976
wise
d
s
list
processing
circular
doubly
linked
overlapping
sublist
header
cell
pointer
cursor
3
73
4
10
4
22
ca760605
jb
january
4
1978
2
00
pm
1024
4
2857
1051
4
2857
1098
4
2857
1214
4
2857
1380
4
2857
1388
4
2857
1393
4
2857
1396
4
2857
1485
4
2857
1487
4
2857
1549
4
2857
1570
4
2857
1878
4
2857
1946
4
2857
1946
4
2857
1957
4
2857
2167
4
2857
2168
4
2857
2723
4
2857
2857
4
2857
2857
4
2857
3112
4
2857
1393
5
2857
2857
5
2857
2857
5
2857
2857
5
2857
731
5
2857
</TEXT>
</DOC>
<DOC>
<DOCNO>2858</DOCNO>
<TEXT>
a
process
for
the
determination
of
addresses
in
variable
length
addressing
an
algorithm
is
presented
for
the
assignment
of
instruction
addresses
and
formats
under
the
following
conditions
1
the
length
of
the
instruction
varies
as
a
function
of
the
distance
of
the
instruction
from
its
target
2
there
exists
an
optimality
criterion
which
implies
some
preferential
choices
subject
to
the
addressing
constraints
this
may
be
for
example
achieving
the
smallest
number
of
long
instructions
in
which
case
the
total
code
length
is
minimized
or
minimizing
the
assigned
address
of
a
specified
point
in
the
program
the
algorithm
is
suitable
for
arbitrary
program
structure
and
a
choice
of
optimization
criteria
cacm
june
1976
frieder
g
saal
h
j
variable
length
addressing
assembler
paging
4
11
4
12
ca760604
jb
january
4
1978
2
09
pm
2858
4
2858
3110
4
2858
2194
5
2858
2858
5
2858
2858
5
2858
2858
5
2858
3110
5
2858
2194
6
2858
2629
6
2858
2858
6
2858
</TEXT>
</DOC>
<DOC>
<DOCNO>2859</DOCNO>
<TEXT>
interference
in
multiprocessor
computer
systems
with
interleaved
memory
this
paper
analyzes
the
memory
interference
caused
by
several
processors
simultaneously
using
several
memory
modules
exect
results
are
computed
for
a
simple
model
of
such
a
system
the
limiting
value
is
derived
for
the
relative
degree
of
memory
interference
as
the
system
size
increases
the
model
of
the
limiting
behavior
of
the
system
yields
approximate
results
for
the
simple
model
and
also
suggests
that
the
results
are
valid
for
a
much
larger
class
of
models
including
those
more
nearly
like
real
systems
that
the
simple
model
are
tested
against
some
measurements
of
program
behavior
and
simulations
of
systems
using
memory
references
from
real
programs
the
model
results
provide
a
good
indication
of
the
performance
that
should
be
expected
from
real
system
of
this
type
cacm
june
1976
baskett
f
smith
a
j
memory
memory
interference
multiprocessing
interleaved
memory
trace
driven
simulation
4
32
6
21
6
34
8
1
ca760603
jb
january
4
1978
2
19
pm
1668
4
2859
1669
4
2859
1679
4
2859
1728
4
2859
2859
4
2859
2859
4
2859
1525
5
2859
1676
5
2859
2859
5
2859
2859
5
2859
2859
5
2859
2918
5
2859
3119
5
2859
2245
6
2859
2798
6
2859
2849
6
2859
2859
6
2859
2859
6
2859
</TEXT>
</DOC>
<DOC>
<DOCNO>2860</DOCNO>
<TEXT>
a
practitioner
guide
to
addressing
algorithms
this
paper
consolidates
a
number
of
popular
rules
of
thumb
which
have
been
suggested
for
the
design
of
record
addressing
algorithms
and
discusses
the
applicability
of
these
rules
to
large
commercial
databases
guidelines
for
selecting
identifier
transformations
overflow
techniques
loading
factors
bucket
sizes
and
loading
order
and
considered
particular
attention
is
focused
on
the
reasonableness
of
common
heuristics
for
determining
primary
or
secondary
bucket
sizes
a
mathematical
model
which
explicitly
considers
storage
device
characteristics
and
time
space
cost
tradeoffs
is
used
to
analyze
the
effect
of
design
parameters
on
overall
system
costs
a
specific
design
example
is
presented
and
solved
cacm
june
1976
severance
d
duhne
r
data
management
file
retrieval
searching
addressing
techniques
hashing
functions
synonym
resolution
loading
factor
bucket
size
heuristic
design
rules
of
thumb
3
50
3
72
3
74
4
33
4
34
4
41
8
1
ca760602
jb
january
4
1978
2
47
pm
1785
4
2860
2203
4
2860
2258
4
2860
2282
4
2860
2319
4
2860
2313
4
2860
2359
4
2860
2437
4
2860
2552
4
2860
2781
4
2860
2860
4
2860
2860
4
2860
2860
4
2860
2991
4
2860
3083
4
2860
911
4
2860
1328
5
2860
2203
5
2860
2860
5
2860
2860
5
2860
2860
5
2860
492
5
2860
</TEXT>
</DOC>
<DOC>
<DOCNO>2861</DOCNO>
<TEXT>
production
and
employment
of
ph
s
in
computer
science
cacm
june
1976
taulbee
o
e
conte
s
d
ca760601
jb
january
4
1978
2
51
pm
2861
5
2861
2861
5
2861
2861
5
2861
2962
5
2861
3123
5
2861
3122
5
2861
2823
6
2861
2861
6
2861
2861
6
2861
2861
6
2861
2962
6
2861
2962
6
2861
3022
6
2861
</TEXT>
</DOC>
<DOC>
<DOCNO>2862</DOCNO>
<TEXT>
analysis
of
the
pff
replacement
algorithm
via
a
semi
markov
model
an
analytical
model
is
presented
to
estimate
the
performance
of
the
page
fault
frequency
pff
replacement
algorithm
in
this
model
program
behavior
is
represented
by
the
lru
stack
distance
model
and
the
pff
replacement
algorithm
is
represented
by
a
semi
markov
model
using
these
models
such
parameters
as
the
inter
page
fault
interval
distribution
the
probability
of
the
number
of
distinct
pages
being
referenced
during
an
inter
page
fault
interval
etc
are
able
to
be
analytically
determined
using
these
models
to
evaluate
these
parameter
values
permits
study
of
the
performance
of
the
replacement
algorithm
by
simulating
the
page
fault
events
rather
than
every
page
reference
event
this
significantly
reduces
the
required
computation
time
in
estimating
the
performance
of
the
pff
algorithm
cacm
may
1976
chu
w
w
opderbeck
h
pff
replacement
algorithm
semi
markov
model
simulation
of
replacement
algorithm
4
31
4
32
ca760509
jb
january
4
1978
2
59
pm
1892
4
2862
1924
4
2862
2095
4
2862
2218
4
2862
2297
4
2862
2374
4
2862
2526
4
2862
2667
4
2862
2668
4
2862
2862
4
2862
2863
4
2862
1728
5
2862
2862
5
2862
2862
5
2862
2862
5
2862
</TEXT>
</DOC>
<DOC>
<DOCNO>2863</DOCNO>
<TEXT>
vmin
an
optimal
variable
space
page
replacement
algorithm
a
criterion
for
comparing
variable
space
page
replacement
algorithms
is
presented
an
optimum
page
replacement
algorithm
called
vmin
is
described
and
shown
to
be
optimum
with
respect
to
this
criterion
the
results
of
simulating
vmin
denning
working
set
and
the
page
partitioning
replacement
algorithms
on
five
virtual
memory
programs
are
presented
to
demonstrate
the
improvement
possible
over
the
known
realizable
variable
space
algorithms
cacm
may
1976
prieve
b
g
fabry
r
s
demand
paging
performance
measurement
multilevel
memory
systems
virtual
memory
working
set
page
replacement
algorithms
optimal
page
replacement
4
30
4
32
ca760508
jb
january
4
1978
3
06
pm
1892
4
2863
1892
4
2863
1901
4
2863
1924
4
2863
2085
4
2863
2095
4
2863
2095
4
2863
2218
4
2863
2218
4
2863
2277
4
2863
2297
4
2863
2319
4
2863
2329
4
2863
2358
4
2863
2373
4
2863
2374
4
2863
2374
4
2863
2380
4
2863
2434
4
2863
2499
4
2863
2481
4
2863
2501
4
2863
2526
4
2863
2582
4
2863
2667
4
2863
2668
4
2863
2669
4
2863
2669
4
2863
2828
4
2863
2862
4
2863
2863
4
2863
2863
4
2863
2863
4
2863
2863
4
2863
2881
4
2863
2928
4
2863
2996
4
2863
3006
4
2863
3016
4
2863
3052
4
2863
3067
4
2863
3067
4
2863
1728
5
2863
1751
5
2863
1901
5
2863
2863
5
2863
2863
5
2863
2863
5
2863
2863
5
2863
3067
5
2863
1728
6
2863
1751
6
2863
1751
6
2863
1901
6
2863
2374
6
2863
2373
6
2863
2595
6
2863
2682
6
2863
2863
6
2863
2863
6
2863
2864
6
2863
3006
6
2863
</TEXT>
</DOC>
<DOC>
<DOCNO>2864</DOCNO>
<TEXT>
characteristics
of
program
localities
the
term
locality
has
been
used
to
denote
that
subset
of
a
program
segments
which
are
referenced
during
a
particular
phase
of
its
execution
a
program
behavior
can
be
characterized
in
terms
of
its
residence
in
localities
of
various
sizes
and
lifetimes
and
the
transitions
between
these
localities
in
this
paper
the
concept
of
a
locality
is
made
more
explicit
through
a
formal
definition
of
what
constitutes
a
phase
of
localized
reference
behavior
and
by
a
corresponding
mechanism
for
the
detection
of
localities
in
actual
reference
strings
this
definition
provides
for
the
existence
of
a
hierarchy
of
localities
at
any
given
time
and
the
reasonableness
of
the
definition
is
supported
by
examples
taken
from
actual
programs
empirical
data
from
a
sample
of
production
algol
60
programs
is
used
to
display
distributions
of
locality
sizes
and
lifetimes
and
these
results
are
discussed
in
terms
of
their
implications
for
the
modeling
of
program
behavior
and
memory
management
in
virtual
memory
systems
cacm
may
1976
madison
a
w
batson
a
p
program
behavior
memory
management
locality
4
22
4
35
4
6
4
9
6
21
ca760507
jb
january
4
1978
3
15
pm
2864
5
2864
2864
5
2864
2864
5
2864
3000
5
2864
3067
5
2864
1751
6
2864
1879
6
2864
2095
6
2864
2374
6
2864
2373
6
2864
2595
6
2864
2682
6
2864
2863
6
2864
2864
6
2864
2864
6
2864
3006
6
2864
</TEXT>
</DOC>
<DOC>
<DOCNO>2865</DOCNO>
<TEXT>
verifying
properties
of
parallel
programs
an
axiomatic
approach
an
axiomatic
method
for
proving
a
number
of
properties
of
parallel
programs
is
presented
hoare
has
given
a
set
of
axioms
for
partial
correctness
but
they
are
not
strong
enough
in
most
cases
this
paper
defines
a
more
powerful
deductive
system
which
is
in
some
sense
complete
for
partial
correctness
a
crucial
axiom
provides
for
the
use
of
auxiliary
variables
which
are
added
to
a
parallel
program
as
an
aid
to
proving
it
correct
the
information
in
a
partial
correctness
proof
can
be
used
to
prove
such
properties
as
mutual
exclusion
freedom
from
deadlock
and
program
termination
techniques
for
verifying
these
properties
are
presented
and
illustrated
by
application
to
the
dining
philosophers
problem
cacm
may
1976
owicki
s
gries
d
structured
multiprogramming
correctness
proofs
program
verification
concurrent
processes
synchronization
mutual
exclusion
deadlock
4
32
4
35
5
21
5
24
ca760506
jb
january
4
1978
3
23
pm
2021
4
2865
2222
4
2865
2227
4
2865
2315
4
2865
2326
4
2865
2470
4
2865
2732
4
2865
2865
4
2865
2865
4
2865
2866
4
2865
2896
4
2865
2898
4
2865
2943
4
2865
2972
4
2865
3014
4
2865
3043
4
2865
3068
4
2865
3077
4
2865
3128
4
2865
3143
4
2865
3144
4
2865
1834
5
2865
2597
5
2865
2865
5
2865
2865
5
2865
2865
5
2865
3128
5
2865
3148
5
2865
1860
6
2865
2150
6
2865
2376
6
2865
2436
6
2865
2597
6
2865
2817
6
2865
2865
6
2865
2865
6
2865
2866
6
2865
2870
6
2865
2912
6
2865
2939
6
2865
3073
6
2865
3082
6
2865
</TEXT>
</DOC>
<DOC>
<DOCNO>2866</DOCNO>
<TEXT>
proving
monitors
interesting
scheduling
and
sequential
properties
of
monitors
can
be
proved
by
using
state
variables
which
record
the
monitor
history
and
by
defining
extended
proof
rules
for
their
wait
and
signal
operations
these
two
techniques
are
defined
discussed
and
applied
to
examples
to
prove
properties
such
as
freedom
from
indefinitely
repeated
overtaking
or
unnecessary
waiting
upper
bounds
on
queue
lengths
and
historical
behavior
cacm
may
1976
howard
j
monitors
correctness
proof
rules
historical
variables
concurrency
scheduling
bounded
buffer
semaphores
alarm
clock
disk
head
4
32
4
35
5
24
ca760505
jb
january
4
1978
3
28
pm
2704
4
2866
2738
4
2866
2865
4
2866
2866
4
2866
2866
4
2866
2866
4
2866
2869
4
2866
2898
4
2866
2941
4
2866
2958
4
2866
2972
4
2866
3004
4
2866
3030
4
2866
3043
4
2866
3128
4
2866
3144
4
2866
2356
5
2866
2597
5
2866
2796
5
2866
2866
5
2866
2866
5
2866
2866
5
2866
2938
5
2866
2946
5
2866
3128
5
2866
2150
6
2866
2150
6
2866
2376
6
2866
2436
6
2866
2597
6
2866
2865
6
2866
2866
6
2866
2866
6
2866
2866
6
2866
2870
6
2866
2912
6
2866
3082
6
2866
</TEXT>
</DOC>
<DOC>
<DOCNO>2867</DOCNO>
<TEXT>
modularization
and
hierarchy
in
a
family
of
operating
systems
this
paper
describes
the
design
philosophy
used
in
the
construction
of
a
family
of
operating
systems
it
is
shown
that
the
concepts
of
module
and
level
do
not
coincide
in
a
hierarchy
of
functions
family
members
can
share
much
software
as
a
result
of
the
implementation
of
run
time
modules
at
the
lowest
system
level
cacm
may
1976
habermann
a
n
flon
l
cooprider
l
incremental
machine
design
module
data
type
address
space
virtual
memory
4
0
4
30
4
35
ca760504
jb
january
4
1978
3
33
pm
1828
4
2867
1854
4
2867
1877
4
2867
1960
4
2867
2150
4
2867
2317
4
2867
2319
4
2867
2377
4
2867
2342
4
2867
2376
4
2867
2379
4
2867
2424
4
2867
2482
4
2867
2480
4
2867
2618
4
2867
2632
4
2867
2704
4
2867
2704
4
2867
2723
4
2867
2738
4
2867
2738
4
2867
2740
4
2867
2741
4
2867
2867
4
2867
2867
4
2867
2867
4
2867
3004
4
2867
3030
4
2867
3155
4
2867
3184
4
2867
1749
5
2867
2247
5
2867
2379
5
2867
2867
5
2867
2867
5
2867
2867
5
2867
</TEXT>
</DOC>
<DOC>
<DOCNO>2868</DOCNO>
<TEXT>
reflections
on
an
operating
system
design
the
main
features
of
a
general
purpose
multiaccess
operating
system
developed
for
the
cdc
6400
at
berkeley
are
presented
and
its
good
and
bad
points
are
discussed
as
they
appear
in
retrospect
distinctive
features
of
the
design
were
the
use
of
capabilities
for
protection
and
the
organization
of
the
system
into
a
sequence
of
layers
each
building
on
the
facilities
provided
by
earlier
ones
and
protecting
itself
from
the
malfunctions
of
later
ones
there
were
serious
problems
in
maintaining
the
protection
between
layers
when
levels
were
added
to
the
memory
hierarchy
these
problems
are
discussed
and
a
new
solution
is
described
cacm
may
1976
lampson
b
w
sturgis
h
e
operating
system
protection
capabilities
layering
domains
memory
hierarchy
faults
4
35
ca760503
jb
january
4
1978
3
57
pm
2319
4
2868
2378
4
2868
2320
4
2868
2436
4
2868
2626
4
2868
2626
4
2868
2629
4
2868
2632
4
2868
2738
4
2868
2740
4
2868
2868
4
2868
2868
4
2868
2868
4
2868
2868
4
2868
2868
4
2868
2868
4
2868
2870
4
2868
2870
4
2868
2876
4
2868
2928
4
2868
2939
4
2868
2941
4
2868
2951
4
2868
3105
4
2868
3105
4
2868
3127
4
2868
3144
4
2868
3144
4
2868
2080
5
2868
2377
5
2868
2380
5
2868
2558
5
2868
2625
5
2868
2632
5
2868
2868
5
2868
2868
5
2868
2868
5
2868
3105
5
2868
1471
6
2868
2625
6
2868
2632
6
2868
2868
6
2868
2939
6
2868
3068
6
2868
</TEXT>
</DOC>
<DOC>
<DOCNO>2869</DOCNO>
<TEXT>
security
kernel
validation
in
practice
a
security
kernel
is
a
software
and
hardware
mechanism
that
enforces
access
controls
within
a
computer
system
the
correctness
of
a
security
kernel
on
a
pdp
11
45
is
being
proved
this
paper
describes
the
technique
used
to
carry
out
the
first
step
of
the
proof
validating
a
formal
specification
of
the
program
with
respect
to
a
axioms
for
a
secure
system
cacm
may
1976
millen
j
k
validation
verification
correctness
security
kernel
formal
specification
protection
4
35
4
6
5
24
ca760502
jb
january
4
1978
4
01
pm
2704
4
2869
2738
4
2869
2840
4
2869
2866
4
2869
2869
4
2869
2869
4
2869
2941
4
2869
2958
4
2869
3004
4
2869
3030
4
2869
3128
4
2869
3158
4
2869
2356
5
2869
2436
5
2869
2869
5
2869
2869
5
2869
2869
5
2869
3068
5
2869
1834
6
2869
2869
6
2869
</TEXT>
</DOC>
<DOC>
<DOCNO>2870</DOCNO>
<TEXT>
a
lattice
model
of
secure
information
flow
this
paper
investigates
mechanisms
that
guarantee
secure
information
flow
in
a
computer
system
these
mechanisms
are
examined
within
a
mathematical
framework
suitable
for
formulating
the
requirements
of
secure
information
flow
among
security
classes
the
central
component
of
the
model
is
a
lattice
structure
derived
from
the
security
classes
and
justified
by
the
semantics
of
information
flow
the
lattice
properties
permit
concise
formulations
of
the
security
requirements
of
different
existing
systems
and
facilitate
the
construction
of
mechanisms
that
enforce
security
the
model
provides
a
unifying
view
of
all
systems
that
restrict
information
flow
enables
a
classification
of
them
according
to
security
objectives
and
suggests
some
new
approaches
it
also
leads
to
the
construction
of
automatic
program
certification
mechanisms
for
verifying
the
secure
flow
of
information
through
a
program
cacm
may
1976
denning
d
e
protection
security
information
flow
security
class
lattice
program
certification
4
35
ca760501
jb
january
4
1978
4
10
pm
2436
4
2870
2626
4
2870
2868
4
2870
2868
4
2870
2870
4
2870
2870
4
2870
2870
4
2870
2876
4
2870
3105
4
2870
3144
4
2870
953
5
2870
2377
5
2870
2632
5
2870
2870
5
2870
2870
5
2870
2870
5
2870
2945
5
2870
3128
5
2870
1947
6
2870
2150
6
2870
2376
6
2870
2436
6
2870
2597
6
2870
2704
6
2870
2865
6
2870
2866
6
2870
2870
6
2870
2870
6
2870
2912
6
2870
3082
6
2870
</TEXT>
</DOC>
<DOC>
<DOCNO>2871</DOCNO>
<TEXT>
logical
analysis
of
programs
most
present
systems
for
verification
of
computer
programs
are
incomplete
in
that
intermediate
inductive
assertions
must
be
provided
manually
by
the
user
termination
is
not
proven
and
incorrect
programs
are
not
treated
as
a
unified
solution
to
these
problems
this
paper
suggests
conducting
a
logical
analysis
of
programs
by
using
invariants
which
express
what
is
actually
occurring
in
the
program
the
first
part
of
the
paper
is
devoted
to
techniques
for
the
automatic
generation
of
invariants
the
second
part
provides
criteria
for
using
the
invariants
to
check
simultaneously
for
correctness
including
termination
or
incorrectness
a
third
part
examines
the
implications
of
the
approach
for
the
automatic
diagnosis
and
correction
of
logical
errors
cacm
april
1976
katz
s
manna
z
logical
analysis
invariants
program
verification
correctness
incorrectness
termination
automatic
debugging
3
66
4
42
5
24
ca760405
jb
january
4
1978
4
15
pm
2871
5
2871
2871
5
2871
2871
5
2871
2874
5
2871
1682
6
2871
2227
6
2871
2317
6
2871
2683
6
2871
2871
6
2871
521
6
2871
</TEXT>
</DOC>
<DOC>
<DOCNO>2872</DOCNO>
<TEXT>
a
counterintuitive
example
of
computer
paging
corrigendum
cacm
april
1976
fagin
r
ca760404
jb
january
4
1978
4
19
pm
2872
5
2872
2872
5
2872
2872
5
2872
</TEXT>
</DOC>
<DOC>
<DOCNO>2873</DOCNO>
<TEXT>
lg
a
language
for
analytic
geometry
a
conversational
programming
language
for
analytic
geometry
is
described
together
with
some
aspects
of
its
implementation
the
language
allows
the
flexible
definition
of
geometric
objects
and
elements
computes
their
parameters
and
displays
the
results
it
also
provides
the
capability
of
specifying
a
geometric
figure
via
a
collection
of
parameters
and
displaying
various
loci
corresponding
to
these
parameters
a
third
characteristic
consists
of
the
possibility
of
using
this
language
to
design
other
user
oriented
languages
lg
has
been
specifically
designed
for
use
by
nonprogrammers
it
is
easy
to
learn
and
very
close
to
the
natural
language
used
in
geometry
cacm
april
1976
raymond
j
interactive
programming
problem
oriented
languages
computer
graphics
interpreters
analytic
geometry
3
20
4
13
4
22
4
9
ca760403
jb
january
4
1978
4
26
pm
2873
5
2873
2873
5
2873
2873
5
2873
</TEXT>
</DOC>
<DOC>
<DOCNO>2874</DOCNO>
<TEXT>
a
comparative
evaluation
of
versions
of
basic
from
its
inception
the
basic
language
has
grown
in
terms
of
its
usage
scope
of
usage
and
its
features
this
article
compares
ten
of
the
current
versions
of
basic
with
each
other
with
two
earlier
versions
and
with
the
proposed
standard
for
minimal
basic
the
comparison
is
arranged
by
the
features
of
the
versions
and
by
computational
comparison
of
computation
and
times
and
processing
costs
cacm
april
1976
lientz
b
p
basic
interpretive
language
summary
4
20
4
6
ca760402
jb
january
4
1978
4
34
pm
2044
4
2874
2189
4
2874
2356
4
2874
2417
4
2874
2420
4
2874
2505
4
2874
2874
4
2874
2874
4
2874
2874
4
2874
2874
4
2874
2874
4
2874
2874
4
2874
2908
4
2874
3104
4
2874
3143
4
2874
1682
5
2874
2227
5
2874
2317
5
2874
2683
5
2874
2871
5
2874
2874
5
2874
2874
5
2874
2874
5
2874
521
5
2874
</TEXT>
</DOC>
<DOC>
<DOCNO>2875</DOCNO>
<TEXT>
development
of
an
international
system
for
legal
protection
of
computer
programs
cacm
april
1976
smoot
o
r
copyright
of
software
patenting
of
software
legal
protection
of
software
2
3
4
5
ca760401
jb
january
4
1978
4
42
pm
2875
5
2875
2875
5
2875
2875
5
2875
</TEXT>
</DOC>
<DOC>
<DOCNO>2876</DOCNO>
<TEXT>
intentional
resolution
of
privacy
protection
in
database
systems
traditionally
privacy
protection
in
database
systems
is
understood
to
be
the
control
over
what
information
a
given
user
can
get
from
a
database
this
paper
is
concerned
with
another
independent
dimension
of
privacy
protection
the
control
over
what
a
user
is
allowed
to
do
with
a
piece
of
information
supplied
to
him
by
the
database
the
ability
to
condition
the
supply
of
information
on
its
intended
use
is
called
here
intentional
resolution
of
privacy
protection
the
practical
importance
of
intentional
resolution
is
demonstrated
by
several
examples
and
its
realization
is
discussed
it
is
shown
that
intentional
resolution
can
be
achieved
but
that
it
involves
a
radical
change
from
the
traditional
approach
to
the
process
of
user
database
interaction
in
particular
it
appears
to
be
necessary
for
the
database
to
impose
a
certain
amount
of
control
over
the
internal
behavior
of
users
programs
which
interact
with
it
a
model
for
user
database
interaction
which
admits
such
a
control
is
developed
cacm
march
1976
minsky
n
protection
in
database
protection
in
programming
languages
privacy
security
intentional
resolution
of
privacy
interaction
with
databases
3
50
3
70
4
20
4
30
ca760304
jb
january
4
1978
4
44
pm
2785
4
2876
2868
4
2876
2870
4
2876
2876
4
2876
2876
4
2876
3105
4
2876
3144
4
2876
2632
5
2876
2685
5
2876
2876
5
2876
2876
5
2876
2876
5
2876
</TEXT>
</DOC>
<DOC>
<DOCNO>2877</DOCNO>
<TEXT>
a
program
data
flow
analysis
procedure
the
global
data
relationships
in
a
program
can
be
exposed
and
codified
by
the
static
analysis
methods
described
in
this
paper
a
procedure
is
given
which
determines
all
the
definitions
which
can
possibly
reach
each
node
of
the
control
flow
graph
of
the
program
and
all
the
definitions
that
are
live
on
each
edge
of
the
graph
the
procedure
uses
an
interval
ordered
edge
listing
data
structure
and
handles
reducible
and
irreducible
graphs
indistinguishably
cacm
march
1976
allen
j
e
cocke
j
program
optimization
data
flow
analysis
flow
graphs
algorithms
compilers
4
12
5
24
ca760303
jb
january
5
1978
8
33
am
2877
5
2877
2877
5
2877
2877
5
2877
3103
5
2877
1860
6
2877
2877
6
2877
</TEXT>
</DOC>
<DOC>
<DOCNO>2878</DOCNO>
<TEXT>
joining
policies
in
a
multipriority
multiclass
batch
computer
system
consider
a
multipriority
batch
computer
system
which
users
from
several
different
classes
may
join
its
toll
service
and
waiting
charges
such
a
system
is
formulated
here
as
a
semi
markov
decision
process
in
which
the
aim
of
arriving
users
is
to
minimize
their
expected
loss
the
optimal
joining
policy
is
one
of
arriving
users
who
may
join
the
system
at
some
of
its
queues
is
a
control
limit
policy
with
a
single
control
number
for
any
possible
queue
and
the
user
class
a
newly
arriving
user
will
join
a
queue
that
is
not
filled
up
to
the
control
number
corresponding
to
this
queue
and
the
user
class
in
this
paper
control
numbers
as
well
as
lower
and
upper
bounds
for
the
control
numbers
and
the
capacities
of
the
system
queues
are
derived
cacm
march
1976
babad
j
m
modiano
m
m
priority
queues
semi
markov
process
price
scheduling
operating
system
4
39
8
3
ca760302
dmm
january
9
1978
2
14
pm
2878
5
2878
2878
5
2878
2878
5
2878
</TEXT>
</DOC>
<DOC>
<DOCNO>2879</DOCNO>
<TEXT>
computer
science
as
empirical
inquiry
symbols
and
search
cacm
march
1976
newell
a
simon
h
a
symbols
search
science
computer
science
empirical
turing
artificial
intelligence
intelligence
list
processing
cognition
heuristics
problem
solving
1
0
2
1
3
3
3
6
5
7
ca760301
jb
january
5
1978
8
39
am
1024
4
2879
1051
4
2879
1102
4
2879
1132
4
2879
1390
4
2879
1486
4
2879
1549
4
2879
1706
4
2879
1826
4
2879
1878
4
2879
378
4
2879
2060
4
2879
2155
4
2879
2168
4
2879
2719
4
2879
2723
4
2879
2838
4
2879
2842
4
2879
2855
4
2879
2879
4
2879
3077
4
2879
3080
4
2879
3106
4
2879
627
4
2879
106
4
2879
210
5
2879
2879
5
2879
2879
5
2879
2879
5
2879
</TEXT>
</DOC>
<DOC>
<DOCNO>2880</DOCNO>
<TEXT>
a
fast
division
technique
for
constant
divisors
a
fast
algorithm
for
division
by
constant
divisors
is
presented
the
method
has
proved
very
useful
implemented
as
microcode
ona
binary
machine
and
can
be
adapted
directly
into
hardware
the
mathematical
foundations
of
the
algorithm
are
presented
as
well
as
some
performance
measures
cacm
february
1976
artzy
e
hinds
j
a
saal
h
j
constant
divisors
division
algorithms
bit
addressable
memory
microprogram
4
13
4
49
6
32
ca760207
jb
january
5
1978
8
48
am
2880
5
2880
2880
5
2880
2880
5
2880
</TEXT>
</DOC>
<DOC>
<DOCNO>2881</DOCNO>
<TEXT>
a
counterintuitive
example
of
computer
paging
a
counterexample
is
exhibited
to
a
natural
conjecture
concerning
the
optimal
way
to
group
records
into
pages
in
the
independent
reference
model
of
computer
paging
an
organization
is
said
to
be
optimal
if
the
least
recently
used
miss
ratio
is
minimized
cacm
february
1976
fagin
r
least
recently
used
most
likely
together
independent
reference
model
storage
organization
record
allocation
3
70
3
73
4
0
5
30
ca760206
jb
january
5
1978
8
53
am
1892
4
2881
1901
4
2881
2085
4
2881
2095
4
2881
2218
4
2881
2277
4
2881
2319
4
2881
2329
4
2881
2358
4
2881
2373
4
2881
2380
4
2881
2434
4
2881
2499
4
2881
2501
4
2881
2582
4
2881
2669
4
2881
2828
4
2881
2863
4
2881
2881
4
2881
2928
4
2881
2996
4
2881
3006
4
2881
3067
4
2881
1751
5
2881
2881
5
2881
2881
5
2881
2881
5
2881
</TEXT>
</DOC>
<DOC>
<DOCNO>2882</DOCNO>
<TEXT>
a
stochastic
evaluation
model
for
database
organization
in
data
retrieval
systems
experimental
work
in
the
valuation
of
large
scale
data
retrieval
systems
has
been
scarce
due
to
its
difficulty
and
prohibitive
cost
this
paper
discusses
a
simulation
model
of
a
data
retrieval
system
which
has
the
effect
of
significantly
reducing
the
cost
of
experimentation
and
enabling
research
never
attempted
before
the
model
is
designed
to
estimate
the
retrieval
workload
of
alternative
data
retrieval
systems
these
data
retrieval
systems
can
be
organized
under
several
database
organizations
including
inverted
list
threaded
list
and
cellular
list
organizations
and
hybrid
combinations
of
these
systems
effectiveness
of
the
methodology
is
demonstrated
by
using
the
model
to
study
the
effect
of
database
organizations
in
data
retrieval
systems
in
particular
the
impact
of
query
complexity
is
analyzed
cacm
february
1976
siler
k
f
database
architecture
database
performance
and
evaluation
invented
list
threaded
list
cellular
list
information
retrieval
database
organizations
query
complexity
stochastic
model
monte
carlo
simulation
3
70
3
71
3
72
3
73
3
74
3
79
ca760205
jb
january
5
1978
9
20
am
1050
4
2882
1549
4
2882
2452
4
2882
2723
4
2882
2765
4
2882
2882
4
2882
2882
4
2882
2882
4
2882
731
4
2882
793
4
2882
2198
5
2882
2452
5
2882
2882
5
2882
2882
5
2882
2882
5
2882
2976
5
2882
627
5
2882
2688
6
2882
2765
6
2882
2882
6
2882
</TEXT>
</DOC>
<DOC>
<DOCNO>2883</DOCNO>
<TEXT>
an
application
of
heuristic
search
methods
to
edge
and
contour
detection
this
paper
presents
a
method
for
detecting
edges
and
contours
in
noisy
pictures
the
properties
of
an
edge
are
embedded
in
a
figure
of
merit
and
the
edge
detection
problem
becomes
the
problem
of
minimizing
the
given
figure
of
merit
this
problem
can
be
represented
as
a
shortest
path
problem
on
a
graph
and
can
be
solved
using
well
known
graph
search
algorithms
the
relations
between
this
representation
of
the
minimization
problem
and
a
dynamic
programming
approach
are
discussed
showing
that
the
graph
search
method
can
lead
to
substantial
improvements
in
computing
time
moreover
if
heuristic
search
methods
are
used
the
computing
time
will
depend
on
the
amount
of
noise
in
the
picture
some
experimental
results
are
given
these
show
how
various
information
about
the
shape
of
the
contour
of
an
object
can
be
embedded
in
the
figure
of
merit
thus
allowing
the
extraction
of
contours
from
noisy
picture
and
the
separation
of
touching
objects
cacm
february
1976
martelli
a
picture
processing
pattern
recognition
edge
detection
contour
detection
contour
following
optimization
problems
dynamic
programming
shortest
path
heuristic
search
methods
problem
solving
methods
3
63
3
64
3
66
5
42
ca760204
jb
january
5
1978
9
30
am
2883
4
2883
2195
5
2883
2883
5
2883
2883
5
2883
2883
5
2883
</TEXT>
</DOC>
<DOC>
<DOCNO>2884</DOCNO>
<TEXT>
permutation
enumeration
four
new
permutation
algorithms
classical
permutation
enumeration
algorithms
encounter
special
cases
requiring
additional
computation
every
nth
permutation
when
generating
the
n
permutations
on
n
marks
four
new
algorithms
have
the
attribute
that
special
cases
occur
every
n
n
1
permutations
two
of
the
algorithms
produce
the
next
permutation
with
a
single
exchange
of
two
marks
the
other
two
algorithms
infrequently
exchange
more
than
two
marks
but
the
rules
for
generating
the
next
permutation
are
very
simple
performance
tests
which
have
counted
execution
of
assignment
statements
comparisons
arithmetic
operations
and
subscripted
array
references
have
shown
superiority
of
the
new
algorithms
compared
to
boothroyd
implementation
of
m
b
well
algorithm
and
ehrlich
implementation
of
the
johnson
trotter
algorithm
cacm
february
1976
ives
f
m
permutations
loop
free
algorithms
5
30
ca760203
jb
january
5
1978
9
33
am
2834
4
2884
2884
4
2884
3115
4
2884
2417
5
2884
2884
5
2884
2884
5
2884
2884
5
2884
2908
5
2884
3115
5
2884
907
6
2884
2045
6
2884
2417
6
2884
2466
6
2884
2505
6
2884
2884
6
2884
2884
6
2884
521
6
2884
579
6
2884
785
6
2884
</TEXT>
</DOC>
<DOC>
<DOCNO>2885</DOCNO>
<TEXT>
on
self
organizing
sequential
search
heuristics
this
paper
examines
a
class
of
heuristics
for
maintaining
a
sequential
list
in
approximately
optimal
order
with
respect
to
the
average
time
required
to
search
for
a
specified
element
assuming
that
each
element
is
searched
for
with
a
fixed
probability
independent
of
previous
searches
performed
the
move
to
front
and
transposition
heuristics
are
shown
to
be
optimal
to
within
a
constant
factor
and
the
transposition
rule
is
shown
to
be
the
more
efficient
of
the
two
empirical
evidence
suggests
that
transposition
is
in
fact
optimal
for
any
distribution
of
search
probabilities
cacm
february
1976
rivest
r
searching
self
organizing
list
processing
heuristics
3
74
5
25
ca760202
jb
january
5
1978
9
44
am
2885
5
2885
2885
5
2885
2885
5
2885
3061
5
2885
2885
6
2885
</TEXT>
</DOC>
<DOC>
<DOCNO>2886</DOCNO>
<TEXT>
semantic
evaluation
from
left
to
right
this
paper
describes
attribute
grammars
and
their
use
for
the
definition
of
programming
languages
and
compilers
a
formal
definition
of
attribute
grammars
and
a
discussion
of
some
of
its
important
aspects
are
included
the
paper
concentrates
on
the
evaluation
of
semantic
attributes
in
a
few
passes
from
left
to
right
over
the
derivation
tree
of
a
program
a
condition
for
an
attribute
grammar
is
given
which
assures
that
the
semantics
of
any
program
can
be
evaluated
in
a
single
pass
over
the
derivation
tree
and
an
algorithm
is
discussed
which
decides
how
many
passes
from
left
to
right
are
in
general
necessary
given
the
attribute
grammar
these
notions
are
explained
in
terms
of
an
example
grammar
which
describes
the
scope
rules
of
algol
60
practical
questions
such
as
the
relative
efficiency
of
different
evaluation
schemes
and
the
ease
of
adapting
the
attribute
grammar
of
a
given
programming
language
to
the
left
to
right
evaluation
scheme
are
discussed
cacm
february
1976
bochmann
g
v
attribute
grammars
semantics
of
programming
languages
semantic
attributes
left
to
right
parsing
multipass
compilers
semantic
evaluation
semantic
conditions
4
10
4
20
5
23
5
24
ca760201
jb
january
5
1978
9
54
am
2886
4
2886
2301
5
2886
2703
5
2886
2886
5
2886
2886
5
2886
2886
5
2886
2886
6
2886
</TEXT>
</DOC>
<DOC>
<DOCNO>2887</DOCNO>
<TEXT>
a
study
of
errors
error
proneness
and
error
diagnosis
in
cobol
this
paper
provides
data
on
cobol
error
frequency
for
correction
of
errors
in
student
oriented
compilers
improvement
of
teaching
and
changes
in
programming
language
cobol
was
studied
because
of
economic
importance
widespread
usage
possible
error
including
design
and
lack
of
research
the
types
of
errors
were
identified
in
a
pilot
study
then
using
the
132
error
types
found
1
777
errors
were
classified
in
1
4000
runs
of
73
cobol
students
error
density
was
high
20
percent
of
the
types
contained
80
percent
of
the
total
frequency
which
implies
high
potential
effectiveness
for
software
based
correction
of
cobol
surprisingly
only
four
high
frequency
errors
were
error
prone
which
implies
minimal
error
inducing
design
80
percent
of
cobol
misspellings
were
classifiable
in
the
four
error
categories
of
previous
researchers
which
implies
that
cobol
misspellings
are
correctable
by
existent
algorithms
reserved
word
usage
was
not
error
prone
which
implies
minimal
interference
with
usage
of
reserved
words
over
80
percent
of
error
diagnosis
was
found
to
be
inaccurate
such
feedback
is
not
optimal
for
users
particularly
for
the
learning
user
of
cobol
cacm
january
1976
litecky
c
r
davis
g
b
errors
in
programming
error
correction
cobol
programming
language
errors
error
analysis
diagnostics
error
proneness
error
frequency
spelling
errors
syntactic
errors
learning
of
programming
teaching
of
programming
4
22
4
2
4
6
ca760106
jb
january
5
1978
10
06
am
2534
4
2887
2556
4
2887
2650
4
2887
2708
4
2887
2887
4
2887
2887
4
2887
1646
5
2887
2111
5
2887
2887
5
2887
2887
5
2887
2887
5
2887
3145
5
2887
2887
6
2887
</TEXT>
</DOC>
<DOC>
<DOCNO>2888</DOCNO>
<TEXT>
information
reference
coding
items
in
business
systems
have
to
be
identified
by
reference
codes
which
can
later
be
used
as
data
codes
and
file
keys
in
an
associated
data
processing
system
in
business
systems
associated
with
large
collections
of
integrated
files
database
it
is
vital
to
assign
codes
in
a
methodical
way
so
as
to
control
future
extension
and
changes
while
maintaining
correct
program
action
the
principles
of
methodical
coding
are
discussed
and
the
way
in
which
logical
connections
between
data
items
must
be
reflected
in
the
reference
code
framework
is
shown
through
a
set
theoretic
information
model
cacm
january
1976
florentin
j
j
data
file
reference
code
systems
analysis
information
modeling
database
3
50
ca760105
jb
january
5
1978
10
11
am
1135
4
2888
1136
4
2888
2155
4
2888
2406
4
2888
493
4
2888
2710
4
2888
2710
4
2888
2715
4
2888
2716
4
2888
2717
4
2888
2718
4
2888
2765
4
2888
2765
4
2888
2817
4
2888
2888
4
2888
2888
4
2888
2901
4
2888
2906
4
2888
2957
4
2888
2959
4
2888
2965
4
2888
3087
4
2888
3154
4
2888
729
4
2888
2046
5
2888
2888
5
2888
2888
5
2888
2888
5
2888
616
5
2888
</TEXT>
</DOC>
<DOC>
<DOCNO>2889</DOCNO>
<TEXT>
performance
of
height
balanced
trees
this
paper
presents
the
results
of
simulations
that
investigate
the
performance
of
height
balanced
hb
k
trees
it
is
shown
that
the
only
statistic
of
hb
1
trees
avl
trees
that
is
a
function
of
the
size
of
the
tree
is
the
time
to
search
for
an
item
in
the
tree
for
sufficiently
large
trees
the
execution
times
of
all
procedures
for
maintaining
hb
1
trees
are
independent
of
the
size
of
the
tree
in
particular
an
average
of
465
restructures
are
required
per
insertion
with
an
average
of
2
78
nodes
revisited
to
restore
the
hb
1
property
an
average
of
214
restructures
are
required
per
deletion
with
an
average
of
1
91
nodes
revisited
to
restore
the
hb
1
property
moreover
the
execution
times
of
procedures
for
maintaining
hb
k
trees
for
k
1
are
also
independent
of
the
size
of
the
tree
except
for
the
average
number
of
nodes
revisited
on
a
delete
operation
in
order
to
restore
the
hb
k
property
on
trace
back
the
cost
of
maintaining
hb
k
trees
drops
sharply
as
the
allowable
imbalance
k
increases
both
analytical
and
experimental
results
that
show
the
cost
of
maintaining
hb
k
trees
as
a
function
of
k
are
discussed
cacm
january
1976
karlton
p
l
fuller
s
h
scroggs
r
e
kaehler
e
b
hb
k
trees
balanced
trees
avl
trees
information
storage
and
retrieval
searching
3
7
3
72
3
74
4
49
5
39
ca760104
jb
january
5
1978
10
27
am
2411
4
2889
2455
4
2889
2493
4
2889
2709
4
2889
2889
4
2889
2889
4
2889
2889
4
2889
2937
4
2889
2968
4
2889
2968
4
2889
2989
4
2889
3005
4
2889
3025
4
2889
3042
4
2889
3101
4
2889
2138
5
2889
2388
5
2889
2455
5
2889
2839
5
2889
2889
5
2889
2889
5
2889
2889
5
2889
3042
5
2889
3096
5
2889
3163
5
2889
2455
6
2889
2839
6
2889
2839
6
2889
2839
6
2889
2889
6
2889
2889
6
2889
2889
6
2889
2889
6
2889
2968
6
2889
3009
6
2889
3009
6
2889
3065
6
2889
3096
6
2889
</TEXT>
</DOC>
<DOC>
<DOCNO>2890</DOCNO>
<TEXT>
on
quadratic
adaptive
routing
algorithms
two
analytic
models
of
a
store
and
forward
communications
network
are
constructed
one
to
find
the
optimal
message
routing
and
the
other
to
illustrate
the
equilibrium
stationary
state
maintained
by
an
adaptive
routing
algorithm
these
models
show
that
adaptive
routing
does
not
satisfy
the
necessary
conditions
for
an
optimal
routing
adaptive
routing
tends
to
overuse
the
direct
path
and
underuse
alternate
routes
because
it
does
not
consider
the
impact
of
its
current
routing
decision
on
the
future
state
of
the
network
the
form
of
the
optimality
conditions
suggests
that
a
modification
of
the
adaptive
algorithm
will
result
in
optimality
the
modification
requires
the
substitution
of
a
quadratic
bias
term
instead
of
a
linear
one
in
the
routing
table
maintained
at
each
network
node
simulation
results
are
presented
which
confirm
the
theoretical
analysis
for
a
simple
network
cacm
january
1976
agnew
c
e
routing
algorithms
adaptive
routing
quadratic
routing
alternate
routing
store
and
forward
network
distributed
network
computer
network
message
switching
3
81
8
0
8
1
8
3
ca760103
jb
january
5
1978
10
37
am
2890
5
2890
2890
5
2890
2890
5
2890
</TEXT>
</DOC>
<DOC>
<DOCNO>2891</DOCNO>
<TEXT>
an
anomaly
in
disk
scheduling
a
comparison
of
fcfs
and
sstf
seek
scheduling
using
an
empirical
model
for
disk
accesses
a
model
for
disk
accesses
based
on
published
measurements
is
developed
the
model
is
used
to
show
that
under
highly
probable
conditions
fcfs
seek
scheduling
is
superior
to
sstf
scheduling
in
the
sense
of
having
a
lower
mean
queue
length
a
simple
example
of
an
arrival
sequence
illustration
this
anomaly
is
presented
cacm
january
1976
wilhelm
n
c
disks
disk
scheduling
seek
scheduling
3
72
4
35
4
41
4
6
6
35
ca760102
jb
january
5
1978
10
42
am
2628
4
2891
2891
4
2891
2891
4
2891
3072
4
2891
2375
5
2891
2628
5
2891
2891
5
2891
2891
5
2891
2891
5
2891
3153
5
2891
2741
6
2891
2891
6
2891
</TEXT>
</DOC>
<DOC>
<DOCNO>2892</DOCNO>
<TEXT>
a
study
of
line
overhead
in
the
arpanet
the
form
extent
and
effect
of
the
communication
line
overhead
in
the
arpanet
are
considered
the
source
of
this
over
head
is
separated
into
various
levels
of
protocol
hierarchy
and
the
characteristics
of
each
level
are
summarized
then
the
line
efficiency
for
various
models
of
system
use
is
studied
some
measurements
of
line
efficiency
for
the
arpanet
are
presented
and
by
extrapolation
these
measurements
are
used
to
anticipate
overhead
in
a
heavily
loaded
network
similar
results
are
derived
for
a
recently
proposed
network
protocol
and
compared
with
those
for
the
current
system
cacm
january
1976
kleinrock
l
naylor
w
e
opderbeck
h
arpanet
computer
communication
networks
interprocess
communication
measurement
packet
switching
performance
evaluation
and
efficiency
resource
sharing
3
81
4
39
4
6
4
9
ca760101
jb
january
5
1978
10
49
am
2892
5
2892
2892
5
2892
2892
5
2892
</TEXT>
</DOC>
<DOC>
<DOCNO>2893</DOCNO>
<TEXT>
computers
as
an
innovation
in
american
local
governments
computers
and
electronic
data
processing
are
a
major
technological
innovation
in
the
operations
of
american
local
government
this
paper
establishes
that
there
is
substantial
variation
among
the
larger
local
governments
in
the
rate
at
which
they
adopt
computer
technology
in
the
level
of
financial
support
they
provide
for
edp
and
in
the
extensiveness
and
sophistication
of
their
automated
applications
the
central
question
addressed
is
what
might
explain
the
differences
between
governments
in
the
extent
to
which
they
adopt
and
use
computers
hypotheses
are
tested
for
several
streams
of
explanatory
factors
using
data
from
more
than
500
city
and
county
governments
the
findings
identify
certain
local
government
milieus
which
are
particularly
conducive
to
higher
levels
of
computer
innovation
somewhat
unexpected
findings
reveal
the
significant
impact
of
the
distribution
of
control
over
edp
decisions
and
the
dominant
political
values
within
the
government
other
important
factors
include
the
measured
need
for
computer
applications
and
the
presence
of
external
funding
support
for
computing
finally
the
paper
suggests
a
framework
for
identifying
the
key
determinants
of
other
technological
innovations
cacm
december
1977
danziger
j
n
dutton
w
h
innovation
technological
innovation
computer
utilization
computer
adoption
american
local
government
city
government
computers
county
government
computers
2
0
2
45
2
49
2
9
ca771207
jb
december
22
1977
12
17
pm
2893
5
2893
2893
5
2893
2893
5
2893
</TEXT>
</DOC>
<DOC>
<DOCNO>2894</DOCNO>
<TEXT>
a
methodology
for
interactive
computer
service
measurement
a
measurement
methodology
applicable
to
in
teractive
computer
service
is
described
its
primary
purpose
is
to
enable
external
user
oriented
assessment
of
computer
performance
instead
of
the
more
frequently
used
in
ternal
system
measurement
techniques
the
nbs
network
measurement
system
is
employed
as
the
external
measurement
tool
example
data
have
been
collected
and
analyzed
a
demonstration
of
the
methodology
leading
to
a
pragmatic
figure
of
merit
evaluation
of
results
is
included
cacm
december
1977
adrams
m
d
in
teractive
system
computer
service
measurement
performance
external
measurement
methodology
measurement
model
network
measurement
system
measures
figure
of
merit
2
4
4
6
6
2
ca771206
jb
december
22
1977
12
32
pm
2193
4
2894
2319
4
2894
2373
4
2894
2894
4
2894
2894
4
2894
1951
5
2894
2016
5
2894
2894
5
2894
2894
5
2894
2894
5
2894
</TEXT>
</DOC>
<DOC>
<DOCNO>2895</DOCNO>
<TEXT>
a
language
for
formal
problem
specification
a
language
for
specifying
the
in
tended
behavior
of
communicating
parallel
processes
is
described
the
specifications
are
constrain
ts
on
the
order
in
which
events
of
a
computation
can
occur
the
language
is
used
to
write
specifications
of
the
readers
writers
problem
and
the
writer
priority
of
the
second
readers
writers
problem
cacm
december
1977
greif
i
formal
specifications
program
correctness
parallel
processing
synchronization
readers
writers
problem
4
22
4
32
5
24
ca771205
dmm
december
22
1977
12
44
pm
2320
4
2895
2597
4
2895
2777
4
2895
2851
4
2895
2895
4
2895
2895
4
2895
2912
4
2895
2946
4
2895
3128
4
2895
2150
5
2895
2618
5
2895
2895
5
2895
2895
5
2895
2895
5
2895
</TEXT>
</DOC>
<DOC>
<DOCNO>2896</DOCNO>
<TEXT>
an
exercise
in
proving
parallel
programs
correct
a
parallel
program
dijkstra
on
the
fly
garbage
collector
is
proved
correct
using
a
proof
method
developed
by
owicki
the
fine
degree
of
in
terleaving
in
this
program
makes
it
especially
difficult
to
understand
and
complicates
the
proof
greatly
difficulties
with
proving
such
parallel
programs
correct
are
discussed
cacm
december
1977
gries
d
garbage
collection
multiprocessing
program
correctness
for
multiprocessing
tasks
4
32
4
34
4
35
4
39
5
24
ca771204
jb
february
1
1980
3
37
am
2021
4
2896
2222
4
2896
2227
4
2896
2315
4
2896
2326
4
2896
2470
4
2896
2732
4
2896
2838
4
2896
2865
4
2896
2896
4
2896
2896
4
2896
2896
4
2896
2943
4
2896
2972
4
2896
3014
4
2896
3037
4
2896
3039
4
2896
3039
4
2896
3043
4
2896
3068
4
2896
3073
4
2896
3074
4
2896
3077
4
2896
3112
4
2896
3143
4
2896
1834
5
2896
2723
5
2896
2732
5
2896
2896
5
2896
2896
5
2896
2896
5
2896
3039
5
2896
2723
6
2896
2732
6
2896
2896
6
2896
</TEXT>
</DOC>
<DOC>
<DOCNO>2897</DOCNO>
<TEXT>
a
case
study
of
a
new
code
generation
technique
for
compilers
recent
developments
in
optimizing
techniques
have
allowed
a
new
design
for
compilers
to
emerge
such
a
compiler
translates
the
parsed
source
code
into
lower
level
code
by
a
sequence
of
steps
each
step
expands
higher
level
statements
into
blocks
of
lower
level
code
and
then
performs
optimizations
on
the
result
each
statement
has
only
one
possible
expansion
the
task
of
tailoring
this
code
to
take
advantage
of
any
special
cases
is
done
by
the
optimizations
this
paper
provides
evidence
that
this
strategy
can
indeed
result
in
good
object
code
the
traditionally
difficult
pl
i
concatenate
statement
was
investigated
as
a
detailed
example
a
set
of
fairly
simple
optimizations
was
identified
which
allow
the
compiler
to
produce
good
code
more
elaborate
optimizations
can
further
improve
the
object
code
for
most
contexts
of
the
concatenate
statement
the
code
produced
by
a
compiler
using
the
expansion
optimization
strategy
described
above
compares
favorably
with
the
code
produced
by
a
conventional
pl
i
optimizing
compiler
cacm
december
1977
carter
j
l
compiler
structure
optimizing
compiler
code
generation
pl
i
compiler
concatenation
program
optimization
optimization
techniques
data
flow
analysis
4
12
4
13
4
22
ca771203
jb
february
1
1980
3
54
am
2897
5
2897
2897
5
2897
2897
5
2897
</TEXT>
</DOC>
<DOC>
<DOCNO>2898</DOCNO>
<TEXT>
a
conceptual
framework
for
a
nonprocedural
programming
language
a
sequential
programming
language
forces
the
programmer
to
prescribe
explicitly
the
order
in
which
the
operations
in
his
program
have
to
be
executed
even
if
the
order
is
not
relevant
to
the
solution
of
his
problem
the
requirement
to
indicate
irrelevant
sequencing
can
be
removed
if
the
language
provides
facilities
for
specifying
a
task
in
a
nonprocedural
manner
in
general
a
program
specified
in
this
way
will
allow
concurrent
evaluation
this
paper
describes
a
conceptual
framework
for
a
high
level
programming
language
providing
both
nonprocedural
and
sequential
facilities
within
a
program
nonprocedural
and
sequential
program
modules
may
be
nested
freely
cacm
december
1977
kessels
j
l
w
parallel
programming
descriptive
programming
nonprocedural
programming
definitional
language
data
flow
programming
applicative
programming
4
20
ca771202
jb
february
1
1980
4
05
am
2865
4
2898
2866
4
2898
2898
4
2898
2898
4
2898
2972
4
2898
3043
4
2898
3128
4
2898
3144
4
2898
2597
5
2898
2898
5
2898
2898
5
2898
2898
5
2898
2946
5
2898
</TEXT>
</DOC>
<DOC>
<DOCNO>2899</DOCNO>
<TEXT>
a
survey
of
computer
science
offerings
in
small
liberal
arts
colleges
recent
curricular
development
in
computer
science
together
with
student
in
terest
in
pursuing
topics
in
computer
science
beyond
the
usual
programming
courses
have
encouraged
small
liberal
arts
colleges
to
expand
their
offerings
this
paper
summarizes
the
results
of
a
survey
taken
to
determine
the
type
of
computer
science
programs
being
offered
in
these
colleges
the
results
indicate
that
over
half
of
these
colleges
either
have
no
computer
science
program
or
offer
only
programming
courses
cacm
december
1977
lopez
a
a
raymond
r
tardiff
r
computer
science
education
curricula
small
colleges
1
5
ca771201
jb
december
22
1977
5
53
pm
1720
4
2899
1927
4
2899
2147
4
2899
2163
4
2899
2345
4
2899
2478
4
2899
2594
4
2899
2852
4
2899
2899
4
2899
2899
4
2899
3003
4
2899
3130
4
2899
1771
5
2899
2538
5
2899
2899
5
2899
2899
5
2899
2899
5
2899
</TEXT>
</DOC>
<DOC>
<DOCNO>2900</DOCNO>
<TEXT>
some
theorems
to
aid
in
solving
the
file
allocation
problem
the
file
allocation
problem
i
e
the
problem
of
finding
the
optimal
set
of
network
sites
at
which
to
locate
copies
of
a
file
is
known
to
be
in
general
polynomial
complete
heuristics
and
other
aids
to
finding
optimal
or
near
optimal
solutions
are
therefore
much
needed
in
this
paper
we
present
three
theorems
which
can
be
applied
a
priori
to
indicate
that
certain
sites
should
or
should
not
be
included
in
an
optimal
allocation
cacm
november
1977
grapa
e
belford
g
g
file
allocation
computer
networks
distributed
data
management
4
33
ca771116
jb
december
27
1977
8
45
am
2900
5
2900
2900
5
2900
2900
5
2900
</TEXT>
</DOC>
<DOC>
<DOCNO>2901</DOCNO>
<TEXT>
an
encoding
method
for
multifield
sorting
and
indexing
sequences
of
character
strings
with
an
order
relation
imposed
between
sequences
are
considered
an
encoding
scheme
is
described
which
produces
a
single
order
preserving
string
from
a
sequence
of
strings
the
original
sequence
can
be
recovered
from
the
encoded
string
and
one
sequence
of
strings
precedes
another
if
and
only
if
the
encoding
of
the
first
precedes
the
encoding
of
the
second
the
strings
may
be
variable
length
without
a
maximum
length
restriction
and
no
symbols
need
be
reserved
for
control
purposes
hence
any
symbol
may
occur
in
any
string
the
scheme
is
useful
for
multifield
sorting
multifield
indexing
and
other
applications
where
ordering
on
more
than
one
field
is
important
cacm
november
1977
blasgen
m
w
casey
r
g
eswaran
k
p
sorting
multifield
indexes
lexicographic
order
searching
encoding
3
74
4
19
4
33
4
40
5
31
ca771115
jb
december
27
1977
5
55
am
2140
4
2901
2155
4
2901
2406
4
2901
2452
4
2901
2710
4
2901
2710
4
2901
2715
4
2901
2716
4
2901
2716
4
2901
2717
4
2901
2718
4
2901
2765
4
2901
2765
4
2901
2817
4
2901
2888
4
2901
2901
4
2901
2901
4
2901
2901
4
2901
2957
4
2901
2959
4
2901
2965
4
2901
3087
4
2901
3134
4
2901
3154
4
2901
1976
5
2901
2046
5
2901
2715
5
2901
2901
5
2901
2901
5
2901
2901
5
2901
</TEXT>
</DOC>
<DOC>
<DOCNO>2902</DOCNO>
<TEXT>
dynamic
memory
allocation
in
computer
simulation
this
paper
investigates
the
performance
of
35
dynamic
memory
allocation
algorithms
when
used
to
service
simulation
programs
as
represented
by
18
test
cases
algorithm
performance
was
measured
in
terms
of
processing
time
memory
usage
and
external
memory
fragmentation
algorithms
main
taining
separate
free
space
lists
for
each
size
of
memory
block
used
tended
to
perform
quite
well
compared
with
other
algorithms
simple
algorithms
operating
on
memory
ordered
lists
without
any
free
list
performed
surprisingly
well
algorithms
employing
power
of
two
block
sizes
had
favorable
processing
requirements
but
generally
unfavorable
memory
usage
algorithms
employing
lifo
fifo
or
memory
ordered
free
lists
generally
performed
poorly
compared
with
others
cacm
november
1977
nielsen
n
r
algorithm
performance
dynamic
memory
allocation
dynamic
memory
management
dynamic
storage
allocation
garbage
collection
list
processing
memory
allocation
memory
management
programming
techniques
simulation
simulation
memory
management
simulation
techniques
space
allocation
storage
allocation
3
74
4
49
5
25
8
1
ca771114
jb
december
27
1977
6
09
am
1211
4
2902
1211
4
2902
1389
4
2902
1549
4
2902
1552
4
2902
1906
4
2902
2095
4
2902
2162
4
2902
2218
4
2902
2435
4
2902
2498
4
2902
2596
4
2902
2596
4
2902
2596
4
2902
2704
4
2902
2734
4
2902
2747
4
2902
2768
4
2902
2768
4
2902
2773
4
2902
2845
4
2902
2845
4
2902
2845
4
2902
2845
4
2902
2902
4
2902
2902
4
2902
2902
4
2902
2902
4
2902
2902
4
2902
2902
4
2902
2902
4
2902
2902
4
2902
2902
4
2902
2902
4
2902
2902
4
2902
2911
4
2902
2911
4
2902
2911
4
2902
2955
4
2902
2955
4
2902
2955
4
2902
2955
4
2902
2983
4
2902
3000
4
2902
1051
5
2902
1062
5
2902
1184
5
2902
1211
5
2902
1552
5
2902
1879
5
2902
2435
5
2902
2596
5
2902
2734
5
2902
2747
5
2902
2768
5
2902
2902
5
2902
2902
5
2902
2902
5
2902
</TEXT>
</DOC>
<DOC>
<DOCNO>2903</DOCNO>
<TEXT>
improving
programs
by
the
introduction
of
recursion
a
new
technique
of
program
transformation
called
recursion
in
troduction
is
described
and
applied
to
two
algorithms
which
solve
pattern
matching
problems
by
using
recursion
in
troduction
algorithms
which
manipulate
a
stack
are
first
translated
into
recursive
algorithms
in
which
no
stack
operations
occur
these
algorithms
are
then
subjected
to
a
second
transformation
a
method
of
recursion
elimination
called
tabulation
to
produce
programs
with
a
very
efficient
running
time
in
particular
it
is
shown
how
the
fast
linear
pattern
matching
algorithm
of
knuth
morris
and
pratt
can
be
derived
in
a
few
steps
from
a
simple
nonlinear
stack
algorithm
cacm
november
1977
bird
r
s
program
transformation
optimization
of
programs
recursion
elimination
pattern
matching
algorithms
stacks
computational
induction
4
0
4
2
5
20
5
24
5
25
ca771113
jb
december
27
1977
6
29
am
2326
4
2903
2457
4
2903
2842
4
2903
2903
4
2903
2192
5
2903
2903
5
2903
2903
5
2903
2903
5
2903
</TEXT>
</DOC>
<DOC>
<DOCNO>2904</DOCNO>
<TEXT>
an
algorithm
for
reduction
of
operator
strength
a
simple
algorithm
which
uses
an
indexed
temporary
table
to
perform
reduction
of
operator
strength
in
strongly
connected
regions
is
presented
several
extensions
including
linear
function
test
replacement
are
discussed
these
algorithms
should
fit
well
into
an
integrated
package
of
local
optimization
algorithms
cacm
november
1977
cocke
j
compilers
optimization
of
compiled
code
program
analysis
operator
strength
reduction
test
replacement
strongly
connected
region
4
12
5
24
5
32
ca771112
jb
december
27
1977
6
34
am
2904
5
2904
2904
5
2904
2904
5
2904
</TEXT>
</DOC>
<DOC>
<DOCNO>2905</DOCNO>
<TEXT>
perfect
hashing
functions
a
single
probe
retrieving
method
for
static
sets
a
refinement
of
hashing
which
allows
retrieval
of
an
item
in
a
static
table
with
a
single
probe
is
considered
given
a
set
i
of
identifiers
two
methods
are
presented
for
building
in
a
mechanical
way
perfect
hashing
functions
i
e
functions
transforming
the
elements
of
i
into
unique
addresses
the
first
method
the
quotient
reduction
method
is
shown
to
be
complete
in
the
sense
that
for
every
set
i
the
smallest
table
in
which
the
elements
of
i
can
be
stored
and
from
which
they
can
be
retrieved
by
using
a
perfect
hashing
function
constructed
by
this
method
can
be
found
however
for
nonuniformly
distributed
sets
this
method
can
give
rather
sparse
tables
the
second
method
the
remainder
reduction
method
is
not
complete
in
the
above
sense
but
it
seems
to
give
minimal
or
almost
minimal
tables
for
every
kind
of
set
the
two
techniques
are
applicable
directly
to
small
sets
some
methods
to
extend
these
results
to
larger
sets
are
also
presented
a
rough
comparison
with
ordinary
hashing
is
given
which
shows
that
this
method
can
be
used
conveniently
in
several
practical
applications
cacm
november
1977
sprugnoli
r
hashing
hashing
methods
hash
coding
direct
addressing
identifier
to
address
transformations
perfect
hashing
functions
perfect
hash
coding
reduction
scatter
storage
3
7
3
74
4
34
ca771111
jb
december
27
1977
6
45
am
2905
4
2905
2905
5
2905
2905
5
2905
2905
5
2905
3041
5
2905
3126
5
2905
3176
5
2905
829
5
2905
2846
6
2905
2905
6
2905
2905
6
2905
2905
6
2905
</TEXT>
</DOC>
<DOC>
<DOCNO>2906</DOCNO>
<TEXT>
a
very
high
level
programming
language
for
data
processing
applications
application
development
today
is
too
labor
in
tensive
in
recent
years
very
high
level
languages
have
been
increasingly
explored
as
a
solution
to
this
problem
the
business
definition
language
bdl
is
such
a
language
one
aimed
at
business
data
processing
problems
the
concepts
in
bdl
mimic
those
which
have
evolved
through
the
years
in
businesses
using
manual
methods
this
results
in
three
different
sublanguages
or
components
one
for
defining
the
business
forms
one
for
describing
the
business
organization
and
one
for
writing
calculations
cacm
november
1977
hammer
m
owe
w
g
kruskal
v
j
wladawsky
i
very
high
level
language
nonprocedural
language
data
flow
language
business
application
business
data
processing
structured
programming
modular
programming
format
specification
and
design
methodology
3
50
4
22
4
32
ca771110
jb
december
27
1977
7
06
am
1135
4
2906
1136
4
2906
493
4
2906
2710
4
2906
2765
4
2906
2888
4
2906
2906
4
2906
729
4
2906
2906
5
2906
2906
5
2906
2906
5
2906
616
5
2906
</TEXT>
</DOC>
<DOC>
<DOCNO>2907</DOCNO>
<TEXT>
the
optimal
approach
to
recursive
programs
the
classical
fixed
poin
t
approach
toward
recursive
programs
suggests
choosing
the
least
defined
fixed
poin
t
as
the
most
appropriate
solution
to
a
recursive
program
a
new
approach
is
described
which
in
troduction
an
optimal
fixed
point
which
in
contrast
to
the
least
defined
fixed
poin
t
embodies
the
maximal
amount
of
valuable
information
embedded
in
the
program
the
practical
implications
of
this
approach
are
discussed
and
techniques
for
proving
properties
of
optimal
fixed
poin
t
are
given
the
presentation
is
informal
with
emphasis
on
examples
cacm
november
1977
manna
z
shamir
a
recursive
programs
fixed
poin
ts
least
fixedpoints
optimal
fixed
poin
ts
proof
techniques
5
24
ca771109
jb
december
27
1977
7
13
am
2907
5
2907
2907
5
2907
2907
5
2907
</TEXT>
</DOC>
<DOC>
<DOCNO>2908</DOCNO>
<TEXT>
a
note
on
reflection
free
permutation
enumeration
cacm
november
1977
roy
m
k
permutations
reflection
free
generation
5
30
ca771108
jb
december
27
1977
7
17
am
2044
4
2908
2189
4
2908
2417
4
2908
2505
4
2908
2874
4
2908
2908
4
2908
2908
4
2908
2908
4
2908
3115
4
2908
2505
5
2908
2884
5
2908
2908
5
2908
2908
5
2908
2908
5
2908
521
5
2908
</TEXT>
</DOC>
<DOC>
<DOCNO>2909</DOCNO>
<TEXT>
what
can
we
do
about
the
unnecessary
diversity
of
notation
for
syntactic
definitions
cacm
november
1977
wirth
n
syntactic
description
language
extended
bnf
4
20
ca771107
jb
december
27
1977
7
20
am
2909
5
2909
2909
5
2909
2909
5
2909
</TEXT>
</DOC>
<DOC>
<DOCNO>2910</DOCNO>
<TEXT>
equivalence
of
hough
curve
detection
to
template
matching
cacm
november
1977
stockman
g
c
picture
processing
pattern
recognition
curve
detection
hough
transformation
template
matching
3
63
6
9
ca771106
jb
december
27
1977
7
23
am
2788
4
2910
2910
4
2910
2910
4
2910
2400
5
2910
2788
5
2910
2910
5
2910
2910
5
2910
2910
5
2910
</TEXT>
</DOC>
<DOC>
<DOCNO>2911</DOCNO>
<TEXT>
anomalous
behavior
of
the
fifty
percent
rule
in
dynamic
memory
allocation
this
paper
reports
simulation
data
showing
that
in
dynamic
memory
allocation
the
average
free
to
allocated
block
ratio
can
differ
considerably
and
in
both
directions
from
the
predictions
of
the
50
percent
rule
a
new
derivation
is
given
and
it
is
shown
that
previous
derivations
make
an
assumption
that
may
be
violated
frequently
on
the
basis
of
the
simulation
data
and
the
derivation
it
is
hypothesized
that
the
anomalous
behavior
results
from
the
combined
effects
of
systematic
placement
and
the
statistics
of
the
release
process
additional
simulations
support
this
hypothesis
systematic
placement
which
refers
to
the
natural
convention
of
always
allocating
storage
requests
against
the
same
end
of
the
free
block
selected
by
the
allocation
strategy
tends
to
order
blocks
within
contiguous
groups
according
to
their
allocation
time
the
degree
of
anomalous
behavior
depends
on
the
extent
to
which
allocated
blocks
are
released
in
the
order
of
their
allocation
for
non
markovian
release
processes
the
extent
of
the
correlation
between
allocation
order
and
release
order
varies
approximately
inversely
with
the
coefficient
of
variation
of
the
memory
residence
time
distribution
the
simulations
show
that
allocation
efficiency
depends
strongly
on
the
residence
time
distribution
efficiency
decreases
as
the
distribution
coefficient
of
variation
increases
some
practical
implications
are
briefly
discussed
cacm
november
1977
shore
j
e
dynamic
memory
allocation
storage
fragmentation
fifty
percent
rule
first
fit
simulation
3
73
4
32
4
34
4
35
ca771105
jb
december
27
1977
7
37
am
2095
4
2911
2218
4
2911
2498
4
2911
2596
4
2911
2596
4
2911
2734
4
2911
2747
4
2911
2768
4
2911
2845
4
2911
2902
4
2911
2902
4
2911
2902
4
2911
2911
4
2911
2911
4
2911
2911
4
2911
2911
4
2911
2911
4
2911
2911
4
2911
2911
4
2911
2955
4
2911
2955
4
2911
2983
4
2911
3000
4
2911
972
4
2911
273
5
2911
1879
5
2911
2435
5
2911
2498
5
2911
2734
5
2911
2773
5
2911
2911
5
2911
2911
5
2911
2911
5
2911
2983
5
2911
</TEXT>
</DOC>
<DOC>
<DOCNO>2912</DOCNO>
<TEXT>
concurrent
reading
and
writing
the
problem
of
sharing
data
among
asynchronous
process
is
considered
it
is
assumed
that
only
one
process
at
a
time
can
modify
the
data
but
concurrent
reading
and
writing
is
permitted
two
general
theorems
are
proved
and
some
algorithms
are
presented
to
illustrate
their
use
these
include
a
solution
to
the
general
problem
in
which
a
read
is
repeated
if
it
might
have
obtained
an
incorrect
result
and
two
techniques
for
transmitting
messages
between
processes
these
solutions
do
not
assume
any
synchronizing
mechanism
other
than
data
which
can
be
written
by
one
process
and
read
by
other
processes
cacm
november
1977
lamport
l
asynchronous
multiprocessing
multiprocess
synchronization
readers
writers
problem
shared
data
4
32
5
24
ca771104
jb
december
27
1977
7
47
am
2320
4
2912
2597
4
2912
2777
4
2912
2851
4
2912
2895
4
2912
2912
4
2912
2946
4
2912
3128
4
2912
2150
5
2912
2912
5
2912
2912
5
2912
2912
5
2912
3128
5
2912
2150
6
2912
2376
6
2912
2436
6
2912
2597
6
2912
2865
6
2912
2866
6
2912
2870
6
2912
2912
6
2912
3082
6
2912
</TEXT>
</DOC>
<DOC>
<DOCNO>2913</DOCNO>
<TEXT>
the
aliasing
problem
in
computer
generated
shaded
images
certain
defects
such
as
jagged
edges
and
disappearing
detail
have
long
been
an
annoyance
in
digitally
generated
shaded
images
although
increasing
the
resolution
or
defocusing
the
display
can
attenuate
them
an
understanding
of
these
defects
leads
to
more
effective
methods
this
paper
explains
the
observed
defects
in
terms
of
the
aliasing
phenomenon
inherent
in
sampled
signals
and
discusses
prefiltering
as
a
recognized
cure
a
method
for
evaluating
filters
is
presented
the
application
of
prefiltering
to
hidden
surface
algorithms
is
discussed
and
an
implementation
of
a
filtering
tiler
is
shown
accompanied
by
examples
of
its
effectiveness
cacm
november
1977
crow
f
c
aliasing
computer
graphics
convolutional
filtering
hidden
surface
removal
sampling
8
2
ca771103
jb
december
27
1977
7
56
am
2816
4
2913
2828
4
2913
2827
4
2913
2913
4
2913
3047
4
2913
2751
5
2913
2913
5
2913
2913
5
2913
2913
5
2913
</TEXT>
</DOC>
<DOC>
<DOCNO>2914</DOCNO>
<TEXT>
use
of
the
lru
stack
depth
distribution
for
simulation
of
paging
behavior
two
families
of
probability
distributions
were
needed
for
use
by
a
virtual
memory
simulation
model
headway
between
page
fault
distributions
and
working
set
size
distributions
all
members
of
both
families
can
be
derived
from
the
lru
stack
depth
distribution
simple
expressions
for
the
computation
of
both
kinds
of
distributions
are
given
finally
examples
are
given
of
both
families
of
distributions
as
computed
from
a
published
stack
depth
distribution
cacm
november
1977
turner
r
strecker
b
virtual
memory
paging
lru
stack
working
set
headway
between
page
faults
computer
system
simulation
4
35
4
6
8
1
ca771102
jb
december
27
1977
8
04
am
2914
5
2914
2914
5
2914
2914
5
2914
</TEXT>
</DOC>
<DOC>
<DOCNO>2915</DOCNO>
<TEXT>
considerations
for
future
programming
language
standards
activities
this
paper
reviews
the
current
state
of
programming
language
standards
activities
with
respect
to
the
anomalies
which
exist
between
the
various
published
and
proposed
standards
for
fortran
cobol
pl
i
and
basic
proposals
are
made
for
the
inclusion
of
formalisms
within
future
standards
and
the
extension
of
the
standards
to
include
additional
items
such
as
error
conditions
and
documentation
cacm
november
1977
lee
j
a
n
programming
languages
standards
formalisms
formal
descriptions
fortran
cobol
pl
i
basic
vienna
definition
language
vdl
2
4
4
2
4
29
4
6
5
23
ca771101
jb
december
27
1977
8
10
am
2154
4
2915
2299
4
2915
2501
4
2915
2629
4
2915
2915
4
2915
2915
4
2915
3060
4
2915
3114
4
2915
1502
5
2915
1900
5
2915
2915
5
2915
2915
5
2915
2915
5
2915
</TEXT>
</DOC>
<DOC>
<DOCNO>2916</DOCNO>
<TEXT>
a
fast
string
searching
algorithm
an
algorithm
is
presented
that
searches
for
the
location
i
of
the
first
occurrence
of
a
character
string
pat
in
another
string
string
during
the
search
operation
the
characters
of
pat
are
matched
starting
with
the
last
character
of
pat
the
information
gained
by
starting
the
match
at
the
end
of
the
pattern
often
allows
the
algorithm
to
proceed
in
large
jumps
through
the
text
being
searched
thus
the
algorithm
has
the
unusual
property
that
in
most
cases
not
all
of
the
first
i
characters
of
string
are
inspected
the
number
of
characters
actually
inspected
on
the
average
decreases
as
a
function
of
the
length
of
pat
for
a
random
english
pattern
of
length
5
the
algorithm
will
typically
inspect
i
4
characters
of
string
before
finding
a
match
at
i
furthermore
the
algorithm
has
been
implemented
so
that
on
the
average
fewer
than
i
patlen
machine
instructions
are
executed
these
conclusions
are
supported
with
empirical
evidence
and
a
theoretical
analysis
of
the
average
behavior
of
the
algorithm
the
worst
case
behavior
of
the
algorithm
is
linear
in
i
patlen
assuming
the
availability
of
array
space
for
tables
linear
in
patlen
plus
the
size
of
the
alphabet
cacm
october
1977
boyer
r
s
bibliographic
search
computational
complexity
information
retrieval
linear
time
bound
pattern
matching
text
editing
3
74
4
40
5
25
ca771010
jb
december
27
1977
9
43
am
2916
4
2916
2746
5
2916
2916
5
2916
2916
5
2916
2916
5
2916
3162
5
2916
2916
6
2916
</TEXT>
</DOC>
<DOC>
<DOCNO>2917</DOCNO>
<TEXT>
sitar
an
interactive
text
processing
system
for
small
computers
corrigendum
cacm
october
1977
schneider
b
r
jr
watts
r
m
ca771009
jb
december
28
1977
5
58
am
2917
5
2917
2917
5
2917
2917
5
2917
</TEXT>
</DOC>
<DOC>
<DOCNO>2918</DOCNO>
<TEXT>
multiprocessor
memory
organization
and
memory
interference
the
structure
of
shared
memory
in
a
multiprocessor
computer
system
is
examined
with
particular
attention
to
nonin
terleaved
memory
alternative
memory
organizations
are
compared
and
it
is
shown
that
a
home
memory
organization
in
which
each
processor
is
associated
with
one
or
more
memories
in
which
its
address
space
is
concentrated
is
quite
effective
in
reducing
memory
in
terference
home
memory
organization
is
shown
to
be
particularly
suited
to
certain
specialized
computation
problems
as
well
as
to
possess
advantages
in
terms
of
in
terference
and
reliability
for
general
purpose
computation
results
for
in
terleaved
memory
are
drawn
from
previous
work
and
are
used
for
comparison
trace
driven
simulations
are
used
to
verify
the
conclusions
of
the
analysis
cacm
october
1977
smith
a
j
memory
in
terference
interleaving
multiprocessing
trace
driven
simulation
queueing
theory
shared
memory
4
30
4
32
6
34
ca771008
jb
december
27
1977
10
28
am
2918
4
2918
3119
4
2918
2859
5
2918
2918
5
2918
2918
5
2918
2918
5
2918
</TEXT>
</DOC>
<DOC>
<DOCNO>2919</DOCNO>
<TEXT>
the
programmer
workbench
a
machine
for
software
development
on
almost
all
software
development
projects
the
assumption
is
made
that
the
program
development
function
will
be
done
on
the
same
machine
on
which
the
eventual
system
will
run
it
is
only
when
this
production
machine
is
unavailable
or
when
its
programming
environment
is
totally
inadequate
that
alternatives
are
considered
in
this
paper
it
is
suggested
that
there
are
many
other
situations
where
it
would
be
advantageous
to
separate
the
program
development
and
main
tenance
function
onto
a
specialized
computer
which
is
dedicated
to
that
purpose
such
a
computer
is
here
called
a
programmer
workbench
the
four
basic
sections
of
the
paper
in
troduce
the
subject
outline
the
general
concept
discuss
areas
where
such
an
approach
may
prove
beneficial
and
describe
an
operational
system
utilizing
this
concept
cacm
october
1977
ivie
e
l
computer
configurations
computer
networks
software
development
software
engineering
software
main
tenance
unix
3
2
3
5
3
7
3
8
4
0
ca771007
jb
december
27
1977
10
37
am
2626
4
2919
2786
4
2919
2840
4
2919
2919
4
2919
2919
4
2919
2919
4
2919
3017
4
2919
3110
4
2919
3174
4
2919
2536
5
2919
2593
5
2919
2629
5
2919
2919
5
2919
2919
5
2919
2919
5
2919
</TEXT>
</DOC>
<DOC>
<DOCNO>2920</DOCNO>
<TEXT>
game
interpretation
of
the
deadlock
avoidance
problem
the
deadlock
avoidance
problem
may
be
defined
informally
as
the
determination
from
some
a
priori
information
about
the
processes
resources
operating
system
etc
of
the
safe
situations
which
may
be
realized
without
endangering
the
smooth
running
of
the
system
when
each
process
specifies
its
future
needs
by
a
flowchart
of
need
defined
steps
a
global
approach
to
the
phenomenon
and
its
in
terpretation
as
a
game
between
the
operating
system
and
the
processes
allows
formalization
of
risk
and
safety
concepts
the
bipartite
graph
representation
of
this
game
may
then
be
used
to
construct
explicitly
the
set
of
safe
states
and
to
study
their
properties
cacm
october
1977
devillers
r
operating
system
multiprogramming
time
sharing
resource
allocation
deadlock
in
terlock
deadly
embrace
deadlock
avoidance
flowchart
4
30
4
32
ca771006
jb
december
27
1977
10
50
am
2228
4
2920
2280
4
2920
2379
4
2920
2482
4
2920
2740
4
2920
2851
4
2920
2920
4
2920
1877
5
2920
2920
5
2920
2920
5
2920
2920
5
2920
</TEXT>
</DOC>
<DOC>
<DOCNO>2921</DOCNO>
<TEXT>
regular
right
part
grammars
and
their
parsers
this
paper
in
troduces
an
alternative
to
context
free
grammars
called
regular
right
part
rrp
grammars
which
resemble
pascal
syntax
diagrams
formally
rrp
grammars
have
production
right
parts
which
are
nondeterministic
finite
state
machines
fsms
and
as
a
special
case
regular
expressions
since
these
can
be
converted
to
fsms
rrp
grammars
describe
the
syntax
of
programming
languages
more
concisely
and
more
understandably
than
is
possible
with
cf
grammars
also
in
troduced
is
a
class
of
parsers
rrp
lr
m
k
parsers
which
includes
the
cf
lr
k
parsers
and
provides
the
same
advantages
informally
an
rrp
lr
m
k
parser
can
determine
the
right
end
of
each
handle
by
considering
at
most
k
symbols
to
the
right
of
the
handle
and
the
left
end
after
the
right
end
has
been
found
by
considering
at
most
m
symbols
to
the
left
of
the
handle
a
mechanism
for
determining
the
left
end
is
required
because
there
is
no
bound
on
the
length
of
the
handle
cacm
october
1977
lalonde
w
r
finite
state
machines
automata
regular
expressions
syntax
diagrams
lr
k
grammars
parser
construction
parsing
programming
languages
language
generation
formal
definition
compilers
translators
scanners
4
2
5
21
5
23
ca771005
jb
december
27
1977
11
01
am
1989
4
2921
2060
4
2921
2179
4
2921
2581
4
2921
2698
4
2921
2739
4
2921
2795
4
2921
2921
4
2921
2921
4
2921
3087
4
2921
3154
4
2921
1989
5
2921
2110
5
2921
2921
5
2921
2921
5
2921
2921
5
2921
</TEXT>
</DOC>
<DOC>
<DOCNO>2922</DOCNO>
<TEXT>
two
level
control
structure
for
nondeterministic
programming
the
basic
ideas
of
nondeterministic
programming
are
critically
reconsidered
to
single
out
a
proper
attitude
and
programming
style
for
language
allowing
direct
control
of
nondeterministic
features
the
proposed
attitude
aims
at
retaining
the
purity
of
the
nondeterministic
formulation
of
search
processes
on
one
level
the
attempt
level
deferring
the
coordination
of
problem
solving
efforts
to
another
the
choice
level
the
feasibility
of
recognizing
these
two
levels
is
discussed
stressing
that
the
structure
to
be
managed
at
the
choice
level
is
a
free
of
contexts
the
leaves
are
computational
environments
each
holding
an
alternative
under
inspection
while
the
other
nodes
are
associated
with
choice
poin
ts
according
to
the
proposed
programming
style
a
generative
function
is
associated
with
each
choice
poin
t
which
expresses
the
desired
choice
strategy
the
main
advantage
on
this
approach
is
the
localization
of
the
search
strategies
each
nonterminal
node
of
the
tree
keeps
track
of
the
state
of
the
computation
as
it
was
when
the
choice
poin
t
was
last
interrogated
holding
at
the
same
time
the
strategy
to
coordinate
the
available
alternatives
examples
are
given
in
term
of
nd
lisp
an
extension
of
lisp
designed
and
implemented
according
to
these
guidelines
cacm
october
1977
montangero
c
pacini
g
turini
f
nondeterministic
programming
artificial
in
telligence
control
structures
backtracking
search
strategy
planning
context
tree
3
64
4
22
ca771004
jb
december
27
1977
11
30
am
2625
4
2922
2922
4
2922
3081
4
2922
3101
4
2922
3112
4
2922
2438
5
2922
2922
5
2922
2922
5
2922
2922
5
2922
</TEXT>
</DOC>
<DOC>
<DOCNO>2923</DOCNO>
<TEXT>
high
level
data
flow
analysis
in
contrast
to
the
predominant
use
of
low
level
in
termediate
text
high
level
data
flow
analysis
deals
with
programs
essentially
at
source
level
and
exploits
the
control
flow
information
implicit
in
the
parse
tree
the
need
for
high
level
flow
analysis
arises
from
several
aspects
of
recent
work
on
advanced
methods
of
program
certification
and
optimization
this
paper
proposes
a
simple
general
method
of
high
level
data
flow
analysis
that
allows
free
use
of
escape
and
jump
statements
avoids
large
graphs
when
compiling
large
programs
facilitates
updating
of
data
flow
information
to
reflect
program
changes
and
derives
new
global
information
helpful
in
solving
many
familiar
global
flow
analysis
problems
an
illustrative
application
to
live
variable
analysis
is
presented
many
of
the
graphs
involved
are
constructed
and
analyzed
before
any
programs
are
compiled
thus
avoiding
certain
costs
that
low
level
methods
incur
repeatedly
at
compile
time
cacm
october
1977
rosen
b
k
data
flow
analysis
high
level
language
control
flow
graph
structured
programming
escapes
exits
jumps
goto
statements
5
24
4
12
4
22
ca771003
jb
december
27
1977
11
41
am
1807
4
2923
2034
4
2923
2290
4
2923
2579
4
2923
2579
4
2923
2923
4
2923
2923
4
2923
2945
4
2923
1807
5
2923
1947
5
2923
2923
5
2923
2923
5
2923
2923
5
2923
</TEXT>
</DOC>
<DOC>
<DOCNO>2924</DOCNO>
<TEXT>
an
interactive
computer
graphics
approach
to
surface
representation
an
in
teractive
computer
graphics
method
has
been
developed
for
the
rapid
generation
of
arbitrary
shaped
three
dimensional
surfaces
the
method
is
a
synthesis
of
spline
theory
and
algorithms
an
in
teractive
means
for
man
machine
communication
and
software
for
static
or
dynamic
graphics
display
the
basic
technique
employed
is
a
modified
lofting
method
on
which
sectional
curves
are
represented
by
uniform
b
splines
and
the
surface
is
in
terpolated
between
sections
by
cardinal
splines
among
the
features
of
this
method
are
algorithms
which
enable
in
teractive
modification
of
the
b
spline
representation
of
the
sectional
curves
at
all
stages
of
the
process
the
spatial
information
is
graphically
displayed
to
the
user
complex
surfaces
can
be
created
by
the
combination
of
a
number
of
shapes
that
have
been
separately
generated
and
automatically
joined
the
system
has
been
successfully
in
terfaced
to
a
variety
of
analytical
routines
for
structural
medical
and
graphical
applications
cacm
october
1977
wu
sheng
chuan
abel
j
f
greenberg
d
p
computer
graphics
three
dimensional
surface
representation
splines
lofting
finite
element
input
methods
3
20
3
23
3
34
8
1
8
2
ca771002
jb
december
27
1977
11
53
am
2924
5
2924
2924
5
2924
2924
5
2924
</TEXT>
</DOC>
<DOC>
<DOCNO>2925</DOCNO>
<TEXT>
optimal
surface
reconstruction
from
planar
contours
in
many
scientific
and
technical
endeavors
a
three
dimensional
solid
must
be
reconstructed
from
serial
sections
either
to
aid
in
the
comprehension
of
the
object
structure
or
to
facilitate
its
automatic
manipulation
and
analysis
this
paper
presents
a
general
solution
to
the
problem
of
constructing
a
surface
over
a
set
of
cross
sectional
contours
this
surface
to
be
composed
of
triangular
tiles
is
constructed
by
separately
determining
an
optimal
surface
between
each
pair
of
consecutive
contours
determining
such
a
surface
is
reduced
to
the
problem
of
finding
certain
minimum
cost
cycles
in
a
directed
toroidal
graph
a
new
fast
algorithm
for
finding
such
cycles
is
utilized
also
developed
is
a
closed
form
expression
in
term
of
the
number
of
contour
poin
ts
for
an
upper
bound
on
the
number
of
operations
required
to
execute
the
algorithm
an
illustrated
example
which
involves
the
construction
of
a
minimum
area
surface
describing
a
human
head
is
included
cacm
october
1977
fuchs
h
kedem
z
m
uselton
s
p
surface
reconstruction
contour
data
serial
sections
three
dimensional
computer
graphics
minimum
cost
paths
continuous
tone
displays
5
25
5
32
8
2
ca771001
jb
december
27
1977
12
40
pm
2925
5
2925
2925
5
2925
2925
5
2925
</TEXT>
</DOC>
<DOC>
<DOCNO>2926</DOCNO>
<TEXT>
pagination
of
b
trees
with
variable
length
records
a
strategy
is
presented
for
pagination
of
b
trees
with
variable
length
records
if
records
of
each
length
are
uniformly
distributed
within
the
file
and
if
a
wide
distribution
of
record
lengths
exists
within
the
file
then
this
strategy
results
in
shallow
trees
with
fast
access
times
the
performance
of
this
strategy
in
an
application
is
presented
compared
with
that
of
another
strategy
and
analyzed
cacm
september
1977
mccreight
e
m
b
tree
index
database
tree
storage
structure
searching
3
73
4
33
4
34
ca770908
jb
december
27
1977
12
46
pm
2926
5
2926
2926
5
2926
2926
5
2926
</TEXT>
</DOC>
<DOC>
<DOCNO>2927</DOCNO>
<TEXT>
some
new
upper
bounds
on
the
generation
of
prime
numbers
given
an
integer
n
what
is
the
computational
complexity
of
finding
all
the
primes
less
than
n
a
modified
sieve
of
eratosthenes
using
doubly
linked
lists
yields
an
algorithm
of
o
n
arithmetic
complexity
this
upper
bound
is
shown
to
be
equivalent
to
the
theoretical
lower
bound
for
sieve
methods
without
preprocessing
use
of
preprocessing
techniques
involving
space
time
and
additive
multiplicative
tradeoffs
reduces
this
upper
bound
to
o
n
log
logn
and
the
bit
complexity
to
o
n
logn
log
log
logn
a
storage
requirement
is
described
using
o
n
logn
log
logn
bits
as
well
cacm
september
1977
mairson
h
g
computational
complexity
sieve
prime
number
generation
number
theory
linked
list
preprocessing
balancing
5
25
5
39
ca770907
jb
december
27
1977
12
55
pm
1841
4
2927
1841
4
2927
1967
4
2927
2120
4
2927
2120
4
2927
2927
4
2927
2927
4
2927
2927
4
2927
2927
4
2927
2927
4
2927
1537
5
2927
1538
5
2927
1539
5
2927
1841
5
2927
1840
5
2927
2927
5
2927
2927
5
2927
2927
5
2927
3037
5
2927
2732
6
2927
2927
6
2927
</TEXT>
</DOC>
<DOC>
<DOCNO>2928</DOCNO>
<TEXT>
hardware
estimation
of
a
process
primary
memory
requirements
a
minor
hardware
extension
to
the
honeywell
6180
processor
is
demonstrated
to
allow
the
primary
memory
requirements
of
a
process
in
multics
to
be
approximated
the
additional
hardware
required
for
this
estimate
to
be
computed
consists
of
a
program
accessible
register
containing
the
miss
rate
of
the
associative
memory
used
for
page
table
words
this
primary
memory
requirement
estimate
was
employed
in
an
experimental
version
of
multics
to
control
the
level
of
multiprogramming
in
the
system
and
to
bill
for
memory
usage
the
resulting
system
tuning
parameters
display
configuration
insensitivity
and
it
is
conjectured
that
the
system
would
also
track
shifts
in
the
referencing
characteristics
of
its
workload
and
keep
the
system
in
tune
cacm
september
1977
giffor
d
k
primary
memory
requirement
virtual
memory
level
of
multiprogramming
associative
memory
working
set
resource
allocation
lru
stack
model
referencing
characteristics
4
32
4
35
4
6
6
36
ca770906
jb
december
27
1977
1
05
pm
1892
4
2928
1901
4
2928
2085
4
2928
2095
4
2928
2218
4
2928
2277
4
2928
2319
4
2928
2329
4
2928
2358
4
2928
2373
4
2928
2380
4
2928
2434
4
2928
2499
4
2928
2501
4
2928
2582
4
2928
2629
4
2928
2669
4
2928
2828
4
2928
2847
4
2928
2863
4
2928
2868
4
2928
2881
4
2928
2928
4
2928
2928
4
2928
2928
4
2928
2928
4
2928
2928
4
2928
2951
4
2928
2996
4
2928
3006
4
2928
3046
4
2928
3067
4
2928
3098
4
2928
3107
4
2928
3127
4
2928
1751
5
2928
2277
5
2928
2380
5
2928
2522
5
2928
2569
5
2928
2928
5
2928
2928
5
2928
2928
5
2928
</TEXT>
</DOC>
<DOC>
<DOCNO>2929</DOCNO>
<TEXT>
an
analysis
of
inline
substitution
for
a
structured
programming
language
an
optimization
technique
known
as
inline
substitution
is
analyzed
the
optimization
consists
of
replacing
a
procedure
invocation
by
a
modified
copy
of
the
procedure
body
the
general
problem
of
using
inline
substitution
to
minimize
execution
time
subject
to
size
constrain
ts
is
formulated
and
an
approximate
algorithmic
solution
is
proposed
the
algorithm
depends
on
run
time
statistics
about
the
program
to
be
optimized
preliminary
results
for
the
clu
structured
programming
language
indicate
that
in
programs
with
a
low
degree
of
recursion
over
90
percent
of
all
procedure
calls
can
be
eliminated
with
little
increase
in
the
size
of
compiled
code
and
a
small
savings
in
execution
time
other
conclusions
based
on
these
results
are
also
presented
cacm
september
1977
scheifler
r
w
inline
substitution
open
coding
open
compilation
program
optimization
compilers
structured
programming
languages
run
time
statistics
4
12
ca770905
jb
december
27
1977
1
23
pm
1086
4
2929
1132
4
2929
1234
4
2929
1263
4
2929
1265
4
2929
1270
4
2929
1323
4
2929
1358
4
2929
1379
4
2929
1380
4
2929
1453
4
2929
1464
4
2929
1484
4
2929
1491
4
2929
1498
4
2929
1613
4
2929
1614
4
2929
1781
4
2929
1825
4
2929
1860
4
2929
2083
4
2929
2178
4
2929
2179
4
2929
2252
4
2929
2325
4
2929
2341
4
2929
2546
4
2929
2645
4
2929
2652
4
2929
2684
4
2929
2842
4
2929
2929
4
2929
2934
4
2929
3069
4
2929
669
4
2929
679
4
2929
691
4
2929
761
4
2929
949
4
2929
989
4
2929
2929
5
2929
2929
5
2929
2929
5
2929
3184
5
2929
</TEXT>
</DOC>
<DOC>
<DOCNO>2930</DOCNO>
<TEXT>
the
gre
advanced
test
in
computer
science
this
report
describes
the
advanced
test
in
computer
science
which
was
recently
in
troduced
in
the
graduate
record
examination
program
the
gre
program
is
described
in
general
and
the
events
leading
to
the
establishment
of
the
advanced
computer
science
test
are
discussed
content
specifications
and
their
rationale
are
given
a
set
of
sample
questions
is
included
cacm
september
1977
austing
r
h
education
computer
science
graduate
school
admissions
test
development
examinations
1
5
ca770903
jb
december
27
1977
1
32
pm
2930
5
2930
2930
5
2930
2930
5
2930
</TEXT>
</DOC>
<DOC>
<DOCNO>2931</DOCNO>
<TEXT>
logic
and
programming
languages
logic
has
been
long
in
terested
in
whether
answers
to
certain
questions
are
computable
in
principle
since
the
outcome
puts
bounds
on
the
possibilities
of
formalization
more
recently
precise
comparisons
in
the
efficiency
of
decision
methods
have
become
available
through
the
developments
in
complexity
theory
these
however
are
applications
to
logic
and
a
big
question
is
whether
methods
of
logic
have
significance
in
the
other
direction
for
the
more
applied
parts
of
computability
theory
programming
languages
offer
an
obvious
opportunity
as
their
syntactic
formalization
is
well
advanced
however
the
semantical
theory
can
hardly
be
said
to
be
complete
though
we
have
many
examples
we
have
still
to
give
wide
ranging
mathematical
answers
to
these
queries
what
is
a
machine
what
is
a
computable
process
how
or
how
well
does
a
machine
simulate
a
process
programs
naturally
enter
in
giving
descriptions
of
processes
the
definition
of
the
precise
meaning
of
a
program
then
requires
us
to
explain
what
are
the
objects
of
computation
in
a
way
the
statics
of
the
problem
and
how
they
are
to
be
transformed
the
dynamics
so
far
the
theories
of
automata
and
of
nets
though
most
in
teresting
for
dynamics
have
formalized
only
a
portion
of
the
field
and
there
has
been
perhaps
too
much
concentration
on
the
finite
state
and
algebraic
aspects
it
would
seem
that
the
understanding
of
higher
level
program
features
involves
us
with
infinite
objects
and
forces
us
to
pass
through
several
levels
of
explanation
to
go
from
the
conceptual
ideas
to
the
final
simulation
on
a
real
machine
these
levels
can
be
made
mathematically
exact
if
we
can
find
the
right
abstractions
to
represent
the
necessary
structures
the
experience
of
many
independent
workers
with
the
method
of
data
types
as
lattices
or
partial
orderings
under
an
information
content
ordering
and
with
their
continuous
mappings
has
demonstrated
the
flexibility
of
this
approach
in
providing
definitions
and
proofs
which
are
clean
and
without
undue
dependence
on
implementations
nevertheless
much
remains
to
be
done
in
showing
how
abstract
conceptualizations
can
or
cannot
be
actualized
before
we
can
say
we
have
a
unified
theory
cacm
september
1977
scott
d
s
logic
programming
languages
automata
denotational
semantics
a
calculus
models
computability
partial
functions
approximation
function
spaces
1
2
4
20
5
21
5
24
5
27
ca770902
jb
december
28
1977
6
49
am
2931
5
2931
2931
5
2931
2931
5
2931
</TEXT>
</DOC>
<DOC>
<DOCNO>2932</DOCNO>
<TEXT>
complexity
of
computations
the
framework
for
research
in
the
theory
of
complexity
of
computations
is
described
emphasizing
the
in
terrelation
between
seemingly
diverse
problems
and
methods
illustrative
examples
of
practical
and
theoretical
significance
are
given
directions
for
new
research
are
discussed
cacm
september
1977
rabin
m
o
complexity
of
computations
algebraic
complexity
in
tractable
problems
probabilistic
algorithms
5
25
ca770901
jb
december
28
1977
6
54
am
2932
5
2932
2932
5
2932
2932
5
2932
</TEXT>
</DOC>
<DOC>
<DOCNO>2933</DOCNO>
<TEXT>
another
advantage
of
keyword
notation
for
parameter
communication
with
subprograms
cacm
august
1977
francez
n
keyword
notation
positional
notation
parameters
transmission
subprograms
readability
call
by
value
call
by
reference
call
by
name
compile
time
errors
4
2
4
20
4
22
ca770810
jb
december
28
1977
6
57
am
2757
4
2933
2933
4
2933
2933
4
2933
2630
5
2933
2757
5
2933
2933
5
2933
2933
5
2933
2933
5
2933
</TEXT>
</DOC>
<DOC>
<DOCNO>2934</DOCNO>
<TEXT>
comment
on
computing
the
k
shortest
paths
in
a
graph
cacm
august
1977
lawler
e
l
graph
network
shortest
path
algorithm
ranking
5
32
ca770809
jb
december
28
1977
7
00
am
1086
4
2934
1132
4
2934
1234
4
2934
1263
4
2934
1265
4
2934
1270
4
2934
1323
4
2934
1358
4
2934
1379
4
2934
1380
4
2934
1453
4
2934
1464
4
2934
1484
4
2934
1491
4
2934
1498
4
2934
1613
4
2934
1614
4
2934
1781
4
2934
1825
4
2934
1860
4
2934
2083
4
2934
2178
4
2934
2179
4
2934
2252
4
2934
2325
4
2934
2341
4
2934
2546
4
2934
2645
4
2934
2652
4
2934
2684
4
2934
2842
4
2934
2929
4
2934
2934
4
2934
3069
4
2934
669
4
2934
679
4
2934
691
4
2934
761
4
2934
949
4
2934
989
4
2934
2934
5
2934
2934
5
2934
2934
5
2934
3184
5
2934
</TEXT>
</DOC>
<DOC>
<DOCNO>2935</DOCNO>
<TEXT>
production
and
employment
of
ph
s
in
computer
science
1976
corrigendum
cacm
august
1977
taulbee
o
e
conte
s
d
ca770808
jb
december
28
1977
7
04
am
2935
5
2935
2935
5
2935
2935
5
2935
</TEXT>
</DOC>
<DOC>
<DOCNO>2936</DOCNO>
<TEXT>
an
efficient
data
structure
for
the
simulation
event
set
recently
algorithms
have
been
presented
for
the
realization
of
event
scheduling
routines
suitable
for
general
purpose
discrete
event
simulation
systems
several
exhibited
a
performance
superior
to
that
of
commonly
used
simple
linked
list
algorithms
in
this
paper
a
new
event
scheduling
algorithm
is
presented
which
improves
on
two
aspects
of
the
best
of
the
previously
published
algorithms
first
the
new
algorithm
performance
is
quite
insensitive
to
skewed
distributions
and
second
its
worst
case
complexity
is
o
n
where
n
is
the
number
of
events
in
the
set
furthermore
tests
conducted
to
estimate
the
average
complexity
showed
it
to
be
nearly
independent
of
n
cacm
august
1977
franta
w
r
maly
k
simulation
time
flow
mechanisms
event
scanning
mechanisms
multilinked
lists
3
34
4
22
5
5
8
1
ca770807
jb
december
28
1977
7
15
am
2844
4
2936
2844
4
2936
2936
4
2936
2936
4
2936
3051
4
2936
3064
4
2936
3064
4
2936
3109
4
2936
2742
5
2936
2767
5
2936
2936
5
2936
2936
5
2936
2936
5
2936
3064
5
2936
1846
6
2936
1939
6
2936
2742
6
2936
2767
6
2936
2936
6
2936
</TEXT>
</DOC>
<DOC>
<DOCNO>2937</DOCNO>
<TEXT>
an
experimental
evaluation
of
data
type
conventions
the
language
in
which
programs
are
written
can
have
a
substantial
effect
on
the
reliability
of
the
resulting
programs
this
paper
discusses
an
experiment
that
compares
the
programming
reliability
of
subjects
using
a
statically
typed
language
and
a
typeless
language
analysis
of
the
number
of
errors
and
the
number
of
runs
containing
errors
shows
that
at
least
in
one
environment
the
use
of
a
statically
typed
language
can
increase
programming
reliability
detailed
analysis
of
the
errors
made
by
the
subjects
in
programming
solutions
to
reasonably
small
problems
shows
that
the
subjects
had
difficulty
manipulating
the
representation
of
data
cacm
august
1977
gannon
j
d
data
types
experimentation
language
design
redundancy
reliable
software
4
22
ca770806jb
december
28
1977
7
32
am
2411
4
2937
2709
4
2937
2889
4
2937
2937
4
2937
2989
4
2937
3005
4
2937
3025
4
2937
3101
4
2937
2138
5
2937
2937
5
2937
2937
5
2937
2937
5
2937
</TEXT>
</DOC>
<DOC>
<DOCNO>2938</DOCNO>
<TEXT>
toward
a
discipline
of
real
time
programming
programming
is
divided
into
three
major
categories
with
increasing
complexity
of
reasoning
in
program
validation
sequential
programming
multiprogramming
and
real
time
programming
by
adhering
to
a
strict
programming
discipline
and
by
using
a
suitable
high
level
language
molded
after
this
discipline
the
complexity
of
reasoning
about
concurrency
and
execution
time
constrain
ts
may
be
drastically
reduced
this
may
be
the
only
practical
way
to
make
real
time
systems
analytically
verifiable
and
ultimately
reliable
a
possible
discipline
is
outlined
and
expressed
in
terms
of
the
language
modula
cacm
august
1977
wirth
n
multiprogramming
real
time
programming
process
synchronization
processor
sharing
program
validation
modula
3
80
4
22
ca770805
jb
december
28
19777
39
am
2938
4
2938
2946
4
2938
3128
4
2938
2866
5
2938
2938
5
2938
2938
5
2938
2938
5
2938
</TEXT>
</DOC>
<DOC>
<DOCNO>2939</DOCNO>
<TEXT>
abstraction
mechanisms
in
clu
clu
is
a
new
programming
language
designed
to
support
the
use
of
abstractions
in
program
construction
work
in
programming
methodology
has
led
to
the
realization
that
three
kinds
of
abstractions
procedural
control
and
especially
data
abstractions
are
useful
in
the
programming
process
of
these
only
the
procedural
abstraction
is
supported
well
by
conventional
languages
through
the
procedure
or
subroutine
clu
provides
in
addition
to
procedures
novel
linguistic
mechanisms
that
support
the
use
of
data
and
control
abstractions
this
paper
provides
an
in
troduction
to
the
abstraction
mechanisms
in
clu
by
means
of
programming
examples
the
utility
of
the
three
kinds
of
abstractions
in
program
construction
is
illustrated
and
it
is
shown
how
clu
programs
may
be
written
to
use
and
implement
abstractions
the
clu
library
which
permits
incremental
program
development
with
complete
type
checking
performed
at
compile
time
is
also
discussed
cacm
august
1977
liskov
b
snyder
a
atkinson
r
schaffert
c
programming
languages
data
types
data
abstractions
control
abstractions
programming
methodology
separate
compilation
4
0
4
12
4
20
4
22
ca770804
jb
december
28
1977
7
49
am
2319
4
2939
2480
4
2939
2594
4
2939
2709
4
2939
2868
4
2939
2939
4
2939
2939
4
2939
2941
4
2939
2972
4
2939
3155
4
2939
2204
5
2939
2558
5
2939
2939
5
2939
2939
5
2939
2939
5
2939
3031
5
2939
3105
5
2939
3148
5
2939
3150
5
2939
1471
6
2939
1860
6
2939
2060
6
2939
2625
6
2939
2632
6
2939
2704
6
2939
2817
6
2939
2842
6
2939
2865
6
2939
2868
6
2939
2939
6
2939
2939
6
2939
2939
6
2939
2939
6
2939
2940
6
2939
2941
6
2939
2943
6
2939
2958
6
2939
3068
6
2939
3073
6
2939
3073
6
2939
3148
6
2939
</TEXT>
</DOC>
<DOC>
<DOCNO>2940</DOCNO>
<TEXT>
abstraction
and
verification
in
alphard
defining
and
specifying
iteration
and
generators
the
alphard
form
provides
the
programmer
with
a
great
deal
of
control
over
the
implementation
of
abstract
data
types
in
this
paper
the
abstraction
techniques
are
extended
from
simple
data
representation
and
function
definition
to
the
iteration
statement
the
most
important
poin
t
of
interaction
between
data
and
the
control
structure
of
the
language
itself
a
means
of
specializing
alphard
loops
to
operate
on
abstract
entities
without
explicit
dependence
on
the
representation
of
those
entities
is
in
troduced
specification
and
verification
techniques
that
allow
the
properties
of
the
generators
for
such
iterations
to
be
expressed
in
the
form
of
proof
rules
are
developed
results
are
obtained
that
for
common
special
cases
of
these
loops
are
essentially
identical
to
the
corresponding
constructs
in
other
languages
a
means
of
showing
that
a
generator
will
terminate
is
also
provided
cacm
august
1977
shaw
m
wulf
w
a
abstraction
and
representation
abstract
data
types
assertions
control
specialization
correctness
generators
invariants
iteration
statements
modular
decomposition
program
specifications
programming
languages
programming
methodology
proofs
of
correctness
types
verification
4
20
5
24
ca770803
jb
december
28
1977
7
59
am
2940
5
2940
2940
5
2940
2940
5
2940
3150
5
2940
2060
6
2940
2704
6
2940
2842
6
2940
2939
6
2940
2940
6
2940
2941
6
2940
2943
6
2940
3073
6
2940
3148
6
2940
</TEXT>
</DOC>
<DOC>
<DOCNO>2941</DOCNO>
<TEXT>
early
experience
with
mesa
the
experiences
of
mesa
first
users
primarily
its
implementers
are
discussed
and
some
implications
for
mesa
and
similar
programming
languages
are
suggested
the
specific
topics
addressed
are
module
structure
and
its
use
in
defining
abstractions
data
structuring
facilities
in
mesa
an
equivalence
algorithm
for
types
and
type
coercions
the
benefits
of
the
type
system
and
why
it
is
breached
occasionally
and
the
difficulty
of
making
the
treatment
of
variant
records
safe
cacm
august
1977
geschke
c
m
morris
j
h
jr
satterthwaite
e
h
programming
languages
types
modules
data
structures
systems
programming
4
22
ca770802
jb
december
28
1977
8
07
am
1458
4
2941
1523
4
2941
1603
4
2941
1698
4
2941
1747
4
2941
1748
4
2941
1854
4
2941
1877
4
2941
1960
4
2941
2377
4
2941
2378
4
2941
2497
4
2941
2558
4
2941
2625
4
2941
2632
4
2941
2704
4
2941
2723
4
2941
2738
4
2941
2840
4
2941
2866
4
2941
2868
4
2941
2869
4
2941
2939
4
2941
2941
4
2941
2941
4
2941
2941
4
2941
2941
4
2941
2956
4
2941
2958
4
2941
3004
4
2941
3030
4
2941
3030
4
2941
3105
4
2941
3144
4
2941
1471
5
2941
2356
5
2941
2558
5
2941
2651
5
2941
2941
5
2941
2941
5
2941
2941
5
2941
3150
5
2941
2060
6
2941
2704
6
2941
2842
6
2941
2939
6
2941
2940
6
2941
2941
6
2941
2943
6
2941
3073
6
2941
3148
6
2941
</TEXT>
</DOC>
<DOC>
<DOCNO>2942</DOCNO>
<TEXT>
an
algol
based
implementation
of
snobol
4
patterns
cacm
july
1977
brownlee
j
n
patterns
snobol
4
pattern
matching
string
processing
pattern
implementation
algorithms
in
pascal
4
29
ca770710
jb
december
28
1977
8
15
am
2942
5
2942
2942
5
2942
2942
5
2942
</TEXT>
</DOC>
<DOC>
<DOCNO>2943</DOCNO>
<TEXT>
lucid
a
nonprocedural
language
with
iteration
lucid
is
a
formal
system
in
which
programs
can
be
written
and
proofs
of
programs
carried
out
the
proofs
are
particularly
easy
to
follow
and
straightforward
to
produce
because
the
statements
in
a
lucid
program
are
simply
axioms
from
which
the
proof
proceeds
by
almost
conventional
logical
reasoning
with
the
help
of
a
few
axioms
and
rules
of
inference
for
the
special
lucid
functions
as
a
programming
language
lucid
is
unconventional
because
among
other
things
the
order
of
statements
is
irrelevant
and
assignment
statements
are
equations
nevertheless
lucid
programs
need
not
look
much
different
than
iterative
programs
in
a
conventional
structured
programming
language
using
assignment
and
conditional
statements
and
loops
cacm
july
1977
ashcrof
e
a
wadge
w
w
program
proving
formal
systems
semantics
iteration
structured
programming
5
21
5
24
ca770709
jb
december
28
1977
8
30
am
2021
4
2943
2222
4
2943
2227
4
2943
2315
4
2943
2326
4
2943
2470
4
2943
2732
4
2943
2865
4
2943
2896
4
2943
2943
4
2943
3014
4
2943
3068
4
2943
3077
4
2943
3143
4
2943
1834
5
2943
2943
5
2943
2943
5
2943
2943
5
2943
3150
5
2943
2060
6
2943
2704
6
2943
2842
6
2943
2939
6
2943
2940
6
2943
2941
6
2943
2943
6
2943
3073
6
2943
3148
6
2943
</TEXT>
</DOC>
<DOC>
<DOCNO>2944</DOCNO>
<TEXT>
shifting
garbage
collection
overhead
to
compile
time
this
paper
discusses
techniques
which
enable
automatic
storage
reclamation
overhead
to
be
partially
shifted
to
compile
time
the
paper
assumes
a
transaction
oriented
collection
scheme
as
proposed
by
deutsch
and
bobrow
the
necessary
features
of
which
are
summarized
implementing
the
described
optimizations
requires
global
flow
analysis
to
be
performed
on
the
source
program
it
is
shown
that
at
compile
time
certain
program
actions
that
affect
the
reference
counts
of
cells
can
be
deduced
this
information
is
used
to
find
actions
that
cancel
when
the
code
is
executed
and
those
that
can
be
grouped
to
achieve
improved
efficiency
cacm
july
1977
barth
j
m
garbage
collection
global
flow
analysis
list
processing
optimization
reference
counts
storage
management
3
80
4
12
4
20
4
34
ca770708
jb
december
28
1977
8
38
am
2855
4
2944
2855
4
2944
2944
4
2944
2944
4
2944
3106
4
2944
3112
4
2944
2833
5
2944
2944
5
2944
2944
5
2944
2944
5
2944
2998
5
2944
</TEXT>
</DOC>
<DOC>
<DOCNO>2945</DOCNO>
<TEXT>
certification
of
programs
for
secure
information
flow
this
paper
presents
a
certification
mechanism
for
verifying
the
secure
flow
of
information
through
a
program
because
it
exploits
the
properties
of
a
lattice
structure
among
security
classes
the
procedure
is
sufficiently
simple
that
it
can
easily
be
included
in
the
analysis
phase
of
most
existing
compilers
appropriate
semantics
are
presented
and
proved
correct
an
important
application
is
the
confinement
problem
the
mechanism
can
prove
that
a
program
cannot
cause
supposedly
nonconfidential
results
to
depend
on
confidential
input
data
cacm
july
1977
denning
d
e
denning
p
j
protection
security
information
flow
program
certification
lattice
confinement
security
classes
4
3
4
35
5
24
ca770707
jb
december
28
1977
8
48
am
1807
4
2945
2034
4
2945
2290
4
2945
2579
4
2945
2923
4
2945
2945
4
2945
2945
4
2945
2945
4
2945
3128
4
2945
3150
4
2945
1947
5
2945
2704
5
2945
2870
5
2945
2945
5
2945
2945
5
2945
2945
5
2945
</TEXT>
</DOC>
<DOC>
<DOCNO>2946</DOCNO>
<TEXT>
an
alternative
to
event
queues
for
synchronization
in
monitors
in
the
monitor
concept
as
proposed
by
brinch
hansen
and
hoare
event
are
used
for
synchronization
this
paper
describes
another
synchronizing
primitive
which
is
nearly
as
expressive
as
the
conditional
wait
but
can
be
implemented
more
efficiently
an
implementation
of
this
primitive
in
terms
of
p
and
v
operations
is
given
together
with
a
correctness
proof
two
examples
are
presented
the
readers
and
writers
problem
and
the
problem
of
information
streams
sharing
a
finite
buffer
pool
cacm
july
1977
kessels
j
l
w
monitor
operating
system
mutual
exclusion
synchronization
conditional
critical
region
structuring
concept
4
31
ca770706
jb
december
28
1977
10
10
am
2320
4
2946
2597
4
2946
2777
4
2946
2851
4
2946
2895
4
2946
2912
4
2946
2938
4
2946
2946
4
2946
2946
4
2946
3128
4
2946
3128
4
2946
2150
5
2946
2866
5
2946
2898
5
2946
2946
5
2946
2946
5
2946
2946
5
2946
2597
6
2946
2946
6
2946
</TEXT>
</DOC>
<DOC>
<DOCNO>2947</DOCNO>
<TEXT>
sitar
an
interactive
text
processing
system
for
small
computers
sitar
a
low
cost
in
teractive
text
handling
and
text
analysis
system
for
nontechnical
users
is
in
many
ways
comparable
to
in
teractive
bibliographical
search
and
retrieval
systems
but
has
several
additional
features
it
is
implemented
on
a
pdp
11
time
sharing
computer
invoked
by
a
crt
with
microprogrammed
editing
functions
it
uses
a
simple
command
language
designating
a
function
a
file
and
a
search
template
consisting
of
the
textual
string
desired
and
strings
delimiting
the
context
in
which
the
hit
is
to
be
delivered
extensive
experience
with
sitar
shows
that
the
combined
powers
of
simple
commands
string
orientation
circular
file
structure
a
crt
with
local
memory
and
conversational
computing
produce
a
system
much
more
powerful
than
the
sum
of
its
parts
cacm
july
1977
schneider
b
r
jr
watts
r
m
information
retrieval
text
editing
minicomputers
crts
time
sharing
bibliographic
search
and
retrieval
literary
analysis
linguistic
analysis
command
languages
3
4
3
7
ca770705
jb
december
28
1977
10
20
am
2947
5
2947
2947
5
2947
2947
5
2947
</TEXT>
</DOC>
<DOC>
<DOCNO>2948</DOCNO>
<TEXT>
a
terminal
oriented
communication
system
this
paper
describes
a
system
for
full
duplex
communication
between
a
time
shared
computer
and
its
terminals
the
system
consists
of
a
communications
computer
directly
connected
to
the
time
shared
system
a
number
of
small
remote
computers
to
which
the
terminals
are
attached
and
connecting
medium
speed
telephone
lines
it
can
service
a
large
number
of
terminals
of
various
types
the
overall
system
design
is
presented
along
with
the
algorithms
used
to
solve
three
specific
problems
local
echoing
error
detection
and
correction
on
the
telephone
lines
and
multiplexing
of
character
output
cacm
july
1977
heckel
p
g
lampson
b
w
terminal
system
error
correction
multiplexing
local
echoing
communication
system
network
3
81
4
31
ca770704
jb
december
28
1977
11
49
am
2948
5
2948
2948
5
2948
2948
5
2948
</TEXT>
</DOC>
<DOC>
<DOCNO>2949</DOCNO>
<TEXT>
a
correctness
proof
of
a
topology
information
main
tenance
protocol
for
a
distributed
computer
network
in
order
for
the
nodes
of
a
distributed
computer
network
to
communicate
each
node
must
have
information
about
the
network
topology
since
nodes
and
links
sometimes
crash
a
scheme
is
needed
to
update
this
information
one
of
the
major
constrain
ts
on
such
a
topology
information
scheme
is
that
it
may
not
involve
a
central
controller
the
topology
information
protocol
that
was
implemented
on
the
merit
computer
network
is
presented
and
explained
this
protocol
is
quite
general
and
could
be
implemented
on
any
computer
network
it
is
based
on
baran
hot
potato
heuristic
routing
doctrine
a
correctness
proof
of
this
topology
information
protocol
is
also
presented
cacm
july
1977
tajibnapis
w
d
distributed
computer
network
correctness
proofs
computer
networks
distributed
control
network
topology
routing
problem
in
networks
distributed
operating
system
store
and
forward
packet
switching
store
and
forward
message
switching
traffic
control
3
81
4
32
ca770703
jb
december
28
1977
11
59
am
2949
5
2949
2949
5
2949
2949
5
2949
</TEXT>
</DOC>
<DOC>
<DOCNO>2950</DOCNO>
<TEXT>
a
unifying
approach
to
scheduling
this
paper
presents
a
scheme
for
classifying
scheduling
algorithms
based
on
an
abstract
model
of
a
scheduling
system
which
formalizes
the
notion
of
priority
various
classes
of
scheduling
algorithms
are
defined
and
related
to
existing
algorithms
a
criterion
for
the
implementation
efficiency
of
an
algorithm
is
developed
and
results
in
the
definition
of
time
invariant
algorithms
which
include
most
of
the
commonly
implemented
ones
for
time
invariant
algorithms
the
dependence
of
processing
rates
on
priorities
is
derived
the
abstract
model
provides
a
framework
for
implementing
flexible
schedulers
in
real
operating
systems
the
policy
driven
scheduler
of
bernstein
and
sharp
is
discussed
as
an
example
of
such
an
implementation
cacm
july
1977
ruschitzka
m
fabry
r
s
scheduling
algorithms
scheduling
models
priority
operating
systems
processor
sharing
implementation
efficiency
4
31
4
32
4
34
4
35
8
1
ca770702
jb
december
28
1977
12
32
pm
2950
4
2950
3072
4
2950
2219
5
2950
2950
5
2950
2950
5
2950
2950
5
2950
</TEXT>
</DOC>
<DOC>
<DOCNO>2951</DOCNO>
<TEXT>
dynamic
response
time
prediction
for
computer
networks
if
the
ultimate
aim
of
a
computing
network
is
resource
sharing
then
the
human
component
as
well
as
the
technical
component
of
networking
must
be
fully
investigated
to
achieve
this
goal
this
research
is
a
first
step
toward
assisting
the
user
in
participating
in
the
vast
store
of
resources
available
on
a
network
analytical
simulation
and
statistical
performance
evaluation
tools
are
employed
to
investigate
the
feasibility
of
a
dynamic
response
time
monitor
that
is
capable
of
providing
comparative
response
time
information
for
users
wishing
to
process
various
computing
applications
at
some
network
computing
node
the
research
clearly
reveals
that
sufficient
system
data
are
currently
obtainable
at
least
for
the
five
diverse
arpa
network
systems
studied
in
detail
to
describe
and
predict
the
response
time
for
network
time
sharing
systems
as
it
depends
on
some
measure
of
system
activity
or
load
level
cacm
july
1977
mamrak
s
a
response
time
monitor
computer
networks
time
sharing
systems
comparative
response
time
arpa
network
anlytic
modeling
simulation
benchmark
jobs
system
measurement
4
6
6
20
8
1
ca770701
jb
december
28
1977
12
42
pm
2629
4
2951
2868
4
2951
2928
4
2951
2951
4
2951
2380
5
2951
2951
5
2951
2951
5
2951
2951
5
2951
</TEXT>
</DOC>
<DOC>
<DOCNO>2952</DOCNO>
<TEXT>
functions
realizable
with
word
parallel
logical
and
two
complement
addition
instructions
cacm
june
1977
warren
h
s
jr
boolean
functions
two
complement
sign
propagation
4
0
6
32
ca770611
jb
december
28
1977
12
45
pm
362
4
2952
2296
4
2952
2952
4
2952
2952
4
2952
2952
4
2952
2952
4
2952
2952
4
2952
2952
4
2952
142
4
2952
142
4
2952
142
4
2952
142
5
2952
162
5
2952
163
5
2952
192
5
2952
2185
5
2952
2727
5
2952
2952
5
2952
2952
5
2952
2952
5
2952
</TEXT>
</DOC>
<DOC>
<DOCNO>2953</DOCNO>
<TEXT>
notes
on
recursion
elimination
various
methods
of
recursion
elimination
are
applied
to
the
schematic
recursive
procedure
proc
s
x
px
then
n
x
s
fx
s
gx
m
x
fi
procedures
with
this
general
form
arise
in
connection
with
tree
traversal
and
sorting
algorithms
each
method
of
recursion
removal
involves
the
use
of
one
or
more
stacks
and
the
solutions
are
compared
on
the
basis
of
their
running
time
cacm
june
1977
bird
r
s
recursion
elimination
optimization
of
programs
stacks
trees
sorting
algorithms
computational
induction
4
0
4
2
5
20
5
24
5
25
5
31
ca770610
jb
december
28
1977
12
50
pm
2953
5
2953
2953
5
2953
2953
5
2953
3020
5
2953
2953
6
2953
</TEXT>
</DOC>
<DOC>
<DOCNO>2954</DOCNO>
<TEXT>
a
bounded
storage
algorithm
for
copying
cyclic
structures
a
new
algorithm
is
presented
which
copies
cyclic
list
structures
using
bounded
workspace
and
linear
time
unlike
a
previous
similar
algorithm
this
one
makes
no
assumptions
about
the
storage
allocation
system
in
use
and
uses
only
operations
likely
to
be
available
in
a
high
level
language
the
distinctive
feature
of
this
algorithm
is
a
technique
for
traversing
the
structure
twice
using
the
same
spanning
tree
in
each
case
first
from
left
to
right
and
then
from
right
to
left
cacm
june
1977
robson
j
m
copying
shared
subtrees
cyclic
structures
4
49
5
25
ca770609
jb
december
28
1977
12
56
pm
2766
4
2954
2855
4
2954
2954
4
2954
2954
4
2954
3106
4
2954
3106
4
2954
2665
5
2954
2766
5
2954
2954
5
2954
2954
5
2954
2954
5
2954
3106
5
2954
1549
6
2954
210
6
2954
1972
6
2954
2665
6
2954
2766
6
2954
2855
6
2954
2954
6
2954
2998
6
2954
</TEXT>
</DOC>
<DOC>
<DOCNO>2955</DOCNO>
<TEXT>
buddy
systems
two
algorithms
are
presented
for
implementing
any
of
a
class
of
buddy
systems
for
dynamic
storage
allocation
each
buddy
system
corresponds
to
a
set
of
recurrence
relations
which
relate
the
block
sizes
provided
to
each
other
analyses
of
the
in
ternal
fragmentation
of
the
binary
buddy
system
the
fibonacci
buddy
system
and
the
weighted
buddy
system
are
given
comparative
simulation
results
are
also
presented
for
in
ternal
external
and
total
fragmentation
cacm
june
1977
peterson
j
l
norman
t
a
dynamic
storage
allocation
buddy
system
fragmentation
fibonacci
buddy
system
weighted
buddy
system
3
89
4
32
4
39
ca770608
jb
december
28
1977
1
20
pm
1389
4
2955
1552
4
2955
2162
4
2955
2435
4
2955
2596
4
2955
2596
4
2955
2747
4
2955
2768
4
2955
2768
4
2955
2773
4
2955
2845
4
2955
2845
4
2955
2845
4
2955
2902
4
2955
2902
4
2955
2902
4
2955
2902
4
2955
2911
4
2955
2911
4
2955
2955
4
2955
2955
4
2955
2955
4
2955
2955
4
2955
2955
4
2955
1184
5
2955
2435
5
2955
2596
5
2955
2747
5
2955
2773
5
2955
2955
5
2955
2955
5
2955
2955
5
2955
</TEXT>
</DOC>
<DOC>
<DOCNO>2956</DOCNO>
<TEXT>
some
ideas
on
data
types
in
high
level
languages
a
number
of
issues
are
explored
concerning
the
notion
that
a
data
type
is
a
set
of
values
together
with
a
set
of
primitive
operations
on
those
values
among
these
are
the
need
for
a
notation
for
iterating
over
the
elements
of
any
finite
set
instead
of
the
more
narrow
for
i
1
to
n
notation
the
use
of
the
domain
of
an
array
as
a
data
type
the
need
for
a
simple
notation
for
allowing
types
of
parameters
to
be
themselves
parameters
but
in
a
restrictive
fashion
and
resulting
problems
with
conversion
of
values
from
one
type
to
another
cacm
june
1977
gries
d
gehani
n
data
types
generic
procedures
programming
languages
4
12
4
20
4
22
ca770607
jb
december
28
1977
1
27
pm
2167
4
2956
2723
4
2956
2941
4
2956
2956
4
2956
2956
4
2956
3030
4
2956
1379
5
2956
2651
5
2956
2956
5
2956
2956
5
2956
2956
5
2956
3049
5
2956
2956
6
2956
2958
6
2956
2957
6
2956
2960
6
2956
</TEXT>
</DOC>
<DOC>
<DOCNO>2957</DOCNO>
<TEXT>
database
abstractions
aggregation
aggregation
is
in
troduced
as
an
abstraction
which
is
important
in
conceptualizing
the
real
world
aggregation
transforms
a
relationship
between
objects
into
a
higher
level
object
a
new
data
type
called
aggregation
is
developed
which
under
certain
criteria
of
well
definedness
specifies
aggregation
abstractions
relational
databases
defined
as
collections
of
aggregates
are
structured
as
a
hierarchy
on
n
ary
relations
to
main
tain
well
definedness
update
operations
on
such
databases
must
preserve
two
invariants
well
defined
relations
are
distinct
from
relations
in
third
normal
form
it
is
shown
that
these
notions
are
complementary
and
both
are
important
in
database
design
a
top
down
methodology
for
database
design
is
described
which
separates
decisions
concerning
aggregate
structure
from
decisions
concerning
key
identification
it
is
suggested
that
aggregate
types
and
other
types
which
support
real
world
abstractions
without
in
troducing
implementation
detail
should
be
incorporated
into
programming
languages
cacm
june
1977
smith
j
m
smith
d
c
p
data
abstraction
relational
database
data
type
aggregation
database
design
data
structure
knowledge
representation
data
definition
language
3
65
3
69
3
79
4
29
4
33
4
34
ca770606
jb
december
29
1977
12
33
am
2155
4
2957
2406
4
2957
2710
4
2957
2715
4
2957
2716
4
2957
2717
4
2957
2718
4
2957
2765
4
2957
2817
4
2957
2888
4
2957
2901
4
2957
2957
4
2957
2959
4
2957
2965
4
2957
3087
4
2957
3154
4
2957
2046
5
2957
2957
5
2957
2957
5
2957
2957
5
2957
3049
5
2957
2956
6
2957
2958
6
2957
2957
6
2957
2960
6
2957
</TEXT>
</DOC>
<DOC>
<DOCNO>2958</DOCNO>
<TEXT>
abstract
data
types
and
the
development
of
data
structures
abstract
data
types
can
play
a
significant
role
in
the
development
of
software
that
is
reliable
efficient
and
flexible
this
paper
presents
and
discusses
the
application
of
an
algebraic
technique
for
the
specification
of
abstract
data
types
among
the
examples
presented
is
a
top
down
development
of
a
symbol
table
for
a
block
structured
language
a
discussion
of
the
proof
of
its
correctness
is
given
the
paper
also
contains
a
brief
discussion
of
the
problems
involved
in
constructing
algebraic
specifications
that
are
both
consistent
and
complete
cacm
june
1977
guttag
j
abstract
data
type
correctness
proof
data
type
data
structure
specification
software
specification
4
34
5
24
ca770605
jb
december
29
1977
1
17
am
2704
4
2958
2738
4
2958
2866
4
2958
2869
4
2958
2941
4
2958
2958
4
2958
3004
4
2958
3030
4
2958
2356
5
2958
2958
5
2958
2958
5
2958
2958
5
2958
3030
5
2958
3031
5
2958
3049
5
2958
2247
6
2958
2356
6
2958
2457
6
2958
2651
6
2958
2939
6
2958
2956
6
2958
2958
6
2958
2958
6
2958
2958
6
2958
2957
6
2958
2960
6
2958
2972
6
2958
</TEXT>
</DOC>
<DOC>
<DOCNO>2959</DOCNO>
<TEXT>
the
system
for
business
automation
sba
programming
language
the
system
for
business
automation
sba
is
a
system
within
which
application
experts
nonprogrammers
can
describe
and
execute
their
applications
on
a
computer
the
user
of
sba
views
his
application
as
manipulation
of
information
in
two
dimensional
pictures
of
tables
business
forms
and
reports
on
a
display
terminal
he
can
gradually
automate
this
application
by
giving
examples
to
the
system
of
how
he
manually
manipulates
the
information
the
query
by
example
database
language
is
a
subset
of
the
sba
programming
language
cacm
june
1977
zloof
m
m
de
jong
s
p
programming
language
graphics
user
in
terface
data
flow
forms
flow
data
abstraction
database
query
data
processing
business
system
specification
application
programming
3
73
3
74
4
22
4
33
4
34
ca770604
jb
december
29
1977
1
25
am
2155
4
2959
2406
4
2959
2710
4
2959
2715
4
2959
2716
4
2959
2717
4
2959
2718
4
2959
2765
4
2959
2817
4
2959
2888
4
2959
2901
4
2959
2957
4
2959
2959
4
2959
2965
4
2959
3087
4
2959
3154
4
2959
2046
5
2959
2959
5
2959
2959
5
2959
2959
5
2959
</TEXT>
</DOC>
<DOC>
<DOCNO>2960</DOCNO>
<TEXT>
two
views
of
data
abstraction
cacm
june
1977
ledgard
h
f
taylor
r
w
ca770603
jb
december
29
1977
1
28
am
2960
5
2960
2960
5
2960
2960
5
2960
3049
5
2960
2956
6
2960
2958
6
2960
2957
6
2960
2960
6
2960
</TEXT>
</DOC>
<DOC>
<DOCNO>2961</DOCNO>
<TEXT>
experimental
investigations
of
the
utility
of
detailed
flowcharts
in
programming
this
paper
describes
previous
research
on
flowcharts
and
a
series
of
controlled
experiments
to
test
the
utility
of
detailed
flowcharts
as
an
aid
to
program
composition
comprehension
debugging
and
modification
no
statistically
significant
difference
between
flowchart
and
nonflowchart
groups
has
been
shown
thereby
calling
into
question
the
utility
of
detailed
flowcharting
a
program
of
further
research
is
suggested
cacm
june
1977
shneiderman
b
mayer
r
mckay
d
heller
p
flowcharts
program
composition
program
comprehension
debugging
modification
experimental
testing
human
factors
1
5
4
0
ca770602
jb
december
29
1977
1
33
am
2961
4
2961
2961
5
2961
2961
5
2961
2961
5
2961
721
5
2961
</TEXT>
</DOC>
<DOC>
<DOCNO>2962</DOCNO>
<TEXT>
production
and
employment
of
ph
s
in
computer
science
1976
statistics
are
presented
on
the
production
and
employment
of
ph
s
in
computer
science
for
the
calendar
year
1975
76
data
include
profiles
of
graduate
students
and
of
faculty
at
60
ph
producing
departments
as
well
as
a
breakdown
of
degrees
granted
by
specialty
areas
significant
trends
are
noted
and
comparisons
with
comparable
data
gathered
for
the
1974
75
calendar
year
are
made
cacm
june
1977
taulbee
o
e
conte
s
d
computer
science
production
of
ph
s
employment
students
1
3
1
52
1
53
1
59
ca770601
jb
december
29
1977
1
39
am
2962
4
2962
3122
4
2962
3123
4
2962
2861
5
2962
2962
5
2962
2962
5
2962
2962
5
2962
3123
5
2962
3122
5
2962
2823
6
2962
2861
6
2962
2861
6
2962
2962
6
2962
2962
6
2962
3022
6
2962
</TEXT>
</DOC>
<DOC>
<DOCNO>2963</DOCNO>
<TEXT>
a
fast
algorithm
for
computing
longest
common
subsequences
previously
published
algorithms
for
finding
the
longest
common
subsequence
of
two
sequences
of
length
n
have
had
a
best
case
running
time
of
o
n
2
an
algorithm
for
this
problem
is
presented
which
has
a
running
time
of
o
r
n
log
n
where
r
is
the
total
number
of
ordered
pairs
of
positions
at
which
the
two
sequences
match
thus
in
the
worst
case
the
algorithm
has
a
running
time
of
o
n
2
log
n
however
for
those
applications
where
most
positions
of
one
sequence
match
relatively
few
positions
in
the
other
sequence
a
running
time
of
o
n
log
n
can
be
expected
cacm
may
1977
hunt
j
w
szymanski
t
g
longest
common
subsequence
efficient
algorithms
3
73
3
63
5
25
ca770509
jb
december
29
1977
1
46
am
2963
4
2963
3114
4
2963
2745
5
2963
2963
5
2963
2963
5
2963
2963
5
2963
</TEXT>
</DOC>
<DOC>
<DOCNO>2964</DOCNO>
<TEXT>
an
approach
to
optimal
design
of
storage
parameters
in
databases
cacm
may
1977
milman
y
database
organization
storage
parameter
optimization
resident
overflow
storage
3
73
3
74
ca770508
jb
december
29
1977
1
48
am
2964
5
2964
2964
5
2964
2964
5
2964
</TEXT>
</DOC>
<DOC>
<DOCNO>2965</DOCNO>
<TEXT>
an
optimal
evaluation
of
boolean
expressions
in
an
online
query
system
cacm
may
1977
hanani
m
z
query
boolean
expression
information
retrieval
file
organization
3
5
3
70
3
74
ca770507
jb
december
29
1977
1
51
am
2155
4
2965
2406
4
2965
2710
4
2965
2715
4
2965
2716
4
2965
2717
4
2965
2718
4
2965
2765
4
2965
2765
4
2965
2817
4
2965
2888
4
2965
2901
4
2965
2957
4
2965
2959
4
2965
2965
4
2965
2965
4
2965
3087
4
2965
3154
4
2965
2046
5
2965
2451
5
2965
2965
5
2965
2965
5
2965
2965
5
2965
3168
5
2965
3169
5
2965
2965
6
2965
2965
6
2965
3002
6
2965
</TEXT>
</DOC>
<DOC>
<DOCNO>2966</DOCNO>
<TEXT>
the
choice
of
reference
poin
ts
in
best
match
file
searching
improvements
to
the
exhaustive
search
method
of
best
match
file
searching
have
previously
been
achieved
by
doing
a
preprocessing
step
involving
the
calculation
of
distances
from
a
reference
poin
t
this
paper
discusses
the
proper
choice
of
reference
poin
ts
and
extends
the
previous
algorithm
to
use
more
than
one
reference
poin
t
it
is
shown
that
reference
poin
ts
should
be
located
outside
of
data
clusters
the
results
of
computer
simulations
are
presented
which
show
that
large
improvements
can
be
achieved
by
the
proper
choice
and
location
of
multiple
reference
poin
ts
cacm
may
1977
shapiro
m
matching
file
searching
best
match
nearest
neighbor
classification
3
73
3
74
ca770506
jb
december
29
1977
1
57
am
2575
4
2966
2966
4
2966
3134
4
2966
2524
5
2966
2966
5
2966
2966
5
2966
2966
5
2966
</TEXT>
</DOC>
<DOC>
<DOCNO>2967</DOCNO>
<TEXT>
a
comparison
of
hardware
and
software
associative
memories
in
the
context
of
computer
graphics
the
associative
processing
of
line
drawings
apld
system
utilizes
a
hardware
associative
memory
and
creates
modifies
deletes
stores
and
retrieves
two
dimensional
line
drawings
consisting
of
poin
ts
lines
rectangles
and
triangles
the
apld
functions
were
duplicated
on
the
tx
2
computer
at
m
s
lincoln
laboratory
under
the
leap
language
and
data
structure
a
comparison
of
the
hardware
approach
with
the
software
simulation
illustrates
the
advantages
of
the
hardware
associative
memory
in
three
areas
1
processing
speed
2
storage
requirements
and
3
flexibility
the
major
problem
areas
of
hardware
associative
memory
technology
namely
input
output
and
cost
effectiveness
are
also
addressed
cacm
may
1977
stillman
n
j
berra
p
b
associative
memory
associative
processor
content
addressable
memory
graphics
information
retrieval
data
structures
software
evaluation
hardware
evaluation
parallel
processing
database
management
3
71
3
72
3
73
3
74
4
34
4
6
6
22
8
2
ca770505
jb
december
29
1977
2
07
am
2719
4
2967
2967
4
2967
2151
5
2967
2967
5
2967
2967
5
2967
2967
5
2967
</TEXT>
</DOC>
<DOC>
<DOCNO>2968</DOCNO>
<TEXT>
a
comparison
of
tree
balancing
algorithms
several
algorithms
height
balance
i
e
avl
and
extensions
weight
balance
i
e
bb
and
wb
and
total
restructuring
for
building
balanced
binary
search
trees
are
compared
the
criteria
for
comparison
encompass
theoretical
aspects
e
g
path
lengths
and
implementation
independent
and
machine
algorithm
dependent
measures
e
g
run
time
a
detailed
analysis
of
code
is
also
presented
at
a
level
believed
to
be
language
and
compiler
independent
the
quality
of
the
resulting
trees
and
the
overhead
spent
on
building
them
are
analyzed
and
some
guidelines
are
given
for
an
efficient
use
of
the
methods
if
insertion
and
subsequent
queries
are
the
only
operations
of
in
terest
then
pure
avl
trees
present
the
overall
best
qualities
cacm
may
1977
baer
j
l
schwab
b
binary
search
trees
avl
trees
weight
balanced
trees
path
length
analysis
of
algorithms
information
storage
and
retrieval
3
7
3
72
3
74
5
31
ca770504
jb
december
29
1977
2
16
am
2455
4
2968
2493
4
2968
2889
4
2968
2889
4
2968
2968
4
2968
2968
4
2968
3042
4
2968
2388
5
2968
2455
5
2968
2968
5
2968
2968
5
2968
2968
5
2968
3042
5
2968
2455
6
2968
2839
6
2968
2889
6
2968
2968
6
2968
</TEXT>
</DOC>
<DOC>
<DOCNO>2969</DOCNO>
<TEXT>
optimal
program
and
data
locations
in
computer
networks
an
optimization
procedure
for
the
allocation
of
program
and
data
files
in
a
computer
network
is
presented
this
algorithm
takes
into
account
the
dependencies
between
files
and
programs
such
as
occur
in
real
heterogeneous
computer
networks
insights
into
whether
or
not
to
convert
programs
from
one
computer
to
another
can
also
be
gained
from
the
model
a
search
procedure
for
the
file
location
problem
is
described
along
with
an
example
and
a
possible
application
of
the
model
cacm
may
1977
morgan
h
l
levin
k
d
computer
networks
databases
distributed
databases
optimal
file
location
3
81
3
51
4
33
ca770503
jb
december
29
1977
2
22
am
2969
5
2969
2969
5
2969
2969
5
2969
</TEXT>
</DOC>
<DOC>
<DOCNO>2970</DOCNO>
<TEXT>
achieving
specific
accuracy
in
simulation
output
analysis
this
paper
extends
the
use
of
the
regenerative
property
of
queueing
systems
in
the
analysis
of
simulation
output
in
particular
it
describes
a
sequential
estimation
method
which
when
used
with
the
regenerative
property
allows
results
to
be
obtained
with
specified
statistical
accuracy
this
method
includes
a
test
to
check
the
normality
assumption
on
which
the
sequential
procedure
relies
the
paper
illustrates
the
method
using
the
empty
and
idle
state
as
the
regenerative
state
a
second
example
then
describes
how
using
the
most
frequently
entered
state
as
the
regenerative
state
reduces
the
chance
of
making
a
costly
error
in
a
preliminary
simulation
run
the
paper
also
described
how
a
variance
reduction
method
due
to
page
9
can
be
used
to
obtain
a
specified
accuracy
with
considerably
fewer
job
completions
than
are
required
when
no
variance
reduction
technique
is
applied
cacm
may
1977
fishman
g
s
confidence
in
terval
ratio
estimator
regenerative
property
sequential
estimator
simulation
stopping
rule
variance
reduction
5
5
8
1
ca770502
jb
december
29
1977
2
43
am
2970
5
2970
2970
5
2970
2970
5
2970
</TEXT>
</DOC>
<DOC>
<DOCNO>2971</DOCNO>
<TEXT>
sp
k
a
system
for
teaching
computer
programming
sp
k
is
a
compatible
subset
of
the
pl
i
language
that
has
been
designed
for
teaching
programming
the
features
of
the
sp
k
language
were
chosen
to
encourage
structured
problem
solving
by
computers
to
make
the
language
easy
to
learn
and
use
to
eliminate
confusing
and
redundant
constructs
and
to
make
the
language
easy
to
compile
the
resulting
language
is
suitable
for
in
troducing
programming
concepts
used
in
various
applications
including
business
data
processing
scientific
calculations
and
non
numeric
computation
sp
k
is
actually
a
sequence
of
language
subsets
called
sp
1
sp
2
p
8
each
subset
in
troduces
new
programming
language
constructs
while
retaining
all
the
constructs
of
preceding
subsets
each
subset
is
precisely
defined
and
can
be
learned
or
implemented
without
the
following
subsets
cacm
may
1977
holt
r
c
wortman
d
b
barnard
d
t
cordy
j
r
programmer
education
universities
community
colleges
high
schools
pl
i
sp
k
minicomputers
programming
language
design
teaching
programming
in
troductory
computing
1
5
4
2
4
12
4
13
ca770501
jb
december
29
1977
4
40
am
2708
4
2971
2820
4
2971
2971
4
2971
2971
4
2971
2971
4
2971
3045
4
2971
1835
5
2971
1974
5
2971
2534
5
2971
2971
5
2971
2971
5
2971
2971
5
2971
</TEXT>
</DOC>
<DOC>
<DOCNO>2972</DOCNO>
<TEXT>
proof
techniques
for
hierarchically
structured
programs
a
method
for
describing
and
structuring
programs
that
simplifies
proofs
of
their
correctness
is
presented
the
method
formally
represents
a
program
in
terms
of
levels
of
abstraction
each
level
of
which
can
be
described
by
a
self
contained
nonprocedural
specification
the
proofs
like
the
programs
are
structured
by
levels
although
only
manual
proofs
are
described
in
the
paper
the
method
is
also
applicable
to
semi
automatic
and
automatic
proofs
preliminary
results
are
encouraging
indicating
that
the
method
can
be
applied
to
large
programs
such
as
operating
systems
cacm
april
1977
robinson
l
levitt
k
n
hierarchical
structure
program
verification
structured
programming
formal
specification
abstraction
and
programming
methodology
4
0
4
29
4
9
5
24
ca770410
jb
december
29
1977
4
53
am
2042
4
2972
2222
4
2972
2319
4
2972
2356
4
2972
2480
4
2972
2594
4
2972
2679
4
2972
2709
4
2972
2844
4
2972
2865
4
2972
2866
4
2972
2896
4
2972
2898
4
2972
2939
4
2972
2972
4
2972
2972
4
2972
2972
4
2972
2972
4
2972
2972
4
2972
3037
4
2972
3039
4
2972
3043
4
2972
3043
4
2972
3073
4
2972
3128
4
2972
3144
4
2972
3155
4
2972
970
5
2972
2204
5
2972
2597
5
2972
2732
5
2972
2738
5
2972
2972
5
2972
2972
5
2972
2972
5
2972
3030
5
2972
2247
6
2972
2356
6
2972
2457
6
2972
2651
6
2972
2958
6
2972
2972
6
2972
</TEXT>
</DOC>
<DOC>
<DOCNO>2973</DOCNO>
<TEXT>
sorting
on
a
mesh
connected
parallel
computer
two
algorithms
are
presented
for
sorting
n
2
elements
on
an
n
x
n
mesh
connected
processor
array
that
require
o
n
routing
and
comparison
steps
the
best
previous
algorithm
takes
time
o
n
log
n
the
algorithms
of
this
paper
are
shown
to
be
optimal
in
time
within
small
constant
factors
extensions
to
higher
dimensional
arrays
are
also
given
cacm
april
1977
thompson
c
d
kung
h
t
parallel
computer
parallel
sorting
parallel
merge
routing
and
comparison
steps
perfect
shuffle
processor
in
terconnection
pattern
4
32
5
25
5
31
ca770409
jb
december
29
1977
4
58
am
2973
5
2973
2973
5
2973
2973
5
2973
3156
5
2973
2289
6
2973
2973
6
2973
3075
6
2973
</TEXT>
</DOC>
<DOC>
<DOCNO>2974</DOCNO>
<TEXT>
comment
on
weighted
increment
linear
search
for
scatter
tables
cacm
april
1977
bandyopadhyay
s
k
hash
address
primary
clustering
index
sequence
complementary
relation
search
3
73
3
74
4
9
4
11
4
12
ca770408
jb
december
29
1977
5
02
am
1973
4
2974
2018
4
2974
2203
4
2974
2251
4
2974
2543
4
2974
2770
4
2974
2974
4
2974
2974
4
2974
3053
4
2974
2109
5
2974
2251
5
2974
2974
5
2974
2974
5
2974
2974
5
2974
</TEXT>
</DOC>
<DOC>
<DOCNO>2975</DOCNO>
<TEXT>
remark
on
uniform
insertion
in
structured
data
structures
cacm
april
1977
hollander
c
data
structures
directed
graphs
uniform
insertion
4
34
ca770407
jb
december
29
1977
5
04
am
2975
4
2975
2594
5
2975
2975
5
2975
2975
5
2975
2975
5
2975
</TEXT>
</DOC>
<DOC>
<DOCNO>2976</DOCNO>
<TEXT>
approximating
block
accesses
in
database
organizations
cacm
april
1977
yao
s
b
database
inverted
file
organization
database
performance
and
measurement
information
retrieval
query
answering
3
70
3
72
4
33
ca770406
jb
december
29
1977
5
06
am
2976
4
2976
2976
4
2976
2976
4
2976
2688
5
2976
2765
5
2976
2882
5
2976
2976
5
2976
2976
5
2976
2976
5
2976
</TEXT>
</DOC>
<DOC>
<DOCNO>2977</DOCNO>
<TEXT>
the
stage
hypothesis
and
the
s
curve
some
contradictory
evidence
this
paper
presents
the
results
of
a
study
testing
the
s
shaped
budget
curve
of
nolan
stage
model
of
computer
development
in
an
organization
research
on
the
data
processing
budgets
of
california
counties
fails
to
support
the
s
shaped
curve
or
the
use
of
budgets
as
a
basis
for
a
stage
model
however
the
results
do
not
invalidate
the
concept
of
a
stage
model
the
analysis
suggests
an
alternative
model
of
budget
growth
and
a
separation
between
models
of
budgeting
growth
and
growth
stages
in
the
development
of
the
computer
resource
cacm
april
1977
lucac
h
c
jr
sutton
j
a
budgets
stage
theories
stage
hypothesis
3
50
3
59
ca770405
jb
december
29
1977
5
12
am
2977
4
2977
2985
4
2977
3011
4
2977
3035
4
2977
2485
5
2977
2977
5
2977
2977
5
2977
2977
5
2977
</TEXT>
</DOC>
<DOC>
<DOCNO>2978</DOCNO>
<TEXT>
analysis
of
design
alternatives
for
virtual
memory
indexes
a
class
of
index
structures
for
use
in
a
virtual
memory
environment
is
described
design
alternatives
within
this
class
of
index
structures
are
analyzed
these
alternatives
include
a
choice
of
search
strategy
whether
or
not
pages
in
the
index
are
structured
and
whether
or
not
keys
are
compressed
the
average
cost
of
retrieving
entries
from
these
indexes
is
expressed
as
a
wieghted
sum
of
the
cost
of
a
basic
key
comparison
and
the
cost
of
crossing
a
page
boundary
in
the
index
structure
formulas
for
the
retrieval
costs
for
possible
combinations
of
design
alternatives
are
given
these
are
used
in
numerical
case
studies
which
compare
the
retrieval
costs
of
the
alternatives
qualitative
comparisons
of
the
main
tenance
costs
insertion
deletion
reorganization
of
the
design
alternatives
are
also
included
cacm
april
1977
maruyama
k
smith
s
e
index
index
structure
pages
virtual
memory
files
retrieval
main
tenance
search
strategy
key
compression
3
50
3
51
3
02
3
73
3
74
ca770404
jb
december
29
1977
5
22
am
2451
4
2978
2556
4
2978
2978
4
2978
1935
5
2978
2978
5
2978
2978
5
2978
2978
5
2978
3058
5
2978
3063
5
2978
2978
6
2978
2978
6
2978
</TEXT>
</DOC>
<DOC>
<DOCNO>2979</DOCNO>
<TEXT>
studies
in
machine
cognition
using
the
game
of
poker
a
progress
report
is
presented
of
on
going
research
efforts
concerning
human
decision
making
under
uncertainly
and
risk
and
human
problem
solving
and
learning
processes
on
the
one
hand
and
machine
learning
large
scale
programming
systems
and
novel
programming
techniques
on
the
other
there
has
also
been
in
terest
in
how
humans
make
deductive
and
inductive
inferences
and
form
and
optimize
heuristic
rules
and
how
machines
can
reach
similar
results
although
the
vehicle
of
these
investigations
has
been
the
game
of
poker
a
conceptual
framework
has
been
provided
that
should
have
a
fairly
wide
range
of
applicability
the
models
of
human
judgment
choice
and
decision
making
are
incorporated
in
a
large
scale
complex
program
they
represent
both
descriptive
and
normative
theories
of
behavior
an
in
teractive
game
environment
has
been
recently
established
which
besides
its
usefulness
for
experiments
in
game
playing
enables
humans
to
construct
machine
strategies
on
line
in
a
question
answering
advice
taking
mode
cacm
april
1977
findler
n
v
machine
learning
game
playing
programs
decision
making
under
uncertain
ty
and
risk
automatic
forming
and
optimizing
of
heuristic
rules
automatic
inductive
and
deductive
inference
making
models
of
game
learning
poker
gambling
and
bluffing
3
36
3
62
3
61
3
64
3
65
3
66
ca770403
jb
december
29
1977
5
34
am
2979
5
2979
2979
5
2979
2979
5
2979
</TEXT>
</DOC>
<DOC>
<DOCNO>2980</DOCNO>
<TEXT>
the
editing
of
picture
segmentations
using
local
analysis
of
graphs
a
major
problem
in
picture
processing
is
the
elimination
of
the
large
number
of
spurious
regions
that
result
from
an
initial
segmentation
by
region
growing
techniques
such
regions
have
been
eliminated
either
on
the
basis
of
semantic
information
or
on
the
basis
of
size
and
contrast
a
scheme
is
presented
which
performs
eliminations
on
the
basis
of
local
properties
of
the
region
adjacency
graph
the
scheme
is
based
on
definitions
of
graph
properties
which
are
satisfied
when
a
spurious
region
is
present
then
editing
is
equivalent
to
fast
graph
operations
a
number
of
examples
are
shown
cacm
april
1977
tanimoto
s
l
pavlidis
t
picture
processing
pattern
recognition
segmentation
region
editing
3
63
ca770402
jb
december
29
1977
6
22
am
2980
4
2980
2523
5
2980
2980
5
2980
2980
5
2980
2980
5
2980
</TEXT>
</DOC>
<DOC>
<DOCNO>2981</DOCNO>
<TEXT>
subgoal
induction
a
proof
method
subgoal
induction
is
presented
as
an
alternative
or
supplement
to
the
commonly
used
inductive
assertion
method
its
major
virtue
is
that
it
can
often
be
used
to
prove
a
loop
correctness
directly
from
its
input
output
specification
without
the
use
of
an
invariant
the
relation
between
subgoal
induction
and
other
commonly
used
induction
rules
is
explored
and
in
particular
it
is
shown
that
subgoal
induction
can
be
viewed
as
a
specialized
form
of
computation
induction
a
set
of
sufficient
conditions
are
presented
which
guarantee
that
an
input
output
specification
is
strong
enough
for
the
induction
steps
of
a
proof
by
subgoal
induction
to
be
valid
cacm
april
1977
morris
j
h
jr
wegbreit
b
program
verification
proving
programs
correct
induction
rule
computation
induction
inductive
assertions
structural
induction
proof
rule
recursive
programs
iterative
programs
4
19
4
22
5
21
5
24
ca770401
jb
december
29
1977
6
31
am
2981
4
2981
3030
4
2981
3077
4
2981
3104
4
2981
2457
5
2981
2981
5
2981
2981
5
2981
2981
5
2981
3014
5
2981
1834
6
2981
2981
6
2981
</TEXT>
</DOC>
<DOC>
<DOCNO>2982</DOCNO>
<TEXT>
the
storage
requirement
in
precedence
parsing
cacm
march
1977
bertsch
e
precedence
parsing
storage
requirement
value
table
4
12
5
22
ca770310jb
december
29
1977
6
34
am
1542
4
2982
1683
4
2982
1693
4
2982
1781
4
2982
1787
4
2982
1836
4
2982
1945
4
2982
2060
4
2982
2061
4
2982
2082
4
2982
2091
4
2982
2152
4
2982
2179
4
2982
2340
4
2982
2340
4
2982
2356
4
2982
2546
4
2982
2603
4
2982
2698
4
2982
2708
4
2982
2824
4
2982
2824
4
2982
2982
4
2982
2982
4
2982
2982
4
2982
2986
4
2982
2986
4
2982
2986
4
2982
3045
4
2982
3093
4
2982
1491
5
2982
1836
5
2982
2340
5
2982
2982
5
2982
2982
5
2982
2982
5
2982
</TEXT>
</DOC>
<DOC>
<DOCNO>2983</DOCNO>
<TEXT>
a
comparison
of
next
fit
first
fit
and
best
fit
cacm
march
1977
bays
c
memory
allocation
first
fit
best
fit
next
fit
4
32
4
35
ca770309
jb
december
29
1977
6
36
am
2902
4
2983
2911
4
2983
2983
4
2983
2734
5
2983
2911
5
2983
2983
5
2983
2983
5
2983
2983
5
2983
1879
6
2983
273
6
2983
2435
6
2983
2498
6
2983
2734
6
2983
2773
6
2983
2983
6
2983
</TEXT>
</DOC>
<DOC>
<DOCNO>2984</DOCNO>
<TEXT>
cost
utilization
a
measure
of
system
performance
a
method
is
presented
for
evaluating
computer
system
performance
in
terms
of
a
cost
utilization
factor
and
a
measure
of
imbalance
these
coefficients
indicate
the
extent
to
which
the
total
system
cost
is
effectively
utilized
the
method
includes
a
technique
for
the
visual
representation
of
system
performance
cacm
march
1977
borovits
i
ein
dor
p
computer
system
performance
evaluation
cost
utilization
system
balance
2
44
ca770308
jb
december
29
1977
6
41
am
2705
4
2984
2984
4
2984
1908
5
2984
2984
5
2984
2984
5
2984
2984
5
2984
</TEXT>
</DOC>
<DOC>
<DOCNO>2985</DOCNO>
<TEXT>
effects
of
chargeout
on
user
manager
attitudes
the
relationship
of
in
ternal
pricing
systems
for
computer
services
chargeout
systems
and
user
management
attitudes
about
their
computer
based
information
systems
is
investigated
evidence
is
provided
that
the
relationship
conforms
to
a
general
pattern
that
would
be
expected
from
the
hypothesis
of
the
four
stages
of
edp
growth
15
the
results
also
indicate
that
the
chargeout
systems
characteristic
of
advanced
edp
stage
environments
are
associated
with
relatively
high
levels
of
positive
user
attitudes
and
marked
increases
in
edp
training
for
users
both
factors
are
important
to
the
user
manager
involvement
necessary
for
effective
control
of
computer
based
systems
development
and
main
tenance
of
computer
based
systems
is
asserted
to
be
a
category
of
organizational
change
a
felt
need
for
the
change
on
the
part
of
the
user
manager
is
prerequisite
to
any
change
taking
place
the
research
methods
of
behavioral
science
are
applied
to
investigate
the
user
manager
environment
and
the
effects
of
chargeout
cacm
march
1977
nolan
r
l
computer
management
computer
budget
chargeout
stage
hypothesis
control
2
41
2
43
3
50
ca770307
jb
december
29
1977
6
43
am
2977
4
2985
2985
4
2985
3011
4
2985
3035
4
2985
2485
5
2985
2985
5
2985
2985
5
2985
2985
5
2985
</TEXT>
</DOC>
<DOC>
<DOCNO>2986</DOCNO>
<TEXT>
operations
on
sparse
relations
various
computations
on
relations
boolean
matrices
or
directed
graphs
such
as
the
computation
of
precedence
relations
for
a
context
free
grammar
can
be
done
by
a
practical
algorithm
that
is
asymptotically
faster
than
those
in
common
use
for
example
how
to
compute
operator
precedence
or
wirth
weber
precedence
relations
in
o
n
2
steps
is
shown
as
well
as
how
to
compute
linear
precedence
functions
in
o
n
2
steps
is
shown
as
well
as
how
to
compute
linear
precedence
functions
in
o
n
steps
where
n
is
the
size
of
a
grammer
the
heart
of
the
algorithms
is
a
general
theorem
giving
sufficient
conditions
under
which
an
expression
whose
operands
are
sparse
relations
and
whose
operators
are
composition
transitive
closure
union
and
inverse
can
be
computed
efficiently
cacm
march
1977
hunt
h
b
iii
szymanski
t
g
ullman
j
d
computational
complexity
sparse
relation
boolean
matrix
directed
graph
wirth
weber
precedence
relation
linear
precedence
function
slr
grammar
t
canonical
precedence
relation
4
12
5
23
5
25
ca770306
jb
december
29
1977
8
05
am
1542
4
2986
1683
4
2986
1693
4
2986
1781
4
2986
1787
4
2986
1836
4
2986
1945
4
2986
2060
4
2986
2061
4
2986
2082
4
2986
2091
4
2986
2152
4
2986
2179
4
2986
2221
4
2986
2340
4
2986
2340
4
2986
2340
4
2986
2356
4
2986
2546
4
2986
2603
4
2986
2698
4
2986
2708
4
2986
2733
4
2986
2824
4
2986
2824
4
2986
2824
4
2986
2982
4
2986
2982
4
2986
2982
4
2986
2986
4
2986
2986
4
2986
2986
4
2986
2986
4
2986
2986
4
2986
3045
4
2986
3093
4
2986
3093
4
2986
3094
4
2986
1491
5
2986
1683
5
2986
1836
5
2986
2179
5
2986
2340
5
2986
2986
5
2986
2986
5
2986
2986
5
2986
</TEXT>
</DOC>
<DOC>
<DOCNO>2987</DOCNO>
<TEXT>
representation
of
many
sided
polygons
and
polygonal
lines
for
rapid
processing
a
representation
for
polygons
and
polygonal
lines
is
described
which
allows
sets
of
consecutive
sides
to
be
collectively
examined
the
set
of
sides
are
arranged
in
a
binary
tree
hierarchy
by
inclusion
a
fast
algorithm
for
testing
the
inclusion
of
a
poin
t
in
a
many
sided
polygon
is
given
the
speed
of
the
algorithm
is
discussed
for
both
ideal
and
practical
examples
it
is
shown
that
the
poin
ts
of
intersection
of
two
polygonal
lines
can
be
located
by
what
is
essentially
a
binary
tree
search
the
algorithm
and
a
practical
example
are
discussed
the
representation
overcomes
many
of
the
disadvantages
associated
with
the
various
fixed
grid
methods
for
representing
curves
and
regions
cacm
march
1977
burton
w
boundary
line
representation
cartography
computer
graphics
computer
searchable
structures
contour
representation
geographic
information
processing
graphic
data
retrieval
in
tersection
of
curves
line
drawing
processing
poin
ts
in
polygons
regional
boundary
representation
spatial
information
3
14
3
23
3
30
3
79
8
2
ca770305
jb
december
30
1977
12
44
am
1630
4
2987
1804
4
2987
1804
4
2987
2547
4
2987
2987
4
2987
2987
4
2987
2987
4
2987
2987
4
2987
2987
4
2987
2987
4
2987
2987
4
2987
3165
4
2987
1326
5
2987
1630
5
2987
2125
5
2987
2547
5
2987
2633
5
2987
2987
5
2987
2987
5
2987
2987
5
2987
421
5
2987
524
5
2987
3165
5
2987
1326
6
2987
2987
6
2987
</TEXT>
</DOC>
<DOC>
<DOCNO>2988</DOCNO>
<TEXT>
memory
management
and
response
time
this
paper
presents
a
computationally
tractable
methodology
for
including
accurately
the
effects
of
finite
memory
size
and
workload
memory
requirements
in
queueing
network
models
of
computer
systems
empirical
analyses
and
analytic
studies
based
on
applying
this
methodology
to
an
actual
multiaccess
in
teractive
system
are
reported
relations
between
workload
variables
such
as
memory
requirement
distribution
and
job
swap
time
and
performance
measures
such
as
response
time
and
memory
utilization
are
graphically
displayed
a
multiphase
analytically
soluble
model
is
proposed
as
being
broadly
applicable
to
the
analysis
of
in
teractive
computer
systems
which
use
nonpaged
memories
cacm
march
1977
brown
r
m
browne
j
c
chandy
k
m
memory
management
system
performance
queueing
network
models
in
teractive
computer
systems
4
32
ca770304
jb
december
30
1977
12
51
am
2988
4
2988
1750
5
2988
2988
5
2988
2988
5
2988
2988
5
2988
3059
5
2988
3070
5
2988
1805
6
2988
2454
6
2988
2741
6
2988
2988
6
2988
2988
6
2988
</TEXT>
</DOC>
<DOC>
<DOCNO>2989</DOCNO>
<TEXT>
empirical
evaluation
of
some
features
of
instruction
set
processor
architectures
this
paper
presents
methods
for
empirical
evaluation
of
features
of
instruction
set
processors
isps
isp
features
are
evaluated
in
terms
of
the
time
used
or
saved
by
having
or
not
having
the
feature
the
methods
are
based
on
analysis
of
traces
of
program
executions
the
concept
of
a
register
life
is
in
troduced
and
used
to
answer
questions
like
how
many
registers
are
used
simultaneously
how
many
would
be
sufficient
all
of
the
time
most
of
the
time
what
would
the
overhead
be
if
the
number
of
registers
were
reduced
what
are
registers
used
for
during
their
lives
the
paper
also
discusses
the
problem
of
detecting
desirable
but
non
existing
instructions
other
problems
are
briefly
discussed
experimental
results
are
presented
obtained
by
analyzing
41
programs
running
on
the
dec
system
10
isp
cacm
march
1977
lunde
a
computer
architecture
program
behavior
instruction
sets
op
code
utilization
register
structures
register
utilization
simultaneous
register
lives
instruction
tracing
execution
time
6
20
6
21
6
33
ca770303
jb
december
30
1977
1
00
am
1653
4
2989
2411
4
2989
2709
4
2989
2889
4
2989
2937
4
2989
2989
4
2989
2989
4
2989
3005
4
2989
3025
4
2989
3101
4
2989
1069
5
2989
2138
5
2989
2989
5
2989
2989
5
2989
2989
5
2989
3025
5
2989
2138
6
2989
2989
6
2989
</TEXT>
</DOC>
<DOC>
<DOCNO>2990</DOCNO>
<TEXT>
effective
information
retrieval
using
term
accuracy
the
performance
of
information
retrieval
systems
can
be
evaluated
in
a
number
of
different
ways
much
of
the
published
evaluation
work
is
based
on
measuring
the
retrieval
performance
of
an
average
user
query
unfortunately
formal
proofs
are
difficult
to
construct
for
the
average
case
in
the
present
study
retrieval
evaluation
is
based
on
optimizing
the
performance
of
a
specific
user
query
the
concept
of
query
term
accuracy
is
in
troduced
as
the
probability
of
occurrence
of
a
query
term
in
the
documents
relevant
to
that
query
by
relating
term
accuracy
to
the
frequency
of
occurrence
of
the
term
in
the
documents
of
a
collection
it
is
possible
to
give
formal
proofs
of
the
effectiveness
with
respect
to
a
given
user
query
of
a
number
of
automatic
indexing
systems
that
have
been
used
successfully
in
experimental
situations
among
these
are
inverse
document
frequency
weighting
thesaurus
construction
and
phrase
generation
cacm
march
1977
yu
c
t
salton
g
information
retrieval
automatic
indexing
content
analysis
term
accuracy
frequency
weighting
thesaurus
and
phrase
transformations
3
71
3
72
3
75
ca770302
jb
december
30
1977
1
52
am
2990
5
2990
2990
5
2990
2990
5
2990
3134
5
2990
1976
6
2990
2160
6
2990
2524
6
2990
2990
6
2990
</TEXT>
</DOC>
<DOC>
<DOCNO>2991</DOCNO>
<TEXT>
improving
the
access
time
for
random
access
files
clustering
in
the
key
set
is
decreased
by
smoothing
the
key
to
address
transformation
and
by
adding
shadow
buckets
to
an
open
chaining
file
the
keys
are
pre
hashed
before
the
address
division
to
remove
the
effect
of
sequential
properties
in
the
key
set
shadow
buckets
in
the
key
search
sequence
reduce
the
effect
of
nonuniformity
in
file
loading
and
decrease
the
number
of
maximum
probes
needed
to
locate
a
record
the
combined
effects
of
these
techniques
lead
to
improved
file
performance
for
secondary
storage
devices
as
shown
by
empirical
studies
cacm
march
1977
clapson
p
hashing
hashing
techniques
hashing
methods
hash
coding
keys
key
transformation
key
to
address
transformation
direct
addressing
direct
access
direct
access
method
randomizing
random
access
file
addressing
file
organizations
file
structures
scatter
storage
search
method
collisions
synonyms
clustering
information
retrieval
open
addressing
open
chaining
buckets
bucket
size
shadow
buckets
combinatorics
3
7
3
72
3
73
3
74
4
9
5
39
ca770301
jb
december
30
1977
2
00
am
1676
4
2991
1682
4
2991
1728
4
2991
1860
4
2991
1973
4
2991
1973
4
2991
1992
4
2991
2018
4
2991
2032
4
2991
2033
4
2991
2107
4
2991
2109
4
2991
2138
4
2991
2203
4
2991
2203
4
2991
2251
4
2991
2251
4
2991
2258
4
2991
2319
4
2991
2313
4
2991
2359
4
2991
2359
4
2991
2437
4
2991
2524
4
2991
2530
4
2991
2537
4
2991
2543
4
2991
2543
4
2991
2552
4
2991
2552
4
2991
2559
4
2991
2559
4
2991
2573
4
2991
2781
4
2991
2860
4
2991
2991
4
2991
2991
4
2991
2991
4
2991
3053
4
2991
3053
4
2991
3083
4
2991
1785
5
2991
2107
5
2991
2203
5
2991
2991
5
2991
2991
5
2991
2991
5
2991
</TEXT>
</DOC>
<DOC>
<DOCNO>2992</DOCNO>
<TEXT>
a
numbering
system
for
binary
trees
cacm
february
1977
knott
g
d
binary
trees
permutations
binary
search
trees
ranking
function
3
79
5
39
ca770209
jb
december
30
1977
2
04
am
2992
5
2992
2992
5
2992
2992
5
2992
</TEXT>
</DOC>
<DOC>
<DOCNO>2993</DOCNO>
<TEXT>
occurrences
of
cycling
and
other
phenomena
arising
in
a
class
of
linear
programming
models
an
investigation
into
the
average
queue
size
for
a
certain
class
of
queues
has
resulted
in
the
formulation
of
linear
programming
problems
which
are
ill
conditioned
in
some
cases
in
attempting
to
solve
these
linear
programming
models
using
ibm
mps
package
instances
of
cycling
were
encountered
small
perturbations
in
the
input
data
resulted
in
problems
which
did
not
cycle
this
fact
plus
several
other
observed
phenomena
suggest
that
the
primary
reason
that
cycling
is
not
known
to
occur
more
frequently
is
the
round
off
errors
in
the
computations
perturb
the
problem
sufficiently
to
prevent
cycling
or
at
least
to
prevent
indefinite
cycling
in
one
case
maximizing
and
minimizing
an
objective
function
subject
to
the
same
constrain
t
set
was
attempted
but
mps
solved
only
one
of
these
while
giving
an
indication
of
infeasibility
for
the
other
cacm
february
1977
kotiah
t
c
t
steinberg
d
i
linear
programming
cycling
queueing
models
5
41
5
9
ca770208
jb
december
30
1977
2
11
am
2993
5
2993
2993
5
2993
2993
5
2993
</TEXT>
</DOC>
<DOC>
<DOCNO>2994</DOCNO>
<TEXT>
a
linear
algorithm
for
incremental
digital
display
of
circular
arcs
circular
arcs
can
be
drawn
on
an
incremental
display
device
such
as
a
cathode
ray
tube
digital
plotter
or
matrix
prin
ter
using
only
sign
testing
and
elementary
addition
and
subtraction
this
paper
describes
methodology
for
producing
dot
or
step
patterns
closet
to
the
true
circle
cacm
february
1977
bresenham
j
graphics
circle
drawing
step
generation
dot
generation
incremental
digital
plotting
raster
display
integer
arithmetic
circle
algorithm
4
41
8
2
ca770207
jb
december
30
1977
2
16
am
2994
5
2994
2994
5
2994
2994
5
2994
</TEXT>
</DOC>
<DOC>
<DOCNO>2995</DOCNO>
<TEXT>
decomposability
instabilities
and
saturation
in
multiprogramming
systems
corrigendum
cacm
february
1977
courtois
p
j
ca770205
jb
december
30
1977
2
20
am
2995
5
2995
2995
5
2995
2995
5
2995
</TEXT>
</DOC>
<DOC>
<DOCNO>2996</DOCNO>
<TEXT>
transient
free
working
set
statistics
transient
free
average
working
set
size
and
transient
free
missing
page
rate
for
a
finite
sample
of
a
reference
string
are
defined
use
of
these
statistics
is
appropriate
if
the
contents
of
the
working
set
at
the
start
of
the
recorded
string
are
unknown
if
a
certain
stationarity
condition
holds
these
statistics
provide
unbiased
estimates
of
expected
working
set
sizes
missing
page
probabilities
and
in
terreference
distance
probabilities
two
other
pairs
of
estimators
are
shown
to
be
biased
expressions
for
the
transient
free
statistics
are
obtained
in
terms
of
in
terval
statistics
several
methods
of
computation
are
discussed
the
usefulness
of
each
depending
on
length
of
the
sample
number
of
distinct
references
and
the
amount
of
main
storage
available
to
the
computer
performing
the
calculations
in
particular
methods
are
described
for
handling
long
strings
containing
many
distinct
page
names
cacm
february
1977
easton
m
c
bennett
b
t
working
set
estimation
program
behavior
4
3
4
6
5
5
ca770204
jb
december
30
1977
2
40
am
1892
4
2996
1901
4
2996
2085
4
2996
2095
4
2996
2218
4
2996
2277
4
2996
2319
4
2996
2329
4
2996
2358
4
2996
2373
4
2996
2374
4
2996
2380
4
2996
2380
4
2996
2434
4
2996
2499
4
2996
2450
4
2996
2501
4
2996
2582
4
2996
2595
4
2996
2669
4
2996
2828
4
2996
2863
4
2996
2881
4
2996
2928
4
2996
2996
4
2996
2996
4
2996
2996
4
2996
3006
4
2996
3006
4
2996
3006
4
2996
3067
4
2996
3067
4
2996
3067
4
2996
1751
5
2996
2373
5
2996
2595
5
2996
2996
5
2996
2996
5
2996
2996
5
2996
</TEXT>
</DOC>
<DOC>
<DOCNO>2997</DOCNO>
<TEXT>
convex
hulls
of
finite
sets
of
poin
ts
in
two
and
three
dimensions
the
convex
hulls
of
sets
of
n
poin
ts
in
two
and
three
dimensions
can
be
determined
with
o
n
log
n
operations
the
presented
algorithms
use
the
divide
and
conquer
technique
and
recursively
apply
a
merge
procedure
for
two
nonin
tersecting
convex
hulls
since
any
convex
hull
algorithm
requires
at
least
o
n
log
n
operations
the
time
complexity
of
the
proposed
algorithms
is
optimal
within
a
multiplicative
constant
cacm
february
1977
preparata
f
p
hong
s
j
computational
complexity
convex
hull
optimal
algorithms
planar
set
of
poin
ts
spatial
set
of
poin
ts
4
49
5
25
5
32
ca770203
jb
december
30
1977
2
47
am
2997
4
2997
2737
5
2997
2997
5
2997
2997
5
2997
2997
5
2997
3151
5
2997
2997
6
2997
</TEXT>
</DOC>
<DOC>
<DOCNO>2998</DOCNO>
<TEXT>
an
empirical
study
of
list
structure
in
lisp
static
measurements
of
the
list
structure
of
five
large
lisp
programs
are
reported
and
analyzed
in
this
paper
these
measurements
reveal
substantial
regularity
or
predictability
among
poin
ters
to
atoms
and
especially
among
poin
ters
to
lists
pointers
to
atoms
are
found
to
obey
roughly
zipf
law
which
governs
word
frequencies
in
natural
languages
poin
ters
to
lists
usually
poin
t
to
a
location
physically
nearby
in
memory
the
use
of
such
regularities
in
the
space
efficient
representation
of
list
structure
is
discussed
linearization
of
lists
whereby
successive
cdrs
or
cars
are
placed
in
consecutive
memory
locations
whenever
possible
greatly
strengthens
the
observed
regularity
of
list
structure
it
is
shown
that
under
some
reasonable
assumptions
the
entropy
or
information
content
of
a
car
cdr
pair
in
the
programs
measured
is
about
10
to
15
bits
before
linearization
and
about
7
to
12
bits
after
cacm
february
1977
clark
d
w
green
c
c
list
structure
measurement
lisp
list
structure
regularity
poin
ter
compression
zipf
law
list
linearization
poin
ter
entropy
3
69
4
29
4
34
4
6
5
6
ca770202
jb
december
30
1977
2
55
am
2855
5
2998
2944
5
2998
2998
5
2998
2998
5
2998
2998
5
2998
3106
5
2998
1549
6
2998
1549
6
2998
1826
6
2998
210
6
2998
210
6
2998
1972
6
2998
1972
6
2998
2513
6
2998
2665
6
2998
2766
6
2998
2766
6
2998
2833
6
2998
2833
6
2998
2855
6
2998
2954
6
2998
2998
6
2998
2998
6
2998
2998
6
2998
</TEXT>
</DOC>
<DOC>
<DOCNO>2999</DOCNO>
<TEXT>
an
approach
to
multidimensional
data
array
processing
by
computer
some
recent
work
on
the
development
of
general
purpose
computer
based
statistical
and
data
processing
capabilities
for
handling
multidimensional
arrays
of
data
is
presented
attention
is
first
given
to
some
of
the
general
problems
of
multidimensional
table
and
array
processing
this
is
followed
by
a
summary
of
some
recent
developments
in
array
processing
capabilities
at
the
world
bank
in
particular
the
system
identified
as
wraps
world
bank
retrieval
and
array
processing
system
cacm
february
1977
muller
m
e
array
processing
table
processing
statistical
analysis
data
retrieval
data
processing
syntax
for
data
structures
computing
techniques
time
series
cross
tabulation
3
10
3
20
3
30
3
70
4
0
ca770201
jb
december
30
1977
3
12
am
2999
5
2999
2999
5
2999
2999
5
2999
</TEXT>
</DOC>
<DOC>
<DOCNO>3000</DOCNO>
<TEXT>
segment
sizes
and
lifetimes
in
algol
60
programs
the
characteristics
of
the
virtual
memory
requirements
of
a
sample
of
algol
60
programs
have
been
measured
distributions
are
presented
for
thesizes
of
memory
requests
and
for
their
holding
times
lifetimes
the
results
are
presented
in
terms
of
johnston
contour
model
and
a
simple
abstract
machine
they
provide
new
empirical
evidence
of
certain
aspects
of
the
construction
and
behavior
of
real
programs
and
some
of
their
implications
for
the
design
of
virtual
memory
systems
are
presented
and
discussed
cacm
january
1977
batson
a
p
brundage
r
e
virtual
memory
program
behavior
segmentation
storage
allocation
algol
60
contour
model
4
22
4
34
4
45
6
21
ca770105
jb
january
3
1978
12
05
am
2095
4
3000
2218
4
3000
2218
4
3000
2498
4
3000
2596
4
3000
2734
4
3000
2734
4
3000
2902
4
3000
2911
4
3000
3000
4
3000
3000
4
3000
3000
4
3000
3067
4
3000
1879
5
3000
2095
5
3000
2864
5
3000
3000
5
3000
3000
5
3000
3000
5
3000
</TEXT>
</DOC>
<DOC>
<DOCNO>3001</DOCNO>
<TEXT>
detection
of
combined
occurrences
in
this
paper
it
is
supposed
that
the
variables
x1
xn
each
have
finite
range
with
the
variable
xi
taking
on
pi
possible
values
and
that
the
values
of
the
variables
are
changing
with
time
it
is
supposed
further
that
it
is
desired
to
detect
occurrences
in
which
some
subset
of
the
variables
achieve
particular
values
finally
it
is
supposed
that
the
problem
involves
the
detection
of
a
large
number
of
combined
occurrences
for
a
large
number
of
changes
of
values
of
variables
two
efficient
solutions
for
this
problem
are
described
both
methods
have
the
unusual
property
of
being
faster
for
systems
where
the
sum
p1
pn
is
larger
the
first
solution
is
error
free
and
suitable
for
most
cases
the
second
solution
is
slightly
more
elegant
and
allows
negation
as
well
as
conjunction
but
is
subject
to
the
possibility
of
errors
an
error
analysis
is
given
for
the
second
method
and
an
empirical
study
is
reported
cacm
january
1977
zobrist
a
l
carlson
f
r
jr
coding
hash
coding
retrieval
secondary
keys
pattern
recognition
artificial
in
telligence
demons
n
tuples
sorting
chess
3
63
5
31
ca770104jb
january
3
1978
12
15
am
2532
4
3001
2631
4
3001
2746
4
3001
3001
4
3001
3001
4
3001
2033
5
3001
2139
5
3001
3001
5
3001
3001
5
3001
3001
5
3001
</TEXT>
</DOC>
<DOC>
<DOCNO>3002</DOCNO>
<TEXT>
a
record
and
file
partitioning
model
one
of
the
main
objectives
in
the
design
of
a
file
system
is
the
reduction
of
storage
and
data
transfer
costs
this
paper
presents
a
model
in
which
several
requests
access
the
file
system
and
each
request
requires
information
from
one
or
more
variable
length
data
items
the
probabilities
of
access
and
the
distribution
of
each
data
item
length
are
assumed
to
be
known
and
to
be
mutually
independent
the
file
system
uses
one
or
more
storage
devices
and
each
record
may
be
partitioned
into
subrecords
that
are
stored
on
different
devices
one
of
the
subrecords
is
designated
as
the
primary
record
when
a
request
for
a
record
is
made
the
primary
record
is
first
accessed
and
other
subrecords
are
accessed
only
if
the
pertinent
information
is
not
stored
in
the
primary
record
the
model
that
is
presented
in
this
paper
both
as
a
nonlinear
programming
model
and
a
mixed
integer
programming
model
is
a
very
general
one
several
types
of
file
systems
may
be
derived
from
it
by
an
appropriate
selection
of
its
parameters
this
model
has
already
been
used
in
the
optimization
of
library
routines
storage
at
a
large
scale
operating
system
cacm
january
1977
babad
j
m
file
system
file
design
file
partitioning
record
partitioning
3
73
ca770103
jb
january
3
1978
12
28
am
3002
5
3002
3002
5
3002
3002
5
3002
3168
5
3002
2965
6
3002
3002
6
3002
</TEXT>
</DOC>
<DOC>
<DOCNO>3003</DOCNO>
<TEXT>
a
survey
of
the
literature
in
computer
science
education
since
curriculum
68
a
bibliography
of
approximately
two
hundred
references
in
computer
science
education
appearing
in
the
literature
since
the
publication
of
curriculum
68
is
presented
the
bibliography
itself
is
preceded
by
brief
descriptive
materials
organizing
the
references
into
the
categories
of
survey
reports
activities
of
professional
organizations
philosophy
of
programs
description
of
programs
description
of
courses
and
other
materials
cacm
january
1977
austing
r
h
barnes
b
h
education
computer
science
curricula
1
5
ca770102
jb
january
3
1978
12
34
am
1927
4
3003
2153
4
3003
2163
4
3003
2407
4
3003
2407
4
3003
2478
4
3003
2852
4
3003
2852
4
3003
2899
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3003
4
3003
3011
4
3003
3050
4
3003
1659
5
3003
1678
5
3003
1927
5
3003
1945
5
3003
2097
5
3003
2147
5
3003
2163
5
3003
2187
5
3003
2329
5
3003
2345
5
3003
2367
5
3003
2407
5
3003
2478
5
3003
2479
5
3003
2480
5
3003
2538
5
3003
3003
5
3003
3003
5
3003
3003
5
3003
3130
5
3003
1771
6
3003
3003
6
3003
</TEXT>
</DOC>
<DOC>
<DOCNO>3004</DOCNO>
<TEXT>
structured
programming
in
cobol
an
approach
for
application
programmers
techniques
for
designing
and
writing
cobol
programs
are
presented
previous
work
in
structured
programming
is
drawn
upon
and
adapted
the
presentation
is
informal
the
terminology
is
nonmathematical
as
far
as
possible
no
theorems
are
proved
and
examples
are
used
frequently
top
down
program
design
is
implemented
through
the
use
of
structured
flowcharts
disciplined
specifications
and
step
by
step
verification
a
well
formed
cobol
program
is
defined
the
proper
use
of
the
go
to
and
other
cobol
coding
practices
are
discussed
cacm
january
1977
van
gelder
a
structured
programming
top
down
well
formed
program
go
to
statement
repeat
statement
flowchart
application
programming
cobol
software
reliability
program
verification
4
0
4
22
5
24
ca770101
jb
january
3
1978
12
44
am
2193
4
3004
2326
4
3004
2477
4
3004
2480
4
3004
2541
4
3004
2594
4
3004
2704
4
3004
2709
4
3004
2709
4
3004
2738
4
3004
2738
4
3004
2802
4
3004
2866
4
3004
2867
4
3004
2869
4
3004
2941
4
3004
2958
4
3004
3004
4
3004
3004
4
3004
3004
4
3004
3004
4
3004
3004
4
3004
3030
4
3004
3030
4
3004
3121
4
3004
3155
4
3004
1425
5
3004
2247
5
3004
2356
5
3004
2456
5
3004
3004
5
3004
3004
5
3004
3004
5
3004
3186
5
3004
</TEXT>
</DOC>
<DOC>
<DOCNO>3005</DOCNO>
<TEXT>
implications
of
structured
programming
for
machine
architecture
based
on
an
empirical
study
of
more
than
10
000
lines
of
program
text
written
in
a
goto
less
language
a
machine
architecture
specifically
designed
for
structured
programs
is
proposed
since
assignment
call
return
and
if
statements
together
account
for
93
percent
of
all
executable
statements
special
care
is
given
to
ensure
that
these
statements
can
be
implemented
efficiently
a
highly
compact
instruction
encoding
scheme
is
presented
which
can
reduce
program
size
by
a
factor
of
3
unlike
a
huffman
code
which
utilizes
variable
length
fields
this
method
uses
only
fixed
length
1
byte
op
code
and
address
fields
the
most
frequent
instructions
consist
of
a
single
1
byte
field
as
a
consequence
instruction
decoding
time
is
minimized
and
the
machine
is
efficient
with
respect
to
both
space
and
time
cacm
march
1978
tanenbaum
a
machine
architecture
computer
architecture
computer
organization
instruction
set
design
program
characteristics
4
12
4
22
4
9
6
21
ca780308
jb
march
28
1978
12
55
pm
2411
4
3005
2709
4
3005
2889
4
3005
2937
4
3005
2989
4
3005
3005
4
3005
3025
4
3005
3101
4
3005
2138
5
3005
3005
5
3005
3005
5
3005
3005
5
3005
</TEXT>
</DOC>
<DOC>
<DOCNO>3006</DOCNO>
<TEXT>
anomalies
with
variable
partition
paging
algorithms
five
types
of
anomalous
behavior
which
may
occur
in
paged
virtual
memory
operating
systems
a
redefined
one
type
of
anomaly
for
example
concerns
the
fact
that
with
certain
reference
strings
and
paging
algorithms
an
increase
in
mean
memory
allocation
may
result
in
an
increase
in
fault
rate
two
paging
algorithms
are
examined
in
terms
of
their
anomaly
potential
and
reference
string
examples
of
various
anomalies
are
presented
two
paging
algorithm
properties
the
inclusion
property
and
the
generalized
inclusion
property
are
discussed
and
the
anomaly
implications
of
these
properties
presented
cacm
march
1978
franklin
m
graham
g
gupta
r
anomaly
memory
management
program
behavior
stack
algorithms
virtual
memory
working
set
page
fault
frequency
paging
algorithms
4
32
4
35
4
6
8
1
ca780307
jb
march
28
1978
1
01
pm
1892
4
3006
1901
4
3006
2022
4
3006
2085
4
3006
2085
4
3006
2095
4
3006
2218
4
3006
2277
4
3006
2319
4
3006
2329
4
3006
2358
4
3006
2373
4
3006
2373
4
3006
2374
4
3006
2380
4
3006
2380
4
3006
2434
4
3006
2499
4
3006
2450
4
3006
2450
4
3006
2501
4
3006
2582
4
3006
2595
4
3006
2669
4
3006
2828
4
3006
2863
4
3006
2881
4
3006
2928
4
3006
2996
4
3006
2996
4
3006
2996
4
3006
3006
4
3006
3006
4
3006
3006
4
3006
3006
4
3006
3006
4
3006
3067
4
3006
3067
4
3006
3067
4
3006
3067
4
3006
1751
5
3006
1884
5
3006
2373
5
3006
2374
5
3006
2595
5
3006
3006
5
3006
3006
5
3006
3006
5
3006
3067
5
3006
1751
6
3006
2374
6
3006
2373
6
3006
2595
6
3006
2682
6
3006
2863
6
3006
2864
6
3006
3006
6
3006
</TEXT>
</DOC>
<DOC>
<DOCNO>3007</DOCNO>
<TEXT>
complexity
of
computations
corrigendum
cacm
march
1978
rabin
m
ca780306
jb
march
28
1978
1
02
pm
3007
5
3007
3007
5
3007
3007
5
3007
</TEXT>
</DOC>
<DOC>
<DOCNO>3008</DOCNO>
<TEXT>
preserving
average
proximity
in
arrays
programmers
and
data
structure
designers
are
often
forced
to
choose
between
alternative
structures
in
storing
these
structures
preserving
logical
adjacencies
or
proximity
is
usually
an
important
consideration
the
combinatorial
problem
of
storing
arrays
as
various
kinds
of
list
structures
is
examined
embeddings
of
graphs
are
used
to
model
the
loss
of
proximity
involved
in
such
storage
schemes
and
an
elementary
proof
that
arrays
cannot
be
stored
as
linear
lists
with
bounded
loss
of
proximity
is
presented
average
loss
of
proximity
is
then
considered
and
it
is
shown
that
arrays
cannot
be
stored
as
linear
lists
with
only
bounded
loss
of
average
proximity
but
can
be
so
stored
in
binary
trees
the
former
result
implies
for
instance
that
row
major
order
is
an
asymptotically
optimal
storage
strategy
for
arrays
cacm
march
1978
demillo
r
eisenstat
s
lipton
r
arrays
graph
embedding
linear
lists
proximity
average
proximity
trees
4
34
5
24
5
25
5
32
ca780305
jb
march
28
1978
1
07
pm
1050
4
3008
1102
4
3008
378
4
3008
3008
4
3008
731
4
3008
798
4
3008
209
5
3008
3008
5
3008
3008
5
3008
3008
5
3008
</TEXT>
</DOC>
<DOC>
<DOCNO>3009</DOCNO>
<TEXT>
insertions
and
deletions
in
one
sided
height
balanced
trees
recently
hirschberg
has
established
that
insertions
into
one
sided
height
balanced
trees
can
be
done
in
0
log
2n
steps
it
is
proved
here
that
deletions
can
also
be
performed
in
0
log
2n
steps
which
answers
the
open
problem
posed
by
hirschberg
cacm
march
1978
kosaraju
s
avl
trees
balanced
trees
binary
search
dynamic
balancing
3
73
3
74
4
34
5
25
5
31
ca780304
jb
march
28
1978
1
12
pm
3009
4
3009
3042
4
3009
3065
4
3009
3096
4
3009
3163
4
3009
2839
5
3009
3009
5
3009
3009
5
3009
3009
5
3009
3096
5
3009
3163
5
3009
2839
6
3009
2839
6
3009
2889
6
3009
2889
6
3009
3009
6
3009
3009
6
3009
3065
6
3009
3096
6
3009
</TEXT>
</DOC>
<DOC>
<DOCNO>3010</DOCNO>
<TEXT>
value
orientation
of
computer
science
students
technological
and
nontechnological
value
orientations
are
investigated
with
special
attention
to
the
complexity
of
value
structures
computer
science
students
who
are
closely
associated
with
technology
contrast
with
social
science
students
who
are
often
technologically
aloof
this
is
confirmed
by
the
value
ratings
of
313
students
at
the
university
of
minnesota
in
1972
computer
science
majors
were
found
to
have
a
more
complex
value
structure
than
social
science
majors
cacm
march
1978
anderson
r
values
attitudes
students
public
social
effects
2
11
2
12
ca780303
jb
march
28
1978
1
21
pm
3010
5
3010
3010
5
3010
3010
5
3010
</TEXT>
</DOC>
<DOC>
<DOCNO>3011</DOCNO>
<TEXT>
management
utilization
of
computers
in
american
local
governments
traditional
concepts
of
management
information
systems
mis
bear
little
relation
to
the
information
systems
currently
in
use
by
top
management
in
most
us
local
governments
what
exists
is
management
oriented
computing
involving
the
use
of
relatively
unsophisticated
applications
despite
the
unsophisticated
nature
of
these
systems
management
use
of
computing
is
surprisingly
common
but
also
varied
in
its
extent
among
local
governments
management
computing
is
most
prevalent
in
those
governments
with
professional
management
practices
where
top
management
is
supportive
of
computing
and
tends
to
control
computing
decisions
and
where
department
users
have
less
control
over
design
and
implementation
activities
finally
management
computing
clearly
has
impacts
for
top
managers
mostly
involving
improvements
in
decision
information
cacm
march
1978
dutton
w
kraemer
k
computer
utilization
management
information
system
american
local
government
city
government
computers
county
government
computers
computer
impacts
management
computing
2
0
2
1
2
11
2
19
2
4
2
45
2
9
3
5
3
53
ca780302
jb
march
28
1978
1
46
pm
2407
4
3011
2852
4
3011
2977
4
3011
2985
4
3011
3003
4
3011
3011
4
3011
3011
4
3011
3011
4
3011
3011
4
3011
3035
4
3011
3050
4
3011
2075
5
3011
2302
5
3011
2345
5
3011
2485
5
3011
3011
5
3011
3011
5
3011
3011
5
3011
</TEXT>
</DOC>
<DOC>
<DOCNO>3012</DOCNO>
<TEXT>
the
use
of
an
interactive
information
storage
and
retrieval
system
in
medical
research
this
paper
presents
the
results
of
a
study
of
the
use
of
an
interactive
computerized
storage
and
retrieval
system
a
monitor
built
into
the
computer
system
provided
usage
data
for
the
study
additional
data
on
user
reactions
were
gathe
red
from
a
questionnaire
the
results
show
the
important
role
played
by
frequently
chosen
laboratory
reference
leaders
in
influencing
the
use
of
this
system
the
implications
of
the
study
for
the
design
of
similar
systems
are
discussed
cacm
march
1978
lucas
hr
implementation
system
use
information
storage
and
retrieval
system
2
10
3
50
3
72
ca780301
jb
march
28
1978
1
51
pm
3012
5
3012
3012
5
3012
3012
5
3012
</TEXT>
</DOC>
<DOC>
<DOCNO>3013</DOCNO>
<TEXT>
some
new
methods
of
detecting
step
edges
in
digital
pictures
this
note
describes
two
operators
that
respond
to
step
edges
but
not
to
ramps
the
first
is
similar
to
the
digital
laplacian
but
uses
the
max
rather
than
the
sum
of
the
x
and
y
second
differences
the
second
uses
the
difference
between
the
mean
and
median
gray
levels
in
a
neighborhood
the
outputs
obtained
from
these
operators
applied
to
a
set
of
test
pictures
are
compared
with
each
other
and
with
the
standard
digital
laplacian
and
gradient
a
third
operator
which
uses
the
distance
between
the
center
and
centroid
of
a
neighborhood
as
an
edge
value
is
also
briefly
considered
it
turns
out
to
be
equivalent
to
one
of
the
standard
digital
approximations
to
the
gradient
cacm
february
1978
schachter
b
rosenfeld
a
image
processing
pattern
recognition
edge
detection
3
63
ca780210
jb
march
28
1978
1
56
pm
3013
5
3013
3013
5
3013
3013
5
3013
</TEXT>
</DOC>
<DOC>
<DOCNO>3014</DOCNO>
<TEXT>
is
sometime
sometimes
better
than
always
intermittent
assertions
in
proving
program
correctness
this
paper
explores
a
technique
for
proving
the
correctness
and
termination
of
programs
simultaneously
this
approach
the
intermittent
assertion
method
involves
documenting
the
program
with
assertions
that
must
be
true
at
some
time
when
control
passes
through
the
corresponding
point
but
that
need
not
be
true
every
time
the
method
introduced
by
burstall
promises
to
provide
a
valuable
complement
to
the
more
conventional
methods
the
intermittent
assertion
method
is
presented
with
a
number
of
examples
of
correctness
and
termination
proofs
some
of
these
proofs
are
markedly
simpler
than
their
conventional
counterparts
on
the
other
hand
it
is
shown
that
a
proof
of
correctness
or
termination
by
any
of
the
conventional
techniques
can
be
rephrased
directly
as
a
proof
using
intermittent
assertions
finally
it
is
shown
how
the
intermittent
assertion
method
can
be
applied
to
prove
the
validity
of
program
transformations
and
the
correctness
of
continuously
operating
programs
cacm
february
1978
manna
z
waldinger
r
intermittent
assertions
correctness
of
programs
termination
of
programs
program
verification
program
transformation
continuously
operating
programs
5
24
ca780209
jb
march
28
1978
2
04
pm
2021
4
3014
2222
4
3014
2227
4
3014
2315
4
3014
2326
4
3014
2470
4
3014
2732
4
3014
2865
4
3014
2896
4
3014
2943
4
3014
3014
4
3014
3014
4
3014
3068
4
3014
3077
4
3014
3143
4
3014
1834
5
3014
2981
5
3014
3014
5
3014
3014
5
3014
3014
5
3014
3157
5
3014
3014
6
3014
</TEXT>
</DOC>
<DOC>
<DOCNO>3015</DOCNO>
<TEXT>
relaxation
methods
for
image
reconstruction
the
problem
of
recovering
an
image
a
function
of
two
variables
from
experimentally
available
integrals
of
its
grayness
over
thin
strips
is
of
great
importance
in
a
large
number
of
scientific
areas
an
important
version
of
the
problem
in
medicine
is
that
of
obtaining
the
exact
density
distribution
within
the
human
body
from
x
ray
projectionsne
approach
that
has
been
taken
to
solve
this
problem
consists
of
translating
the
available
information
into
a
system
of
linear
inequalities
the
size
and
the
sparsity
of
the
resulting
system
typically
25
000
inequalities
with
fewer
than
1
percent
of
the
coefficients
nonzero
makes
methods
using
successive
relaxations
computationally
attractive
as
compared
to
other
ways
of
solving
systems
of
inequalities
in
this
paper
it
is
shown
that
for
a
consistent
system
of
linear
inequalities
any
sequence
of
relaxarion
parameters
lying
strictly
between
0
and
2
generates
a
sequence
of
vectors
which
converges
to
a
solution
under
the
same
assumptions
for
a
system
of
linear
equations
the
relaxation
method
converges
to
the
minimum
norm
solution
previously
proposed
techniques
are
shown
to
be
special
cases
of
our
procedure
with
different
choices
of
relaxation
parameters
the
practical
consequences
for
image
reconstruction
of
the
choice
of
the
relaxation
parameters
are
discussed
cacm
february
1978
herman
g
lent
a
lutz
p
biomedical
image
processing
image
reconstruction
x
ray
tomography
mathematical
programming
linear
inequalities
relaxation
techniques
3
12
3
17
3
34
3
63
5
14
5
18
5
41
ca780208
jb
march
28
1978
2
13
pm
3015
5
3015
3015
5
3015
3015
5
3015
</TEXT>
</DOC>
<DOC>
<DOCNO>3016</DOCNO>
<TEXT>
a
comparison
of
numerical
techniques
in
markov
modeling
this
paper
presents
several
numerical
methods
which
may
be
used
to
obtain
the
stationary
probability
vectors
of
markovian
models
an
example
of
a
nearly
decomposable
system
is
considered
and
the
results
obtained
by
the
different
methods
examined
a
post
mortem
reveals
why
standard
techniques
often
fail
to
yield
the
correct
results
finally
a
means
of
estimating
the
error
inherent
in
the
decomposition
of
certain
models
is
presented
cacm
february
1978
stewart
w
markov
models
numerical
techniques
simultaneous
iteration
near
decomposability
4
6
5
14
8
1
ca780207
jb
march
28
1978
3
43
pm
2374
4
3016
2481
4
3016
2669
4
3016
2863
4
3016
3016
4
3016
3016
4
3016
3052
4
3016
3070
4
3016
3153
4
3016
1901
5
3016
2741
5
3016
3016
5
3016
3016
5
3016
3016
5
3016
</TEXT>
</DOC>
<DOC>
<DOCNO>3017</DOCNO>
<TEXT>
b
trees
re
examined
the
b
tree
and
its
variants
have
with
increasing
frequency
been
proposed
as
a
basic
storage
structure
for
multiuser
database
applications
here
three
potential
problems
which
must
be
dealt
with
in
such
a
structure
that
do
not
arise
in
more
traditional
static
directory
structures
are
indicated
one
problem
is
a
possible
performance
penalty
cacm
february
1978
held
g
stonebraker
m
b
tree
directory
static
directory
dynamic
directory
index
sequential
access
method
3
70
3
73
3
74
4
33
4
34
ca780206
jb
march
28
1978
3
46
pm
2626
4
3017
2786
4
3017
2840
4
3017
2919
4
3017
3017
4
3017
3110
4
3017
3174
4
3017
2629
5
3017
3017
5
3017
3017
5
3017
3017
5
3017
</TEXT>
</DOC>
<DOC>
<DOCNO>3018</DOCNO>
<TEXT>
covering
edges
by
cliques
with
regard
to
keyword
conflicts
and
intersection
graphs
kellerman
has
presented
a
method
for
determining
keyword
conflicts
and
described
a
heuristic
algorithm
which
solves
a
certain
combinatorial
optimization
problem
in
connection
with
this
method
this
optimization
problem
is
here
shown
to
be
equivalent
to
the
problem
of
covering
the
edges
of
a
graph
by
complete
subgraphs
with
the
objective
of
minimizing
the
number
of
complete
subgraphs
a
relationship
between
this
edge
clique
cover
problem
and
the
graph
coloring
problem
is
established
which
allows
algorithms
for
either
one
of
these
problems
to
be
constructed
from
algorithm
for
the
other
as
consequences
of
this
relationship
the
keyword
conflict
problem
and
the
edge
clique
cover
problem
are
shown
to
be
np
complete
and
if
p
np
then
they
do
not
admit
polynomial
time
approximation
algorithms
which
always
produce
solutions
within
a
factor
less
than
2
from
the
optimum
cacm
february
1978
kou
l
stockmeyer
l
wong
c
watson
t
keyword
conflicts
intersection
graphs
node
clique
cover
edge
clique
cover
computational
complexity
np
complete
problems
polynomial
time
heuristics
4
12
5
25
5
32
ca780205
jb
march
28
1978
4
18
pm
3018
5
3018
3018
5
3018
3018
5
3018
</TEXT>
</DOC>
<DOC>
<DOCNO>3019</DOCNO>
<TEXT>
the
gre
advanced
test
in
computer
science
cacm
february
1978
austing
r
ca780204
jb
march
28
1978
4
19
pm
3019
5
3019
3019
5
3019
3019
5
3019
</TEXT>
</DOC>
<DOC>
<DOCNO>3020</DOCNO>
<TEXT>
systematic
recursion
removal
the
recursion
removal
algorithm
presented
by
strong
and
walker
is
amplified
and
applied
to
a
relatively
complex
pl
i
program
the
aim
is
to
demonstrate
systematic
recursion
removal
techniques
on
something
more
complex
than
knuth
sturdy
toddler
and
to
obtain
measurements
of
the
cost
of
procedure
linkage
in
pl
i
and
the
savings
achievable
via
procedure
integration
in
the
presence
of
recursion
first
the
paper
describes
the
recursion
removal
process
and
the
example
on
which
it
will
be
illustrated
recursion
removal
is
then
applied
to
the
two
major
parts
of
this
example
and
the
final
result
of
the
process
is
displayed
our
performance
comparison
results
are
presented
and
our
conclusions
are
briefly
discussed
cacm
february
1978
auslander
m
strong
h
recursion
removal
recursion
elimination
optimization
procedure
linkage
procedure
integration
4
19
4
49
4
9
5
24
ca780203
jb
march
28
1978
4
26
pm
3020
4
3020
2953
5
3020
3020
5
3020
3020
5
3020
3020
5
3020
</TEXT>
</DOC>
<DOC>
<DOCNO>3021</DOCNO>
<TEXT>
a
method
for
obtaining
digital
signatures
and
public
key
cryptosystems
an
encryption
method
is
presented
with
the
novel
property
that
publicly
revealing
an
encryption
key
does
not
thereby
reveal
the
corresponding
decryption
key
this
has
two
important
consequences
1
couriers
or
other
secure
means
are
not
needed
to
transmit
keys
since
a
message
can
be
enciphered
using
an
encryption
key
publicly
revealed
by
the
intended
recipient
only
he
can
decipher
the
message
since
only
he
knows
the
corresponding
decryption
key
2
a
message
can
be
signed
using
a
privately
held
decryption
key
anyone
can
verify
this
signature
using
the
corresponding
publicly
revealed
encryption
key
signatures
cannot
be
forged
and
a
signer
cannot
later
deny
the
validity
of
his
signature
this
has
obvious
applications
in
electronic
mail
and
electronic
funds
transfer
systems
a
message
is
encrypted
by
representing
it
as
a
number
m
raising
m
to
a
publicly
specified
power
e
and
then
taking
the
remainder
when
the
result
is
divided
by
the
publicly
specified
product
n
of
two
large
secret
prime
numbers
p
and
q
decryption
is
similar
only
a
different
secret
power
d
is
used
where
e
d
1
mod
p
1
q
1
the
security
of
the
system
rests
in
part
on
the
difficulty
of
factoring
the
published
divisor
n
cacm
february
1978
rivest
r
shamir
a
adleman
l
digital
signatures
public
key
cryptosystems
privacy
authentication
security
factorization
prime
number
electronic
mail
message
passing
electronic
funds
transfer
cryptography
2
12
3
15
3
50
3
81
5
25
ca780202
jb
march
28
1978
4
40
pm
3021
4
3021
3158
4
3021
3021
5
3021
3021
5
3021
3021
5
3021
3038
5
3021
3111
5
3021
3177
5
3021
3021
6
3021
3021
6
3021
3021
6
3021
</TEXT>
</DOC>
<DOC>
<DOCNO>3022</DOCNO>
<TEXT>
computer
science
faculties
the
current
status
of
minorities
and
women
the
results
of
a
survey
conducted
in
the
fall
of
1975
to
determine
the
status
of
women
and
minority
faculty
members
in
academic
computer
science
are
presented
faculty
members
were
compared
with
respect
to
professional
background
salaries
teaching
load
publication
records
and
research
grants
analysis
of
the
data
indicated
that
the
over
all
verdict
is
one
of
general
equality
among
women
minorities
and
men
cacm
february
1978
mamrak
s
montanelli
rr
discrimination
against
women
discrimination
against
minorities
faculty
computer
science
degree
programs
affirmative
action
teaching
loads
salaries
publications
1
52
1
53
2
2
2
3
ca780201
jb
march
28
1978
5
11
pm
3022
4
3022
3123
4
3022
2823
5
3022
3022
5
3022
3022
5
3022
3022
5
3022
3123
5
3022
2823
6
3022
2861
6
3022
2962
6
3022
3022
6
3022
</TEXT>
</DOC>
<DOC>
<DOCNO>3023</DOCNO>
<TEXT>
architecture
of
the
ibm
system
370
this
paper
discusses
the
design
considerations
for
the
architectural
extensions
that
distinguish
system
370
from
system
360
it
comments
on
some
experiences
with
the
original
objectives
for
system
360
and
on
the
efforts
to
achieve
them
and
it
describes
the
reasons
and
objectives
for
extending
the
architecture
it
covers
virtual
storage
program
control
data
manipulation
instructions
timing
facilities
multiprocessing
debugging
and
monitoring
error
handling
and
input
output
operations
a
final
section
tabulates
some
of
the
important
parameters
of
the
various
ibm
machines
which
implement
the
architecture
cacm
january
1978
case
r
padges
a
computer
systems
architecture
instruction
sets
virtual
storage
error
handling
6
0
6
21
ca780107
jb
march
28
1978
5
16
pm
3023
5
3023
3023
5
3023
3023
5
3023
</TEXT>
</DOC>
<DOC>
<DOCNO>3024</DOCNO>
<TEXT>
the
cray
1
computer
system
this
paper
describes
the
cray
1
discusses
the
evolution
of
its
architecture
and
gives
an
account
of
some
of
the
problems
that
were
overcome
during
its
manufacture
the
cray
1
is
the
only
computer
to
have
been
built
to
date
that
satisfies
erda
class
vi
requirement
a
computer
capable
of
processing
from
20
to
60
million
floating
point
operations
per
second
1
the
cray
1
fortran
compiler
cft
is
designed
to
give
the
scientific
user
immediate
access
to
the
benefits
of
the
cray
1
vector
processing
architecture
an
optimizing
compiler
cft
vectorizes
innermost
do
loops
compatible
with
the
ansi
1966
fortran
standard
and
with
many
commonly
supported
fortran
extensions
cft
does
not
require
any
source
program
modifications
or
the
use
of
additional
nonstandard
fortran
statements
to
achieve
vectorization
thus
the
user
investment
of
hundreds
of
man
months
of
effort
to
develop
fortran
programs
for
other
contemporary
computers
is
protected
cacm
january
1978
russell
r
architecture
computer
systems
1
2
6
2
6
3
ca780106
jb
march
28
1978
5
24
pm
3024
5
3024
3024
5
3024
3024
5
3024
</TEXT>
</DOC>
<DOC>
<DOCNO>3025</DOCNO>
<TEXT>
the
evolution
of
the
dec
system
10
the
dec
system
10
also
known
as
the
pdp
10
evolved
from
the
pdp
6
circa
1963
over
five
generations
of
implementations
to
presently
include
systems
covering
a
price
range
of
five
to
one
the
origin
and
evolution
of
the
hardware
operating
system
and
languages
are
described
in
terms
of
technological
change
user
requirements
and
user
developments
the
pdp
10
contributions
to
computing
technology
include
accelerating
the
transition
from
batch
oriented
to
time
sharing
computing
systems
transferring
hardware
technology
within
dec
and
elsewhere
to
minicomputer
design
and
manufacturing
supporting
minicomputer
hardware
and
software
development
and
serving
as
a
model
for
single
user
and
timeshared
interactive
minicomputer
microcomputer
systems
cacm
january
1978
bell
c
kotok
a
hastings
t
hill
r
computer
structures
architecture
operating
system
timesharing
4
32
6
21
6
3
ca780105
jb
march
28
1978
5
31
pm
2411
4
3025
2709
4
3025
2889
4
3025
2937
4
3025
2989
4
3025
3005
4
3025
3025
4
3025
3025
4
3025
3101
4
3025
2138
5
3025
2989
5
3025
3025
5
3025
3025
5
3025
3025
5
3025
</TEXT>
</DOC>
<DOC>
<DOCNO>3026</DOCNO>
<TEXT>
the
evolution
of
the
sperry
univac
1100
series
a
his
tory
analysis
and
projection
the
1100
series
systems
are
sperry
univac
large
scale
main
frame
computer
systems
beginning
with
the
1107
in
1962
the
1100
series
has
progressed
through
a
succession
of
eight
compatible
computer
models
to
the
latest
system
the
1100
80
introduced
in
1977
the
1100
series
hardware
architecture
is
based
on
a
36
bit
word
ones
complement
structure
which
obtains
one
operand
from
storage
and
one
from
a
high
speed
register
or
two
operands
from
high
speed
registers
the
1100
operating
system
is
designed
to
support
a
symmetrical
multiprocessor
configuration
simultaneously
providing
multiprogrammed
batch
timesharing
and
transaction
environments
cacm
january
1978
borgherson
b
hanson
m
hartley
p
1100
computer
series
computer
architecture
multiprocessing
languages
data
management
systems
end
user
facilities
executive
control
software
1
3
4
0
4
20
4
30
4
32
4
33
4
35
6
0
6
21
6
30
ca780104
jb
march
28
1978
5
38
pm
3026
5
3026
3026
5
3026
3026
5
3026
</TEXT>
</DOC>
<DOC>
<DOCNO>3027</DOCNO>
<TEXT>
the
development
of
the
mu5
computer
system
following
a
brief
outline
of
the
background
of
the
mu5
project
the
aims
and
ideas
for
mu5
are
discussed
a
description
is
then
given
of
the
instruction
set
which
includes
a
number
of
features
conducive
to
the
production
of
efficient
compiled
code
from
high
level
language
source
programs
the
design
of
the
processor
is
then
traced
from
the
initial
ideas
for
an
associatively
addressed
name
store
to
the
final
multistage
pipeline
structure
involving
a
prediction
mechanism
for
instruction
prefetching
and
a
function
queue
for
array
element
accessing
an
overall
view
of
the
complete
mu5
complex
is
presented
together
with
a
brief
indication
of
its
performance
cacm
january
1978
ibbett
r
capon
p
architecture
naming
virtual
storage
instruction
set
descriptor
pipeline
instruction
buffering
associative
storage
function
queue
computer
complex
4
10
4
12
6
21
6
33
ca780103
jb
march
28
1978
5
44
pm
3027
4
3027
3027
5
3027
3027
5
3027
3027
5
3027
3028
5
3027
3027
6
3027
</TEXT>
</DOC>
<DOC>
<DOCNO>3028</DOCNO>
<TEXT>
the
manchester
mark
i
and
atlas
a
his
torical
perspective
in
30
years
of
computer
design
at
manchester
university
two
systems
stand
out
the
mark
i
developed
over
the
period
1946
49
and
the
atlas
1955
62
this
paper
places
each
computer
in
its
his
torical
context
and
then
describes
the
architecture
and
system
software
in
present
day
terminology
several
design
concepts
such
as
address
generation
and
store
management
have
evolved
in
the
progression
from
mark
i
to
atlas
the
wider
impact
of
manchester
innovations
in
these
and
other
areas
is
discussed
and
the
contemporary
performance
of
the
mark
i
and
atlas
is
evaluated
cacm
january
1978
lavington
s
architecture
index
registers
paging
virtual
storage
extra
codes
compilers
operating
systems
ferranti
manchester
mark
i
atlas
icl
1
2
4
22
4
32
6
21
6
30
ca780102
jb
march
28
1978
5
50
pm
3028
4
3028
3027
5
3028
3028
5
3028
3028
5
3028
3028
5
3028
3028
6
3028
</TEXT>
</DOC>
<DOC>
<DOCNO>3029</DOCNO>
<TEXT>
foreword
to
the
special
issue
on
computer
architecture
cacm
january
1978
fuller
s
ca780101
jb
march
28
1978
5
52
pm
3029
5
3029
3029
5
3029
3029
5
3029
</TEXT>
</DOC>
<DOC>
<DOCNO>3030</DOCNO>
<TEXT>
an
example
of
hierarchical
design
and
proof
hierarchical
programming
is
being
increasingly
recognized
as
helpful
in
the
construction
of
large
programs
users
of
hierarchical
techniques
claim
or
predict
substantial
increases
in
productivity
and
in
the
reliability
of
the
programs
produced
in
this
paper
we
describe
a
formal
method
for
hierarchical
program
specification
implementation
and
proof
we
apply
this
method
to
a
significant
list
processing
problem
and
also
discuss
a
number
of
extensions
to
current
programming
languages
that
ease
hierarchical
program
design
and
proof
cacm
december
1978
spitzen
j
levitt
k
robinson
l
program
verification
specification
data
abstraction
software
modules
hierarchical
structures
4
0
4
6
5
21
5
24
ca781209
dh
january
16
19794
43
pm
2480
4
3030
2704
4
3030
2723
4
3030
2738
4
3030
2738
4
3030
2866
4
3030
2867
4
3030
2869
4
3030
2941
4
3030
2941
4
3030
2956
4
3030
2958
4
3030
2981
4
3030
3004
4
3030
3004
4
3030
3030
4
3030
3030
4
3030
3030
4
3030
3030
4
3030
3030
4
3030
3030
4
3030
3031
4
3030
3049
4
3030
3077
4
3030
3104
4
3030
3155
4
3030
2247
5
3030
2356
5
3030
2457
5
3030
2651
5
3030
2958
5
3030
2972
5
3030
3030
5
3030
3030
5
3030
3030
5
3030
</TEXT>
</DOC>
<DOC>
<DOCNO>3031</DOCNO>
<TEXT>
abstract
data
types
and
software
validation
a
data
abstraction
can
be
naturally
specified
using
algebraic
axioms
the
virtue
of
these
axioms
is
that
they
permit
a
representation
independent
formal
specification
of
a
data
type
an
example
is
given
which
shows
how
to
employ
algebraic
axioms
at
successive
levels
of
implementation
the
major
thrust
of
the
paper
is
twofold
first
it
is
shown
how
the
use
of
algebraic
axiomatizations
can
simplify
the
process
of
proving
the
correctness
of
an
implementation
of
an
abstract
data
type
second
semi
automatic
tools
are
described
which
can
be
used
both
to
automate
such
proofs
of
correctness
and
to
derive
an
immediate
implementation
from
the
axioms
this
implementation
allows
for
limited
testing
of
programs
at
design
time
before
a
conventional
implementation
is
accomplished
cacm
december
1978
guttag
j
horowitz
e
musser
d
abstract
data
type
correctness
proof
data
type
data
structure
specification
4
34
5
24
ca781208
dh
january
18
1979
2
51
pm
3030
4
3031
3031
4
3031
3031
4
3031
3049
4
3031
3105
4
3031
3148
4
3031
3150
4
3031
2939
5
3031
2958
5
3031
3031
5
3031
3031
5
3031
3031
5
3031
</TEXT>
</DOC>
<DOC>
<DOCNO>3032</DOCNO>
<TEXT>
reverse
path
forwarding
of
broadcast
packets
a
broadcast
packet
is
for
delivery
to
all
nodes
of
a
network
algorithms
for
accomplishing
this
delivery
through
a
store
and
forward
packet
switching
computer
network
include
1
transmission
of
separately
addressed
packets
2
multidestination
addressing
3
hot
potato
forwarding
4
spanning
tree
forwarding
and
5
source
based
forwarding
to
this
list
of
algorithms
we
add
6
reverse
path
forwarding
a
broadcast
routing
method
which
exploits
routing
procedures
and
data
structures
already
available
for
packet
switching
reverse
path
forwarding
is
a
practical
algorithm
for
broadcast
routing
in
store
and
forward
packet
switching
computer
networks
the
algorithm
is
described
as
being
practical
because
it
is
not
optimal
according
to
metrics
developed
for
its
analysis
in
this
paper
and
also
because
it
can
be
implemented
in
existing
networks
with
less
complexity
than
that
required
for
the
known
alternatives
cacm
december
1978
dalal
y
metcalfe
r
reverse
path
forwarding
broadcast
packets
routing
computer
networks
store
and
forward
packet
switching
broadcast
protocols
3
81
4
32
5
32
ca781207
dh
january
18
1979
3
10
pm
3032
4
3032
3119
4
3032
2849
5
3032
3032
5
3032
3032
5
3032
3032
5
3032
</TEXT>
</DOC>
<DOC>
<DOCNO>3033</DOCNO>
<TEXT>
optimizing
decision
trees
through
heuristically
guided
search
optimal
decision
table
conversion
has
been
tackled
in
the
literature
using
two
approaches
dynamic
programming
and
branch
and
bound
the
former
technique
is
quite
effective
but
its
time
and
space
requirements
are
independent
of
how
easy
the
given
table
is
furthermore
it
cannot
be
used
to
produce
good
quasi
optimal
solutions
the
branch
and
bound
technique
uses
a
good
heuristic
to
direct
the
search
but
is
cluttered
up
by
an
enormous
search
space
since
the
number
of
solutions
increases
with
the
number
of
test
variables
according
to
a
double
exponential
in
this
paper
we
suggest
a
heuristically
guided
top
down
search
algorithm
which
like
dynamic
programming
recognizes
identical
subproblems
but
which
can
be
used
to
find
both
optimal
and
quasi
optimal
solutions
the
heuristic
search
method
introduced
in
this
paper
combines
the
positive
aspects
of
the
above
two
techniques
compressed
tables
with
a
large
number
of
variables
can
be
handled
without
deriving
expanded
tables
first
cacm
december
1978
martelli
a
montanari
u
decision
table
optimal
decision
table
conversion
decision
tree
heuristic
search
and
or
graphs
dynamic
programming
branch
and
bound
3
59
3
66
5
42
8
3
ca781206
dh
january
18
1979
3
56
pm
3033
4
3033
3113
4
3033
2856
5
3033
3033
5
3033
3033
5
3033
3033
5
3033
</TEXT>
</DOC>
<DOC>
<DOCNO>3034</DOCNO>
<TEXT>
detection
of
logical
errors
in
decision
table
programs
in
this
paper
an
algorithm
to
detect
logical
errors
in
a
limited
entry
decision
table
and
in
loop
free
programs
with
embedded
decision
tables
is
developed
all
the
conditions
in
the
decision
tables
are
assumed
to
be
inequalities
or
equalities
relating
linear
expressions
it
is
also
assumed
that
actions
in
a
decision
table
are
linear
in
variables
which
occur
in
the
condition
stub
of
the
decision
table
or
tables
to
which
control
is
transferred
from
the
table
the
algorithm
is
based
on
determining
whether
a
set
of
linear
inequalities
has
or
does
not
have
a
solution
the
algorithm
described
in
the
paper
is
implemented
in
fortran
iv
cacm
december
1978
ibramsha
m
rajaraman
v
error
diagnostics
decision
tables
3
5
4
1
4
42
5
24
ca781205
dh
january
18
1979
4
06
pm
2053
4
3034
2221
4
3034
2273
4
3034
2453
4
3034
2517
4
3034
2517
4
3034
2518
4
3034
2616
4
3034
2616
4
3034
2856
4
3034
3034
4
3034
3034
4
3034
3034
4
3034
1684
5
3034
2053
5
3034
2517
5
3034
3034
5
3034
3034
5
3034
3034
5
3034
</TEXT>
</DOC>
<DOC>
<DOCNO>3035</DOCNO>
<TEXT>
a
strategic
planning
methodology
for
the
computing
effort
in
higher
education
an
empirical
evaluation
the
findings
of
a
study
designed
to
address
the
pressing
problems
associated
with
the
strategic
planning
of
the
computing
effort
in
higher
education
are
presented
here
a
planning
methodology
was
developed
and
tested
through
implementation
at
a
university
two
years
after
the
methodology
was
implemented
the
effectiveness
of
the
planning
methodology
was
assessed
in
terms
of
the
improvement
of
the
delivery
of
computing
services
to
the
major
institutional
roles
of
instruction
research
and
administration
two
control
institutions
were
employed
to
contrast
the
improvements
at
the
test
institution
the
results
of
the
research
indicate
the
planning
methodology
significantly
enhanced
the
delivery
of
computing
services
cacm
december
1978
wetherbe
j
dock
v
computer
management
computer
budget
university
computing
computer
planning
2
41
3
51
ca781204
dh
january
18
1979
4
26
pm
2977
4
3035
2985
4
3035
3011
4
3035
3035
4
3035
2485
5
3035
3035
5
3035
3035
5
3035
3035
5
3035
</TEXT>
</DOC>
<DOC>
<DOCNO>3036</DOCNO>
<TEXT>
the
selection
of
optimal
tab
settings
a
new
generation
of
computer
terminals
allows
tab
settings
to
be
selected
and
set
by
the
computer
this
feature
can
be
used
to
reduce
the
number
of
characters
that
are
needed
to
represent
a
document
for
transmission
and
printing
in
this
note
an
algorithm
is
given
for
selecting
the
optimal
set
of
tab
stops
for
minimizing
the
number
of
characters
transmitted
an
implementation
of
the
algorithm
has
reduced
the
number
of
characters
transmitted
by
from
7
to
30
percent
but
requires
a
prepass
through
the
document
to
compute
a
matrix
used
in
determining
the
optimal
set
tab
stops
the
use
of
fixed
tab
stops
as
a
heuristic
alternative
can
achieve
about
80
percent
of
optimal
with
no
prepass
cacm
december
1978
peterson
j
bitner
j
howard
j
tabs
word
processing
dynamic
programming
3
9
4
4
ca781203
dh
january
18
1979
4
34
pm
3036
5
3036
3036
5
3036
3036
5
3036
</TEXT>
</DOC>
<DOC>
<DOCNO>3037</DOCNO>
<TEXT>
a
linear
sieve
algorithm
for
finding
prime
numbers
a
new
algorithm
is
presented
for
finding
all
primes
between
2
and
n
the
algorithm
executes
in
time
proportional
to
n
assuming
that
multiplication
of
integers
not
larger
than
n
can
be
performed
in
unit
time
the
method
has
the
same
arithmetic
complexity
as
the
algorithm
presented
by
mairson
6
however
our
version
is
perhaps
simpler
and
more
elegant
it
is
also
easily
extended
to
find
the
prime
factorization
of
all
integers
between
2
and
n
in
time
proportional
to
n
cacm
december
1978
gries
d
misra
j
primes
algorithms
data
structures
5
25
5
24
5
29
ca781202
dh
january
22
1979
11
12
am
2896
4
3037
2972
4
3037
3037
4
3037
3037
4
3037
3039
4
3037
3043
4
3037
3073
4
3037
2732
5
3037
2927
5
3037
3037
5
3037
3037
5
3037
3037
5
3037
</TEXT>
</DOC>
<DOC>
<DOCNO>3038</DOCNO>
<TEXT>
using
encryption
for
authentication
in
large
networks
of
computers
use
of
encryption
to
achieve
authenticated
communication
in
computer
networks
is
discussed
example
protocols
are
presented
for
the
establishment
of
authenticated
connections
for
the
management
of
authenticated
mail
and
for
signature
verification
and
document
integrity
guarantee
both
conventional
and
public
key
encryption
algorithms
are
considered
as
the
basis
for
protocols
cacm
december
1978
needham
r
schroeder
m
encryption
security
authentication
networks
protocols
public
key
cryptosystems
data
encryption
standard
3
81
4
31
4
35
ca781201
dh
january
22
1979
11
18
am
3038
4
3038
3111
4
3038
3177
4
3038
3021
5
3038
3038
5
3038
3038
5
3038
3038
5
3038
3158
5
3038
2436
6
3038
3038
6
3038
3111
6
3038
</TEXT>
</DOC>
<DOC>
<DOCNO>3039</DOCNO>
<TEXT>
on
the
fly
garbage
collection
an
exercise
in
cooperation
as
an
example
of
cooperation
between
sequential
processes
with
very
little
mutual
interference
despite
frequent
manipulations
of
a
large
shared
data
space
a
technique
is
developed
which
allows
nearly
all
of
the
activity
needed
for
garbage
detection
and
collection
to
be
performed
by
an
additional
processor
operating
con
currently
with
the
processor
devoted
to
the
computation
proper
exclusion
and
synchronization
constraints
have
been
kept
as
weak
as
could
be
achieved
the
severe
complexities
engendered
by
doing
so
are
illustrated
cacm
november
1978
dijkstra
e
lamport
l
martin
a
scholten
c
steffens
e
multiprocessing
fine
grained
interleaving
cooperation
between
sequential
processes
with
minimized
mutual
exclusion
program
correctness
for
multiprogramming
tasks
garbage
collection
4
32
4
34
4
35
4
39
5
24
ca781112
dh
january
22
1979
3
24
pm
2838
4
3039
2896
4
3039
2896
4
3039
2972
4
3039
3037
4
3039
3039
4
3039
3039
4
3039
3039
4
3039
3043
4
3039
3073
4
3039
3074
4
3039
3112
4
3039
2723
5
3039
2732
5
3039
2896
5
3039
3039
5
3039
3039
5
3039
3039
5
3039
</TEXT>
</DOC>
<DOC>
<DOCNO>3040</DOCNO>
<TEXT>
synthesizing
constraint
expressions
a
constraint
network
representation
is
presented
for
a
combinatorial
search
problem
finding
values
for
a
set
of
variables
subject
to
a
set
of
constraints
a
theory
of
consistency
levels
in
such
networks
is
formulated
which
is
related
to
problems
of
backtrack
tree
search
efficiency
an
algorithm
is
developed
that
can
achieve
any
level
of
consistency
desired
in
order
to
preprocess
the
problem
for
subsequent
backtrack
search
or
to
function
as
an
alternative
to
backtrack
search
by
explicitly
determining
all
solutions
cacm
november
1978
freuder
e
backtrack
combinatorial
algorithms
constraint
networks
constraint
satisfaction
graph
coloring
network
consistency
relaxation
scene
labeling
search
3
63
3
64
5
25
5
30
5
32
ca781111
dh
january
22
1979
3
43
pm
1504
4
3040
3040
4
3040
1145
5
3040
3040
5
3040
3040
5
3040
3040
5
3040
</TEXT>
</DOC>
<DOC>
<DOCNO>3041</DOCNO>
<TEXT>
median
split
trees
a
fast
lookup
technique
for
frequently
occuring
keys
split
trees
are
a
new
technique
for
searching
sets
of
keys
with
highly
skewed
frequency
distributions
a
split
tree
is
a
binary
search
tree
each
node
of
which
contains
two
key
values
a
node
value
which
is
a
maximally
frequent
key
in
that
subtree
and
a
split
value
which
partitions
the
remaining
keys
with
respect
to
their
lexical
ordering
between
the
left
and
right
subtrees
a
median
split
tree
mst
uses
the
lexical
median
of
a
node
descendents
as
its
split
value
to
force
the
search
tree
to
be
perfectly
balanced
achieving
both
a
space
efficient
representation
of
the
tree
and
high
search
speed
unlike
frequency
ordered
binary
search
trees
the
cost
of
a
successful
search
of
an
mst
is
log
n
bounded
and
very
stable
around
minimal
values
further
an
mst
can
be
built
for
a
given
key
ordering
and
set
of
frequencies
in
time
n
log
n
as
opposed
to
n2
for
an
optimum
binary
search
tree
a
discussion
of
the
application
of
m
to
dictionary
lookup
for
english
is
presented
and
the
performance
obtained
is
contrasted
with
that
of
other
techniques
cacm
november
1978
sheil
b
tree
search
dictionary
lookup
binary
search
heaps
balanced
trees
zipf
law
information
retrieval
3
74
5
25
5
39
ca781110
dh
january
25
1979
9
49
am
3041
4
3041
3041
4
3041
3126
4
3041
3176
4
3041
2846
5
3041
2905
5
3041
3041
5
3041
3041
5
3041
3041
5
3041
</TEXT>
</DOC>
<DOC>
<DOCNO>3042</DOCNO>
<TEXT>
power
trees
the
new
class
of
pk
trees
is
presented
where
height
balance
is
maintained
for
the
nodes
iying
on
particular
paths
the
number
of
nodes
of
a
pk
tree
asymptotically
grows
as
a
power
of
the
height
in
the
worst
case
a
procedure
for
node
insertion
is
given
and
the
class
of
trees
considered
is
restricted
to
ipk
trees
which
are
buildable
by
such
a
procedure
the
average
behavior
of
such
trees
studied
by
an
extensive
set
of
simulation
runs
is
close
to
that
of
avl
trees
in
particular
the
family
of
ipo
trees
whose
main
advantage
is
the
reduced
number
of
restructurings
required
after
node
insertion
is
analyzed
cacm
november
1978
luccio
f
pagli
l
binary
search
trees
pk
trees
ipk
trees
search
length
node
insertion
subtree
rotation
3
73
3
74
4
34
5
25
5
31
ca781109
dh
january
25
1979
4
29
pm
2839
4
3042
2889
4
3042
2968
4
3042
3009
4
3042
3042
4
3042
3042
4
3042
3042
4
3042
3042
4
3042
3065
4
3042
3096
4
3042
3096
4
3042
3163
4
3042
3163
4
3042
2455
5
3042
2839
5
3042
2889
5
3042
2968
5
3042
3042
5
3042
3042
5
3042
3042
5
3042
</TEXT>
</DOC>
<DOC>
<DOCNO>3043</DOCNO>
<TEXT>
distributed
processes
a
concurrent
programming
concept
a
language
concept
for
concurrent
processes
without
common
variables
is
introduced
these
processes
communicate
and
synchronize
by
means
of
procedure
calls
and
guarded
regions
this
concept
is
proposed
for
real
time
applications
controlled
by
microcomputer
networks
with
distributed
storage
the
paper
gives
several
examples
of
distributed
processes
and
shows
that
they
include
procedures
coroutines
classes
monitors
processes
semaphores
buffers
path
expressions
and
input
output
as
special
cases
cacm
november
1978
hansen
p
concurrent
programming
distributed
processes
microprocessor
networks
nondeterminism
guarded
regions
programming
languages
process
communication
and
scheduling
sorting
arrays
coroutines
classes
monitors
processes
semaphores
buffers
path
expressions
input
output
3
8
4
2
4
22
4
32
5
24
ca781108
dh
january
26
1979
10
40
am
2865
4
3043
2866
4
3043
2896
4
3043
2898
4
3043
2972
4
3043
2972
4
3043
3037
4
3043
3039
4
3043
3043
4
3043
3043
4
3043
3073
4
3043
3128
4
3043
3144
4
3043
2597
5
3043
2732
5
3043
3043
5
3043
3043
5
3043
3043
5
3043
</TEXT>
</DOC>
<DOC>
<DOCNO>3044</DOCNO>
<TEXT>
a
note
on
conditional
expressions
evaluation
of
a
conditional
expression
may
succeed
even
when
the
deciding
predicate
diverges
and
the
alternatives
are
records
or
nodes
whose
fields
have
different
content
cacm
november
1978
friedman
d
wise
d
parallel
evaluation
suspending
cons
lisp
conditional
forms
if
then
else
ambiguous
function
infinite
structures
4
2
4
13
4
32
5
24
ca781107
dh
january
26
1979
10
44
am
1469
4
3044
1486
4
3044
1491
4
3044
1781
4
3044
2178
4
3044
2326
4
3044
2470
4
3044
2684
4
3044
3044
4
3044
1303
5
3044
3044
5
3044
3044
5
3044
3044
5
3044
</TEXT>
</DOC>
<DOC>
<DOCNO>3045</DOCNO>
<TEXT>
a
simple
recovery
only
procedure
for
simple
precedence
parsers
a
simple
method
is
described
enabling
simple
precedence
parsers
to
recover
from
syntax
errors
no
attempt
to
repair
errors
is
made
yet
parsing
and
most
semantic
processing
can
continue
the
result
is
a
good
first
approximation
to
syntax
error
handling
with
negligible
increase
in
parsing
time
space
and
complexity
of
both
the
parser
and
its
table
generator
cacm
november
1978
ripley
d
syntax
errors
error
recovery
parsing
simple
precedence
compilers
debugging
4
12
4
42
5
23
ca781106
dh
january
26
1979
10
52
am
1379
4
3045
1542
4
3045
1683
4
3045
1693
4
3045
1693
4
3045
1781
4
3045
1781
4
3045
1787
4
3045
1836
4
3045
1836
4
3045
1945
4
3045
1945
4
3045
2015
4
3045
2060
4
3045
2060
4
3045
2061
4
3045
2061
4
3045
2082
4
3045
2091
4
3045
2091
4
3045
2152
4
3045
2179
4
3045
2179
4
3045
2340
4
3045
2356
4
3045
2546
4
3045
2546
4
3045
2603
4
3045
2698
4
3045
2698
4
3045
2708
4
3045
2708
4
3045
2708
4
3045
2820
4
3045
2824
4
3045
2971
4
3045
2982
4
3045
2986
4
3045
3045
4
3045
3045
4
3045
3045
4
3045
3093
4
3045
1477
5
3045
1491
5
3045
2534
5
3045
3045
5
3045
3045
5
3045
3045
5
3045
</TEXT>
</DOC>
<DOC>
<DOCNO>3046</DOCNO>
<TEXT>
computer
generation
of
gamma
random
variables
ii
a
rejection
method
is
proposed
for
generating
gamma
variates
with
nonintegral
shape
parameter
a
a
1
this
method
is
similar
to
other
methods
given
by
fishman
wallace
and
tadikamalla
and
is
faster
than
these
methods
for
a
2
the
core
storage
requirements
and
the
programming
effort
for
the
proposed
method
are
similar
to
those
of
wallace
or
tadikamalla
methods
the
computational
times
for
the
proposed
method
remain
fairly
constant
for
medium
and
large
values
of
a
and
are
superior
to
times
obtained
by
ahrens
and
dieter
method
for
all
values
of
a
the
proposed
method
is
simpler
than
ahrens
and
dieter
method
cacm
november
1978
tadikamalla
p
gamma
variables
rejection
method
computer
methods
5
5
8
1
ca781105
dh
january
26
1979
11
02
am
2847
4
3046
2928
4
3046
3046
4
3046
3046
4
3046
3046
4
3046
3098
4
3046
3098
4
3046
3107
4
3046
2569
5
3046
2847
5
3046
3046
5
3046
3046
5
3046
3046
5
3046
3098
5
3046
</TEXT>
</DOC>
<DOC>
<DOCNO>3047</DOCNO>
<TEXT>
using
synthetic
images
to
register
real
images
with
surface
models
a
number
of
image
analysis
tasks
can
benefit
from
registration
of
the
image
with
a
model
of
the
surface
being
imaged
automatic
navigation
using
visible
light
or
radar
images
requires
exact
alignment
of
such
images
with
digital
terrain
models
in
addition
automatic
classification
of
terrain
using
satellite
imagery
requires
such
alignment
to
deal
correctly
with
the
effects
of
varying
sun
angle
and
surface
slope
even
inspection
techniques
for
certain
industrial
parts
may
be
improved
by
this
means
we
achieve
the
required
alignment
by
matching
the
real
image
with
a
synthetic
image
obtained
from
a
surface
model
and
known
positions
of
the
light
sources
the
synthetic
image
intensity
is
calculated
using
the
reflectance
map
a
convenient
way
of
describing
surface
reflection
as
a
function
of
surface
gradient
we
illustrate
the
technique
using
landsat
images
and
digital
terrain
models
cacm
november
1978
horn
b
bachman
b
image
registration
synthetic
images
surface
models
automatic
hill
shading
digital
terrain
models
image
transformation
image
matching
shaded
images
3
63
3
11
3
14
8
2
3
83
ca781104
dh
january
26
1979
11
16
am
2816
4
3047
2816
4
3047
2828
4
3047
2827
4
3047
2913
4
3047
3047
4
3047
3047
4
3047
2751
5
3047
2829
5
3047
3047
5
3047
3047
5
3047
3047
5
3047
</TEXT>
</DOC>
<DOC>
<DOCNO>3048</DOCNO>
<TEXT>
performance
evaluation
of
highly
concurrent
computers
by
deterministic
simulation
simulation
is
presented
as
a
practical
technique
for
performance
evaluation
of
alternative
configurations
of
highly
concurrent
computers
a
technique
is
described
for
constructing
a
detailed
deterministic
simulation
model
of
a
system
in
the
model
a
control
stream
replaces
the
instruction
and
data
streams
of
the
real
system
simulation
of
the
system
model
yields
the
timing
and
resource
usage
statistics
needed
for
performance
evaluation
without
the
necessity
of
emulating
the
system
as
a
case
study
the
implementation
of
a
simulator
of
a
model
of
the
cpu
memory
subsystem
of
the
ibm
360
91
is
described
the
results
of
evaluating
some
alternative
system
designs
are
discussed
the
experiments
reveal
that
for
the
case
study
the
major
bottlenecks
in
the
system
are
the
memory
unit
and
the
fixed
point
unit
further
it
appears
that
many
of
the
sophisticated
pipelining
and
buffering
technique
simplemented
in
the
architecture
of
the
ibm
360
91
are
of
little
value
when
high
speed
cache
memory
is
used
as
in
the
ibm
360
195
cacm
november
1978
kumar
b
davidson
e
performance
evaluation
deterministic
simulation
control
stream
concurrent
computers
6
20
8
1
ca781103
dh
january
26
1979
11
26
am
3048
5
3048
3048
5
3048
3048
5
3048
</TEXT>
</DOC>
<DOC>
<DOCNO>3049</DOCNO>
<TEXT>
a
simply
extended
and
modified
batch
environment
graphical
system
sembegs
sembegs
is
a
complete
batch
environment
graphical
system
containing
components
for
handling
graphical
data
files
for
displaying
the
contents
of
these
files
on
a
variety
of
graphical
hardware
and
for
performing
graphical
batch
input
operations
sembegs
is
easy
to
extend
and
modify
to
meet
the
growing
needs
of
a
large
batch
environment
and
is
even
extendable
to
a
fully
interactive
system
the
paper
presents
the
conceptual
view
of
graphics
leading
to
the
design
of
sembegs
and
outlines
the
major
components
of
the
system
the
design
of
sembegs
is
founded
upon
the
basic
assumption
that
the
true
aim
of
computer
graphics
is
to
describe
graphical
entities
rather
than
as
commonly
held
to
provide
graphical
input
and
output
functional
capabilities
sembegs
is
built
around
a
basic
graphical
data
management
system
bagdams
which
provides
a
common
means
of
communicating
the
descriptions
of
graphical
entities
between
the
various
components
of
sembegs
bagdams
provides
facilities
for
storing
retrieving
and
manipulating
the
descriptions
of
graphical
entities
provided
by
and
received
by
application
programs
graphics
packages
and
graphical
devices
cacm
november
1978
wendorf
j
computer
graphics
data
structures
graphic
display
graphic
input
graphical
database
device
independent
graphics
4
33
4
34
8
2
ca781102
dh
january
26
1979
1
30
pm
3030
4
3049
3031
4
3049
3049
4
3049
3049
4
3049
3049
4
3049
3049
4
3049
2956
5
3049
2957
5
3049
2958
5
3049
2960
5
3049
3049
5
3049
3049
5
3049
3049
5
3049
</TEXT>
</DOC>
<DOC>
<DOCNO>3050</DOCNO>
<TEXT>
systems
design
education
a
gaming
approach
one
of
the
problems
facing
managers
of
computer
installations
is
the
problem
of
configuring
the
computer
system
to
meet
the
demands
made
by
the
mix
of
jobs
that
the
computer
center
must
service
this
paper
presents
a
management
game
that
allows
the
player
to
configure
a
computer
system
to
meet
a
hypothetical
job
mix
is
under
the
control
of
a
game
administrator
and
can
be
varied
to
simulate
a
variety
of
real
world
situations
i
o
bound
jobs
compute
bound
jobs
etc
the
player
of
the
game
receives
a
set
of
detailed
reports
on
the
cost
of
his
choices
and
a
simulated
run
of
the
center
operating
under
his
choices
cacm
november
1978
lyons
n
system
design
configuration
management
game
2
43
2
44
ca781101
dh
january
29
1979
11
43
am
2407
4
3050
2852
4
3050
2852
4
3050
3003
4
3050
3011
4
3050
3050
4
3050
3050
4
3050
2345
5
3050
2387
5
3050
3050
5
3050
3050
5
3050
3050
5
3050
</TEXT>
</DOC>
<DOC>
<DOCNO>3051</DOCNO>
<TEXT>
a
comparison
of
heaps
and
the
tl
structure
for
the
simulation
event
set
none
cacm
october
1978
franta
w
maly
k
simulation
event
set
heaps
tl
structure
3
34
4
22
5
5
8
1
ca781010
dh
january
29
1979
11
51
am
2844
4
3051
2936
4
3051
3051
4
3051
3051
4
3051
3064
4
3051
3109
4
3051
3109
4
3051
2767
5
3051
2844
5
3051
3051
5
3051
3051
5
3051
3051
5
3051
</TEXT>
</DOC>
<DOC>
<DOCNO>3052</DOCNO>
<TEXT>
cold
start
vs
warm
start
miss
ratios
in
a
two
level
computer
storage
hierarchy
miss
ratio
measurements
are
often
made
from
a
cold
start
that
is
made
with
the
first
level
store
initially
empty
for
large
capacities
the
effect
on
the
measured
miss
ratio
of
the
misses
incurred
while
filling
the
first
level
store
can
be
significant
even
for
long
reference
strings
use
of
warm
start
rather
than
cold
start
miss
ratios
cast
doubt
on
the
widespread
belief
that
the
observed
s
shape
of
lifetime
reciprocal
of
miss
ratio
versus
capacity
curve
indicates
a
property
of
behavior
of
programs
that
maintain
a
constant
number
of
pages
in
main
storage
on
the
other
hand
if
cold
start
miss
ratios
are
measured
as
a
function
of
capacity
and
measurement
length
then
they
are
useful
in
studying
systems
in
which
operation
of
a
program
is
periodically
interrupted
by
task
switches
it
is
shown
how
to
obtain
under
simple
assumptions
the
cache
miss
ratio
for
multiprogramming
from
cold
start
miss
ratio
values
and
how
to
obtain
approximate
cold
start
miss
ratios
from
warm
start
miss
ratios
cacm
october
1978
easton
m
fagin
r
miss
ratio
cold
start
warm
start
storage
hierarchy
lifetime
function
multiprogramming
s
shape
3
70
4
32
9
35
ca781009
dh
january
29
1979
5
16
pm
2374
4
3052
2481
4
3052
2669
4
3052
2863
4
3052
3016
4
3052
3052
4
3052
1901
5
3052
3052
5
3052
3052
5
3052
3052
5
3052
</TEXT>
</DOC>
<DOC>
<DOCNO>3053</DOCNO>
<TEXT>
packed
scatter
tables
scatter
tables
for
open
addressing
benefit
from
recursive
entry
displacements
cutoffs
for
unsuccessful
searches
and
auxiliary
cost
functions
compared
with
conventional
methods
the
new
techniques
provide
substantially
improved
tables
that
resemble
exact
solution
optimal
packings
the
displacements
are
depth
limited
approximations
to
an
enumerative
exhaustive
optimization
although
packing
costs
remain
linear
o
n
with
table
size
n
the
techniques
are
primarily
suited
for
important
fixed
but
possibly
quite
large
tables
for
which
reference
frequencies
may
be
known
op
code
tables
spelling
dictionaries
access
arrays
introduction
of
frequency
weights
further
improves
retrievals
but
the
enhancement
may
degrade
cutoffs
cacm
october
1978
lyon
g
assignment
problem
backtrack
programming
hashing
open
addressing
recursion
scatter
table
rearrangements
3
74
4
0
ca781008
dh
january
29
1979
5
30
pm
1207
4
3053
1208
4
3053
1676
4
3053
1682
4
3053
1728
4
3053
1860
4
3053
1973
4
3053
1973
4
3053
1973
4
3053
1992
4
3053
2018
4
3053
2018
4
3053
2032
4
3053
2033
4
3053
2107
4
3053
2109
4
3053
2138
4
3053
2203
4
3053
2203
4
3053
2203
4
3053
2251
4
3053
2251
4
3053
2251
4
3053
2251
4
3053
2359
4
3053
2412
4
3053
2524
4
3053
2530
4
3053
2534
4
3053
2537
4
3053
2543
4
3053
2543
4
3053
2543
4
3053
2543
4
3053
2552
4
3053
2559
4
3053
2559
4
3053
2559
4
3053
2573
4
3053
2704
4
3053
2770
4
3053
2770
4
3053
2770
4
3053
2770
4
3053
2974
4
3053
2991
4
3053
2991
4
3053
3053
4
3053
3053
4
3053
3053
4
3053
3053
4
3053
3053
4
3053
3053
4
3053
3053
4
3053
3053
4
3053
3053
4
3053
3053
4
3053
3053
4
3053
3083
4
3053
3083
4
3053
3083
4
3053
1329
5
3053
1785
5
3053
1973
5
3053
1992
5
3053
2107
5
3053
2109
5
3053
2412
5
3053
2543
5
3053
2673
5
3053
2707
5
3053
2770
5
3053
3053
5
3053
3053
5
3053
3053
5
3053
</TEXT>
</DOC>
<DOC>
<DOCNO>3054</DOCNO>
<TEXT>
implementing
quicksort
programs
this
paper
is
a
practical
study
of
how
to
implement
the
quicksort
sorting
algorithm
and
its
best
variants
on
real
computers
including
how
to
apply
various
code
optimization
techniques
a
detailed
implementation
combining
the
most
effective
improvements
to
quicksort
is
given
along
with
a
discussion
of
how
to
implement
it
in
assembly
language
analytic
results
describing
the
performance
of
the
programs
are
summarized
a
variety
of
special
situations
are
considered
from
a
practical
standpoint
to
illustrate
quicksort
wide
applicability
as
an
internal
sorting
method
which
requires
negligible
extra
storage
cacm
october
1978
sedgewick
r
quicksort
analysis
of
algorithms
code
optimization
sorting
4
0
4
6
5
25
5
31
5
5
ca781007
dh
january
29
1979
5
40
pm
1175
4
3054
1919
4
3054
1919
4
3054
1919
4
3054
1969
4
3054
1969
4
3054
1997
4
3054
1997
4
3054
2118
4
3054
2191
4
3054
2191
4
3054
2216
4
3054
2216
4
3054
2216
4
3054
2227
4
3054
2319
4
3054
2388
4
3054
2388
4
3054
2348
4
3054
2582
4
3054
2669
4
3054
2679
4
3054
2679
4
3054
2679
4
3054
2679
4
3054
2783
4
3054
2783
4
3054
2784
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3054
4
3054
3121
4
3054
3121
4
3054
864
4
3054
1175
5
3054
1880
5
3054
1919
5
3054
1969
5
3054
1980
5
3054
1997
5
3054
307
5
3054
308
5
3054
309
5
3054
2017
5
3054
2679
5
3054
3054
5
3054
3054
5
3054
3054
5
3054
776
5
3054
</TEXT>
</DOC>
<DOC>
<DOCNO>3055</DOCNO>
<TEXT>
an
analysis
of
algorithms
for
the
dutch
national
flag
problem
solutions
to
the
dutch
national
flag
problem
have
been
given
by
dijkstra
1
and
meyer
3
dijkstra
starts
with
a
simple
program
and
arrives
at
an
improved
program
by
refinement
both
of
the
algorithms
given
by
dijkstra
are
shown
to
have
an
expected
number
of
swaps
which
is
2
3n
0
1
and
that
these
values
differ
at
most
by
1
3
of
a
swap
and
asymptotically
by
1
4
of
a
swap
the
algorithm
of
meyer
is
shown
to
have
expected
swap
complexity
5
9n
cacm
october
1978
mcmaster
c
algorithmic
analysis
dutch
national
flag
problem
refinement
structured
programming
4
0
5
24
5
25
5
3
ca781006
dh
january
29
1979
5
47
pm
3055
5
3055
3055
5
3055
3055
5
3055
3170
5
3055
3055
6
3055
3104
6
3055
</TEXT>
</DOC>
<DOC>
<DOCNO>3056</DOCNO>
<TEXT>
counting
large
numbers
of
events
in
small
registers
it
is
possible
to
use
a
small
counter
to
keep
approximate
counts
of
large
numbers
the
resulting
expected
error
can
be
rather
precisely
controlled
an
example
is
given
in
which
8
bit
counters
bytes
are
used
to
keep
track
of
as
many
as
130
000
events
with
a
relative
error
which
is
substantially
independent
of
the
number
n
of
events
this
relative
error
can
be
expected
to
be
24
percent
or
less
95
percent
of
the
time
i
e
o
n
8
the
techniques
could
be
used
to
advantage
in
multichannel
counting
hardware
or
software
used
for
the
monitoring
of
experiments
or
processes
cacm
october
1978
morris
r
counting
5
11
ca781005
dh
january
29
1979
5
52
pm
3056
5
3056
3056
5
3056
3056
5
3056
</TEXT>
</DOC>
<DOC>
<DOCNO>3057</DOCNO>
<TEXT>
optimal
his
togram
matching
by
monotone
gray
level
transformation
this
paper
investigates
the
problem
of
optimal
his
togram
matching
using
monotone
gray
level
transformation
which
always
assigns
all
picture
points
of
a
given
gray
level
i
to
another
gray
level
t
i
such
that
if
i
j
then
t
i
t
j
the
objective
is
to
find
a
transformed
digital
picture
of
a
given
picture
such
that
the
sum
of
absolute
errors
between
the
gray
level
his
togram
of
the
transformed
picture
and
that
of
a
reference
picture
is
minimized
this
is
equivalent
to
placing
k1
linearly
ordered
objects
of
different
sized
one
by
one
into
k2
linearly
ordered
boxes
of
assorted
sizes
such
that
the
accumulated
error
of
space
under
packed
or
overpacked
in
the
boxes
is
minimized
the
placement
function
is
monotonic
which
ensures
a
polynomial
time
solution
to
this
problem
a
tree
search
algorithm
for
optimal
his
togram
matching
is
presented
which
has
time
complexity
o
k1
x
k2
if
the
monotone
property
is
dropped
then
the
problem
becomes
np
complete
even
if
it
is
restricted
to
k2
2
cacm
october
1978
chang
s
wong
y
optimal
his
togram
matching
gray
level
transformation
packing
problem
tree
searching
algorithm
picture
processing
3
24
5
25
5
42
ca781004
dh
january
29
1979
6
08
pm
3057
5
3057
3057
5
3057
3057
5
3057
</TEXT>
</DOC>
<DOC>
<DOCNO>3058</DOCNO>
<TEXT>
jump
searching
a
fast
sequential
search
technique
when
sequential
file
structures
must
be
used
and
binary
searching
is
not
feasible
jump
searching
becomes
an
appealing
alternative
this
paper
explores
variants
of
the
classic
jump
searching
scheme
where
the
optimum
jump
size
is
the
square
root
of
the
number
of
records
multiple
level
and
variable
size
jump
strategies
are
explored
appropriate
applications
are
discussed
and
performance
is
evaluated
cacm
october
1978
shneiderman
b
jump
searching
sequential
files
file
management
search
strategies
database
structures
index
searching
3
74
4
34
ca781003
dh
january
29
1979
6
15
pm
3058
4
3058
3063
4
3058
2978
5
3058
3058
5
3058
3058
5
3058
3058
5
3058
</TEXT>
</DOC>
<DOC>
<DOCNO>3059</DOCNO>
<TEXT>
models
for
parallel
processing
within
programs
application
to
cpu
i
o
and
i
o
i
o
overlap
approximate
queueing
models
for
internal
parallel
processing
by
individual
programs
in
a
multiprogrammed
system
are
developed
in
this
paper
the
solution
technique
is
developed
by
network
decomposition
the
models
are
formulated
in
terms
of
cpu
i
o
and
i
o
i
o
overlap
and
applied
to
the
analysis
of
these
problems
the
percentage
performance
improvement
from
cpu
i
o
overlap
is
found
to
be
greatest
for
systems
which
are
in
approximate
cpu
i
o
utilization
balance
and
for
low
degrees
of
multiprogramming
the
percentage
improvement
from
i
o
i
o
overlap
is
found
to
be
greatest
for
systemtems
in
which
the
i
o
system
is
more
utilized
than
the
cpu
cacm
october
1978
towsley
d
chandy
k
browne
j
multiprogramming
parallel
processing
queueing
network
models
multiprocessing
of
computation
and
i
o
4
32
8
1
ca781002
dh
january
29
1979
6
23
pm
3059
4
3059
3070
4
3059
1685
5
3059
2988
5
3059
3059
5
3059
3059
5
3059
3059
5
3059
3059
6
3059
</TEXT>
</DOC>
<DOC>
<DOCNO>3060</DOCNO>
<TEXT>
fortran
77
there
is
a
new
standard
fortran
the
official
title
is
american
national
standard
programming
language
fortran
x3
9
1978
but
it
is
more
commonly
referred
to
as
fortran
77
since
its
development
was
completed
in
1977
it
replaces
the
fortran
standard
designated
x3
9
1966
this
paper
describes
many
of
the
features
of
fortran
77
and
also
provides
some
information
about
how
and
why
the
standard
was
developed
cacm
october
1978
brainerd
w
none
none
ca781001
dh
january
29
1979
6
28
pm
1613
4
3060
1646
4
3060
1900
4
3060
1955
4
3060
2025
4
3060
2154
4
3060
2154
4
3060
2365
4
3060
2506
4
3060
2915
4
3060
3060
4
3060
3060
4
3060
3060
4
3060
987
5
3060
1900
5
3060
2154
5
3060
3060
5
3060
3060
5
3060
3060
5
3060
</TEXT>
</DOC>
<DOC>
<DOCNO>3061</DOCNO>
<TEXT>
simulations
of
dynamic
sequential
search
algorithms
none
cacm
september
1978
tenenbaum
a
searching
list
processing
sequential
searching
dynamic
reordering
simulation
3
74
8
1
ca780911
dh
january
29
1979
6
30
pm
3061
4
3061
2885
5
3061
3061
5
3061
3061
5
3061
3061
5
3061
</TEXT>
</DOC>
<DOC>
<DOCNO>3062</DOCNO>
<TEXT>
real
time
plotting
of
approximate
contour
maps
none
cacm
september
1978
ward
s
contour
map
digital
plotting
graphical
characters
3
10
3
20
4
41
8
2
ca780910
dh
january
29
1979
6
33
pm
2287
4
3062
2547
4
3062
3062
4
3062
3062
4
3062
1871
5
3062
1925
5
3062
3062
5
3062
3062
5
3062
3062
5
3062
</TEXT>
</DOC>
<DOC>
<DOCNO>3063</DOCNO>
<TEXT>
a
note
on
virtual
memory
indexes
none
cacm
september
1978
maly
k
index
b
tree
pages
file
organization
linked
representation
maintenance
costs
3
02
3
50
3
51
3
73
3
74
ca780909
dh
january
29
1979
6
36
pm
3058
4
3063
3063
4
3063
2978
5
3063
3063
5
3063
3063
5
3063
3063
5
3063
</TEXT>
</DOC>
<DOC>
<DOCNO>3064</DOCNO>
<TEXT>
event
manipulation
for
discrete
simulations
requiring
large
numbers
of
events
the
event
manipulation
system
presented
here
consists
of
two
major
parts
the
first
part
addresses
the
familiar
problem
of
event
scheduling
efficiency
when
the
number
of
scheduled
events
grows
large
the
second
part
deals
with
the
less
apparent
problem
of
providing
efficiency
and
flexibility
as
scheduled
events
are
accessed
to
be
executed
additional
features
and
problems
dealt
with
include
the
proper
handling
of
simultaneous
events
that
certain
events
must
be
created
scheduled
and
executed
at
the
same
points
in
simulated
time
that
infinite
loops
caused
by
the
concatenation
of
such
zero
time
events
are
possible
and
must
be
diagnosed
that
maintaining
various
event
counts
is
practical
and
economical
and
that
a
capability
for
handling
time
displaceable
events
is
desirable
and
possible
cacm
september
1978
ulrich
e
simulation
discrete
systems
simulation
discrete
event
simulation
time
flow
mechanisms
3
65
3
74
4
22
8
1
ca780908
dh
january
29
1979
6
46
pm
2767
4
3064
2844
4
3064
2844
4
3064
2936
4
3064
2936
4
3064
3051
4
3064
3064
4
3064
3064
4
3064
3064
4
3064
3064
4
3064
3064
4
3064
3109
4
3064
1846
5
3064
1939
5
3064
2742
5
3064
2767
5
3064
2936
5
3064
3064
5
3064
3064
5
3064
3064
5
3064
</TEXT>
</DOC>
<DOC>
<DOCNO>3065</DOCNO>
<TEXT>
right
brother
trees
insertion
and
deletion
are
provided
for
the
class
of
right
or
one
sided
brother
trees
which
have
o
log
n
performance
the
importance
of
these
results
stems
from
the
close
relationship
of
right
brother
trees
which
have
an
insertion
algorithm
operating
in
o
log2
n
further
although
both
insertion
and
deletion
can
be
carried
out
in
o
log
n
time
for
right
brother
trees
it
appears
that
the
insertion
algorithm
is
inherently
much
more
difficult
than
the
deletion
algorithm
the
reverse
of
what
one
usually
obtains
cacm
september
1978
ottmann
t
six
h
wood
d
dictionary
problem
search
trees
avl
trees
brother
trees
right
balanced
trees
one
sided
height
balanced
trees
insertion
and
deletion
algorithms
3
73
3
74
5
31
ca780807
dh
january
29
1979
7
08
pm
3009
4
3065
3042
4
3065
3065
4
3065
3065
4
3065
3096
4
3065
3163
4
3065
3163
4
3065
2839
5
3065
3065
5
3065
3065
5
3065
3065
5
3065
3096
5
3065
3163
5
3065
2839
6
3065
2889
6
3065
3009
6
3065
3065
6
3065
3096
6
3065
</TEXT>
</DOC>
<DOC>
<DOCNO>3066</DOCNO>
<TEXT>
a
controlled
experiment
in
program
testing
and
code
walkthroughs
inspections
this
paper
describes
an
experiment
in
program
testing
employing
59
highly
experienced
data
processing
professionals
using
seven
methods
to
test
a
small
pl
i
program
the
results
show
that
the
popular
code
walk
through
inspection
method
was
as
effective
as
other
computer
based
methods
in
finding
errors
and
that
the
most
effective
methods
in
terms
of
errors
found
and
cost
employed
pairs
of
subjects
who
tested
the
program
independently
and
then
pooled
their
findings
the
study
also
shows
that
there
is
a
tremendous
amount
of
variability
among
subjects
and
that
the
ability
to
detect
certain
types
of
errors
varies
from
method
to
method
cacm
september
1978
myers
g
software
reliability
program
verification
debugging
testing
code
walkthroughs
code
inspections
personnel
selection
4
6
ca780906
dh
february
5
1979
10
47
am
3066
5
3066
3066
5
3066
3066
5
3066
</TEXT>
</DOC>
<DOC>
<DOCNO>3067</DOCNO>
<TEXT>
generalized
working
sets
for
segment
reference
strings
the
working
set
concept
is
extended
for
programs
that
reference
segments
of
different
sizes
the
generalized
working
set
policy
gws
keeps
as
its
resident
set
those
segments
whose
retention
costs
do
not
exceed
their
retrieval
costs
the
gws
is
a
model
for
the
entire
class
of
demand
fetching
memory
policies
that
satisfy
a
resident
set
inclusion
property
a
generalized
optimal
policy
gopt
is
also
defined
at
its
operating
points
it
minimizes
aggregated
retention
and
swapping
costs
special
cases
of
the
cost
structure
allow
gws
and
gopt
to
simulate
any
known
stack
algorithm
the
working
set
and
vmin
efficient
procedures
for
computing
demand
curves
showing
swapping
load
as
a
function
of
memory
usage
are
developed
for
gws
and
gopt
policies
empirical
data
from
an
actual
system
are
included
cacm
september
1978
denning
p
slutz
d
database
referencing
memory
management
optimal
memory
policies
paging
program
behavior
program
measurement
segmentation
working
sets
4
30
8
10
ca780905
dh
february
5
1979
11
20
am
1892
4
3067
1901
4
3067
2085
4
3067
2095
4
3067
2218
4
3067
2277
4
3067
2319
4
3067
2329
4
3067
2358
4
3067
2373
4
3067
2373
4
3067
2374
4
3067
2380
4
3067
2380
4
3067
2434
4
3067
2499
4
3067
2450
4
3067
2450
4
3067
2501
4
3067
2582
4
3067
2595
4
3067
2669
4
3067
2828
4
3067
2863
4
3067
2863
4
3067
2881
4
3067
2928
4
3067
2996
4
3067
2996
4
3067
2996
4
3067
3000
4
3067
3006
4
3067
3006
4
3067
3006
4
3067
3006
4
3067
3067
4
3067
3067
4
3067
3067
4
3067
3067
4
3067
3067
4
3067
3067
4
3067
3067
4
3067
3067
4
3067
1751
5
3067
2373
5
3067
2374
5
3067
2595
5
3067
2682
5
3067
2863
5
3067
2864
5
3067
3006
5
3067
3067
5
3067
3067
5
3067
3067
5
3067
</TEXT>
</DOC>
<DOC>
<DOCNO>3068</DOCNO>
<TEXT>
a
model
for
verification
of
data
security
in
operating
systems
program
verification
applied
to
kernel
architectures
forms
a
promising
method
for
providing
uncircumventably
secure
shared
computer
systems
a
precise
definition
of
data
security
is
developed
here
in
terms
of
a
general
model
for
operating
systems
this
model
is
suitable
as
a
basis
for
verifying
many
of
those
properties
of
an
operating
system
which
are
necessary
to
assure
reliable
enforcement
of
security
the
application
of
this
approach
to
the
ucla
secure
operating
system
is
also
discussed
cacm
september
1978
popek
g
farber
d
operating
systems
security
protection
program
verification
4
35
5
24
ca780904
dh
february
5
1979
2
40
pm
2021
4
3068
2222
4
3068
2227
4
3068
2315
4
3068
2326
4
3068
2470
4
3068
2732
4
3068
2865
4
3068
2896
4
3068
2943
4
3068
3014
4
3068
3068
4
3068
3068
4
3068
3077
4
3068
3143
4
3068
1834
5
3068
2869
5
3068
3068
5
3068
3068
5
3068
3068
5
3068
3105
5
3068
1471
6
3068
2625
6
3068
2632
6
3068
2868
6
3068
2939
6
3068
3068
6
3068
</TEXT>
</DOC>
<DOC>
<DOCNO>3069</DOCNO>
<TEXT>
a
practical
interprocedural
data
flow
analysis
algorithm
a
new
interprocedural
data
flow
analysis
algorithm
is
presented
and
analyzed
the
algorithm
associates
with
each
procedure
in
a
program
information
about
which
variables
may
be
modified
which
may
be
used
and
which
are
possibly
preserved
by
a
call
on
the
procedure
and
all
of
its
subcalls
the
algorithm
is
sufficiently
powerful
to
be
used
on
recursive
programs
and
to
deal
with
the
sharing
of
variables
which
arises
through
reference
parameters
the
algorithm
is
unique
in
that
it
can
compute
all
of
this
information
in
a
single
pass
not
requiring
a
prepass
to
compute
calling
relationships
or
sharing
patterns
the
algorithm
is
asymptotically
optimal
in
time
complexity
it
has
been
implemented
and
is
practical
even
on
programs
which
are
quite
large
cacm
september
1978
barth
j
data
flow
analysis
global
flow
analysis
optimization
side
effects
relations
reference
parameters
incarnations
4
12
4
20
ca780903
dh
february
5
1979
3
07
pm
1086
4
3069
1132
4
3069
1234
4
3069
1263
4
3069
1265
4
3069
1270
4
3069
1323
4
3069
1358
4
3069
1379
4
3069
1380
4
3069
1453
4
3069
1464
4
3069
1484
4
3069
1491
4
3069
1498
4
3069
1613
4
3069
1614
4
3069
1781
4
3069
1825
4
3069
1860
4
3069
2083
4
3069
2178
4
3069
2179
4
3069
2252
4
3069
2325
4
3069
2341
4
3069
2546
4
3069
2645
4
3069
2652
4
3069
2684
4
3069
2842
4
3069
2929
4
3069
2934
4
3069
3069
4
3069
669
4
3069
679
4
3069
691
4
3069
761
4
3069
949
4
3069
989
4
3069
3069
5
3069
3069
5
3069
3069
5
3069
3184
5
3069
</TEXT>
</DOC>
<DOC>
<DOCNO>3070</DOCNO>
<TEXT>
hybrid
simulation
models
of
computer
systems
this
paper
describes
the
structure
and
operation
of
a
hybrid
simulation
model
in
which
both
discrete
event
simulation
and
analytic
techniques
are
combined
to
produce
efficient
yet
accurate
system
models
in
an
example
based
on
a
simple
hypothetical
computer
system
discrete
event
simulation
is
used
to
model
the
arrival
and
activation
of
jobs
and
a
central
server
queueing
network
models
the
use
of
system
processors
the
accuracy
and
efficiency
of
the
hybrid
technique
are
demonstrated
by
comparing
the
result
and
computational
costs
of
the
hybrid
model
of
the
example
with
those
of
an
equivalent
simulation
only
model
cacm
september
1978
schwetman
h
performance
evaluation
simulation
queueing
network
models
central
server
model
4
32
4
35
8
1
ca780902
dh
february
5
1979
3
32
pm
2712
4
3070
2741
4
3070
3016
4
3070
3059
4
3070
3070
4
3070
3070
4
3070
3070
4
3070
3070
4
3070
3153
4
3070
1805
5
3070
2454
5
3070
2741
5
3070
2988
5
3070
3070
5
3070
3070
5
3070
3070
5
3070
</TEXT>
</DOC>
<DOC>
<DOCNO>3071</DOCNO>
<TEXT>
an
algorithm
using
symbolic
techniques
for
the
bel
petrov
classification
of
gravitational
fields
in
this
note
an
algorithm
is
presented
for
the
symbolic
calculation
of
certain
algebraic
invariants
of
the
weyl
tensor
which
permits
the
determination
of
the
bel
petrov
types
of
a
gravitational
field
this
algorithm
although
more
specialized
than
that
of
d
and
russell
clark
requires
neither
the
use
of
a
special
coordinate
system
nor
the
spin
coefficient
formalism
the
algorithm
has
been
implemented
in
formac
and
is
designed
to
complete
the
classification
scheme
proposed
by
petrov
in
his
book
an
appendix
contains
examples
illustrating
the
use
of
the
algorithm
cacm
september
1978
harris
r
zund
j
general
relativity
bel
petrov
types
formac
symbolic
manipulation
tensors
3
11
3
15
3
17
ca780901
dh
february
5
1979
3
43
pm
2170
4
3071
3071
4
3071
2165
5
3071
3071
5
3071
3071
5
3071
3071
5
3071
</TEXT>
</DOC>
<DOC>
<DOCNO>3072</DOCNO>
<TEXT>
feedback
coupled
resource
allocation
policies
in
the
multiprogramming
multiprocessor
computer
system
model
studies
of
some
integrated
feedback
driven
scheduling
systems
for
multiprogrammed
multiprocessor
computer
systems
are
presented
the
basic
control
variables
used
are
the
data
flow
rates
for
the
processes
executing
on
the
cpu
the
model
systems
feature
simulated
continuous
flow
and
preempt
resume
scheduling
of
input
output
activity
attention
is
given
to
the
amount
of
memory
resource
required
for
effective
processing
of
the
i
o
activity
buffer
space
assignment
the
model
studies
used
both
distribution
driven
and
trace
driven
techniques
even
relatively
simple
dynamic
schedulers
are
shown
to
improve
system
performance
as
measured
by
user
cpu
time
over
that
given
by
optimal
or
near
optimal
static
schedulers
imbeded
in
identical
system
structures
and
workload
environments
the
improvement
is
greatest
under
a
heavy
i
o
demand
workload
cacm
august
1978
brice
r
browne
j
integrated
schedulers
feedback
scheduling
multiprogramming
systems
i
o
system
scheduling
4
32
4
35
ca780806
dh
february
5
1979
4
01
pm
2571
4
3072
2628
4
3072
2891
4
3072
2950
4
3072
3072
4
3072
3072
4
3072
3072
4
3072
3072
4
3072
3119
4
3072
1713
5
3072
2219
5
3072
2245
5
3072
2375
5
3072
3072
5
3072
3072
5
3072
3072
5
3072
</TEXT>
</DOC>
<DOC>
<DOCNO>3073</DOCNO>
<TEXT>
communicating
sequential
processes
this
paper
suggests
that
input
and
output
are
basic
primitives
of
programming
and
that
parallel
composition
of
communicating
sequential
processes
is
a
fundamental
program
structuring
method
when
combined
with
a
development
of
dijkstra
guarded
command
these
concepts
are
surprisingly
versatile
their
use
is
illustrated
by
sample
solutions
of
a
variety
of
familiar
programming
exercises
cacm
august
1978
hoare
c
programming
programming
languages
programming
primitives
program
structures
parallel
programming
concurrency
input
output
guarded
commands
nondeterminacy
coroutines
procedures
multiple
entries
multiple
exits
classes
data
representations
recursion
conditional
critical
regions
monitors
iterative
arrays
4
20
4
22
4
32
ca780805
dh
february
7
1979
10
07
am
249
4
3073
254
4
3073
272
4
3073
1102
4
3073
1109
4
3073
1140
4
3073
1188
4
3073
1306
4
3073
1323
4
3073
1358
4
3073
1380
4
3073
1464
4
3073
1491
4
3073
1665
4
3073
1767
4
3073
1781
4
3073
1781
4
3073
1787
4
3073
1787
4
3073
1949
4
3073
1989
4
3073
321
4
3073
2059
4
3073
2112
4
3073
2126
4
3073
2534
4
3073
2541
4
3073
435
4
3073
437
4
3073
463
4
3073
483
4
3073
491
4
3073
2698
4
3073
2732
4
3073
2733
4
3073
2820
4
3073
2896
4
3073
2972
4
3073
560
4
3073
583
4
3073
3037
4
3073
3039
4
3073
3043
4
3073
3073
4
3073
3073
4
3073
3073
4
3073
3155
4
3073
627
4
3073
631
4
3073
632
4
3073
642
4
3073
644
4
3073
653
4
3073
680
4
3073
761
4
3073
762
4
3073
763
4
3073
123
4
3073
140
4
3073
919
4
3073
989
4
3073
196
5
3073
2732
5
3073
3073
5
3073
3073
5
3073
3073
5
3073
3148
5
3073
3150
5
3073
3155
5
3073
799
5
3073
1860
6
3073
2060
6
3073
2204
6
3073
2247
6
3073
2704
6
3073
2817
6
3073
2842
6
3073
2865
6
3073
2939
6
3073
2939
6
3073
2940
6
3073
2941
6
3073
2943
6
3073
3073
6
3073
3073
6
3073
3073
6
3073
3148
6
3073
799
6
3073
</TEXT>
</DOC>
<DOC>
<DOCNO>3074</DOCNO>
<TEXT>
a
time
and
space
efficient
garbage
compaction
algorithm
given
an
area
of
storage
containing
scattered
marked
nodes
of
differing
sizes
one
may
wish
to
rearrange
them
into
a
compact
mass
at
one
end
of
the
area
while
revising
all
pointers
to
marked
nodes
to
show
their
new
locations
an
algorithm
is
described
here
which
accomplishes
this
task
in
linear
time
relative
to
the
size
of
the
storage
area
and
in
a
space
of
the
order
of
one
bit
for
each
pointer
the
algorithm
operates
by
reversibly
encoding
the
situation
that
a
collection
of
locations
point
to
a
single
location
by
a
linear
list
emanating
from
the
pointed
to
location
passing
through
the
pointing
locations
and
terminating
with
the
pointed
to
location
transplanted
contents
cacm
august
1978
morris
f
garbage
collection
compaction
compact
ification
storage
reclamation
storage
allocation
record
structures
relocation
list
processing
free
storage
pointers
data
structures
4
34
4
49
5
32
ca780804
dh
february
7
1979
10
16
am
1972
4
3074
1972
4
3074
2156
4
3074
2156
4
3074
2168
4
3074
2249
4
3074
2361
4
3074
2438
4
3074
2513
4
3074
2723
4
3074
2736
4
3074
2736
4
3074
2736
4
3074
2833
4
3074
2838
4
3074
2855
4
3074
2855
4
3074
2896
4
3074
3039
4
3074
3074
4
3074
3074
4
3074
3074
4
3074
3074
4
3074
3106
4
3074
3112
4
3074
3112
4
3074
3112
4
3074
1826
5
3074
1853
5
3074
1972
5
3074
2723
5
3074
3074
5
3074
3074
5
3074
3074
5
3074
</TEXT>
</DOC>
<DOC>
<DOCNO>3075</DOCNO>
<TEXT>
fast
parallel
sorting
algorithms
a
parallel
bucket
sort
algorithm
is
presented
that
requires
time
o
log
n
and
the
use
of
n
processors
the
algorithm
makes
use
of
a
technique
that
requires
more
space
than
the
product
of
processors
and
time
a
realistic
model
is
used
model
is
used
in
which
no
memory
contention
is
permitted
a
procedure
is
also
presented
to
sort
n
numbers
in
time
o
k
log
n
using
n
1
1
k
processors
for
k
an
arbitrary
integer
the
model
of
computation
for
this
procedure
permits
simultaneous
fetches
from
the
same
memory
location
cacm
august
1978
hirschberg
d
parallel
processing
sorting
algorithms
bucket
sort
3
74
4
34
5
25
5
31
ca780803
dh
february
7
1979
10
25
am
2714
4
3075
3075
4
3075
3075
4
3075
3075
4
3075
3075
4
3075
3085
4
3075
3156
4
3075
2289
5
3075
2557
5
3075
2664
5
3075
2714
5
3075
3075
5
3075
3075
5
3075
3075
5
3075
3156
5
3075
2289
6
3075
2973
6
3075
3075
6
3075
</TEXT>
</DOC>
<DOC>
<DOCNO>3076</DOCNO>
<TEXT>
value
conflicts
and
social
choice
in
electronic
funds
transfer
system
developments
during
the
last
few
years
computer
based
systems
which
automate
the
transfer
and
recording
of
debits
and
credits
have
begun
to
be
implemented
on
a
large
scale
these
systems
promise
both
financial
benefits
for
the
institutions
that
use
them
and
potential
conveniences
to
their
customers
however
they
also
raise
significant
social
legal
and
technical
questions
that
must
be
resolved
if
full
scale
systems
for
electronic
funds
transfer
eft
are
not
to
cause
more
problems
for
the
larger
public
than
they
solve
this
paper
examines
the
incentives
for
eft
developments
and
the
social
problems
they
raise
in
the
context
of
conflicts
between
five
different
value
positions
that
are
often
implicit
in
analyses
of
proposed
eft
arrangements
these
conflicts
reflect
the
relative
importance
of
certain
problems
for
specific
groups
the
value
positions
implicit
in
eft
proposals
help
to
organize
analyses
of
market
arrangements
system
reliability
and
privacy
of
transactions
these
topics
are
analyzed
in
this
article
and
related
to
the
value
positions
held
by
concerned
parties
last
the
ways
in
which
the
public
can
learn
about
the
social
qualities
of
different
eft
arrangements
and
the
pace
of
eft
developments
are
both
discussed
in
the
context
of
social
choice
cacm
august
1978
kling
r
electronic
funds
transfer
systems
social
impacts
of
computing
privacy
social
choice
computer
networks
network
reliability
security
social
values
2
11
2
12
2
3
3
52
3
53
3
55
ca780802
dh
february
7
1979
2
25
pm
2756
4
3076
3076
4
3076
3076
4
3076
3179
4
3076
2607
5
3076
2840
5
3076
3076
5
3076
3076
5
3076
3076
5
3076
3142
5
3076
3179
5
3076
3178
5
3076
3182
5
3076
3183
5
3076
2572
6
3076
2583
6
3076
2607
6
3076
3076
6
3076
3076
6
3076
3076
6
3076
3076
6
3076
3076
6
3076
3140
6
3076
3142
6
3076
3179
6
3076
3180
6
3076
3181
6
3076
3182
6
3076
</TEXT>
</DOC>
<DOC>
<DOCNO>3077</DOCNO>
<TEXT>
can
programming
be
liberated
from
the
von
neumann
style
a
functional
style
and
its
algebra
of
programs
conventional
programming
languages
are
growing
ever
more
enormous
but
not
stronger
inherent
defects
at
the
most
basic
level
cause
them
to
be
both
fat
and
weak
their
primitive
word
at
a
time
style
of
programming
inherited
from
their
common
ancestor
the
von
neumann
computer
their
close
coupling
off
semantics
to
state
transitions
their
division
of
programming
into
a
world
of
expressions
and
a
world
of
statements
their
inability
to
effectively
use
powerful
combining
forms
for
building
new
programs
from
existing
ones
and
their
lack
of
useful
mathematical
properties
for
reasoning
about
programs
an
alternative
functional
style
of
programming
is
founded
on
the
use
of
combining
forms
for
creating
programs
functional
programs
deal
with
structured
data
are
often
nonrepetitive
and
nonrecursive
are
hierarchically
constructed
do
not
name
their
arguments
and
do
not
require
the
complex
machinery
of
procedure
declarations
to
become
generally
applicable
combining
forms
can
use
high
level
programs
to
build
still
higher
level
ones
in
a
style
not
possible
in
conventional
languages
associated
with
the
functional
style
of
programming
is
an
algebra
of
programs
whose
variables
range
over
programs
and
whose
operations
are
combining
forms
this
algebra
can
be
used
to
transform
programs
and
to
solve
equations
whose
unknowns
are
programs
in
much
the
same
way
one
transforms
equations
in
high
school
algebra
these
transformations
are
given
by
algebraic
laws
and
are
carried
out
in
the
same
language
in
which
programs
are
written
combining
forms
are
chosen
not
only
for
their
programming
power
but
also
for
the
power
of
their
associated
algebraic
laws
general
theorems
of
of
the
algebra
give
the
detailed
behavior
and
termination
conditions
for
large
classes
of
programs
a
new
class
of
computing
systems
uses
the
functional
programming
style
both
in
its
programming
language
and
in
its
state
transition
rules
unlike
von
neumann
languages
these
systems
have
semantics
loosely
coupled
to
states
only
one
state
transition
occurs
per
major
computation
cacm
august
1978
backus
j
functional
programming
algebra
of
programs
combining
forms
functional
forms
programming
languages
von
neumann
computers
von
neumann
languages
models
of
computing
systems
applicative
computing
systems
applicative
state
transition
systems
program
transformation
program
correctness
program
termination
metacomposition
4
20
4
29
5
20
5
24
5
26
ca780801
dh
february
7
1979
3
13
pm
1024
4
3077
1051
4
3077
1102
4
3077
1132
4
3077
1390
4
3077
1486
4
3077
1549
4
3077
1706
4
3077
1826
4
3077
1878
4
3077
378
4
3077
2021
4
3077
2060
4
3077
2155
4
3077
2155
4
3077
2168
4
3077
2222
4
3077
2227
4
3077
2294
4
3077
2315
4
3077
2326
4
3077
2470
4
3077
2558
4
3077
2719
4
3077
2723
4
3077
2732
4
3077
2838
4
3077
2842
4
3077
2842
4
3077
2855
4
3077
2865
4
3077
2879
4
3077
2896
4
3077
2943
4
3077
2981
4
3077
3014
4
3077
3030
4
3077
3068
4
3077
3077
4
3077
3077
4
3077
3077
4
3077
3077
4
3077
3080
4
3077
3104
4
3077
3106
4
3077
3143
4
3077
3150
4
3077
627
4
3077
106
4
3077
210
5
3077
1834
5
3077
2060
5
3077
2457
5
3077
3077
5
3077
3077
5
3077
3077
5
3077
</TEXT>
</DOC>
<DOC>
<DOCNO>3078</DOCNO>
<TEXT>
analysis
of
the
availability
of
computer
systems
using
computer
aided
algebra
analytical
results
related
to
the
availability
of
a
computer
system
constructed
of
unreliable
processors
are
presented
in
this
paper
these
results
are
obtained
by
using
various
computer
aided
algebraic
manipulation
techniques
a
major
purpose
of
this
paper
is
to
demonstrate
that
the
difficulties
of
obtaining
analytical
solutions
to
markov
processes
can
be
considerably
reduced
by
the
application
of
symbol
manipulation
programs
since
many
physical
systems
can
be
modeled
by
markov
and
semi
markov
processes
the
potential
range
of
application
of
these
techniques
is
much
wider
than
the
problem
of
availability
analyzed
here
cacm
july
1978
chattergy
r
pooch
u
computer
aided
algebra
symbol
manipulation
markov
process
reliability
redundant
structures
on
line
computer
system
3
82
5
5
5
7
8
1
8
3
ca780710
dh
february
7
1979
3
37
pm
3078
5
3078
3078
5
3078
3078
5
3078
</TEXT>
</DOC>
<DOC>
<DOCNO>3079</DOCNO>
<TEXT>
an
algorithm
for
reasoning
about
equality
a
simple
technique
for
reasoning
about
equalities
that
is
fast
and
complete
for
ground
formulas
with
function
symbols
and
equality
is
presented
a
proof
of
correctness
is
given
as
well
cacm
july
1978
shostak
r
theorem
proving
deduction
program
verification
equality
3
64
3
66
5
21
ca780709
dh
february
7
1979
3
41
pm
3079
5
3079
3079
5
3079
3079
5
3079
</TEXT>
</DOC>
<DOC>
<DOCNO>3080</DOCNO>
<TEXT>
proving
the
correctness
of
heuristically
optimized
code
a
system
for
proving
that
programs
written
in
a
high
level
language
are
correctly
translated
to
a
low
level
language
is
described
a
primary
use
of
the
system
is
as
a
post
optimization
step
in
code
generation
the
low
level
language
programs
need
not
be
generated
by
a
compiler
and
in
fact
could
be
hand
coded
examples
of
the
usefulness
of
such
a
system
are
given
some
interesting
results
are
the
ability
to
handle
programs
that
implement
recursion
by
bypassing
the
start
of
the
program
and
the
detection
and
pinpointing
of
a
wide
class
of
errors
in
the
low
level
language
programs
the
examples
demonstrate
that
optimization
of
the
genre
of
this
paper
can
result
in
substantially
faster
operation
and
the
saving
of
memory
in
terms
of
program
and
stack
sizes
cacm
july
1978
samet
h
compilers
correctness
code
optimization
debugging
program
verification
lisp
4
12
4
21
4
22
5
24
ca780708
dh
february
7
1979
3
53
pm
1024
4
3080
1051
4
3080
1102
4
3080
1132
4
3080
1390
4
3080
1486
4
3080
1549
4
3080
1706
4
3080
1826
4
3080
1878
4
3080
378
4
3080
2060
4
3080
2155
4
3080
2168
4
3080
2719
4
3080
2723
4
3080
2838
4
3080
2842
4
3080
2855
4
3080
2879
4
3080
3077
4
3080
3080
4
3080
3080
4
3080
3106
4
3080
627
4
3080
106
4
3080
210
5
3080
2850
5
3080
3080
5
3080
3080
5
3080
3080
5
3080
</TEXT>
</DOC>
<DOC>
<DOCNO>3081</DOCNO>
<TEXT>
shallow
binding
in
lisp
1
5
shallow
binding
is
a
scheme
which
allows
the
value
of
a
variable
to
be
accessed
in
a
bounded
amount
of
computation
an
elegant
model
for
shallow
binding
in
lisp
1
5
is
presented
in
which
context
switching
is
an
environment
tree
transformation
called
rerooting
rerooting
is
completely
general
and
reversible
and
is
optional
in
the
sense
that
a
lisp
1
5
interpreter
will
operate
correctly
whether
or
not
rerooting
is
invoked
one
very
context
change
since
rerooting
leaves
assoc
v
a
invariant
for
all
variables
v
and
all
environments
a
the
programmer
can
have
access
to
a
rerooting
primitive
shallow
which
gives
him
dynamic
control
over
whether
accesses
are
shallow
or
deep
and
which
affects
only
the
speed
of
execution
of
a
program
not
its
semantics
in
addition
multiple
processes
can
be
active
in
the
same
environment
structure
so
long
as
rerooting
is
an
indivisible
operation
finally
the
concept
of
rerooting
is
shown
to
combine
the
concept
of
shallow
binding
in
lisp
with
dijkstra
display
for
algol
and
hence
is
a
general
model
for
shallow
binding
cacm
july
1978
baker
h
jr
lisp
1
5
environment
trees
funarg
shallow
binding
deep
binding
multiprogramming
algol
display
4
13
4
22
4
32
ca780707
dh
february
7
1979
4
14
pm
2625
4
3081
2922
4
3081
3081
4
3081
3101
4
3081
3112
4
3081
2438
5
3081
3081
5
3081
3081
5
3081
3081
5
3081
</TEXT>
</DOC>
<DOC>
<DOCNO>3082</DOCNO>
<TEXT>
time
clocks
and
the
ordering
of
events
in
a
distributed
system
the
concept
of
one
event
happening
before
another
in
a
distributed
system
is
examined
and
is
shown
to
define
a
partial
ordering
of
the
events
a
distributed
algorithm
is
given
for
synchronizing
a
system
of
logical
clocks
which
can
be
used
to
totally
order
the
events
the
use
of
the
total
ordering
is
illustrated
with
a
method
for
solving
synchronization
problems
the
algorithm
is
then
specialized
for
synchronizing
physical
clocks
and
a
bound
is
derived
on
how
far
out
of
synchrony
the
clocks
can
become
cacm
july
1978
lamport
l
distributed
systems
computer
networks
clock
synchronization
multiprocess
systems
4
32
5
29
ca780706
dh
february
7
1979
4
30
pm
3082
5
3082
3082
5
3082
3082
5
3082
3128
5
3082
2150
6
3082
2376
6
3082
2436
6
3082
2597
6
3082
2865
6
3082
2866
6
3082
2870
6
3082
2912
6
3082
3082
6
3082
</TEXT>
</DOC>
<DOC>
<DOCNO>3083</DOCNO>
<TEXT>
pseudochaining
in
hash
tables
this
paper
presents
pseudochaining
as
a
new
collision
resolution
method
pseudochaining
is
half
way
between
open
addressing
and
chaining
it
owes
its
name
to
the
fact
that
link
fields
are
present
in
each
cell
of
the
hash
table
which
permits
chaining
of
the
first
overflow
items
in
the
table
the
efficiency
of
the
method
is
derived
and
a
tradeoff
analysis
is
given
cacm
july
1978
halatsis
c
philokyprou
g
hash
code
scatter
storage
open
addressing
chaining
pseudochaining
collision
resolution
searching
uniform
probing
3
7
3
73
3
74
4
9
ca780705
dh
february
7
1979
4
37
pm
1973
4
3083
1992
4
3083
2138
4
3083
2203
4
3083
2251
4
3083
2251
4
3083
2282
4
3083
2412
4
3083
2530
4
3083
2534
4
3083
2537
4
3083
2543
4
3083
2543
4
3083
2559
4
3083
2559
4
3083
2573
4
3083
2770
4
3083
2860
4
3083
2991
4
3083
3053
4
3083
3053
4
3083
3053
4
3083
3083
4
3083
3083
4
3083
3083
4
3083
3083
4
3083
3083
4
3083
1328
5
3083
1973
5
3083
2107
5
3083
2543
5
3083
2552
5
3083
3083
5
3083
3083
5
3083
3083
5
3083
</TEXT>
</DOC>
<DOC>
<DOCNO>3084</DOCNO>
<TEXT>
interpolation
search
a
log
logn
search
interpolation
search
is
a
method
of
retrieving
a
desired
record
by
key
in
an
ordered
file
by
using
the
value
of
the
key
and
the
statistical
distribution
of
the
keys
it
is
shown
that
on
the
average
log
logn
file
accesses
are
required
to
retrieve
a
key
assuming
that
the
n
keys
are
uniformly
distributed
the
number
of
extra
accesses
is
also
estimated
and
shown
to
be
very
low
the
same
holds
if
the
cumulative
distribution
function
of
the
keys
is
known
computational
experiments
confirm
these
results
cacm
july
1978
perl
y
itai
a
avni
h
average
number
of
accesses
binary
search
database
interpolation
search
retrieval
searching
uniform
distribution
4
4
4
6
5
25
ca780704
dh
february
7
1979
4
50
pm
3084
5
3084
3084
5
3084
3084
5
3084
</TEXT>
</DOC>
<DOC>
<DOCNO>3085</DOCNO>
<TEXT>
an
o
n
algorithm
for
determining
a
near
optimal
computation
order
of
matrix
chain
products
this
paper
discusses
the
computation
of
matrix
chain
products
of
the
form
m1
x
m2
x
x
mn
where
mi
are
matrices
the
order
in
which
the
matrices
are
computed
affects
the
number
of
operations
a
sufficient
condition
about
the
association
of
the
matrices
in
the
optimal
order
is
presented
an
o
n
algorithm
to
find
an
order
of
computation
which
takes
less
than
25
percent
longer
than
the
optimal
time
topt
is
also
presented
in
most
cases
the
algorithm
yields
the
optimal
order
or
an
order
which
takes
only
a
few
percent
longer
than
topt
less
than
1
percent
on
the
average
cacm
july
1978
chin
f
approximate
algorithm
heuristic
algorithm
matrix
multiplication
matrix
chain
product
5
14
ca780703
dh
february
8
1979
2
46
pm
3075
4
3085
3085
4
3085
2557
5
3085
3085
5
3085
3085
5
3085
3085
5
3085
</TEXT>
</DOC>
<DOC>
<DOCNO>3086</DOCNO>
<TEXT>
on
the
complexity
of
computing
the
measure
of
u
ai
bi
the
decision
tree
complexity
of
computing
the
measure
of
the
union
of
n
possibly
overlapping
intervals
is
shown
to
be
n
log
n
even
if
comparisons
between
linear
functions
of
the
interval
endpoints
are
allowed
the
existence
of
an
n
log
n
lower
bound
to
determine
whether
any
two
of
n
real
numbers
are
within
of
each
other
is
also
demonstrated
these
problems
provide
an
excellent
opportunity
for
discussing
the
effects
of
the
computational
model
on
the
ease
of
analysis
and
on
the
results
produced
cacm
july
1978
fredman
m
weide
b
analysis
of
algorithms
combinatorial
problems
computational
complexity
computational
models
decision
tree
programs
lower
bounds
5
25
5
26
5
30
5
39
ca780702
dh
february
8
1979
3
46
pm
3086
5
3086
3086
5
3086
3086
5
3086
</TEXT>
</DOC>
<DOC>
<DOCNO>3087</DOCNO>
<TEXT>
an
english
language
question
answering
system
for
a
large
relational
database
by
typing
requests
in
english
casual
users
will
be
able
to
obtain
explicit
answers
from
a
large
relational
database
of
aircraft
flight
and
maintenance
data
using
a
system
called
planes
the
design
and
implementation
of
this
system
is
described
and
illustrated
with
detailed
examples
of
the
operation
of
system
components
and
examples
of
overall
system
operation
the
language
processing
portion
of
the
system
uses
a
number
of
augmented
transition
networks
each
of
which
matches
phrases
with
a
specific
meaning
along
with
context
registers
his
tory
keepers
and
concept
case
frames
these
are
used
for
judging
meaningfulness
of
questions
generating
dialogue
for
clarifying
partially
understood
questions
and
resolving
ellipsis
and
pronoun
reference
problems
other
system
components
construct
a
formal
query
for
the
relational
database
and
optimize
the
order
of
searching
relations
methods
are
discussed
for
handling
vague
or
complex
questions
and
for
providing
browsing
ability
also
included
are
discussions
of
important
issues
in
programming
natural
language
systems
for
limited
domains
and
the
relationship
of
this
system
to
others
cacm
july
1978
waltz
d
question
answering
relational
database
natural
language
database
front
end
artificial
intelligence
dialogue
query
generation
information
retrieval
natural
language
programming
3
42
3
60
3
69
3
74
3
79
ca780701
dh
february
8
1979
4
26
pm
2155
4
3087
2406
4
3087
2581
4
3087
2710
4
3087
2715
4
3087
2716
4
3087
2717
4
3087
2718
4
3087
2739
4
3087
2765
4
3087
2795
4
3087
2817
4
3087
2888
4
3087
2901
4
3087
2921
4
3087
2957
4
3087
2959
4
3087
2965
4
3087
3087
4
3087
3087
4
3087
3154
4
3087
1989
5
3087
2046
5
3087
3087
5
3087
3087
5
3087
3087
5
3087
</TEXT>
</DOC>
<DOC>
<DOCNO>3088</DOCNO>
<TEXT>
general
equations
for
idealized
cpu
i
o
overlap
configurations
general
equations
are
derived
for
estimating
the
maximum
possible
utilization
of
main
storage
partitions
cpu
and
i
o
devices
under
different
conditions
in
an
idealized
cpu
i
o
overlap
model
of
multiprogrammed
computer
systems
the
equations
are
directly
applicable
to
any
configuration
consisting
of
sets
of
identical
cpu
i
o
processors
main
storage
partitions
and
user
tasks
examples
are
provided
to
illustrate
the
use
of
the
equations
to
compute
effective
processing
time
per
record
and
expected
timesharing
response
time
under
both
balanced
and
unbalanced
resource
utilization
conditions
cacm
june
1978
teory
t
blocking
buffering
input
output
overlap
performance
resource
allocation
throughput
timesharing
3
72
4
30
4
41
8
1
ca780609
dh
february
8
1979
4
35
pm
3088
5
3088
3088
5
3088
3088
5
3088
</TEXT>
</DOC>
<DOC>
<DOCNO>3089</DOCNO>
<TEXT>
performance
of
rollback
recovery
systems
under
intermittent
failures
a
mathematical
model
of
a
transaction
oriented
system
under
intermittent
failures
is
proposed
the
system
is
assumed
to
operate
with
a
checkpointing
and
rollback
recovery
method
to
ensure
reliable
information
processing
the
model
is
used
to
derive
the
principal
performance
measures
including
availability
response
time
and
the
system
saturation
point
cacm
june
1978
gelenbe
e
derochette
d
database
reliability
file
systems
checkpoints
recovery
procedures
checking
techniques
reliability
and
system
performance
evaluation
3
72
3
73
4
33
4
35
4
6
5
5
8
1
ca780608
dh
february
9
1979
10
26
am
3089
4
3089
2599
5
3089
3089
5
3089
3089
5
3089
3089
5
3089
</TEXT>
</DOC>
<DOC>
<DOCNO>3090</DOCNO>
<TEXT>
automated
welfare
client
tracking
and
service
integration
the
political
economy
of
computing
the
impacts
of
an
automated
client
tracking
system
on
the
clients
caseworkers
administrators
and
operations
of
the
welfare
agencies
that
use
it
are
reported
the
major
impact
of
this
system
was
to
enhance
the
administrative
attractiveness
of
the
using
agencies
in
the
eyes
of
funders
rather
than
to
increase
their
internal
administrative
efficiency
this
impact
is
a
joint
product
of
both
the
technical
features
of
the
computer
based
system
and
of
the
organizational
demands
placed
upon
different
agencies
administrators
and
caseworkers
it
illustrates
the
way
successful
automated
information
systems
fit
the
political
economies
of
the
groups
that
use
them
cacm
june
1978
kling
r
social
impacts
of
computing
organizational
impacts
of
computing
management
information
systems
sociology
of
computing
information
systems
and
service
integration
urban
information
systems
2
11
3
53
ca780607
dh
february
12
1979
11
01
am
3090
5
3090
3090
5
3090
3090
5
3090
3117
5
3090
3090
6
3090
</TEXT>
</DOC>
<DOC>
<DOCNO>3091</DOCNO>
<TEXT>
some
basic
determinants
of
computer
programming
productivity
the
propose
of
this
research
was
to
examine
the
relationship
between
processing
characteristics
of
programs
and
experience
characteristics
of
programmers
and
program
development
time
the
ultimate
objective
was
to
develop
a
technique
for
predicting
the
amount
of
time
necessary
to
create
a
computer
program
the
fifteen
program
characteristics
hypothesized
as
being
associated
with
an
increase
in
programming
time
required
are
objectively
measurable
from
preprogramming
specifications
the
five
programmer
characteristics
are
experience
related
and
are
also
measurable
before
a
programming
task
is
begun
nine
program
characteristics
emerged
as
major
influences
on
program
development
time
each
associated
with
increased
program
development
time
all
five
programmer
characteristics
were
found
to
be
related
to
reduced
program
development
time
a
multiple
regression
equation
which
contained
one
programmer
characteristic
and
four
program
characteristics
gave
evidence
of
good
predictive
power
for
forecasting
program
development
time
cacm
june
1978
chrysler
e
programmer
performance
standards
predicting
program
development
time
program
estimation
techniques
program
development
equation
value
of
programming
experience
programmer
evaluation
programmer
scheduling
programmer
productivity
programming
management
cobol
programming
2
40
4
20
ca780606
dh
february
26
1979
11
42
am
3091
4
3091
1792
5
3091
3091
5
3091
3091
5
3091
3091
5
3091
</TEXT>
</DOC>
<DOC>
<DOCNO>3092</DOCNO>
<TEXT>
characteristics
of
application
software
maintenance
maintenance
and
enhancement
of
application
software
consume
a
major
portion
of
the
total
life
cycle
cost
of
a
system
rough
estimates
of
the
total
systems
and
programming
resources
consumed
range
as
high
as
75
80
percent
in
each
category
however
the
area
has
been
given
little
attention
in
the
literature
to
analyze
the
problems
in
this
area
a
questionnaire
was
developed
and
pretested
it
was
then
submitted
to
120
organizations
respondents
totaled
69
responses
were
analyzed
with
the
spss
statistical
package
the
results
of
the
analysis
indicate
that
1
maintenance
and
enhancement
do
consume
much
of
the
total
resources
of
systems
and
programming
groups
2
maintenance
and
enhancement
tend
to
be
viewed
by
management
as
at
least
somewhat
more
important
than
new
application
software
development
3
in
maintenance
and
enhancement
problems
of
a
management
orientation
tend
to
be
more
significant
than
those
of
a
technical
orientation
and
4
user
demands
for
enhancements
and
extension
constitute
the
most
important
management
problem
area
cacm
june
1978
lientz
b
swanson
e
tompkins
g
software
maintenance
use
of
productivity
aids
management
and
technical
issues
3
50
4
6
ca780605
dh
february
26
1979
11
59
am
3092
5
3092
3092
5
3092
3092
5
3092
</TEXT>
</DOC>
<DOC>
<DOCNO>3093</DOCNO>
<TEXT>
automatic
error
recovery
for
lr
parsers
in
this
paper
we
present
a
scheme
for
detecting
and
recovering
from
syntax
errors
in
programs
the
scheme
which
is
based
on
lr
parsing
is
driven
by
information
which
is
directly
and
automatically
obtainable
from
the
information
that
is
already
present
in
an
lr
parser
the
approach
which
is
patterned
after
that
of
levy
and
graham
and
rhodes
appears
to
provide
error
recovery
which
is
both
simple
and
powerful
cacm
june
1978
mickunas
m
modry
j
programming
languages
error
correction
automatic
correction
parsing
lr
syntax
errors
compilers
4
12
4
42
5
23
ca780604
dh
february
26
1979
12
22
pm
1225
4
3093
1350
4
3093
1542
4
3093
1646
4
3093
1683
4
3093
1693
4
3093
1781
4
3093
1781
4
3093
1787
4
3093
1836
4
3093
1945
4
3093
1945
4
3093
2060
4
3093
2061
4
3093
2082
4
3093
2091
4
3093
2152
4
3093
2179
4
3093
2340
4
3093
2356
4
3093
2546
4
3093
2603
4
3093
2650
4
3093
2698
4
3093
2698
4
3093
2708
4
3093
2708
4
3093
2733
4
3093
2824
4
3093
2982
4
3093
2986
4
3093
2986
4
3093
3045
4
3093
3093
4
3093
3093
4
3093
3093
4
3093
3093
4
3093
3094
4
3093
1491
5
3093
2179
5
3093
2708
5
3093
3093
5
3093
3093
5
3093
3093
5
3093
680
5
3093
</TEXT>
</DOC>
<DOC>
<DOCNO>3094</DOCNO>
<TEXT>
analyses
of
deterministic
parsing
algorithms
this
paper
describes
an
approach
for
determining
the
minimum
maximum
and
average
times
to
parse
sentences
acceptable
by
a
deterministic
parser
these
quantities
are
presented
in
the
form
of
symbolic
formulas
called
time
formulas
the
variables
in
these
formulas
represent
not
only
the
length
of
the
input
string
but
also
the
time
to
perform
elementary
operations
such
as
pushing
popping
subscripting
iterating
etc
by
binding
to
the
variables
actual
numerical
values
corresponding
to
a
given
compiler
machine
configuration
one
can
determine
the
execution
time
for
that
configuration
time
formulas
are
derived
by
examining
the
grammar
rules
and
the
program
representing
the
algorithm
one
wishes
to
analyze
the
approach
is
described
by
using
a
specific
grammar
that
defines
simple
arithmetic
expressions
two
deterministic
parsers
are
analyzed
a
top
down
recursive
descent
ll
1
parser
and
a
bottom
up
slr
1
parser
the
paper
provides
estimates
for
the
relative
efficiencies
of
the
two
parsers
the
estimates
applicable
to
a
specific
machine
the
pdp
10
are
presented
and
substantiated
buy
benchmarks
finally
the
paper
illustrates
the
proposed
approach
by
applying
it
to
the
analyses
of
parsers
for
a
simple
programming
language
cacm
june
1978
cohen
j
roth
m
syntactic
analysis
analysis
of
algorithms
top
down
and
bottom
up
parsing
relative
efficiencies
4
12
5
23
5
24
5
25
5
7
ca780603
dh
february
26
1979
12
32
pm
1350
4
3094
1399
4
3094
1659
4
3094
1768
4
3094
1781
4
3094
1945
4
3094
2110
4
3094
2719
4
3094
2733
4
3094
2986
4
3094
3093
4
3094
3094
4
3094
3094
4
3094
3094
4
3094
1265
5
3094
2179
5
3094
2645
5
3094
3094
5
3094
3094
5
3094
3094
5
3094
</TEXT>
</DOC>
<DOC>
<DOCNO>3095</DOCNO>
<TEXT>
a
selective
traversal
algorithm
for
binary
search
trees
the
problem
of
selecting
data
items
from
a
binary
search
tree
according
to
a
list
of
range
conditions
is
considered
the
process
of
visiting
a
minimal
number
of
nodes
to
retrieve
data
satisfying
the
range
conditions
is
called
selective
traversal
presented
in
this
paper
is
an
algorithm
for
selective
traversal
which
uses
a
tag
field
for
each
node
in
the
tree
the
algorithm
is
particularly
useful
and
efficient
when
examination
of
data
is
more
time
consuming
than
examination
of
a
tag
field
cacm
june
1978
driscoll
j
lien
y
data
retrieval
range
conditions
binary
search
tree
tree
traversal
selective
traversal
3
74
5
24
5
25
ca780602
dh
february
26
1979
12
40
pm
3095
5
3095
3095
5
3095
3095
5
3095
</TEXT>
</DOC>
<DOC>
<DOCNO>3096</DOCNO>
<TEXT>
an
optimal
method
for
deletion
in
one
sided
height
balanced
trees
a
one
sided
height
balanced
tree
is
a
binary
tree
in
which
every
node
right
subtree
has
a
height
which
is
equal
to
or
exactly
one
greater
than
the
height
of
its
left
subtree
it
has
an
advantage
over
the
more
general
avl
tree
in
that
only
one
bit
of
balancing
information
is
required
two
bits
are
required
for
the
acl
tree
it
is
shown
that
deletion
of
an
arbitrary
node
of
such
a
tree
can
be
accomplished
in
o
logn
operations
where
n
is
the
number
of
nodes
in
the
tree
moreover
the
method
is
optimal
in
the
sense
that
its
complexity
cannot
be
reduced
in
order
of
magnitude
this
result
coupled
with
earlier
results
by
hirschberg
indicates
that
of
the
three
basic
problems
of
insertion
deletion
and
retrieval
only
insertion
is
adversely
affected
by
this
modification
of
an
avl
tree
cacm
june
1978
zweben
s
mcdonald
m
balanced
binary
search
trees
3
73
3
74
4
34
5
25
5
31
ca780601
dh
february
26
1979
12
48
pm
2839
4
3096
3009
4
3096
3042
4
3096
3042
4
3096
3065
4
3096
3096
4
3096
3096
4
3096
3096
4
3096
3163
4
3096
3163
4
3096
3163
4
3096
2839
5
3096
2889
5
3096
3009
5
3096
3065
5
3096
3096
5
3096
3096
5
3096
3096
5
3096
3163
5
3096
2839
6
3096
2839
6
3096
2889
6
3096
3009
6
3096
3065
6
3096
3096
6
3096
3096
6
3096
</TEXT>
</DOC>
<DOC>
<DOCNO>3097</DOCNO>
<TEXT>
optimal
shift
strategy
for
a
block
transfer
ccd
memory
for
the
purposes
of
this
paper
a
block
transfer
ccd
memory
is
composed
of
serial
shift
registers
whose
shift
rate
can
vary
but
which
have
a
definite
minimum
shift
rate
the
refresh
rate
and
a
definite
maximum
shift
rate
the
bits
iin
the
shift
registers
are
numbered
0
to
n
1
and
blocks
of
n
bits
are
always
transferred
always
starting
at
bit
0
what
is
the
best
shift
strategy
so
that
a
block
transfer
request
occurring
at
a
random
time
will
have
to
wait
the
minimal
amount
of
time
before
bit
0
can
be
reached
the
minimum
shift
rate
requirement
does
not
allow
one
to
simply
park
at
bit
0
and
wait
for
a
transfer
request
the
optimal
strategy
involves
shifting
as
slowly
as
possible
until
bit
0
is
passed
then
shifting
as
quickly
as
possible
until
a
critical
boundary
is
reached
shortly
before
bit
0
comes
around
again
this
is
called
the
hurry
up
and
wait
strategy
and
is
well
known
outside
the
computer
field
the
block
transfer
ccd
memory
can
also
be
viewed
as
a
paging
drum
with
a
variable
bounded
rotation
speed
cacm
may
1978
sites
r
paging
drum
charge
coupled
devices
shift
register
memory
memory
hierarchy
electronic
drum
latency
3
72
5
39
6
34
6
35
ca780510
dh
february
26
1979
1
05
pm
2628
4
3097
3097
4
3097
2496
5
3097
3097
5
3097
3097
5
3097
3097
5
3097
</TEXT>
</DOC>
<DOC>
<DOCNO>3098</DOCNO>
<TEXT>
computer
generation
of
gamma
random
variables
a
new
method
for
generating
random
variables
from
the
gamma
distribution
with
nonintegral
shape
parameter
a
is
proposed
this
method
is
similar
to
two
other
methods
recently
given
by
wallace
and
fishman
it
is
compared
with
fishman
and
ahrens
and
dieter
methods
the
core
storage
requirements
and
programming
effort
for
this
method
are
similar
to
those
of
fishman
method
the
proposed
method
is
the
same
as
fishman
method
for
1
a
2
and
is
faster
than
fishman
method
for
3
a
19
also
the
proposed
method
is
much
simpler
than
ahrens
and
dieter
method
and
is
faster
for
a
8
cacm
may
1978
tadikamalla
p
gamma
variables
rejection
method
computer
methods
5
5
8
1
ca780509
dh
february
26
1979
1
10
pm
2847
4
3098
2928
4
3098
3046
4
3098
3046
4
3098
3098
4
3098
3098
4
3098
3107
4
3098
2569
5
3098
2847
5
3098
3046
5
3098
3098
5
3098
3098
5
3098
3098
5
3098
2569
6
3098
2847
6
3098
3098
6
3098
</TEXT>
</DOC>
<DOC>
<DOCNO>3099</DOCNO>
<TEXT>
new
sufficient
optimality
conditions
for
integer
programming
and
their
application
the
purpose
of
this
report
is
to
present
a
new
class
of
sufficient
optimality
conditions
for
pure
and
mixed
integer
programming
problems
some
of
the
sets
of
sufficient
conditions
presented
can
be
thought
of
as
generalizations
of
optimality
conditions
based
on
primal
dual
complementarity
in
linear
programming
these
sufficient
conditions
are
particularly
useful
for
the
construction
of
difficult
integer
programming
problems
with
known
optimal
solutions
these
problems
may
then
be
used
to
test
and
or
benchmark
integer
programming
codes
cacm
may
1978
fleisher
j
meyer
r
integer
programming
optimality
conditions
test
problem
construction
kuhn
tucker
conditions
greatest
common
divisor
3
15
5
39
5
49
ca780508
dh
february
26
1979
1
19
pm
2028
4
3099
2521
4
3099
3099
4
3099
3099
4
3099
3138
4
3099
1313
5
3099
2031
5
3099
3099
5
3099
3099
5
3099
3099
5
3099
</TEXT>
</DOC>
<DOC>
<DOCNO>3100</DOCNO>
<TEXT>
an
interference
matching
technique
for
inducing
abstractions
a
method
for
inducing
knowledge
by
abstraction
from
a
sequence
of
training
examples
is
described
the
proposed
method
interference
matching
induces
abstractions
by
finding
relational
properties
common
to
two
or
more
exemplars
three
tasks
solved
by
a
program
that
uses
an
interference
matching
algorithm
are
presented
several
problems
concerning
the
description
of
the
training
examples
and
the
adequacy
of
interference
matching
are
discussed
and
directions
for
future
research
are
considered
cacm
may
1978
hayes
roth
f
mcdermott
j
rule
induction
knowledge
acquisition
partial
matching
interference
graph
matching
learning
induction
knowledge
representation
informal
retrieval
abstraction
generalization
language
learning
complexity
predicate
discovery
3
36
3
61
3
62
3
66
3
70
5
32
ca780507
dh
february
26
1979
1
26
pm
3100
5
3100
3100
5
3100
3100
5
3100
</TEXT>
</DOC>
<DOC>
<DOCNO>3101</DOCNO>
<TEXT>
the
sl5
procedure
mechanism
this
paper
describes
an
integrated
procedure
mechanism
that
permits
procedures
to
be
used
as
recursive
functions
or
as
coroutines
this
integration
is
accomplished
by
treating
procedures
and
their
activation
records
called
environments
as
data
objects
and
by
decomposing
procedure
invocation
into
three
separate
components
at
the
source
language
level
in
addition
argument
binding
is
under
the
control
of
the
programmer
permitting
the
definition
of
various
methods
of
argument
transmission
in
the
source
language
itself
the
resulting
procedure
mechanism
which
is
part
of
the
sl5
programming
language
is
well
suited
to
goal
oriented
problems
and
to
other
problems
that
are
more
readily
programmed
by
using
coroutines
several
examples
are
given
cacm
may
1978
hanson
d
griswold
r
procedures
coroutines
programming
languages
interpreters
snobol
4
backtracking
4
2
4
20
4
22
4
13
ca780506
dh
february
26
1979
1
36
pm
2411
4
3101
2625
4
3101
2705
4
3101
2709
4
3101
2889
4
3101
2922
4
3101
2937
4
3101
2989
4
3101
3005
4
3101
3025
4
3101
3081
4
3101
3101
4
3101
3101
4
3101
3101
4
3101
3101
4
3101
3112
4
3101
2138
5
3101
2193
5
3101
2438
5
3101
3101
5
3101
3101
5
3101
3101
5
3101
3185
5
3101
</TEXT>
</DOC>
<DOC>
<DOCNO>3102</DOCNO>
<TEXT>
incorporation
of
units
into
programming
languages
the
issues
of
how
a
programming
language
might
aid
in
keeping
track
of
physical
units
feet
sec
etc
are
discussed
a
method
is
given
for
the
introduction
of
relationships
among
units
a
watt
is
volts
amps
a
yard
is
three
feet
and
subsequent
automatic
conversion
based
upon
these
relationships
various
proposals
for
syntax
are
considered
cacm
may
1978
karr
m
loveman
iii
d
units
language
design
compiler
construction
language
syntax
4
12
4
22
ca780505
dh
february
26
1979
1
43
pm
3102
5
3102
3102
5
3102
3102
5
3102
</TEXT>
</DOC>
<DOC>
<DOCNO>3103</DOCNO>
<TEXT>
automatic
data
structure
selection
an
example
and
overview
the
use
of
several
levels
of
abstraction
has
proved
to
be
very
helpful
in
constructing
and
maintaining
programs
when
programs
are
designed
with
abstract
data
types
such
as
sets
and
lists
programmer
time
can
be
saved
by
automating
the
process
of
filling
in
low
level
implementation
details
in
the
past
programming
systems
have
provided
only
a
single
general
purpose
implementation
for
an
abstract
type
thus
the
programs
produced
using
abstract
types
were
then
inefficient
in
space
or
time
in
this
paper
a
system
for
automatically
choosing
efficient
implementations
for
abstract
types
from
a
library
of
implementations
is
discussed
this
process
is
discussed
in
detail
for
an
example
program
general
issues
in
data
structure
selection
are
also
reviewed
cacm
may
1978
low
j
abstract
data
types
automatic
programming
data
structures
optimizing
compilers
sets
lists
4
12
4
22
4
6
ca780504
dh
february
26
1979
1
51
pm
1957
4
3103
2151
4
3103
3103
4
3103
3103
4
3103
3148
4
3103
1860
5
3103
2877
5
3103
3103
5
3103
3103
5
3103
3103
5
3103
</TEXT>
</DOC>
<DOC>
<DOCNO>3104</DOCNO>
<TEXT>
test
data
as
an
aid
in
proving
program
correctness
proofs
of
program
correctness
tend
to
be
long
and
tedious
whereas
testing
though
useful
in
detecting
errors
usually
does
not
guarantee
correctness
this
paper
introduces
a
techniques
whereby
test
data
can
be
used
in
proving
program
correctness
in
addition
to
simplifying
the
process
of
proving
correctness
this
method
simplifies
the
process
of
providing
accurate
specification
for
a
program
the
applicability
of
this
technique
to
procedures
and
recursive
programs
is
demonstrated
cacm
may
1978
geller
m
program
verification
program
testing
recursive
programs
4
22
4
6
5
24
ca780503
dh
february
26
1979
2
10
pm
2874
4
3104
2981
4
3104
3030
4
3104
3077
4
3104
3104
4
3104
3104
4
3104
2457
5
3104
2683
5
3104
3104
5
3104
3104
5
3104
3104
5
3104
3170
5
3104
3055
6
3104
3104
6
3104
</TEXT>
</DOC>
<DOC>
<DOCNO>3105</DOCNO>
<TEXT>
a
language
extension
for
expressing
constraints
on
data
access
controlled
sharing
of
information
is
needed
and
desirable
for
many
applications
and
is
supported
in
operating
systems
by
access
control
mechanisms
this
paper
shows
how
to
extend
programming
languages
to
provide
controlled
sharing
the
extension
permits
expression
of
access
constraints
on
shared
data
access
constraints
can
apply
both
to
simple
objects
and
to
objects
that
are
components
of
larger
objects
such
as
bank
account
records
in
a
bank
data
base
the
constraints
are
stated
declaratively
and
can
be
enforced
by
static
checking
similar
to
type
checking
the
approach
can
be
used
to
extend
any
strongly
typed
language
but
is
particularly
suitable
for
extending
languages
that
support
the
notion
of
abstract
data
types
cacm
may
1978
jones
a
liskov
b
programming
languages
access
control
data
types
abstract
data
types
type
checking
capabilities
4
20
4
35
ca780502
dh
february
26
1979
3
19
pm
1458
4
3105
1523
4
3105
1603
4
3105
1698
4
3105
1747
4
3105
1748
4
3105
1854
4
3105
1877
4
3105
1960
4
3105
2377
4
3105
2378
4
3105
2497
4
3105
2558
4
3105
2625
4
3105
2626
4
3105
2632
4
3105
2840
4
3105
2868
4
3105
2868
4
3105
2870
4
3105
2876
4
3105
2941
4
3105
3031
4
3105
3105
4
3105
3105
4
3105
3105
4
3105
3105
4
3105
3105
4
3105
3105
4
3105
3144
4
3105
3144
4
3105
3144
4
3105
3148
4
3105
3150
4
3105
1471
5
3105
2625
5
3105
2632
5
3105
2868
5
3105
2939
5
3105
3068
5
3105
3105
5
3105
3105
5
3105
3105
5
3105
</TEXT>
</DOC>
<DOC>
<DOCNO>3106</DOCNO>
<TEXT>
a
fast
algorithm
for
copying
list
structures
an
algorithm
is
presented
for
copying
an
arbitrarily
linked
list
structure
into
a
block
of
contiguous
storage
locations
without
destroying
the
original
list
apart
from
a
fixed
number
of
program
variables
no
auxiliary
storage
such
as
a
stack
is
used
the
algorithm
needs
no
mark
bits
and
operates
in
linear
time
it
is
shown
to
be
significantly
faster
than
fisher
algorithm
the
fastest
previous
linear
time
algorithm
for
the
same
problem
its
speed
comes
mainly
from
its
efficient
list
traversal
technique
which
folds
the
processing
stack
into
the
structure
being
built
and
from
its
classification
of
list
cells
into
nine
types
which
enables
processing
operations
to
be
optimized
for
each
type
cacm
may
1978
clark
d
list
copying
lisp
space
complexity
constant
workspace
4
34
4
49
5
25
ca780501
dh
february
26
1979
3
25
pm
1024
4
3106
1051
4
3106
1102
4
3106
1132
4
3106
1390
4
3106
1486
4
3106
1549
4
3106
1706
4
3106
1826
4
3106
1869
4
3106
1878
4
3106
378
4
3106
2060
4
3106
2155
4
3106
2156
4
3106
2168
4
3106
2361
4
3106
2513
4
3106
2513
4
3106
2665
4
3106
2719
4
3106
2723
4
3106
2723
4
3106
2736
4
3106
2766
4
3106
2838
4
3106
2842
4
3106
2855
4
3106
2855
4
3106
2855
4
3106
2855
4
3106
2855
4
3106
2879
4
3106
2944
4
3106
2954
4
3106
2954
4
3106
3074
4
3106
3077
4
3106
3080
4
3106
3106
4
3106
3106
4
3106
3106
4
3106
3106
4
3106
3106
4
3106
3106
4
3106
3106
4
3106
3106
4
3106
3112
4
3106
627
4
3106
106
4
3106
210
5
3106
1549
5
3106
1972
5
3106
2665
5
3106
2766
5
3106
2855
5
3106
2954
5
3106
2998
5
3106
3106
5
3106
3106
5
3106
3106
5
3106
</TEXT>
</DOC>
<DOC>
<DOCNO>3107</DOCNO>
<TEXT>
generating
beta
variates
with
nonintegrel
shape
parameters
a
new
rejection
method
is
described
for
generating
beta
variates
the
method
is
compared
with
previously
published
methods
both
theoretically
and
through
computer
timings
it
is
suggested
that
the
method
has
advantages
in
both
speed
and
programming
simplicity
over
previous
methods
especially
for
difficult
combinations
of
parameter
values
cacm
april
1978
cheng
r
beta
variates
random
numbers
simulation
5
5
8
1
ca780409
dh
february
26
1979
3
32
pm
2847
4
3107
2928
4
3107
3046
4
3107
3098
4
3107
3107
4
3107
2569
5
3107
3107
5
3107
3107
5
3107
3107
5
3107
</TEXT>
</DOC>
<DOC>
<DOCNO>3108</DOCNO>
<TEXT>
economical
encoding
of
commas
between
strings
a
method
for
insertion
of
delimiters
between
strings
without
using
new
symbols
is
presented
as
the
lengths
of
the
strings
increase
the
extra
cost
in
terms
of
prolongation
becomes
vanishingly
small
compared
to
the
lengths
of
the
strings
cacm
april
1978
even
s
rodeh
m
string
transmission
delimiters
commas
encoding
of
the
integers
3
57
3
81
5
6
ca780408
dh
february
26
1979
3
36
pm
3108
5
3108
3108
5
3108
3108
5
3108
</TEXT>
</DOC>
<DOC>
<DOCNO>3109</DOCNO>
<TEXT>
a
data
structure
for
manipulating
priority
queues
a
data
structure
is
described
which
can
be
used
for
representing
a
collection
of
priority
queues
the
primitive
operations
are
insertion
deletion
union
update
and
search
for
an
item
of
earliest
priority
cacm
april
1978
vuillemin
j
data
structures
implementation
of
set
operations
priority
queues
mergeable
heaps
binary
trees
4
34
5
24
5
25
5
32
8
1
ca780407
dh
february
26
1979
3
39
pm
2844
4
3109
2936
4
3109
3051
4
3109
3051
4
3109
3064
4
3109
3109
4
3109
3109
4
3109
2767
5
3109
2844
5
3109
3109
5
3109
3109
5
3109
3109
5
3109
</TEXT>
</DOC>
<DOC>
<DOCNO>3110</DOCNO>
<TEXT>
assembling
code
for
machines
with
span
dependent
instructions
many
modern
computers
contain
instructions
whose
lengths
depend
on
the
distance
from
a
given
instance
of
such
an
instruction
to
the
operand
of
that
instruction
this
paper
considers
the
problem
of
minimizing
the
lengths
of
programs
for
such
machines
an
efficient
solution
is
presented
for
the
case
in
which
the
operand
of
every
such
span
dependent
instruction
is
either
a
label
or
an
assembly
time
expression
of
a
certain
restricted
formf
this
restriction
is
relaxed
by
allowing
these
operands
to
be
more
general
assembly
time
expressions
then
the
problem
is
shown
to
be
np
complete
cacm
april
1978
szymanski
t
span
dependent
instructions
variable
length
addressing
code
generation
assemblers
compilers
np
complete
computational
complexity
4
11
4
12
5
25
ca780406
dh
february
26
1979
3
49
pm
2626
4
3110
2786
4
3110
2840
4
3110
2858
4
3110
2919
4
3110
3017
4
3110
3110
4
3110
3110
4
3110
3110
4
3110
3174
4
3110
2194
5
3110
2629
5
3110
2858
5
3110
3110
5
3110
3110
5
3110
3110
5
3110
</TEXT>
</DOC>
<DOC>
<DOCNO>3111</DOCNO>
<TEXT>
secure
communications
over
insecure
channels
according
to
traditional
conceptions
of
cryptographic
security
it
is
necessary
to
transmit
a
key
by
secret
means
before
encrypted
messages
can
be
sent
securely
this
paper
shows
that
it
is
possible
to
select
a
key
over
open
communications
channels
in
such
a
fashion
that
communications
security
can
be
maintained
a
method
is
described
which
forces
any
enemy
to
expend
an
amount
of
work
which
increases
as
the
square
of
the
work
required
of
the
two
communicants
to
select
the
key
the
method
provides
a
logically
new
kind
of
protection
against
the
passive
eaves
dropper
it
suggests
that
further
research
on
this
topic
will
be
highly
rewarding
both
in
a
theoretical
and
a
practical
sense
cacm
april
1978
merkle
r
security
cryptography
cryptology
communications
security
wiretap
computer
network
security
passive
eavesdropping
key
distribution
public
key
cryptosystem
3
56
3
81
ca780405
dh
february
26
1979
4
18
pm
3038
4
3111
3111
4
3111
3177
4
3111
3021
5
3111
3111
5
3111
3111
5
3111
3111
5
3111
3158
5
3111
2436
6
3111
3038
6
3111
3111
6
3111
3111
6
3111
</TEXT>
</DOC>
<DOC>
<DOCNO>3112</DOCNO>
<TEXT>
list
processing
in
real
time
on
a
serial
computer
a
real
time
list
processing
system
is
one
in
which
the
time
required
by
the
elementary
list
operations
e
g
cons
car
cdr
rplaca
replacd
eq
and
atom
in
lisp
is
bounded
by
a
small
constant
classical
implementations
of
list
processing
systems
lack
this
property
because
allocating
a
list
cell
from
the
heap
may
cause
a
garbage
collection
which
process
requires
time
proportional
to
the
heap
size
to
finish
a
real
time
list
processing
system
is
presented
which
continuously
reclaims
garbage
including
directed
cycles
while
linearizing
and
compacting
the
accessible
cells
into
contiguous
locations
to
avoid
fragmenting
the
free
storage
pool
the
program
is
small
and
requires
no
time
sharing
interrupts
making
it
suitable
for
microcode
finally
the
system
requires
the
same
average
time
and
not
more
than
twice
the
space
of
a
classical
implementation
and
those
space
requirements
can
be
reduced
to
approximately
classical
proportions
by
compact
list
representation
arrays
of
different
sizes
a
program
stack
and
hash
linking
are
simple
extensions
to
our
system
and
reference
counting
is
found
to
be
inferior
for
many
applications
cacm
april
1978
baker
h
real
time
compacting
garbage
collection
list
processing
virtual
memory
file
or
database
management
storage
management
storage
allocation
lisp
cdr
coding
reference
counting
3
50
3
60
3
73
3
80
4
13
4
22
4
32
4
33
4
35
4
49
ca780404
dh
february
26
1979
4
32
pm
1024
4
3112
1050
4
3112
1051
4
3112
1098
4
3112
1214
4
3112
1380
4
3112
1388
4
3112
1393
4
3112
1393
4
3112
1485
4
3112
1487
4
3112
1541
4
3112
1549
4
3112
1549
4
3112
1570
4
3112
1846
4
3112
1878
4
3112
1946
4
3112
1957
4
3112
1972
4
3112
2023
4
3112
2060
4
3112
2156
4
3112
2156
4
3112
2168
4
3112
2168
4
3112
2218
4
3112
2361
4
3112
2438
4
3112
2513
4
3112
2625
4
3112
2723
4
3112
2723
4
3112
2736
4
3112
2736
4
3112
2833
4
3112
2833
4
3112
2838
4
3112
2845
4
3112
2855
4
3112
2855
4
3112
2855
4
3112
2857
4
3112
2896
4
3112
2922
4
3112
2944
4
3112
3039
4
3112
3074
4
3112
3074
4
3112
3074
4
3112
3081
4
3112
3101
4
3112
3106
4
3112
3112
4
3112
3112
4
3112
3112
4
3112
3112
4
3112
3112
4
3112
3112
4
3112
3112
4
3112
3112
4
3112
3112
4
3112
3112
4
3112
627
4
3112
106
5
3112
1380
5
3112
1826
5
3112
1972
5
3112
2438
5
3112
2723
5
3112
2736
5
3112
2833
5
3112
2838
5
3112
3112
5
3112
3112
5
3112
3112
5
3112
731
5
3112
</TEXT>
</DOC>
<DOC>
<DOCNO>3113</DOCNO>
<TEXT>
optimal
conversion
of
extended
entry
decision
tables
with
general
cost
criteria
a
general
dynamic
programming
algorithm
for
converting
limited
extended
or
mixed
entry
decision
tables
to
optimal
decision
trees
is
presented
which
can
take
into
account
rule
frequencies
or
probabilities
minimum
time
and
or
space
cost
criteria
common
action
sets
compressed
rules
and
else
rules
sequencing
constraints
on
condition
tests
excludable
combinations
of
conditions
certain
ambiguities
and
interrupted
rule
masking
cacm
april
1978
lew
a
decision
table
optimal
programs
dynamic
programming
3
59
4
19
4
29
4
49
5
39
5
42
8
3
ca780403
dh
february
26
1979
4
37
pm
1684
4
3113
2053
4
3113
2220
4
3113
2273
4
3113
2453
4
3113
2598
4
3113
2598
4
3113
2691
4
3113
2726
4
3113
2726
4
3113
2845
4
3113
2856
4
3113
2856
4
3113
3033
4
3113
3113
4
3113
3113
4
3113
3113
4
3113
3113
4
3113
3113
4
3113
1354
5
3113
2263
5
3113
2598
5
3113
2691
5
3113
2856
5
3113
3113
5
3113
3113
5
3113
3113
5
3113
</TEXT>
</DOC>
<DOC>
<DOCNO>3114</DOCNO>
<TEXT>
a
technique
for
isolating
differences
between
files
a
simple
algorithm
is
described
for
isolating
the
differences
between
two
files
one
application
is
the
comparing
of
two
versions
of
a
source
program
or
other
file
in
order
to
display
all
differences
the
algorithm
isolates
differences
in
a
way
that
corresponds
closely
to
our
intuitive
notion
of
difference
is
easy
to
implement
and
is
computationally
efficient
with
time
linear
in
the
file
length
for
most
applications
the
algorithm
isolates
differences
similar
to
those
isolated
by
the
longest
common
subsequence
another
application
of
this
algorithm
merges
files
containing
independently
generated
changes
into
a
single
file
the
algorithm
can
also
be
used
to
generate
efficient
encodings
of
a
file
in
the
form
of
the
differences
between
itself
and
a
given
datum
file
permitting
reconstruction
of
the
original
file
from
the
difference
and
datum
files
cacm
april
1978
heckel
p
difference
isolation
word
processing
text
editing
program
maintenance
hash
coding
file
compression
bandwidth
compression
longest
common
subsequence
file
comparison
molecular
evolution
3
63
3
73
3
81
4
43
ca780402
dh
february
27
1979
10
52
am
2299
4
3114
2501
4
3114
2629
4
3114
2915
4
3114
2963
4
3114
3114
4
3114
3114
4
3114
3114
4
3114
1502
5
3114
2499
5
3114
2745
5
3114
3114
5
3114
3114
5
3114
3114
5
3114
</TEXT>
</DOC>
<DOC>
<DOCNO>3115</DOCNO>
<TEXT>
orderly
enumeration
of
nonsingular
binary
matrices
applied
to
text
encryption
nonsingular
binary
matrices
of
order
n
i
e
nonsingular
over
the
field
0
1
and
an
initial
segment
of
the
natural
numbers
are
placed
in
one
to
one
correspondence
each
natural
number
corresponds
to
two
intermediate
vectors
these
vectors
are
mapped
into
a
nonsingular
binary
matrix
examples
of
complete
enumeration
of
all
2
x
2
and
3
x
3
nonsingular
binary
matrices
were
produced
by
mapping
the
intermediate
vectors
to
the
matrices
the
mapping
has
application
to
the
vernam
encipherment
method
using
pseudorandom
number
sequences
a
bit
string
formed
form
bytes
of
text
of
a
data
encryption
key
can
be
used
as
a
representation
of
a
natural
number
this
natural
number
is
transformed
to
a
nonsingular
binary
matrix
key
leverage
is
obtained
by
using
the
matrix
as
a
seed
in
a
shift
register
sequence
pseudorandom
number
generator
cacm
april
1978
payne
w
mcmillen
k
binary
matrices
combinatorics
combinations
nonsingular
matrices
encryption
vernam
pseudorandom
numbers
feedback
shiftregister
sequences
random
numbers
3
7
5
3
ca780401
dh
february
27
1979
11
05
am
2269
4
3115
2466
4
3115
2690
4
3115
2834
4
3115
2834
4
3115
2834
4
3115
2853
4
3115
2884
4
3115
2908
4
3115
3115
4
3115
3115
4
3115
3115
4
3115
3115
4
3115
3115
4
3115
3115
4
3115
3115
4
3115
907
5
3115
2045
5
3115
2417
5
3115
2466
5
3115
2884
5
3115
579
5
3115
3115
5
3115
3115
5
3115
3115
5
3115
785
5
3115
</TEXT>
</DOC>
<DOC>
<DOCNO>3116</DOCNO>
<TEXT>
interference
detection
among
solids
and
surfaces
in
many
industrial
environments
it
is
necessary
to
determine
whether
r
there
is
interference
among
components
there
are
many
potential
interference
problems
in
products
made
up
of
assemblies
of
components
and
in
product
manufacturing
and
testing
typically
drawings
are
used
in
an
attempt
to
detect
such
unwanted
interferences
but
the
two
dimensional
static
drafting
medium
does
not
always
show
interferences
among
three
dimensional
moving
parts
this
paper
presents
a
computer
representation
for
solids
and
surfaces
and
algorithms
which
carry
out
interference
checking
among
objects
so
represented
objects
are
represented
as
polyhedra
or
as
piecewise
planar
surfaces
two
types
of
interference
checking
are
discussed
detection
of
intersections
among
objects
in
fixed
positions
and
detection
of
collisions
among
objects
moving
along
specified
trajectories
cacm
january
1979
boyse
j
interference
checking
intersection
detection
collision
detection
solid
representation
polyhedral
representation
graphics
polygons
surfaces
3
2
8
2
ca790101
dh
april
10
1979
10
50
am
2827
4
3116
3116
4
3116
2771
5
3116
3116
5
3116
3116
5
3116
3116
5
3116
3172
5
3116
3116
6
3116
</TEXT>
</DOC>
<DOC>
<DOCNO>3117</DOCNO>
<TEXT>
the
impact
and
use
of
computer
technology
by
the
police
over
the
past
decade
there
has
been
a
significant
growth
in
the
use
of
computer
technology
by
u
police
departments
this
growth
however
has
been
at
a
slower
rate
than
predicted
in
the
early
1970
further
when
computer
applications
extend
beyond
routine
uses
to
nonroutine
efforts
such
as
resource
allocation
or
computer
aided
dispatch
systems
where
the
machine
begins
to
become
a
tool
for
decision
making
strategic
planning
and
person
machine
interaction
the
results
of
the
technology
to
date
have
been
mixed
this
paper
reports
on
case
studies
and
surveys
which
provinsights
on
the
implementation
and
impact
of
police
computer
technology
and
the
relationship
of
this
technology
to
law
enforcement
and
society
cacm
january
1979
colton
k
computer
technology
innovation
police
resource
allocation
police
command
and
control
computer
aided
dispatch
law
enforcement
technology
transfer
2
1
2
11
2
12
2
45
3
33
3
39
ca790102
dh
april
10
1979
11
32
am
3117
4
3117
3090
5
3117
3117
5
3117
3117
5
3117
3117
5
3117
</TEXT>
</DOC>
<DOC>
<DOCNO>3118</DOCNO>
<TEXT>
permutation
of
data
blocks
in
a
bubble
memory
a
common
internal
organization
of
bubble
memories
consists
of
a
set
of
minor
loops
connected
through
another
major
loop
the
problem
of
obtaining
any
give
n
permutation
of
the
minor
loop
contents
in
minimum
time
is
studied
in
this
paper
a
lower
bound
to
the
number
of
steps
required
buy
a
permutation
algorithm
is
derived
and
the
class
of
optimum
algorithms
is
identified
cacm
january
1979
bongiovanni
g
luccio
f
bubble
memory
memory
loops
permutation
algorithm
data
block
shift
4
34
5
30
6
34
ca790103
dh
april
10
1979
12
04
pm
3118
5
3118
3118
5
3118
3118
5
3118
</TEXT>
</DOC>
<DOC>
<DOCNO>3119</DOCNO>
<TEXT>
the
impact
of
distributions
and
disciplines
on
multiple
processor
systems
simple
queueing
models
are
used
to
study
the
performance
tradeoffs
of
multiple
processor
systems
issues
considered
include
the
impact
of
cpu
service
disciplines
and
distributions
level
of
multiprogramming
multitasking
and
job
priorities
cacm
january
1979
sauer
c
chandy
k
multiprogramming
multiprocessing
scheduling
disciplines
performance
evaluation
queueing
models
4
32
4
6
6
2
8
1
ca790104
dh
april
10
1979
12
10
pm
2571
4
3119
2918
4
3119
3032
4
3119
3072
4
3119
3119
4
3119
3119
4
3119
3119
4
3119
3119
4
3119
2245
5
3119
2798
5
3119
2849
5
3119
2859
5
3119
3119
5
3119
3119
5
3119
3119
5
3119
</TEXT>
</DOC>
<DOC>
<DOCNO>3120</DOCNO>
<TEXT>
an
event
driven
compiling
technique
due
to
the
linear
structure
of
source
text
difficulties
may
arise
in
a
one
pass
compilation
process
these
difficulties
occur
when
an
entity
cannot
be
processed
because
of
a
forward
reference
to
information
only
obtainable
from
subsequent
entities
classic
solutions
ask
for
data
structures
appropriate
for
each
case
a
technique
is
presented
here
which
uses
instead
control
structures
namely
events
and
processes
the
work
of
the
compiler
writer
becomes
easier
both
conceptually
and
in
practice
because
he
can
forget
these
problems
at
the
outset
and
he
avoids
special
processing
for
each
problem
this
technique
has
been
applied
to
the
construction
of
an
algol
68
compiler
three
examples
from
that
implementation
are
described
and
discussed
here
cacm
january
1979
banatre
j
routeau
j
trilling
l
compiling
technique
one
pass
compilation
semantic
analysis
event
process
parallelism
categories
4
12
ca790105
dh
april
10
1979
12
26
pm
3120
5
3120
3120
5
3120
3120
5
3120
</TEXT>
</DOC>
<DOC>
<DOCNO>3121</DOCNO>
<TEXT>
syntactic
source
to
source
transforms
and
program
manipulation
syntactic
transforms
are
the
source
to
source
program
transformations
which
preserve
the
history
of
computation
and
thus
do
not
modify
the
execution
time
combined
with
a
small
number
of
primitive
semantic
transforms
they
provide
a
powerful
tool
for
program
manipulation
a
catalogue
of
syntactic
transforms
and
its
use
for
solution
of
a
system
of
program
equations
is
given
examples
of
derivation
of
more
complex
source
to
source
transformations
are
also
presented
two
case
studies
illustrate
the
way
in
which
syntactic
and
semantic
source
to
source
transformations
may
be
used
for
development
of
clear
simple
and
reasonably
efficient
programs
cacm
january
1979
arsac
j
structured
programming
program
transforms
control
structures
4
2
5
24
5
25
ca790106
dh
april
10
1979
1
57
pm
1175
4
3121
1919
4
3121
1919
4
3121
1969
4
3121
1997
4
3121
2191
4
3121
2191
4
3121
2388
4
3121
2388
4
3121
2679
4
3121
2709
4
3121
2783
4
3121
2784
4
3121
2821
4
3121
3004
4
3121
3054
4
3121
3054
4
3121
3121
4
3121
3121
4
3121
3121
4
3121
3121
4
3121
3121
4
3121
864
4
3121
1312
5
3121
308
5
3121
309
5
3121
2456
5
3121
2709
5
3121
3121
5
3121
3121
5
3121
3121
5
3121
</TEXT>
</DOC>
<DOC>
<DOCNO>3122</DOCNO>
<TEXT>
production
and
employment
of
ph
s
in
computer
science
1977
and
1978
cacm
february
1979
taulbee
o
conte
s
computer
science
production
of
ph
s
employment
students
1
3
1
52
1
53
1
59
ca790201
dh
april
10
1979
2
09
pm
2962
4
3122
3122
4
3122
3122
4
3122
3123
4
3122
3123
4
3122
2861
5
3122
2962
5
3122
3122
5
3122
3122
5
3122
3122
5
3122
</TEXT>
</DOC>
<DOC>
<DOCNO>3123</DOCNO>
<TEXT>
employment
characteristics
of
doctoral
level
computer
scientists
cacm
february
1979
fairley
r
employment
characteristics
manpower
utilization
occupational
trends
1
5
2
1
2
2
ca790202
dh
april
10
1979
2
13
pm
2962
4
3123
3022
4
3123
3122
4
3123
3122
4
3123
3123
4
3123
3123
4
3123
3123
4
3123
3123
4
3123
2823
5
3123
2861
5
3123
2962
5
3123
3022
5
3123
3123
5
3123
3123
5
3123
3123
5
3123
</TEXT>
</DOC>
<DOC>
<DOCNO>3124</DOCNO>
<TEXT>
recursive
data
structures
in
apl
a
mathematical
study
of
three
approaches
for
defining
nested
arrays
in
apl
is
presented
theorems
exhibiting
the
relationships
between
the
definitional
systems
are
given
and
illustrated
through
graph
representations
one
of
the
approaches
is
used
to
define
an
apl
array
to
be
a
recursive
data
structure
equivalent
to
a
tree
structure
in
which
all
data
is
stored
at
the
leaves
as
homogeneous
arrays
of
numbers
and
characters
an
extension
of
apl
is
proposed
that
includes
new
primitive
functions
to
manipulate
the
nesting
level
of
arrays
and
new
operators
to
assist
in
the
construction
of
data
driven
algorithms
cacm
february
1979
gull
w
jenkins
m
nested
arrays
apl
arrays
recursive
data
structures
trees
data
driven
algorithms
theory
of
arrays
4
22
5
29
ca790203
dh
april
10
1979
3
41
pm
2060
4
3124
2294
4
3124
2470
4
3124
3124
4
3124
1469
5
3124
3124
5
3124
3124
5
3124
3124
5
3124
</TEXT>
</DOC>
<DOC>
<DOCNO>3125</DOCNO>
<TEXT>
global
optimization
by
suppression
of
partial
redundancies
the
elimination
of
redundant
computations
and
the
moving
of
invariant
computations
out
of
loops
are
often
done
separately
with
invariants
moved
outward
loop
by
loop
we
propose
to
do
both
at
once
and
to
move
each
expression
directly
to
the
entrance
of
the
outermost
loop
in
which
it
is
invariant
this
is
done
by
solving
a
more
general
problem
i
e
the
elimination
of
computations
performed
twice
on
a
given
execution
path
such
computations
are
termed
partially
redundant
moreover
the
algorithm
does
not
require
any
graphical
information
or
restrictions
on
the
shape
of
the
program
graph
testing
this
algorithm
has
shown
that
its
execution
cost
is
nearly
linear
with
the
size
of
the
program
and
that
it
leads
to
a
smaller
optimizer
that
requires
less
execution
time
cacm
february
1979
morel
e
renvoise
c
optimizer
optimization
compiler
compilation
redundancy
elimination
invariant
computation
elimination
partial
redundancy
data
flow
analysis
boolean
systems
4
12
5
21
5
24
ca790204
dh
april
10
1979
4
19
pm
3125
5
3125
3125
5
3125
3125
5
3125
</TEXT>
</DOC>
<DOC>
<DOCNO>3126</DOCNO>
<TEXT>
comments
on
perfect
hashing
functions
a
single
probe
retrieving
method
for
static
sets
cacm
february
1979
anderson
m
hashing
hashing
methods
hash
coding
direct
addressing
identifier
to
address
transformations
perfect
hashing
functions
perfect
hash
coding
reduction
retrieving
scatter
storage
searching
3
7
3
74
4
34
ca790205
dh
april
10
1979
4
25
pm
3041
4
3126
3126
4
3126
3176
4
3126
2905
5
3126
3126
5
3126
3126
5
3126
3126
5
3126
</TEXT>
</DOC>
<DOC>
<DOCNO>3127</DOCNO>
<TEXT>
thoth
a
portable
real
time
operating
system
thoth
isa
real
time
operating
system
which
is
designed
to
be
portable
over
a
large
set
of
machines
it
is
currently
running
on
two
minicomputers
with
quite
different
architectures
both
the
system
and
application
programs
which
use
it
are
written
in
a
high
level
language
because
the
system
is
implemented
by
the
same
software
on
different
hardware
it
has
the
same
interface
to
user
programs
hence
application
programs
which
use
thoth
are
highly
portable
thoth
encourages
structuring
programs
as
networks
of
communicating
processes
by
providing
efficient
interprocess
communication
primitives
cacm
february
1979
cheriton
d
malcolm
m
melen
l
sager
g
portability
real
time
operating
systems
minicomputer
3
80
4
30
4
35
ca790206
dh
april
12
1979
9
10
am
2319
4
3127
2378
4
3127
2320
4
3127
2632
4
3127
2738
4
3127
2740
4
3127
2868
4
3127
2928
4
3127
3127
4
3127
3127
4
3127
2080
5
3127
2277
5
3127
3127
5
3127
3127
5
3127
3127
5
3127
</TEXT>
</DOC>
<DOC>
<DOCNO>3128</DOCNO>
<TEXT>
synchronization
with
eventcounts
and
sequencers
synchronization
of
concurrent
processes
requires
controlling
the
relative
ordering
of
events
in
the
processes
a
new
synchronization
mechanism
is
proposed
using
abstract
objects
called
eventcounts
and
sequencers
that
allows
processes
to
control
the
ordering
of
events
directly
rather
than
using
mutual
exclusion
to
protect
manipulations
of
shared
variables
that
control
ordering
of
events
direct
control
of
ordering
seems
to
simplify
correctness
arguments
and
also
simplifies
implementation
in
distributed
systems
the
mechanism
is
defined
formally
and
then
several
examples
of
its
use
are
given
the
relationship
of
the
mechanism
to
protection
mechanisms
in
the
system
is
explained
in
particular
eventcounts
are
shown
to
be
applicable
to
situations
where
confinement
of
information
matters
an
implementation
of
eventcount
s
and
sequencers
in
a
system
with
shared
memory
is
described
cacm
february
1979
reed
d
kanodia
r
process
synchronization
interprocess
communication
distributed
systems
security
models
mutual
exclusion
semaphores
4
30
4
32
ca790207
dh
april
12
1979
10
03
am
2320
4
3128
2597
4
3128
2700
4
3128
2777
4
3128
2840
4
3128
2851
4
3128
2865
4
3128
2866
4
3128
2869
4
3128
2895
4
3128
2898
4
3128
2912
4
3128
2938
4
3128
2945
4
3128
2946
4
3128
2946
4
3128
2972
4
3128
3043
4
3128
3128
4
3128
3128
4
3128
3128
4
3128
3128
4
3128
3128
4
3128
3128
4
3128
3128
4
3128
3128
4
3128
3128
4
3128
3144
4
3128
3148
4
3128
3158
4
3128
2150
5
3128
2376
5
3128
2436
5
3128
2597
5
3128
2865
5
3128
2866
5
3128
2870
5
3128
2912
5
3128
3082
5
3128
3128
5
3128
3128
5
3128
3128
5
3128
</TEXT>
</DOC>
<DOC>
<DOCNO>3129</DOCNO>
<TEXT>
optimal
storage
allocation
for
serial
files
a
computer
system
uses
several
serial
files
the
files
reside
on
a
direct
access
storage
device
in
which
storage
space
is
limited
records
are
added
to
the
files
either
by
jobs
in
batch
processing
mode
or
by
on
line
transactions
each
transaction
or
job
generates
a
demand
vector
which
designates
the
space
required
in
each
file
for
record
addition
whenever
one
file
runs
out
of
space
the
system
must
be
reorganized
this
paper
considers
several
criteria
for
best
allocating
storage
space
to
the
files
cacm
february
1979
mendelson
h
pliskin
j
yechiali
u
serial
files
storage
allocation
reorganization
partitioned
dataset
3
5
3
7
4
33
4
6
ca790208
dh
april
12
1979
10
34
am
2816
4
3129
3129
4
3129
3129
4
3129
2493
5
3129
2816
5
3129
3129
5
3129
3129
5
3129
3129
5
3129
</TEXT>
</DOC>
<DOC>
<DOCNO>3130</DOCNO>
<TEXT>
curriculum
78
recommendations
for
the
undergraduate
program
in
computer
science
contained
in
this
report
are
the
recommendations
for
the
undergraduate
degree
program
in
computer
science
of
the
curriculum
committee
on
computer
science
c3s
of
the
association
for
computing
machinery
acm
the
core
curriculum
common
to
all
computer
science
undergraduate
programs
is
presented
in
terms
of
elementary
level
topics
and
courses
and
intermediate
level
courses
elective
courses
used
to
round
out
an
undergraduate
program
are
then
discussed
and
the
entire
program
including
the
computer
science
component
and
other
material
is
presented
issues
related
to
undergraduate
computer
science
education
such
as
service
courses
supporting
areas
continuing
education
facilities
staff
and
articulation
are
presented
cacm
march
1979
austing
r
barnes
b
bonnette
d
engel
g
stokes
g
computer
sciences
courses
computer
science
curriculum
computer
science
education
computer
science
undergraduate
degree
programs
service
courses
continuing
education
1
52
ca790301
dh
april
12
1979
11
02
am
1720
4
3130
1927
4
3130
2147
4
3130
2163
4
3130
2345
4
3130
2478
4
3130
2594
4
3130
2852
4
3130
2899
4
3130
3130
4
3130
3130
4
3130
1771
5
3130
3003
5
3130
3130
5
3130
3130
5
3130
3130
5
3130
</TEXT>
</DOC>
<DOC>
<DOCNO>3131</DOCNO>
<TEXT>
focus
microcomputer
number
system
focus
is
a
number
system
and
supporting
computational
algorithms
especially
useful
for
microcomputer
control
and
other
signal
processing
applications
focus
has
the
wide
ranging
character
of
floating
point
numbers
with
a
uniformity
of
state
distributions
that
give
focus
better
than
a
twofold
accuracy
advantage
over
an
equal
word
length
floating
point
system
focus
computations
are
typically
five
times
faster
than
single
precision
fixed
point
or
integer
arithmetic
for
a
mixture
of
operations
comparable
in
speed
with
hardware
arithmetic
for
many
applications
algorithms
for
8
bit
and
16
bit
implementations
of
focus
are
included
cacm
march
1979
edgar
a
lee
s
number
representation
logarithmic
arithmetic
computational
speed
computational
accuracy
microcomputer
applications
3
24
3
80
4
0
4
22
5
11
ca790302
dh
april
12
1979
11
12
am
3131
4
3131
3131
4
3131
1148
5
3131
3131
5
3131
3131
5
3131
3131
5
3131
893
5
3131
</TEXT>
</DOC>
<DOC>
<DOCNO>3132</DOCNO>
<TEXT>
experiments
with
some
algorithms
that
find
central
solutions
for
pattern
classification
in
two
class
pattern
recognition
it
is
a
standard
technique
to
have
an
algorithm
finding
hyperplanes
which
separates
the
two
classes
in
a
linearly
separable
training
set
the
traditional
methods
find
a
hyperplane
which
separates
all
points
in
the
other
but
such
a
hyperplane
is
not
necessarily
centered
in
the
empty
space
between
the
two
classes
since
a
central
hyperplane
does
not
favor
one
class
or
the
other
it
should
have
a
lower
error
rate
in
classifying
new
points
and
is
therefore
better
than
a
noncentral
hyperplane
six
algorithms
for
finding
central
hyperplanes
are
tested
on
three
data
sets
although
frequently
used
practice
the
modified
relaxation
algorithm
is
very
poor
three
algorithms
which
are
defined
in
the
paper
are
found
to
be
quite
good
cacm
march
1979
slagle
j
pattern
recognition
pattern
classification
linear
discriminants
central
hyperplanes
centering
centrality
criteria
dead
zone
hyperplane
linearly
separable
relaxation
algorithm
accelerated
relaxation
3
62
3
63
ca790303
dh
april
12
1979
3
20
pm
3132
4
3132
2215
5
3132
3132
5
3132
3132
5
3132
3132
5
3132
</TEXT>
</DOC>
<DOC>
<DOCNO>3133</DOCNO>
<TEXT>
logic
and
semantic
networks
an
extended
form
of
semantic
network
is
defined
which
can
be
regarded
as
a
syntactic
variant
of
the
clausal
form
of
logic
by
virtue
of
its
relationship
with
logic
the
extended
semantic
network
is
provided
with
a
precise
semantics
inference
rules
and
a
procedural
interpretation
on
the
other
hand
by
regarding
semantic
networks
as
an
abstract
data
structure
for
the
representation
of
clauses
we
provide
a
theorem
prover
with
a
potentially
useful
indexing
scheme
and
path
following
strategy
for
guiding
the
search
for
a
proof
cacm
march
1979
deliyanni
a
kowalski
r
logic
semantic
networks
theorem
proving
indexing
resolution
deduction
logic
programming
3
42
3
64
5
21
ca790304
dh
april
12
1979
3
53
pm
3133
4
3133
3133
5
3133
3133
5
3133
3133
5
3133
3154
5
3133
2046
6
3133
2110
6
3133
3133
6
3133
</TEXT>
</DOC>
<DOC>
<DOCNO>3134</DOCNO>
<TEXT>
the
use
of
normal
multiplication
tables
for
information
storage
and
retrieval
this
paper
describes
a
method
for
the
organization
and
retrieval
of
attribute
based
information
systems
using
the
normal
multiplication
table
as
a
directory
for
the
information
system
algorithms
for
the
organization
an
d
retrieval
of
information
are
described
this
method
is
particularly
suitable
for
queries
requesting
a
group
of
information
items
all
of
which
possess
a
particular
set
of
attributes
and
possibly
some
other
attributes
as
well
several
examples
are
given
the
results
with
respect
to
the
number
of
disk
accesses
and
disk
space
are
compared
to
other
common
approaches
algorithms
evaluating
the
appropriateness
of
the
above
approach
to
a
given
information
system
are
described
for
a
certain
class
of
information
systems
the
normal
multiplication
table
method
yields
far
more
rapid
retrieval
with
a
more
economical
space
requirement
than
conventional
systems
moreover
this
method
incorporates
an
improved
modification
of
the
inverted
file
technique
cacm
march
1979
motzkin
d
information
retrieval
inverted
files
multiattribute
retrieval
multilist
file
normal
multiplication
table
queries
rapid
retrieval
space
economy
3
70
3
73
3
79
ca790305
dh
may
21
1979
9
46
am
2140
4
3134
2452
4
3134
2575
4
3134
2765
4
3134
2901
4
3134
2966
4
3134
3134
4
3134
3134
4
3134
3134
4
3134
3134
4
3134
1976
5
3134
2160
5
3134
2524
5
3134
2990
5
3134
3134
5
3134
3134
5
3134
3134
5
3134
</TEXT>
</DOC>
<DOC>
<DOCNO>3135</DOCNO>
<TEXT>
detection
of
three
dimensional
patterns
of
atoms
in
chemical
structures
an
algorithm
for
detecting
occurrences
of
a
three
dimensional
pattern
of
objects
within
a
larger
structure
is
presented
the
search
technique
presented
uses
the
geometric
structure
of
the
pattern
to
define
characteristics
demanded
of
candidates
for
matching
this
is
useful
in
cases
where
the
properties
of
each
atom
considered
individually
do
not
adequately
limit
the
number
of
sets
of
possible
matchings
several
applications
of
this
technique
in
the
field
of
chemistry
are
1
in
pharmacology
searching
for
a
common
constellation
of
atoms
in
molecules
possessing
similar
biological
activities
2
in
x
ray
crystallography
fitting
a
structure
or
a
structural
fragment
to
a
set
of
peaks
in
the
electron
density
distribution
of
a
fourier
map
3
in
chemical
documentation
retrieving
from
a
file
the
structures
containing
specified
substructures
cacm
april
1979
lesk
a
three
dimensional
pattern
recognition
chemical
structure
search
information
retrieval
crystal
structure
analysis
drug
analysis
and
design
3
13
3
63
3
74
ca790401
dh
may
21
1979
10
50
am
2521
5
3135
3135
5
3135
3135
5
3135
3135
5
3135
2028
6
3135
2031
6
3135
3135
6
3135
</TEXT>
</DOC>
<DOC>
<DOCNO>3136</DOCNO>
<TEXT>
price
performance
patterns
of
u
computer
systems
econometric
models
of
the
u
computer
market
have
been
developed
to
study
the
relationships
between
system
price
and
hardware
performance
single
measures
of
price
performance
such
as
grosch
law
are
shown
to
be
so
over
simplified
as
to
be
meaningless
multiple
regression
models
predicting
system
cost
as
a
function
of
several
hardware
characteristics
do
however
reveal
a
market
dichotomy
on
one
hand
there
exists
a
stable
price
predictable
market
for
larger
general
purpose
computer
systems
the
other
market
is
the
developing
one
for
small
business
computer
systems
a
market
which
is
relatively
unstable
with
low
price
predictability
cacm
april
1979
cale
e
gremillion
l
mckenney
j
price
performance
grosch
law
u
computer
market
2
0
2
11
6
21
ca790402
dh
may
21
1979
1
09
pm
3136
5
3136
3136
5
3136
3136
5
3136
</TEXT>
</DOC>
<DOC>
<DOCNO>3137</DOCNO>
<TEXT>
a
methodology
for
the
design
of
distributed
information
systems
a
macro
model
of
a
distributed
information
system
in
presented
the
model
describes
the
major
costs
of
using
an
information
system
from
the
perspective
of
the
end
user
the
making
evident
the
effect
of
various
design
and
operating
parameters
on
overall
cost
per
transaction
the
technique
is
illustrated
by
application
to
the
design
of
an
interactive
transaction
processing
system
cacm
april
1979
bucci
g
streeter
d
distributed
processing
system
design
cost
minimization
distributed
database
interactive
computing
economic
modeling
transaction
processing
4
32
4
33
6
2
8
1
ca790403
dh
may
21
1979
1
25
pm
3137
5
3137
3137
5
3137
3137
5
3137
</TEXT>
</DOC>
<DOC>
<DOCNO>3138</DOCNO>
<TEXT>
a
mathematical
programming
updating
method
using
modified
givens
transformations
and
applied
to
lp
problems
an
efficient
and
numerically
stable
method
is
presented
for
the
problem
of
updating
an
orthogonal
decomposition
of
a
matrix
of
column
or
row
vectors
the
fundamental
idea
is
to
add
a
column
or
row
analogous
to
adding
an
additional
row
of
data
in
a
linear
least
squares
problem
a
column
or
row
is
dropped
by
a
formal
scaling
with
the
imaginary
unit
1
followed
by
least
squares
addition
of
the
column
or
row
the
elimination
process
for
the
procedure
is
successive
ssive
application
of
the
givens
transformation
in
modified
more
efficient
form
these
ideas
are
illustrated
with
an
implementation
of
the
revised
simplex
method
the
algorithm
is
a
general
purpose
one
that
does
not
account
for
any
particular
structure
or
sparsity
in
the
equations
some
suggested
computational
tests
for
determining
signs
of
various
controlling
parameters
in
the
revised
simplex
algorithm
are
mentioned
a
simple
means
of
constructing
test
cases
and
some
sample
computing
times
are
presented
cacm
april
1979
hanson
r
wisniewski
j
linear
programming
numerical
linear
algebra
modified
givens
transformations
linear
programming
test
cases
5
5
4
5
41
5
1
5
14
ca790404
dh
may
21
1979
2
06
pm
3099
4
3138
3138
4
3138
1313
5
3138
3138
5
3138
3138
5
3138
3138
5
3138
</TEXT>
</DOC>
<DOC>
<DOCNO>3139</DOCNO>
<TEXT>
new
methods
to
color
the
vertices
of
a
graph
this
paper
describes
efficient
new
heuristic
methods
to
color
the
vertices
of
a
graph
which
rely
upon
the
comparison
of
the
degrees
and
structure
of
a
graph
a
method
is
developed
which
is
exact
for
bipartite
graphs
and
is
an
important
part
of
heuristic
procedures
to
find
maximal
cliques
in
general
graphs
finally
an
exact
method
is
given
which
performs
better
than
the
randall
brown
algorithm
and
is
able
to
color
larger
graphs
and
the
new
heuristic
methods
the
classical
methods
and
the
exact
method
are
compared
cacm
april
1979
brelaz
d
np
complete
graph
structure
balancing
graph
coloring
scheduling
comparison
of
the
methods
5
25
5
32
ca790405
dh
june
5
1979
2
05
pm
3139
5
3139
3139
5
3139
3139
5
3139
</TEXT>
</DOC>
<DOC>
<DOCNO>3140</DOCNO>
<TEXT>
social
processes
and
proofs
of
theorems
and
programs
it
is
argued
that
formal
verifications
of
programs
no
matter
how
obtained
will
not
play
the
same
key
role
in
the
development
of
computer
science
and
software
engineering
as
proofs
do
in
mathematics
furthermore
the
absence
of
continuity
the
inevitability
of
change
and
the
complexity
of
specification
of
significantly
many
real
programs
make
the
form
al
verification
process
difficult
to
justify
and
manage
it
is
felt
that
ease
of
formal
verification
should
not
dominate
program
language
design
cacm
may
1979
de
millo
r
lipton
r
perlis
a
formal
mathematics
mathematical
proofs
program
verification
program
specification
2
10
4
6
5
24
ca790501
dh
june
5
1979
2
23
pm
3140
5
3140
3140
5
3140
3140
5
3140
3178
5
3140
3076
6
3140
3140
6
3140
3142
6
3140
3179
6
3140
3180
6
3140
3181
6
3140
3182
6
3140
</TEXT>
</DOC>
<DOC>
<DOCNO>3141</DOCNO>
<TEXT>
an
improved
algorithm
for
decentralized
extrema
finding
in
circular
configurations
of
processes
this
note
presents
an
improvement
to
lelann
algorithm
for
finding
the
largest
or
smallest
of
a
set
of
uniquely
numbered
processes
arranged
in
a
circle
in
which
no
central
controller
exists
and
the
number
of
processes
is
not
known
a
priori
this
decentralized
algorithm
uses
a
technique
of
selective
message
extinction
in
order
to
achieve
an
average
number
of
message
passes
of
order
n
log
n
rather
than
o
n2
cacm
may
1979
chang
e
roberts
r
decentralized
algorithms
distributed
systems
operating
systems
4
32
4
35
5
25
5
32
ca790502
dh
june
5
1979
2
35
pm
3141
5
3141
3141
5
3141
3141
5
3141
</TEXT>
</DOC>
<DOC>
<DOCNO>3142</DOCNO>
<TEXT>
consumer
difficulties
with
computerized
transactions
an
empirical
investigation
the
prevalence
with
which
errors
may
be
encountered
by
the
end
targets
of
a
computerized
process
is
assessed
how
many
and
what
type
of
errors
occur
how
easily
are
they
corrected
what
is
the
reaction
of
consumers
to
errors
to
a
failure
to
correct
them
what
can
be
learned
by
designers
of
large
management
packages
from
such
data
results
show
that
with
the
present
state
of
the
art
approximately
40
percent
of
individuals
or
households
having
average
contacts
with
different
types
of
accounts
experience
one
or
more
errors
per
year
eighty
percent
relate
to
billing
attempts
to
correct
errors
often
turned
out
to
be
difficult
and
not
always
successful
there
appears
to
be
some
conflict
between
computer
using
organizations
and
their
public
also
the
role
of
poor
man
agement
packages
including
poor
software
is
indicated
while
most
management
systems
may
be
adequate
results
of
the
survey
raise
concerns
about
the
timeliness
and
the
number
of
designs
of
very
large
linked
program
packages
as
eft
for
instance
cacm
may
1979
sterling
t
errors
systems
errors
billing
errors
management
systems
consumers
2
0
2
1
2
12
2
2
3
50
3
52
3
55
4
19
4
6
ca790503
dh
june
5
1979
3
21
pm
3142
4
3142
3142
4
3142
3179
4
3142
3178
4
3142
3182
4
3142
3183
4
3142
2583
5
3142
3076
5
3142
3142
5
3142
3142
5
3142
3142
5
3142
3178
5
3142
3076
6
3142
3140
6
3142
3142
6
3142
3179
6
3142
3180
6
3142
3181
6
3142
3182
6
3142
</TEXT>
</DOC>
<DOC>
<DOCNO>3143</DOCNO>
<TEXT>
reasoning
about
arrays
a
variety
of
concepts
laws
and
notations
are
presented
which
facilitate
reasoning
about
arrays
the
basic
concepts
include
intervals
and
their
partitions
functional
restriction
images
pointwise
extension
of
relations
ordering
single
point
variation
of
functions
various
equivalence
relations
for
array
values
and
concatenation
the
effectiveness
of
these
ideas
is
illustrated
by
informal
descriptions
of
algorithms
for
binary
search
and
merging
and
by
a
short
formal
proof
cacm
may
1979
reynolds
j
arrays
assertions
program
proving
intervals
partitions
pointwise
extension
ordering
concatenation
binary
search
merging
4
0
4
22
5
21
5
24
ca790504
dh
june
5
1979
3
33
pm
2021
4
3143
2222
4
3143
2227
4
3143
2315
4
3143
2326
4
3143
2356
4
3143
2420
4
3143
2470
4
3143
2732
4
3143
2865
4
3143
2874
4
3143
2896
4
3143
2943
4
3143
3014
4
3143
3068
4
3143
3077
4
3143
3143
4
3143
3143
4
3143
1834
5
3143
2227
5
3143
3143
5
3143
3143
5
3143
3143
5
3143
</TEXT>
</DOC>
<DOC>
<DOCNO>3144</DOCNO>
<TEXT>
a
model
for
and
discussion
of
multi
interpreter
systems
a
multi
interpreter
system
is
a
system
in
which
programs
execute
by
virtue
of
being
interpreted
by
other
programs
which
themselves
may
either
be
interpreted
i
e
nested
interpreters
or
run
directly
on
the
host
machine
the
model
reveals
the
anatomy
of
interpreters
and
how
these
differ
from
procedures
and
exhibits
links
to
protection
domains
and
multiprocessor
architectures
cacm
may
1979
manthey
m
interpreters
transfer
of
control
hierarchies
4
13
3
65
ca790505
dh
august
21
19791
14
pm
1458
4
3144
1523
4
3144
1603
4
3144
1698
4
3144
1747
4
3144
1748
4
3144
1854
4
3144
1877
4
3144
1960
4
3144
2377
4
3144
2378
4
3144
2497
4
3144
2558
4
3144
2625
4
3144
2626
4
3144
2632
4
3144
2748
4
3144
2840
4
3144
2865
4
3144
2866
4
3144
2868
4
3144
2868
4
3144
2870
4
3144
2876
4
3144
2898
4
3144
2941
4
3144
2972
4
3144
3043
4
3144
3105
4
3144
3105
4
3144
3105
4
3144
3128
4
3144
3144
4
3144
3144
4
3144
3144
4
3144
3144
4
3144
3144
4
3144
3144
4
3144
3144
4
3144
1471
5
3144
2298
5
3144
2491
5
3144
2597
5
3144
2624
5
3144
2625
5
3144
2632
5
3144
3144
5
3144
3144
5
3144
3144
5
3144
</TEXT>
</DOC>
<DOC>
<DOCNO>3145</DOCNO>
<TEXT>
an
implementation
of
structured
walk
throughs
in
teaching
cobol
programming
the
effectiveness
of
structured
walk
throughs
in
teaching
introductory
cobol
programming
was
empirically
assessed
with
a
sample
of
215
under
graduate
business
administration
majors
cobol
proficiency
was
measured
by
a
final
examination
testing
a
knowledge
of
language
rules
b
ability
to
read
and
debug
a
program
and
c
the
ability
to
write
a
program
analysis
of
multiple
covariance
was
used
to
statistically
adjust
test
scores
for
age
and
conditional
reasoning
scores
the
findings
provide
empirical
support
for
incorporating
structured
walk
throughs
into
the
programming
learning
process
more
effectively
develop
student
proficiency
in
writing
cobol
programs
cacm
june
1979
lemos
r
structured
walk
throughs
cobol
programming
teaching
of
programming
testing
programming
proficiency
3
51
1
52
2
42
4
22
ca790601
dh
august
21
1979
3
19
pm
3145
4
3145
2887
5
3145
3145
5
3145
3145
5
3145
3145
5
3145
</TEXT>
</DOC>
<DOC>
<DOCNO>3146</DOCNO>
<TEXT>
an
academic
program
providing
realistic
training
in
software
engineering
an
academic
program
at
harvey
mudd
college
called
the
clinic
program
brings
projects
from
industry
on
campus
to
be
studied
and
solved
by
student
teams
the
objective
of
the
clinic
is
to
provide
students
working
as
small
teams
under
careful
faculty
supervision
an
opportunity
to
work
on
real
world
problems
of
sufficient
magnitude
and
complexity
under
this
program
students
can
acquire
essential
skills
of
software
engineering
such
as
team
work
software
project
management
software
design
methodology
and
communication
skills
in
a
realistic
environment
sample
software
projects
undertaken
by
the
clinic
are
described
experience
so
far
has
shown
that
the
program
is
a
viable
transition
from
an
academic
to
industrial
world
cacm
june
1979
busenberg
s
tam
w
software
engineering
software
engineering
education
software
projects
student
teams
software
engineering
skills
1
52
4
0
ca790602
dh
august
21
1979
4
04
pm
3146
5
3146
3146
5
3146
3146
5
3146
</TEXT>
</DOC>
<DOC>
<DOCNO>3147</DOCNO>
<TEXT>
a
model
for
automating
file
and
program
design
in
business
application
systems
this
paper
discusses
a
model
for
finding
an
efficient
implementation
of
a
business
application
system
whose
logical
specifications
have
been
determined
in
advance
the
model
views
file
and
program
design
as
a
problem
of
systematically
coordinating
the
configurations
of
datasets
and
computations
it
uses
a
straight
forward
search
technique
to
determine
aggregations
of
computations
aggregations
of
datasets
device
organization
and
key
order
for
each
data
set
key
order
for
each
computation
and
access
method
for
each
dataset
computation
pair
although
computational
results
are
presented
for
a
sample
problem
involving
54
computations
and
49
datasets
the
main
point
of
the
paper
is
that
the
underlying
model
works
computationally
an
d
is
simple
enough
to
be
adapted
to
many
file
design
situations
cacm
june
1979
alter
s
system
design
automatic
programming
search
methods
system
configurations
design
choices
4
12
4
22
4
6
ca790603
dh
august
21
1979
4
25
pm
3147
4
3147
2718
5
3147
3147
5
3147
3147
5
3147
3147
5
3147
</TEXT>
</DOC>
<DOC>
<DOCNO>3148</DOCNO>
<TEXT>
high
level
programming
for
distributed
computing
programming
for
distributed
and
other
loosely
coupled
systems
is
a
problem
of
growing
interest
this
paper
describes
an
approach
to
distributed
computing
at
the
level
of
general
purpose
programming
languages
based
on
primitive
notions
of
module
message
and
transaction
key
the
methodology
is
shown
to
be
independent
of
particular
languages
and
machines
it
appears
to
be
useful
for
programming
a
wide
range
of
tasks
this
is
part
of
an
ambitious
program
of
development
in
advanced
programming
languages
and
relations
with
other
aspects
of
the
project
are
also
discussed
cacm
june
1979
feldman
j
distributed
computing
modules
messages
assertions
4
22
4
32
ca790604
dh
august
21
1979
4
31
pm
1957
4
3148
2151
4
3148
3031
4
3148
3103
4
3148
3105
4
3148
3128
4
3148
3148
4
3148
3148
4
3148
3148
4
3148
3148
4
3148
3148
4
3148
3150
4
3148
3150
4
3148
3155
4
3148
1860
5
3148
2817
5
3148
2865
5
3148
2939
5
3148
3073
5
3148
3148
5
3148
3148
5
3148
3148
5
3148
3150
5
3148
2060
6
3148
2704
6
3148
2842
6
3148
2939
6
3148
2940
6
3148
2941
6
3148
2943
6
3148
3073
6
3148
3148
6
3148
</TEXT>
</DOC>
<DOC>
<DOCNO>3149</DOCNO>
<TEXT>
the
cyclic
order
property
of
vertices
as
an
aid
in
scene
analysis
a
cyclic
order
property
is
defined
for
bodies
bounded
by
smooth
curved
faces
the
property
is
shown
to
be
useful
for
analyzing
pictures
of
such
bodies
particularly
when
the
line
data
extracted
from
the
pictures
are
imperfect
this
property
augments
previously
known
grammatical
rules
that
determine
the
existence
of
three
dimensional
bodies
corresponding
to
given
two
dimensional
line
structure
data
cacm
june
1979
shapira
r
freeman
h
scene
analysis
cyclic
order
artificial
intelligence
three
dimensional
reconstruction
picture
processing
computer
graphics
pattern
recognition
3
2
3
6
8
2
ca790605
dh
august
22
1979
1
36
pm
3149
5
3149
3149
5
3149
3149
5
3149
</TEXT>
</DOC>
<DOC>
<DOCNO>3150</DOCNO>
<TEXT>
beyond
programming
languages
as
computer
technology
matures
our
growing
ability
to
create
large
systems
is
leading
to
basic
changes
in
the
nature
of
programming
current
programming
language
concepts
will
not
be
adequate
for
building
and
maintaining
systems
of
the
complexity
called
for
by
the
tasks
we
attempt
just
as
high
level
languages
enabled
the
programmer
to
escape
from
the
intricacies
of
a
machine
order
code
higher
level
programming
systems
can
provide
the
means
to
understand
and
manipulate
complex
systems
and
components
in
order
to
develop
such
systems
we
need
to
shift
our
attention
away
from
the
detailed
specification
of
algorithms
towards
the
description
of
the
properties
of
the
packages
and
objects
with
which
we
build
this
paper
analyzes
some
of
the
shortcomings
of
programming
languages
as
they
now
exist
and
lays
out
some
possible
directions
for
future
research
cacm
july
1979
winograd
t
programming
programming
languages
programming
systems
systems
development
4
0
4
20
4
22
4
40
ca790701
dh
august
22
1979
2
00
pm
2155
4
3150
2294
4
3150
2558
4
3150
2837
4
3150
2842
4
3150
2945
4
3150
3031
4
3150
3077
4
3150
3105
4
3150
3148
4
3150
3148
4
3150
3150
4
3150
3150
4
3150
3150
4
3150
3150
4
3150
3150
4
3150
3150
4
3150
3150
4
3150
3150
4
3150
3150
4
3150
3155
4
3150
2060
5
3150
2704
5
3150
2842
5
3150
2939
5
3150
2941
5
3150
2943
5
3150
2940
5
3150
3073
5
3150
3148
5
3150
3150
5
3150
3150
5
3150
3150
5
3150
</TEXT>
</DOC>
<DOC>
<DOCNO>3151</DOCNO>
<TEXT>
an
optimal
real
time
algorithm
for
planar
convex
hulls
an
algorithm
is
described
for
the
construction
in
real
time
of
the
convex
hull
of
a
set
of
n
points
in
the
plane
using
an
appropriate
data
structure
the
algorithm
constructs
the
convex
hull
by
successive
updates
each
taking
time
o
log
n
thereby
achieving
a
total
processing
time
o
n
log
n
cacm
july
1979
preparata
f
computational
geometry
convex
hull
planar
set
of
points
real
time
algorithms
on
line
algorithms
4
49
5
25
5
32
ca790702
dh
august
22
1979
2
07
pm
3151
4
3151
2997
5
3151
3151
5
3151
3151
5
3151
3151
5
3151
</TEXT>
</DOC>
<DOC>
<DOCNO>3152</DOCNO>
<TEXT>
storage
reorganization
techniques
for
matrix
computation
in
a
paging
environment
in
order
to
multiply
matrices
while
minimizing
the
number
of
page
fetches
required
it
is
often
more
efficient
to
reorganize
the
data
into
submatrix
form
and
to
use
block
multiplication
rather
than
to
use
the
best
known
algorithms
which
leave
the
matrices
stored
in
row
or
column
oriented
form
an
efficient
method
for
accomplishing
this
reorganization
is
given
this
also
makes
possible
the
derivation
of
an
asymptotically
better
bound
for
multiplication
of
matrices
given
in
row
oriented
form
by
adapting
the
technique
of
strassen
to
the
reorganized
data
the
reorganization
block
multiplication
scheme
is
shown
to
be
advantageous
for
matrices
and
pages
of
realistic
size
the
strassen
adaptation
is
not
the
former
scheme
is
also
shown
to
be
advantageous
even
if
the
transpose
of
one
of
the
matrices
is
available
at
no
additional
cost
cacm
july
1979
fischer
p
probert
r
matrix
multiplication
paging
virtual
memory
data
reorganization
pagination
transpose
4
34
5
14
5
25
ca790703
dh
august
22
1979
2
29
pm
2365
4
3152
2362
4
3152
2582
4
3152
3152
4
3152
3152
4
3152
1924
5
3152
2365
5
3152
3152
5
3152
3152
5
3152
3152
5
3152
</TEXT>
</DOC>
<DOC>
<DOCNO>3153</DOCNO>
<TEXT>
the
control
of
response
times
in
multi
class
systems
by
memory
allocations
the
possibility
of
giving
different
quality
of
service
to
jobs
of
different
classes
by
regulating
their
memory
allocation
is
examined
in
the
context
of
a
paged
computer
system
two
parameterized
algorithms
which
partition
the
main
memory
between
two
classes
of
jobs
are
considered
initially
a
closed
system
consisting
of
a
process
or
and
paging
and
file
devices
with
fixed
numbers
of
jobs
is
studied
to
determine
optimal
degrees
of
multiprogramming
and
the
proportion
of
processor
time
devoted
to
each
class
applying
a
decomposition
approach
and
treating
the
closed
system
as
a
single
server
the
response
times
in
an
open
system
with
external
arrivals
are
studied
the
object
is
to
investigate
the
effect
of
the
memory
alocation
parameters
on
the
expected
response
times
under
the
two
algorithms
numerical
solutions
and
economical
lower
bounds
for
the
expected
response
times
as
functions
of
the
control
parameters
are
obtained
a
way
of
applying
the
results
to
systems
with
more
than
two
job
classes
is
indicated
cacm
july
1979
hine
j
mitrani
i
tsur
s
queueing
networks
paging
virtual
memory
performance
control
4
32
8
1
ca790704
dh
august
22
1979
3
32
pm
3016
4
3153
3070
4
3153
3153
4
3153
3153
4
3153
2741
5
3153
2891
5
3153
3153
5
3153
3153
5
3153
3153
5
3153
</TEXT>
</DOC>
<DOC>
<DOCNO>3154</DOCNO>
<TEXT>
algorithm
logic
control
an
algorithm
can
be
regarded
as
consisting
of
a
logic
component
which
specifies
the
knowledge
to
be
used
in
solving
problems
and
a
control
component
which
determines
the
problem
solving
strategies
by
means
of
which
that
knowledge
is
used
the
logic
component
determines
the
meaning
of
the
algorithm
whereas
the
control
component
only
affects
its
efficiency
the
efficiency
of
an
algorithm
can
often
by
improving
the
control
component
without
changing
the
logic
of
the
algorithm
we
argue
that
computer
programs
would
be
more
often
correct
and
more
easily
improved
and
modified
if
their
logic
and
control
aspects
were
identified
and
separated
in
the
program
text
cacm
july
1979
kowalski
r
control
language
logic
programming
nonprocedural
language
programming
methodology
program
specification
relational
data
structures
3
64
4
20
4
30
5
21
5
24
ca790705
dh
september
24
1979
5
08
pm
1989
4
3154
2060
4
3154
2155
4
3154
2179
4
3154
2406
4
3154
2698
4
3154
2710
4
3154
2715
4
3154
2716
4
3154
2717
4
3154
2718
4
3154
2765
4
3154
2817
4
3154
2888
4
3154
2901
4
3154
2921
4
3154
2957
4
3154
2959
4
3154
2965
4
3154
3087
4
3154
3154
4
3154
3154
4
3154
3154
4
3154
2046
5
3154
2110
5
3154
3133
5
3154
3154
5
3154
3154
5
3154
3154
5
3154
3154
6
3154
</TEXT>
</DOC>
<DOC>
<DOCNO>3155</DOCNO>
<TEXT>
the
paradigms
of
programming
cacm
august
1979
floyd
r
ca790801
db
january
4
1980
11
44
am
1323
4
3155
1358
4
3155
1380
4
3155
1665
4
3155
1781
4
3155
1787
4
3155
1989
4
3155
2112
4
3155
2319
4
3155
2480
4
3155
2480
4
3155
2534
4
3155
2541
4
3155
2594
4
3155
2698
4
3155
2709
4
3155
2733
4
3155
2738
4
3155
2820
4
3155
2867
4
3155
2939
4
3155
2972
4
3155
3004
4
3155
3030
4
3155
3073
4
3155
3148
4
3155
3150
4
3155
3155
4
3155
3155
4
3155
3155
4
3155
3155
4
3155
2204
5
3155
2247
5
3155
3073
5
3155
3155
5
3155
3155
5
3155
3155
5
3155
799
5
3155
</TEXT>
</DOC>
<DOC>
<DOCNO>3156</DOCNO>
<TEXT>
computing
connected
components
on
parallel
computers
we
present
a
parallel
algorithm
which
uses
n2
processors
to
find
the
connected
components
of
an
undirected
graph
with
n
vertices
in
time
o
log2n
an
o
log2n
time
bound
also
can
be
achieved
using
only
n
n
log2n
processors
the
algorithm
can
be
used
to
find
the
transitive
closure
of
a
symmetric
boolean
matrix
we
assume
that
the
processors
have
access
to
a
common
memory
simultaneous
access
to
the
same
location
is
permitted
for
fetch
instructions
but
not
for
store
instructions
cacm
august
1979
hirschberg
d
chandra
a
sarwate
d
graph
theory
parallel
processing
algorithms
transitive
closure
connected
component
5
25
5
32
6
22
ca790802
db
january
4
1980
12
18
pm
3075
4
3156
3156
4
3156
3156
4
3156
3156
4
3156
2289
5
3156
2973
5
3156
3075
5
3156
3156
5
3156
3156
5
3156
3156
5
3156
</TEXT>
</DOC>
<DOC>
<DOCNO>3157</DOCNO>
<TEXT>
proving
termination
with
multiset
orderings
a
common
tool
for
proving
the
termination
of
programs
is
the
well
founded
set
a
set
ordered
in
such
a
way
as
to
admit
no
infinite
descending
sequences
the
basic
approach
is
to
find
a
termination
function
that
maps
the
values
of
the
program
variables
into
some
well
founded
set
such
that
the
value
of
the
termination
function
is
repeatedly
reduced
throughout
the
computation
all
too
often
the
termination
functions
required
are
difficult
to
find
and
are
of
a
complexity
out
of
proportion
to
the
program
under
consideration
multisets
bags
over
a
given
well
founded
set
s
are
sets
that
admit
multiple
occurrences
of
elements
taken
from
s
the
given
ordering
on
s
induces
an
ordering
on
the
finite
multisets
over
s
this
multiset
ordering
is
shown
to
be
well
founded
the
multiset
ordering
enables
the
use
of
relatively
simple
and
intuitive
termination
functions
in
otherwise
difficult
termination
proofs
in
particular
the
multiset
ordering
is
used
to
prove
the
termination
of
production
systems
programs
defined
in
terms
of
sets
of
rewriting
rules
cacm
august
1979
dershowitz
n
manna
z
program
correctness
program
termination
program
verification
well
founded
orderings
well
founded
sets
multisets
bags
production
systems
term
rewriting
systems
tree
replacement
systems
reduction
rules
5
24
5
7
ca790803
db
january
4
1980
3
44
pm
3157
4
3157
3014
5
3157
3157
5
3157
3157
5
3157
3157
5
3157
</TEXT>
</DOC>
<DOC>
<DOCNO>3158</DOCNO>
<TEXT>
secure
personal
computing
in
an
insecure
network
a
method
for
implementing
secure
personal
computing
in
a
network
with
one
or
more
central
facilities
is
proposed
the
method
employs
a
public
key
encryption
device
and
hardware
keys
each
user
is
responsible
for
his
own
security
and
need
not
rely
on
the
security
of
the
central
facility
or
the
communication
links
a
user
can
safely
store
confidential
files
in
the
central
facility
or
transmit
confidential
data
to
other
users
on
the
network
cacm
august
1979
denning
d
personal
computing
security
privacy
networks
public
key
encryption
2
12
6
20
ca790804
db
january
14
1980
9
26
am
2840
4
3158
2869
4
3158
3021
4
3158
3128
4
3158
3158
4
3158
3158
4
3158
3158
4
3158
2436
5
3158
3038
5
3158
3111
5
3158
3158
5
3158
3158
5
3158
3158
5
3158
</TEXT>
</DOC>
<DOC>
<DOCNO>3159</DOCNO>
<TEXT>
further
remark
on
stably
updating
mean
and
standard
deviation
estimates
cacm
august
1979
nelson
l
mean
standard
deviation
5
5
5
19
ca790805
db
january
14
1980
9
38
am
2731
4
3159
3159
4
3159
3159
4
3159
3166
4
3159
3166
4
3159
3167
4
3159
3167
4
3159
2731
5
3159
2799
5
3159
3159
5
3159
3159
5
3159
3159
5
3159
3166
5
3159
1411
6
3159
2731
6
3159
2799
6
3159
3159
6
3159
3167
6
3159
</TEXT>
</DOC>
<DOC>
<DOCNO>3160</DOCNO>
<TEXT>
rejuvenating
experimental
computer
science
this
report
is
based
on
the
results
of
an
nsf
sponsored
workshop
held
in
wasington
d
on
november
2
1978
the
co
authors
of
the
report
are
gordon
bell
digital
equipment
corporation
bernard
a
galler
university
of
michigan
patricia
goldberg
ibm
corporation
john
hamblen
university
of
missouri
at
rolla
elliot
pinson
bell
telephone
laboratories
and
ivan
sutherland
california
institute
of
technology
also
participating
in
the
workshop
were
representatives
of
nsf
and
other
government
agencies
in
addition
to
the
authors
a
number
of
other
people
have
contributed
to
the
contents
of
this
report
in
preparation
for
the
original
workshop
all
doctorate
granting
computer
science
departments
in
the
nation
were
asked
for
comments
and
suggestions
on
the
problems
of
experimental
computer
science
a
version
of
the
current
report
dated
january
15
was
circulated
to
these
departments
and
to
a
number
of
industrial
and
government
groups
for
criticism
the
editors
and
authors
of
this
final
version
gratefully
acknowledge
the
contribution
of
a
large
number
of
other
people
at
all
stages
in
the
preparation
of
the
report
note
following
this
presentation
of
the
report
there
is
a
position
paper
on
the
crisis
in
experimental
computer
science
written
by
the
acm
executive
committee
cacm
september
1979
feldman
j
sutherland
w
ca790901
db
january
14
1980
10
05
am
3160
5
3160
3160
5
3160
3160
5
3160
</TEXT>
</DOC>
<DOC>
<DOCNO>3161</DOCNO>
<TEXT>
an
acm
executive
committee
position
on
the
crisis
in
experimental
computer
science
cacm
september
1979
mccracken
d
ccp
denning
p
brandin
d
ca790902
db
january
14
1980
10
19
am
3161
5
3161
3161
5
3161
3161
5
3161
</TEXT>
</DOC>
<DOC>
<DOCNO>3162</DOCNO>
<TEXT>
on
improving
the
worst
case
running
time
of
the
boyer
moore
string
matching
algorithm
it
is
shown
how
to
modify
the
boyer
moore
string
matching
algorithm
so
that
its
worst
case
running
time
is
linear
even
when
multiple
occurrences
of
the
pattern
are
present
in
the
text
cacm
september
1979
galil
z
computational
complexity
linear
time
worst
case
string
matching
periodicity
3
74
4
40
5
25
ca790903
db
january
14
1980
10
27
am
3162
4
3162
2916
5
3162
3162
5
3162
3162
5
3162
3162
5
3162
</TEXT>
</DOC>
<DOC>
<DOCNO>3163</DOCNO>
<TEXT>
an
optimal
insertion
algorithm
for
one
sided
height
balanced
binary
search
trees
an
algorithm
for
inserting
an
element
into
a
one
sided
height
balanced
oshb
binary
search
tree
is
presented
the
algorithm
operates
in
time
o
log
n
where
n
is
the
number
of
nodes
in
the
tree
this
represents
an
improvement
over
the
best
previous
ly
known
insertion
algorithms
of
hirschberg
and
kosaraju
which
require
time
o
log
2n
moreover
the
o
log
n
complexity
is
optimal
earlier
results
have
shown
that
deletion
in
such
a
structure
can
also
be
performed
in
o
log
n
time
thus
the
result
of
this
paper
gives
a
negative
answer
to
the
question
of
whether
such
trees
should
be
the
first
examples
of
their
kind
where
deletion
has
a
smaller
time
complexity
than
insertion
furthermore
it
can
now
be
concluded
that
insertion
deletion
and
retrieval
in
oshb
trees
can
be
performed
in
the
same
time
as
the
corresponding
operations
for
the
more
general
avl
trees
to
within
a
constant
factor
however
the
insertion
and
deletion
algorithms
for
oshb
trees
appear
much
more
complicated
than
the
corresponding
algorithms
for
avl
trees
cacm
september
1979
raiha
k
zweben
s
insertion
one
sided
height
balanced
trees
height
balanced
trees
binary
trees
search
trees
3
73
3
74
4
34
5
25
5
31
ca790904
db
january
14
1980
11
47
am
2839
4
3163
3009
4
3163
3042
4
3163
3042
4
3163
3065
4
3163
3065
4
3163
3096
4
3163
3096
4
3163
3096
4
3163
3163
4
3163
3163
4
3163
3163
4
3163
3163
4
3163
3163
4
3163
2839
5
3163
2889
5
3163
3009
5
3163
3065
5
3163
3096
5
3163
3163
5
3163
3163
5
3163
3163
5
3163
</TEXT>
</DOC>
<DOC>
<DOCNO>3164</DOCNO>
<TEXT>
progressive
acyclic
digraphs
a
tool
for
database
integrity
a
progressive
acyclic
digraph
pad
algorithm
accepts
are
requests
and
maintains
a
graph
in
an
acyclic
state
when
a
request
creates
a
cycle
nodes
are
detached
until
the
new
are
can
be
entered
acyclically
this
process
is
important
in
certain
areas
of
database
implementation
in
which
there
are
constraints
on
the
permissible
sequences
of
actions
two
pad
algorithms
are
presented
one
uses
a
simple
path
matrix
representation
and
the
other
uses
a
list
with
an
artificial
gradient
experiments
suggest
that
for
large
n
the
second
is
considerably
faster
though
both
are
asymptotically
o
nr
where
n
is
the
number
of
nodes
and
r
is
the
expected
number
of
nodes
reachable
along
paths
from
any
given
node
cacm
september
1979
hansen
w
list
processing
data
structures
topological
sort
acyclic
digraph
database
integrity
network
deadlock
4
34
5
32
4
33
ca790905
db
january
14
1980
11
56
am
3164
4
3164
1712
5
3164
3164
5
3164
3164
5
3164
3164
5
3164
</TEXT>
</DOC>
<DOC>
<DOCNO>3165</DOCNO>
<TEXT>
approximation
of
polygonal
maps
by
cellular
maps
the
approximation
of
polygonal
thematic
maps
by
cellular
maps
an
important
operation
in
geographical
data
processing
is
analyzed
the
data
organization
used
for
representing
the
polygonal
maps
is
a
widely
used
segment
based
data
structure
where
class
labels
identify
the
regions
bordering
each
segment
on
either
side
the
approximation
algorithm
presented
operates
on
such
an
organization
eliminating
the
need
for
the
recognition
of
region
boundaries
each
segment
is
examined
only
once
the
versatility
of
the
new
organization
is
further
illustrated
by
the
outline
of
algorithms
for
area
computation
and
point
inclusion
the
algorithm
is
applied
to
a
set
of
soil
maps
converted
to
computer
readable
form
by
means
of
a
coordinate
digitizer
cacm
september
1979
nagy
g
wagle
s
polygon
maps
cellularization
gridding
geographic
data
structures
computational
geometry
computer
cartography
automated
cartography
3
14
4
34
8
2
ca790906
db
january
14
1980
12
04
pm
1630
4
3165
2547
4
3165
2987
4
3165
3165
4
3165
3165
4
3165
1326
5
3165
2987
5
3165
3165
5
3165
3165
5
3165
3165
5
3165
</TEXT>
</DOC>
<DOC>
<DOCNO>3166</DOCNO>
<TEXT>
computing
standard
deviations
accuracy
four
algorithms
for
the
numerical
computation
of
the
standard
deviation
of
unweighted
sampled
data
are
analyzed
two
of
the
algorithms
are
well
known
in
the
statistical
and
computational
literature
the
other
two
are
new
algorithms
specifically
intended
for
automatic
computation
our
discussion
is
expository
with
emphasis
on
reaching
a
suitable
definition
of
accuracy
each
of
the
four
algorithms
is
analyzed
for
the
conditions
under
which
it
will
be
accurate
we
conclude
that
all
four
algorithms
will
provide
accurate
answers
for
many
problems
but
two
of
the
algorithms
one
new
one
old
are
substantially
more
accurate
on
difficult
problems
than
are
the
other
two
cacm
september
1979
chan
t
lewis
j
mean
standard
deviation
least
squares
updating
estimates
rounding
error
analysis
condition
number
5
5
5
11
5
19
ca790907
db
january
16
1980
4
23
pm
1619
4
3166
2731
4
3166
3159
4
3166
3159
4
3166
3166
4
3166
3166
4
3166
3166
4
3166
3166
4
3166
3166
4
3166
3167
4
3166
3167
4
3166
1411
5
3166
2731
5
3166
2799
5
3166
3159
5
3166
3166
5
3166
3166
5
3166
3166
5
3166
3167
5
3166
2731
6
3166
2799
6
3166
3166
6
3166
</TEXT>
</DOC>
<DOC>
<DOCNO>3167</DOCNO>
<TEXT>
updating
mean
and
variance
estimates
an
improved
method
a
method
of
improved
efficiency
is
given
for
updating
the
mean
and
variance
of
weighted
sampled
data
when
an
additional
data
value
is
included
in
the
set
evidence
is
presented
that
the
method
is
stable
and
at
least
as
accurate
as
the
best
existing
updating
method
cacm
september
1979
west
d
mean
standard
deviation
variance
updating
estimates
removing
data
5
5
5
19
ca790908
db
january
16
1980
4
47
pm
2731
4
3167
3159
4
3167
3159
4
3167
3166
4
3167
3166
4
3167
3167
4
3167
3167
4
3167
3167
4
3167
2731
5
3167
2799
5
3167
3166
5
3167
3167
5
3167
3167
5
3167
3167
5
3167
1411
6
3167
2731
6
3167
2799
6
3167
3159
6
3167
3167
6
3167
</TEXT>
</DOC>
<DOC>
<DOCNO>3168</DOCNO>
<TEXT>
comment
on
an
optimal
evaluation
of
boolean
expressions
in
an
online
query
system
cacm
october
1979
laird
p
query
boolean
expression
information
retrieval
file
organization
3
53
70
3
73
3
74
ca791001
db
january
16
1980
4
50
pm
3168
4
3168
3168
4
3168
3169
4
3168
2965
5
3168
3002
5
3168
3168
5
3168
3168
5
3168
3168
5
3168
</TEXT>
</DOC>
<DOC>
<DOCNO>3169</DOCNO>
<TEXT>
note
on
an
optimal
evaluation
of
boolean
expressions
in
an
online
query
system
cacm
october
1979
gudes
e
hoffman
a
query
boolean
expression
optimal
evaluation
information
retrieval
3
50
3
70
3
74
ca791002
db
january
16
1980
4
52
pm
3168
4
3169
3169
4
3169
2965
5
3169
3169
5
3169
3169
5
3169
3169
5
3169
</TEXT>
</DOC>
<DOC>
<DOCNO>3170</DOCNO>
<TEXT>
on
the
proof
of
correctness
of
a
calendar
program
a
formal
specification
is
given
for
a
simple
calendar
program
and
the
derivation
and
proof
of
correctness
of
the
program
are
sketched
the
specification
is
easy
to
understand
and
its
correctness
is
manifest
to
humans
cacm
october
1979
lamport
l
program
specification
program
verification
inductive
assertions
5
24
ca791003
db
january
16
1980
5
02
pm
3170
4
3170
3170
4
3170
3055
5
3170
3104
5
3170
3170
5
3170
3170
5
3170
3170
5
3170
</TEXT>
</DOC>
<DOC>
<DOCNO>3171</DOCNO>
<TEXT>
line
numbers
made
cheap
a
technique
is
described
for
run
time
line
number
administration
to
be
used
for
implementations
of
high
level
languages
under
suitable
circumstances
this
method
requires
absolutely
no
overhead
in
either
time
or
space
during
execution
of
the
program
cacm
october
1979
klint
p
line
number
administration
diagnostic
messages
abstract
machine
code
4
12
4
13
4
20
4
42
ca791004
db
january
17
1980
9
57
am
3171
5
3171
3171
5
3171
3171
5
3171
</TEXT>
</DOC>
<DOC>
<DOCNO>3172</DOCNO>
<TEXT>
an
algorithm
for
planning
collision
free
paths
among
polyhedral
obstacles
this
paper
describes
a
collision
avoidance
algorithm
for
planning
a
safe
path
for
a
polyhedral
object
moving
among
known
polyhedral
objects
the
algorithm
transforms
the
obstacles
so
that
they
represent
the
locus
of
forbidden
positions
for
an
arbitrary
reference
point
on
the
moving
object
a
trajectory
of
this
reference
point
which
avoids
all
forbidden
regions
is
free
of
collisions
trajectories
are
found
by
searching
a
network
which
indicates
for
each
vertex
in
the
transformed
obstacles
which
other
vertices
can
be
reached
safely
cacm
october
1979
lozano
perez
t
wesley
m
path
finding
collision
free
paths
polyhedral
objects
polyhedral
obstacles
graph
searching
growing
objects
3
15
3
64
3
66
8
1
ca791005
db
january
17
1980
10
13
am
3172
4
3172
3116
5
3172
3172
5
3172
3172
5
3172
3172
5
3172
</TEXT>
</DOC>
<DOC>
<DOCNO>3173</DOCNO>
<TEXT>
a
psychology
of
learning
basic
this
paper
addresses
the
question
what
does
a
person
know
following
learning
of
basic
programming
several
underlying
conceptual
structures
are
identified
1
a
transaction
is
an
event
that
occurs
in
the
computer
and
involves
some
operation
on
some
object
at
some
location
2
a
prestatement
is
a
set
of
transactions
corresponding
to
a
line
of
code
3
chunks
are
frequently
occurring
configurations
of
prestatements
corresponding
to
several
lines
of
code
cacm
november
1979
mayer
r
basic
learning
instruction
1
50
3
36
4
22
ca791101
db
january
17
1980
10
38
am
3173
5
3173
3173
5
3173
3173
5
3173
</TEXT>
</DOC>
<DOC>
<DOCNO>3174</DOCNO>
<TEXT>
password
security
a
case
history
this
paper
describes
the
history
of
the
design
of
the
password
security
scheme
on
a
remotely
accessed
time
sharing
system
the
present
design
was
the
result
of
countering
observed
attempts
to
penetrate
the
system
the
result
is
a
compromise
between
extreme
security
and
ease
of
use
cacm
november
1979
morris
r
thompson
k
operating
systems
passwords
computer
security
2
41
4
35
ca791102
db
january
18
1980
10
03
am
2626
4
3174
2786
4
3174
2840
4
3174
2919
4
3174
3017
4
3174
3110
4
3174
3174
4
3174
2629
5
3174
3174
5
3174
3174
5
3174
3174
5
3174
</TEXT>
</DOC>
<DOC>
<DOCNO>3175</DOCNO>
<TEXT>
breaking
substitution
ciphers
using
a
relaxation
algorithm
substitution
ciphers
are
codes
in
which
each
letter
of
the
alphabet
has
one
fixed
substitute
and
the
word
divisions
do
not
change
in
this
paper
the
problem
of
breaking
substitution
ciphers
is
represented
as
a
probabilistic
labeling
problem
every
code
letter
is
assigned
probabilities
of
representing
plain
text
letters
these
probabilities
are
updated
in
parallel
for
all
code
letters
using
joint
letter
probabilities
iterating
the
updating
scheme
results
in
improved
estimates
that
finally
lead
to
breaking
the
cipher
the
method
is
applies
successfully
to
two
examples
cacm
november
1979
peleg
s
rosenfeld
a
cryptography
substitution
ciphers
probabilistic
classification
relaxation
3
42
3
63
ca791103
db
january
23
1980
11
15
am
3175
5
3175
3175
5
3175
3175
5
3175
</TEXT>
</DOC>
<DOC>
<DOCNO>3176</DOCNO>
<TEXT>
storing
a
sparse
table
the
problem
of
storing
and
searching
large
sparse
tables
is
ubiquitous
in
computer
science
the
standard
technique
for
storing
such
tables
is
hashing
but
hashing
has
poor
worst
case
performance
we
propose
a
good
worst
case
method
for
storing
a
static
table
of
n
entries
each
an
integer
between
0
and
n
1
the
method
requires
0
n
w
words
of
storage
and
allows
o
logn
n
access
time
although
our
method
is
a
little
complicated
to
use
in
practice
our
analysis
shows
why
a
simpler
algorithm
used
for
compressing
lr
parsing
tables
works
so
well
cacm
november
1979
tarjan
r
yao
a
gaussian
elimination
parsing
searching
sparse
matrix
table
compression
table
lookup
3
74
4
12
4
34
5
25
ca791104
db
january
23
1980
11
24
am
3041
4
3176
3126
4
3176
3176
4
3176
2905
5
3176
3176
5
3176
3176
5
3176
3176
5
3176
</TEXT>
</DOC>
<DOC>
<DOCNO>3177</DOCNO>
<TEXT>
how
to
share
a
secret
in
this
paper
we
show
how
to
divide
data
d
into
n
pieces
in
such
a
way
that
d
is
easily
reconstructable
from
any
k
pieces
but
even
complete
knowledge
of
k
1
pieces
reveals
olutely
no
information
about
d
this
technique
enables
the
construction
of
robust
key
management
schemes
for
cryptographic
systems
that
can
function
securely
and
reliably
even
when
misfortunes
destroy
half
the
pieces
and
security
breaches
expose
all
but
one
of
the
remaining
pieces
cacm
november
1979
shamir
a
cryptography
key
management
interpolation
5
39
5
6
ca791105
db
january
23
1980
11
48
am
3038
4
3177
3111
4
3177
3177
4
3177
3021
5
3177
3177
5
3177
3177
5
3177
3177
5
3177
</TEXT>
</DOC>
<DOC>
<DOCNO>3178</DOCNO>
<TEXT>
introduction
to
the
eft
symposium
cacm
december
1979
kling
r
ca791201
db
february
21
1980
5
02
pm
3142
4
3178
3179
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3178
4
3178
3182
4
3178
3183
4
3178
3076
5
3178
3140
5
3178
3142
5
3178
3179
5
3178
3178
5
3178
3178
5
3178
3178
5
3178
3182
5
3178
3180
5
3178
3181
5
3178
</TEXT>
</DOC>
<DOC>
<DOCNO>3179</DOCNO>
<TEXT>
overview
of
the
eft
symposium
it
is
increasingly
recognized
that
large
scale
technologies
such
as
eft
have
the
potential
for
aiding
in
the
solution
of
current
societal
problems
yet
these
technologies
also
generate
problems
this
symposium
presents
selected
papers
from
a
conference
that
sought
to
discover
what
is
currently
known
about
eft
impacts
in
society
and
what
research
is
needed
in
the
future
cacm
december
1979
kraemer
k
colton
k
eft
research
agenda
conference
results
public
policy
2
11
3
52
3
53
3
80
ca791202
db
february
25
1980
11
03
am
2756
4
3179
3076
4
3179
3142
4
3179
3179
4
3179
3179
4
3179
3179
4
3179
3178
4
3179
3182
4
3179
3183
4
3179
2572
5
3179
2607
5
3179
3076
5
3179
3179
5
3179
3179
5
3179
3179
5
3179
3178
5
3179
3076
6
3179
3140
6
3179
3142
6
3179
3179
6
3179
3180
6
3179
3181
6
3179
3182
6
3179
</TEXT>
</DOC>
<DOC>
<DOCNO>3180</DOCNO>
<TEXT>
costs
of
the
current
u
payments
system
neither
the
banking
industry
nor
public
policy
makers
have
good
information
on
the
comparative
costs
of
alternative
payment
systems
such
as
cash
checks
credit
cards
and
eft
transactions
as
a
result
eft
systems
and
services
are
likely
to
be
implemented
without
a
valid
assessment
of
whether
they
are
cost
justified
lst
alone
justified
in
terms
of
other
criteria
cacm
december
1979
lipis
a
eft
payment
system
costs
payment
system
volumes
3
52
ca791203
db
february
25
1980
11
09
am
3178
5
3180
3180
5
3180
3180
5
3180
3180
5
3180
3076
6
3180
3140
6
3180
3142
6
3180
3179
6
3180
3180
6
3180
3181
6
3180
3182
6
3180
</TEXT>
</DOC>
<DOC>
<DOCNO>3181</DOCNO>
<TEXT>
public
protection
and
education
with
eft
research
has
revealed
the
existence
of
widespread
misinformation
and
lack
of
knowledge
about
eft
among
business
and
government
as
well
as
consumers
as
a
result
any
effort
to
stimulate
meaningful
public
participation
in
decisions
on
the
introduction
of
eft
systems
will
require
a
coordinated
educational
effort
of
considerable
scale
in
addition
research
has
revealed
shortcomings
in
the
present
system
for
defining
responsibilities
liabilities
and
avenues
of
recourse
this
article
presents
several
possible
alternatives
for
improving
the
current
system
but
ongoing
research
is
also
needed
to
assure
that
actions
taken
will
be
responsive
to
the
changing
environment
and
consumer
needs
cacm
december
1979
long
r
electronic
funds
transfer
systems
consumer
education
security
and
fraud
privacy
system
reliability
eft
ombudsman
2
12
ca791204
db
february
25
1980
11
33
am
3178
5
3181
3181
5
3181
3181
5
3181
3181
5
3181
3076
6
3181
3140
6
3181
3142
6
3181
3179
6
3181
3180
6
3181
3181
6
3181
3182
6
3181
</TEXT>
</DOC>
<DOC>
<DOCNO>3182</DOCNO>
<TEXT>
vulnerabilities
of
efts
to
intentionally
caused
losses
the
hypothesis
that
consumers
are
provided
greater
accuracy
and
freedom
from
error
and
fraud
with
electronic
funds
transfer
systems
efts
is
discussed
in
light
of
the
technical
capabilities
and
potential
of
the
computer
to
protect
against
both
accidentally
and
intentionally
caused
losses
although
the
nomenclature
for
business
crimes
remains
the
same
as
for
manual
depository
and
other
financial
service
systems
for
example
fraud
theft
embezzlement
the
characteristics
of
the
crimes
are
new
the
changes
resulting
from
the
accelerating
use
of
efts
and
its
continual
technological
advances
broaden
the
scope
of
security
issues
to
be
examined
factors
such
as
backup
requirements
regulatory
and
legislative
actions
and
economics
give
rise
to
the
urgency
for
immediate
research
into
solutions
for
emerging
efts
related
vulnerabilities
cacm
december
1979
parker
d
efts
computer
abuse
crime
security
errors
losses
positions
of
trust
legislation
2
11
2
3
3
52
3
80
ca791205
db
february
25
1980
1
56
pm
3142
4
3182
3179
4
3182
3178
4
3182
3182
4
3182
3183
4
3182
3076
5
3182
3178
5
3182
3182
5
3182
3182
5
3182
3182
5
3182
3076
6
3182
3140
6
3182
3142
6
3182
3179
6
3182
3180
6
3182
3181
6
3182
3182
6
3182
</TEXT>
</DOC>
<DOC>
<DOCNO>3183</DOCNO>
<TEXT>
policy
values
and
eft
research
anatomy
of
a
research
agenda
there
is
an
emerging
recognition
that
eft
systems
have
the
potential
to
vastly
alter
the
payment
and
fund
transfer
system
in
american
society
a
number
of
forces
and
actors
are
involved
in
this
evolution
and
the
values
vary
significantly
depending
on
individual
and
institutional
perspectives
these
value
conflicts
are
highlighted
in
a
six
part
research
agenda
technological
issues
in
eft
eft
impacts
on
people
economic
impact
of
eft
regulation
and
control
of
eft
and
evaluating
and
monitoring
eft
systems
cacm
december
1979
kraemer
k
colton
k
efts
research
agenda
value
conflicts
impacts
on
people
economic
impacts
regulation
and
control
monitoring
eft
2
11
2
3
3
52
3
53
3
80
ca791206
db
february
25
1980
2
10
pm
3142
4
3183
3179
4
3183
3178
4
3183
3182
4
3183
3183
4
3183
3076
5
3183
3183
5
3183
3183
5
3183
3183
5
3183
</TEXT>
</DOC>
<DOC>
<DOCNO>3184</DOCNO>
<TEXT>
revised
report
on
the
algorithmic
language
algol
60
the
report
gives
a
complete
defining
description
of
the
international
algorithmic
language
algol
60
this
is
a
language
suitable
for
expressing
a
large
class
of
numerical
processes
in
a
form
sufficiently
concise
for
direct
automatic
translation
into
the
language
of
programmed
automatic
computers
cacm
january
1963
nuar
p
ca630117
es
march
17
1982
10
10
am
1781
4
3184
1828
4
3184
1854
4
3184
1877
4
3184
1960
4
3184
2150
4
3184
2150
4
3184
2228
4
3184
2256
4
3184
2317
4
3184
2317
4
3184
2319
4
3184
2377
4
3184
2342
4
3184
2342
4
3184
2376
4
3184
2376
4
3184
2379
4
3184
2424
4
3184
2482
4
3184
2618
4
3184
2618
4
3184
2632
4
3184
2704
4
3184
2723
4
3184
2738
4
3184
2740
4
3184
2741
4
3184
2867
4
3184
3184
4
3184
3184
4
3184
3184
4
3184
949
5
3184
989
5
3184
1086
5
3184
1132
5
3184
1198
5
3184
1234
5
3184
1263
5
3184
1265
5
3184
1270
5
3184
1323
5
3184
1358
5
3184
1379
5
3184
1380
5
3184
1453
5
3184
1464
5
3184
1484
5
3184
1491
5
3184
1498
5
3184
1613
5
3184
1614
5
3184
1749
5
3184
1781
5
3184
1825
5
3184
1860
5
3184
2083
5
3184
2178
5
3184
2179
5
3184
2252
5
3184
2325
5
3184
2341
5
3184
2546
5
3184
2645
5
3184
2652
5
3184
2684
5
3184
2842
5
3184
2929
5
3184
2934
5
3184
557
5
3184
3069
5
3184
3184
5
3184
3184
5
3184
3184
5
3184
669
5
3184
679
5
3184
691
5
3184
761
5
3184
1
6
3184
823
6
3184
123
6
3184
145
6
3184
196
6
3184
196
6
3184
196
6
3184
196
6
3184
196
6
3184
919
6
3184
944
6
3184
947
6
3184
987
6
3184
988
6
3184
989
6
3184
989
6
3184
990
6
3184
990
6
3184
1007
6
3184
1046
6
3184
1086
6
3184
1131
6
3184
1134
6
3184
1137
6
3184
1139
6
3184
1140
6
3184
1140
6
3184
1149
6
3184
1198
6
3184
1215
6
3184
1215
6
3184
1223
6
3184
1263
6
3184
1265
6
3184
1303
6
3184
1303
6
3184
1303
6
3184
1303
6
3184
1323
6
3184
1323
6
3184
1323
6
3184
1358
6
3184
1358
6
3184
1366
6
3184
1366
6
3184
1389
6
3184
1421
6
3184
1421
6
3184
1421
6
3184
1453
6
3184
1460
6
3184
1460
6
3184
1462
6
3184
1463
6
3184
1467
6
3184
1468
6
3184
1468
6
3184
1466
6
3184
1477
6
3184
1477
6
3184
1477
6
3184
1477
6
3184
1491
6
3184
1491
6
3184
1491
6
3184
1496
6
3184
1496
6
3184
1496
6
3184
1531
6
3184
1535
6
3184
1565
6
3184
1601
6
3184
1602
6
3184
1613
6
3184
1614
6
3184
1626
6
3184
1626
6
3184
1641
6
3184
1641
6
3184
1781
6
3184
1785
6
3184
1786
6
3184
1787
6
3184
1788
6
3184
205
6
3184
205
6
3184
1825
6
3184
210
6
3184
210
6
3184
224
6
3184
249
6
3184
267
6
3184
288
6
3184
288
6
3184
316
6
3184
321
6
3184
378
6
3184
381
6
3184
385
6
3184
398
6
3184
2015
6
3184
2059
6
3184
2060
6
3184
2110
6
3184
11
6
3184
2126
6
3184
2127
6
3184
2148
6
3184
2155
6
3184
2192
6
3184
21
6
3184
400
6
3184
402
6
3184
404
6
3184
404
6
3184
404
6
3184
404
6
3184
404
6
3184
407
6
3184
410
6
3184
410
6
3184
437
6
3184
463
6
3184
464
6
3184
464
6
3184
483
6
3184
483
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3184
6
3184
3188
6
3184
584
6
3184
584
6
3184
600
6
3184
631
6
3184
635
6
3184
669
6
3184
680
6
3184
691
6
3184
729
6
3184
729
6
3184
729
6
3184
731
6
3184
761
6
3184
763
6
3184
799
6
3184
799
6
3184
799
6
3184
799
6
3184
</TEXT>
</DOC>
<DOC>
<DOCNO>3185</DOCNO>
<TEXT>
the
humble
programmer
we
shall
do
a
much
better
programming
job
provided
that
we
approach
the
task
with
a
full
appreciation
if
its
tremendous
difficulty
provided
that
we
stick
to
modest
and
elegant
programming
languages
provided
that
we
respect
the
intrinsic
limitations
of
the
human
mind
and
approach
the
task
as
very
humble
programmers
cacm
october
1972
dijkstra
e
w
ca721010
es
march
18
1982
10
00
am
249
4
3185
1139
4
3185
438
4
3185
3185
4
3185
3185
4
3185
303
5
3185
2705
5
3185
438
5
3185
3101
5
3185
3185
5
3185
3185
5
3185
3185
5
3185
1908
6
3185
2138
6
3185
2193
6
3185
2438
6
3185
3185
6
3185
3185
6
3185
</TEXT>
</DOC>
<DOC>
<DOCNO>3186</DOCNO>
<TEXT>
go
to
statement
considerd
harmful
cacm
march
1968
dijkstra
e
w
go
to
statement
jump
instruction
branch
instruction
conditional
clause
repetitive
clause
program
intelligibility
program
sequencing
4
22
5
23
5
24
ca680303
es
march
17
1982
10
10
am
2193
5
3186
2326
5
3186
2477
5
3186
2541
5
3186
2594
5
3186
3004
5
3186
3186
5
3186
3186
5
3186
3186
5
3186
1303
6
3186
1323
6
3186
1425
6
3186
1771
6
3186
1834
6
3186
2016
6
3186
2155
6
3186
2192
6
3186
2204
6
3186
2247
6
3186
2356
6
3186
2456
6
3186
3186
6
3186
3186
6
3186
3186
6
3186
3186
6
3186
3186
6
3186
3186
6
3186
799
6
3186
</TEXT>
</DOC>
<DOC>
<DOCNO>3187</DOCNO>
<TEXT>
certification
of
algorithm
271
quickersort
quickersort
compiled
and
run
without
correction
through
the
aldep
translator
for
the
cdc
1604a
comparison
of
average
sorting
items
with
other
recently
published
algorithms
demonstrates
quicker
superior
performance
cacm
may
1966
blair
c
ca660516
es
march
17
1982
10
10
am
1919
5
3187
2679
5
3187
3187
5
3187
3187
5
3187
3187
5
3187
864
6
3187
970
6
3187
1175
6
3187
1175
6
3187
1190
6
3187
1228
6
3187
1969
6
3187
1997
6
3187
308
6
3187
308
6
3187
309
6
3187
2042
6
3187
74
6
3187
3187
6
3187
3187
6
3187
507
6
3187
716
6
3187
783
6
3187
</TEXT>
</DOC>
<DOC>
<DOCNO>3188</DOCNO>
<TEXT>
semiotics
and
programming
languages
i
have
based
my
paper
on
semiotics
and
its
three
dimension
i
should
insert
at
this
point
that
language
has
many
aspects
and
that
pragmatics
semantics
and
syntactics
do
not
necessary
cover
all
of
them
one
can
however
project
most
aspects
into
the
three
semiotic
dimension
and
there
seems
to
be
a
strong
tendency
to
do
so
today
cacm
march
1966
zemanek
h
ca660319
es
march
17
1982
10
10
am
2087
4
3188
2189
4
3188
3188
4
3188
3188
4
3188
1594
5
3188
1781
5
3188
3188
5
3188
3188
5
3188
3188
5
3188
612
5
3188
123
6
3188
196
6
3188
919
6
3188
990
6
3188
1007
6
3188
1046
6
3188
1131
6
3188
1139
6
3188
1140
6
3188
1149
6
3188
1198
6
3188
1215
6
3188
1223
6
3188
1265
6
3188
1303
6
3188
1323
6
3188
1358
6
3188
1366
6
3188
1421
6
3188
1460
6
3188
1462
6
3188
1463
6
3188
1467
6
3188
1468
6
3188
1477
6
3188
1491
6
3188
1496
6
3188
1531
6
3188
1535
6
3188
1565
6
3188
1601
6
3188
1602
6
3188
1613
6
3188
1614
6
3188
1626
6
3188
1641
6
3188
1787
6
3188
1788
6
3188
205
6
3188
224
6
3188
249
6
3188
288
6
3188
316
6
3188
381
6
3188
398
6
3188
11
6
3188
404
6
3188
410
6
3188
463
6
3188
464
6
3188
483
6
3188
3184
6
3188
3188
6
3188
584
6
3188
600
6
3188
680
6
3188
691
6
3188
763
6
3188
799
6
3188
</TEXT>
</DOC>
<DOC>
<DOCNO>3189</DOCNO>
<TEXT>
an
algebraic
compiler
for
the
fortran
assembly
program
an
algebraic
compiler
has
been
written
which
may
be
added
to
the
fortran
assembly
program
this
compiler
will
expand
all
algebraic
statements
with
the
following
operations
addition
subtraction
multiplication
and
division
it
will
compile
multi
level
expressions
in
floating
point
arithmetic
this
is
easily
be
revised
to
fixed
point
cacm
november
1962
stiegler
a
d
ca621124
es
march
17
1982
10
10
am
1788
5
3189
3189
5
3189
3189
5
3189
3189
5
3189
1006
6
3189
1007
6
3189
205
6
3189
3189
6
3189
</TEXT>
</DOC>
<DOC>
<DOCNO>3190</DOCNO>
<TEXT>
correction
to
economies
of
scale
and
the
ibm
system
360
on
page
439
a
typical
instruction
mix
id
discussed
and
the
timing
computed
as
outlined
in
that
page
through
an
undetected
programming
error
the
times
and
the
resulting
regression
equation
are
slightly
in
error
cacm
february
1967
solomon
m
ca670214
es
march
17
1982
10
10
am
2387
5
3190
3190
5
3190
3190
5
3190
3190
5
3190
1417
6
3190
3190
6
3190
</TEXT>
</DOC>
<DOC>
<DOCNO>3191</DOCNO>
<TEXT>
generating
permutations
by
nested
cycling
the
purpose
of
this
letter
is
two
fold
first
to
give
due
credit
to
the
tompkins
paige
algorithm
and
second
to
clarify
a
comment
by
hill
cr
review
13891
on
programs
for
permutations
cacm
june
1968
langdon
glen
g
permutations
5
39
ca680617
es
march
18
1982
10
00
am
2189
5
3191
3191
5
3191
3191
5
3191
3191
5
3191
1594
6
3191
2087
6
3191
3191
6
3191
521
6
3191
</TEXT>
</DOC>
<DOC>
<DOCNO>3192</DOCNO>
<TEXT>
the
lincoln
keyboard
a
typewriter
keyboard
designed
for
computers
input
flexibility
a
new
typewriter
keyboard
for
direct
and
punched
paper
tape
computer
input
will
replace
the
usual
commercial
keyboard
with
88
characters
chosen
for
the
convenience
of
programmers
the
lincoln
keyboard
is
expected
to
facilitate
the
programming
of
algorithmic
process
and
should
allow
considerable
flexibility
in
assembly
and
utility
routines
cacm
july
1958
vanderburgh
a
ca580702
es
march
17
1982
10
10
am
1083
5
3192
3192
5
3192
3192
5
3192
3192
5
3192
407
6
3192
3192
6
3192
3193
6
3192
730
6
3192
</TEXT>
</DOC>
<DOC>
<DOCNO>3193</DOCNO>
<TEXT>
work
is
in
progress
on
a
formula
coding
technique
allowing
direct
entry
into
the
computer
of
formulae
typed
on
an
84
character
flexo
writer
this
flexo
writer
will
be
modified
for
automatic
half
line
advance
and
retract
without
carriage
return
to
permit
completely
general
sub
and
superscripting
cacm
july
1958
ca580703
es
march
17
1982
10
10
am
3193
4
3193
796
4
3193
1083
5
3193
491
5
3193
3193
5
3193
3193
5
3193
3193
5
3193
407
6
3193
3192
6
3193
3193
6
3193
730
6
3193
</TEXT>
</DOC>
<DOC>
<DOCNO>3194</DOCNO>
<TEXT>
a
non
heuristic
program
for
proving
elementary
logical
theorems
the
paper
discusses
problems
involved
in
designing
a
device
capable
of
distinguishing
among
speech
events
that
are
normally
recognized
as
different
by
native
speakers
of
a
particular
language
parallels
between
these
problems
and
those
of
chemical
analysis
are
pointed
out
cacm
january
1959
dunham
b
fridshal
r
sward
g
l
ca590102
es
march
17
1982
10
10
am
204
5
3194
3194
5
3194
3194
5
3194
3194
5
3194
3194
6
3194
</TEXT>
</DOC>
<DOC>
<DOCNO>3195</DOCNO>
<TEXT>
reiteration
of
acm
policy
toward
standardization
the
periodic
change
in
officers
chairman
and
editors
which
usually
follows
as
election
occasionally
results
in
a
change
in
policy
in
the
case
of
this
department
there
is
no
radical
change
but
this
is
nevertheless
the
proper
time
to
reiterate
ans
underline
acm
policy
with
respect
to
standardization
in
the
computer
area
cacm
november
1962
gorn
s
ca621123
es
march
17
1982
10
10
am
3195
5
3195
3195
5
3195
3195
5
3195
690
5
3195
890
6
3195
929
6
3195
3195
6
3195
</TEXT>
</DOC>
<DOC>
<DOCNO>3196</DOCNO>
<TEXT>
the
reactive
typewriter
program
84
character
keyboard
including
alphabetical
upper
and
lower
case
for
good
readability
if
the
machine
is
restricted
to
only
a
single
case
the
lower
case
is
preferred
the
reactive
typewriter
should
be
portable
the
reactive
typewriter
should
operate
over
any
commercially
used
dial
type
telephone
voice
or
telegraph
telex
line
or
over
leased
nondial
telegraph
lines
interchangeably
cacm
january
1963
mooers
c
n
ca630118
es
march
17
1982
10
10
am
1071
5
3196
3196
5
3196
3196
5
3196
3196
5
3196
3196
6
3196
</TEXT>
</DOC>
<DOC>
<DOCNO>3197</DOCNO>
<TEXT>
structures
of
standards
processing
organizations
in
the
computer
area
in
line
with
the
acm
policy
statement
comm
acm
5
nov
1962
547
549
the
following
organizational
descriptions
have
been
provided
in
order
to
describe
standardization
activities
pertinent
to
computers
and
information
processing
cacm
june
1966
gorn
s
bemer
r
w
green
j
ca630626
es
march
17
1982
10
10
am
3197
5
3197
3197
5
3197
3197
5
3197
689
5
3197
217
6
3197
323
6
3197
3197
6
3197
</TEXT>
</DOC>
<DOC>
<DOCNO>3198</DOCNO>
<TEXT>
microprogramming
emulators
and
programming
languages
the
problem
we
have
been
concerned
with
is
that
of
converting
language
to
action
or
intellectual
energy
to
mechanical
energy
the
medium
that
we
use
for
this
purpose
is
language
and
therefore
we
are
preoccupied
with
the
subject
of
language
in
the
areas
of
language
investigation
we
have
concentrated
first
on
formalizing
syntax
and
then
on
semantics
cacm
march
1966
greem
j
ca660318
es
march
17
1982
10
10
am
1542
5
3198
3198
5
3198
3198
5
3198
3198
5
3198
1491
6
3198
3198
6
3198
</TEXT>
</DOC>
<DOC>
<DOCNO>3199</DOCNO>
<TEXT>
algem
an
algebraic
manipulator
algem
is
a
package
of
subprograms
written
in
slip
fortran
iv
and
map
7094
ii
to
manipulate
algebraic
expressions
algem
basic
algebraic
operations
are
additions
subtractions
multiplications
division
and
exponentiation
it
is
capable
of
handling
any
number
of
single
letter
variables
variable
exponents
and
of
finding
the
highest
common
factor
of
two
polynomials
also
included
are
such
functions
as
substitution
differentiation
determining
coefficients
of
specified
variables
solving
a
linear
equation
basic
i
o
routines
plus
other
special
purpose
and
arithmetic
routines
the
major
innovation
of
algem
over
other
manipulators
is
the
assignment
of
types
to
all
expressions
and
the
use
of
a
standard
ordering
procedure
cacm
august
1966
gotlieb
c
c
novak
r
j
ca660813
es
march
17
1982
10
10
am
1396
5
3199
3199
5
3199
3199
5
3199
3199
5
3199
964
6
3199
1028
6
3199
1029
6
3199
1083
6
3199
1132
6
3199
1214
6
3199
1278
6
3199
1334
6
3199
1365
6
3199
1386
6
3199
1387
6
3199
1388
6
3199
1392
6
3199
1393
6
3199
1394
6
3199
1395
6
3199
1396
6
3199
1397
6
3199
1496
6
3199
284
6
3199
407
6
3199
3199
6
3199
3200
6
3199
3201
6
3199
3202
6
3199
3203
6
3199
3204
6
3199
561
6
3199
730
6
3199
</TEXT>
</DOC>
<DOC>
<DOCNO>3200</DOCNO>
<TEXT>
a
formac
program
for
the
solution
of
linear
boundary
and
initial
value
problems
a
computer
program
is
described
which
has
been
developed
for
obtaining
approximate
solutions
to
linear
initial
and
boundary
value
problems
involving
differential
equations
for
each
problem
input
to
the
program
includes
1
the
equations
in
symbolic
form
to
be
satisfied
the
differential
equations
equations
describing
auxiliary
conditions
such
as
boundary
conditions
etc
2
a
numerical
description
of
the
regions
in
which
each
of
the
equations
are
to
be
satisfied
3
sets
of
functions
in
symbolic
form
to
be
used
in
linear
combinations
to
approximate
the
solution
functions
give
the
above
input
the
program
generates
an
approximation
to
the
solutions
of
the
specified
problemm
in
terms
of
the
specified
functions
which
is
optimum
in
the
least
squares
sense
cacm
august
1966
cuthill
e
ca660814
es
march
17
1982
10
10
am
1396
5
3200
3200
5
3200
3200
5
3200
3200
5
3200
964
6
3200
1028
6
3200
1029
6
3200
1083
6
3200
1132
6
3200
1214
6
3200
1278
6
3200
1334
6
3200
1365
6
3200
1386
6
3200
1387
6
3200
1388
6
3200
1392
6
3200
1393
6
3200
1394
6
3200
1395
6
3200
1396
6
3200
1397
6
3200
1496
6
3200
284
6
3200
407
6
3200
3199
6
3200
3200
6
3200
3201
6
3200
3202
6
3200
3203
6
3200
3204
6
3200
561
6
3200
730
6
3200
</TEXT>
</DOC>
<DOC>
<DOCNO>3201</DOCNO>
<TEXT>
symbolic
manipulation
of
poisson
series
poisson
series
of
three
variables
are
manageable
symbolically
through
as
a
set
of
formal
subroutines
written
partially
in
the
ibm
7094
machine
language
but
to
be
called
in
the
fortran
language
for
use
in
fortran
programs
an
effort
has
been
made
to
supply
those
operations
which
are
most
required
by
celestial
mechanics
the
routines
are
entirely
self
contained
subroutines
and
require
only
standard
fortran
input
output
units
5
and
6
they
are
design
to
avoid
waste
and
overflow
of
core
storage
space
cacm
august
1966
danby
j
deprit
a
rom
a
ca660815
es
march
17
1982
10
10
am
1396
5
3201
3201
5
3201
3201
5
3201
3201
5
3201
964
6
3201
1028
6
3201
1029
6
3201
1083
6
3201
1132
6
3201
1214
6
3201
1278
6
3201
1334
6
3201
1365
6
3201
1386
6
3201
1387
6
3201
1388
6
3201
1392
6
3201
1393
6
3201
1394
6
3201
1395
6
3201
1396
6
3201
1397
6
3201
1496
6
3201
284
6
3201
407
6
3201
3199
6
3201
3200
6
3201
3201
6
3201
3202
6
3201
3203
6
3201
3204
6
3201
561
6
3201
730
6
3201
</TEXT>
</DOC>
<DOC>
<DOCNO>3202</DOCNO>
<TEXT>
manip
a
computer
system
for
algebra
and
analytic
differentiation
a
mathematical
expression
to
be
operated
upon
is
written
in
fortran
like
notation
and
stored
in
the
computer
as
a
string
of
bcd
characters
with
all
blanks
removed
it
may
be
as
complicated
as
desired
parentheses
nested
without
restriction
etc
so
long
as
the
entire
expression
or
any
subsequent
form
does
not
exceed
5000
characters
the
problemm
of
performing
algebraic
operations
and
obtaining
analytic
derivatives
was
translated
into
that
of
identifying
and
manipulating
character
sequences
programs
which
resulted
were
written
in
fortran
iv
for
a
cdc
3600
and
are
discussed
in
detail
cacm
august
1966
bender
b
ca660816
es
march
17
1982
10
10
am
1396
5
3202
3202
5
3202
3202
5
3202
3202
5
3202
964
6
3202
1028
6
3202
1029
6
3202
1083
6
3202
1132
6
3202
1214
6
3202
1278
6
3202
1334
6
3202
1365
6
3202
1386
6
3202
1387
6
3202
1388
6
3202
1392
6
3202
1393
6
3202
1394
6
3202
1395
6
3202
1396
6
3202
1397
6
3202
1496
6
3202
284
6
3202
407
6
3202
3199
6
3202
3200
6
3202
3201
6
3202
3202
6
3202
3203
6
3202
3204
6
3202
561
6
3202
730
6
3202
</TEXT>
</DOC>
<DOC>
<DOCNO>3203</DOCNO>
<TEXT>
grad
assistant
a
program
for
symbolic
algebraic
manipulation
and
differentiation
the
general
recursive
algebra
and
differentiation
assistant
grad
assistant
now
under
development
is
a
set
of
lisp
functions
which
symbolically
manipulate
abd
differentiate
algebraic
expressions
it
is
designed
for
use
with
problemms
in
which
a
large
amount
of
routine
manipulation
is
to
be
done
by
a
program
without
human
intervention
thus
grad
must
recognize
necessary
simplifications
without
external
guidance
while
some
complicated
expressions
notably
ones
involving
nested
radicals
and
trigonometric
functions
do
not
yield
completely
to
the
present
version
it
has
proved
quite
useful
indeed
cacm
august
1966
fletcher
j
g
ca660817
es
march
17
1982
10
10
am
1396
5
3203
3203
5
3203
3203
5
3203
3203
5
3203
964
6
3203
1028
6
3203
1029
6
3203
1083
6
3203
1132
6
3203
1214
6
3203
1278
6
3203
1334
6
3203
1365
6
3203
1386
6
3203
1387
6
3203
1388
6
3203
1392
6
3203
1393
6
3203
1394
6
3203
1395
6
3203
1396
6
3203
1397
6
3203
1496
6
3203
284
6
3203
407
6
3203
3199
6
3203
3200
6
3203
3201
6
3203
3202
6
3203
3203
6
3203
3204
6
3203
561
6
3203
730
6
3203
</TEXT>
</DOC>
<DOC>
<DOCNO>3204</DOCNO>
<TEXT>
an
on
line
program
for
non
numerical
algebra
the
goal
of
this
program
is
to
make
a
step
toward
te
design
of
an
automated
mathematical
assistant
some
requirements
for
such
a
program
are
it
must
be
easy
to
access
and
that
the
result
must
be
obtained
in
a
reasonably
short
time
accordingly
the
program
is
written
for
a
time
shared
computer
the
q
32
computer
as
system
development
corporation
santa
monica
california
was
chosen
because
it
also
had
a
lisp
1
5
compiler
programming
and
debugging
was
done
from
a
remote
teletype
console
at
stanford
university
cacm
august
1966
korsvold
k
ca660818
es
march
17
1982
10
10
am
1396
5
3204
3204
5
3204
3204
5
3204
3204
5
3204
964
6
3204
1028
6
3204
1029
6
3204
1083
6
3204
1132
6
3204
1214
6
3204
1278
6
3204
1334
6
3204
1365
6
3204
1386
6
3204
1387
6
3204
1388
6
3204
1392
6
3204
1393
6
3204
1394
6
3204
1395
6
3204
1396
6
3204
1397
6
3204
1496
6
3204
284
6
3204
407
6
3204
3199
6
3204
3200
6
3204
3201
6
3204
3202
6
3204
3203
6
3204
3204
6
3204
561
6
3204
730
6
3204
</TEXT>
</DOC>
